%% Generated by the Erlang ASN.1 PER-compiler version, utilizing bit-syntax:3.0
%% Purpose: encoder and decoder to the types in mod MULTIMEDIA-SYSTEM-CONTROL

-module('MULTIMEDIA-SYSTEM-CONTROL').
-compile(nowarn_unused_vars).
-include("MULTIMEDIA-SYSTEM-CONTROL.hrl").
-asn1_info([{vsn,'3.0'},
            {module,'MULTIMEDIA-SYSTEM-CONTROL'},
            {options,[{i,"D:/GK_LINUX/test/erlang"},
 warnings,per,errors,
 {cwd,"D:/GK_LINUX/test/erlang"},
 {outdir,"D:/GK_LINUX/test/erlang"},
 {i,"."},
 {i,"d:/GK_LINUX/test/erlang"}]}]).

-export([encoding_rule/0,bit_string_format/0,         legacy_erlang_types/0]).
-export([
'enc_MultimediaSystemControlMessage'/1,
'enc_RequestMessage'/1,
'enc_ResponseMessage'/1,
'enc_CommandMessage'/1,
'enc_IndicationMessage'/1,
'enc_SequenceNumber'/1,
'enc_NonStandardMessage'/1,
'enc_NonStandardParameter'/1,
'enc_NonStandardIdentifier'/1,
'enc_MasterSlaveDetermination'/1,
'enc_MasterSlaveDeterminationAck'/1,
'enc_MasterSlaveDeterminationReject'/1,
'enc_MasterSlaveDeterminationRelease'/1,
'enc_TerminalCapabilitySet'/1,
'enc_CapabilityTableEntry'/1,
'enc_CapabilityDescriptor'/1,
'enc_AlternativeCapabilitySet'/1,
'enc_CapabilityTableEntryNumber'/1,
'enc_CapabilityDescriptorNumber'/1,
'enc_TerminalCapabilitySetAck'/1,
'enc_TerminalCapabilitySetReject'/1,
'enc_TerminalCapabilitySetRelease'/1,
'enc_Capability'/1,
'enc_H235SecurityCapability'/1,
'enc_MultiplexCapability'/1,
'enc_H222Capability'/1,
'enc_VCCapability'/1,
'enc_H223Capability'/1,
'enc_H223AnnexCCapability'/1,
'enc_V76Capability'/1,
'enc_V75Capability'/1,
'enc_H2250Capability'/1,
'enc_MediaPacketizationCapability'/1,
'enc_RSVPParameters'/1,
'enc_QOSMode'/1,
'enc_ATMParameters'/1,
'enc_QOSCapability'/1,
'enc_MediaTransportType'/1,
'enc_MediaChannelCapability'/1,
'enc_TransportCapability'/1,
'enc_RedundancyEncodingCapability'/1,
'enc_RedundancyEncodingMethod'/1,
'enc_RTPH263VideoRedundancyEncoding'/1,
'enc_RTPH263VideoRedundancyFrameMapping'/1,
'enc_MultipointCapability'/1,
'enc_MediaDistributionCapability'/1,
'enc_VideoCapability'/1,
'enc_H261VideoCapability'/1,
'enc_H262VideoCapability'/1,
'enc_H263VideoCapability'/1,
'enc_EnhancementLayerInfo'/1,
'enc_BEnhancementParameters'/1,
'enc_EnhancementOptions'/1,
'enc_H263Options'/1,
'enc_TransparencyParameters'/1,
'enc_RefPictureSelection'/1,
'enc_CustomPictureClockFrequency'/1,
'enc_CustomPictureFormat'/1,
'enc_H263VideoModeCombos'/1,
'enc_H263ModeComboFlags'/1,
'enc_H263Version3Options'/1,
'enc_IS11172VideoCapability'/1,
'enc_AudioCapability'/1,
'enc_G729Extensions'/1,
'enc_G7231AnnexCCapability'/1,
'enc_IS11172AudioCapability'/1,
'enc_IS13818AudioCapability'/1,
'enc_GSMAudioCapability'/1,
'enc_VBDCapability'/1,
'enc_DataApplicationCapability'/1,
'enc_DataProtocolCapability'/1,
'enc_CompressionType'/1,
'enc_V42bis'/1,
'enc_T84Profile'/1,
'enc_T38FaxProfile'/1,
'enc_T38FaxRateManagement'/1,
'enc_T38FaxUdpOptions'/1,
'enc_T38FaxTcpOptions'/1,
'enc_EncryptionAuthenticationAndIntegrity'/1,
'enc_EncryptionCapability'/1,
'enc_MediaEncryptionAlgorithm'/1,
'enc_AuthenticationCapability'/1,
'enc_IntegrityCapability'/1,
'enc_UserInputCapability'/1,
'enc_ConferenceCapability'/1,
'enc_GenericCapability'/1,
'enc_CapabilityIdentifier'/1,
'enc_GenericParameter'/1,
'enc_ParameterIdentifier'/1,
'enc_ParameterValue'/1,
'enc_MultiplexedStreamCapability'/1,
'enc_MultiplexFormat'/1,
'enc_AudioTelephonyEventCapability'/1,
'enc_AudioToneCapability'/1,
'enc_NoPTAudioTelephonyEventCapability'/1,
'enc_NoPTAudioToneCapability'/1,
'enc_MultiplePayloadStreamCapability'/1,
'enc_FECCapability'/1,
'enc_OpenLogicalChannel'/1,
'enc_LogicalChannelNumber'/1,
'enc_NetworkAccessParameters'/1,
'enc_Q2931Address'/1,
'enc_V75Parameters'/1,
'enc_DataType'/1,
'enc_H235Media'/1,
'enc_MultiplexedStreamParameter'/1,
'enc_H222LogicalChannelParameters'/1,
'enc_H223LogicalChannelParameters'/1,
'enc_H223AL1MParameters'/1,
'enc_H223AL2MParameters'/1,
'enc_H223AL3MParameters'/1,
'enc_H223AnnexCArqParameters'/1,
'enc_V76LogicalChannelParameters'/1,
'enc_V76HDLCParameters'/1,
'enc_CRCLength'/1,
'enc_H2250LogicalChannelParameters'/1,
'enc_RTPPayloadType'/1,
'enc_RedundancyEncoding'/1,
'enc_RedundancyEncodingElement'/1,
'enc_MultiplePayloadStream'/1,
'enc_MultiplePayloadStreamElement'/1,
'enc_FECData'/1,
'enc_TransportAddress'/1,
'enc_UnicastAddress'/1,
'enc_MulticastAddress'/1,
'enc_EncryptionSync'/1,
'enc_EscrowData'/1,
'enc_OpenLogicalChannelAck'/1,
'enc_OpenLogicalChannelReject'/1,
'enc_OpenLogicalChannelConfirm'/1,
'enc_H2250LogicalChannelAckParameters'/1,
'enc_CloseLogicalChannel'/1,
'enc_CloseLogicalChannelAck'/1,
'enc_RequestChannelClose'/1,
'enc_RequestChannelCloseAck'/1,
'enc_RequestChannelCloseReject'/1,
'enc_RequestChannelCloseRelease'/1,
'enc_MultiplexEntrySend'/1,
'enc_MultiplexEntryDescriptor'/1,
'enc_MultiplexElement'/1,
'enc_MultiplexTableEntryNumber'/1,
'enc_MultiplexEntrySendAck'/1,
'enc_MultiplexEntrySendReject'/1,
'enc_MultiplexEntryRejectionDescriptions'/1,
'enc_MultiplexEntrySendRelease'/1,
'enc_RequestMultiplexEntry'/1,
'enc_RequestMultiplexEntryAck'/1,
'enc_RequestMultiplexEntryReject'/1,
'enc_RequestMultiplexEntryRejectionDescriptions'/1,
'enc_RequestMultiplexEntryRelease'/1,
'enc_RequestMode'/1,
'enc_RequestModeAck'/1,
'enc_RequestModeReject'/1,
'enc_RequestModeRelease'/1,
'enc_ModeDescription'/1,
'enc_ModeElementType'/1,
'enc_ModeElement'/1,
'enc_H235Mode'/1,
'enc_MultiplexedStreamModeParameters'/1,
'enc_RedundancyEncodingDTMode'/1,
'enc_RedundancyEncodingDTModeElement'/1,
'enc_MultiplePayloadStreamMode'/1,
'enc_MultiplePayloadStreamElementMode'/1,
'enc_FECMode'/1,
'enc_H223ModeParameters'/1,
'enc_V76ModeParameters'/1,
'enc_H2250ModeParameters'/1,
'enc_RedundancyEncodingMode'/1,
'enc_VideoMode'/1,
'enc_H261VideoMode'/1,
'enc_H262VideoMode'/1,
'enc_H263VideoMode'/1,
'enc_IS11172VideoMode'/1,
'enc_AudioMode'/1,
'enc_IS11172AudioMode'/1,
'enc_IS13818AudioMode'/1,
'enc_G7231AnnexCMode'/1,
'enc_VBDMode'/1,
'enc_DataMode'/1,
'enc_EncryptionMode'/1,
'enc_RoundTripDelayRequest'/1,
'enc_RoundTripDelayResponse'/1,
'enc_MaintenanceLoopRequest'/1,
'enc_MaintenanceLoopAck'/1,
'enc_MaintenanceLoopReject'/1,
'enc_MaintenanceLoopOffCommand'/1,
'enc_CommunicationModeCommand'/1,
'enc_CommunicationModeRequest'/1,
'enc_CommunicationModeResponse'/1,
'enc_CommunicationModeTableEntry'/1,
'enc_ConferenceRequest'/1,
'enc_CertSelectionCriteria'/1,
'enc_Criteria'/1,
'enc_TerminalLabel'/1,
'enc_McuNumber'/1,
'enc_TerminalNumber'/1,
'enc_ConferenceResponse'/1,
'enc_TerminalID'/1,
'enc_ConferenceID'/1,
'enc_Password'/1,
'enc_RequestAllTerminalIDsResponse'/1,
'enc_TerminalInformation'/1,
'enc_RemoteMCRequest'/1,
'enc_RemoteMCResponse'/1,
'enc_MultilinkRequest'/1,
'enc_MultilinkResponse'/1,
'enc_MultilinkIndication'/1,
'enc_DialingInformation'/1,
'enc_DialingInformationNumber'/1,
'enc_DialingInformationNetworkType'/1,
'enc_ConnectionIdentifier'/1,
'enc_MaximumBitRate'/1,
'enc_LogicalChannelRateRequest'/1,
'enc_LogicalChannelRateAcknowledge'/1,
'enc_LogicalChannelRateReject'/1,
'enc_LogicalChannelRateRejectReason'/1,
'enc_LogicalChannelRateRelease'/1,
'enc_SendTerminalCapabilitySet'/1,
'enc_EncryptionCommand'/1,
'enc_FlowControlCommand'/1,
'enc_EndSessionCommand'/1,
'enc_ConferenceCommand'/1,
'enc_SubstituteConferenceIDCommand'/1,
'enc_MiscellaneousCommand'/1,
'enc_KeyProtectionMethod'/1,
'enc_EncryptionUpdateRequest'/1,
'enc_PictureReference'/1,
'enc_H223MultiplexReconfiguration'/1,
'enc_NewATMVCCommand'/1,
'enc_MobileMultilinkReconfigurationCommand'/1,
'enc_FunctionNotUnderstood'/1,
'enc_FunctionNotSupported'/1,
'enc_ConferenceIndication'/1,
'enc_TerminalYouAreSeeingInSubPictureNumber'/1,
'enc_VideoIndicateCompose'/1,
'enc_MiscellaneousIndication'/1,
'enc_JitterIndication'/1,
'enc_H223SkewIndication'/1,
'enc_H2250MaximumSkewIndication'/1,
'enc_MCLocationIndication'/1,
'enc_VendorIdentification'/1,
'enc_NewATMVCIndication'/1,
'enc_UserInputIndication'/1,
'enc_FlowControlIndication'/1,
'enc_MobileMultilinkReconfigurationIndication'/1
]).

-export([
'dec_MultimediaSystemControlMessage'/1,
'dec_RequestMessage'/1,
'dec_ResponseMessage'/1,
'dec_CommandMessage'/1,
'dec_IndicationMessage'/1,
'dec_SequenceNumber'/1,
'dec_NonStandardMessage'/1,
'dec_NonStandardParameter'/1,
'dec_NonStandardIdentifier'/1,
'dec_MasterSlaveDetermination'/1,
'dec_MasterSlaveDeterminationAck'/1,
'dec_MasterSlaveDeterminationReject'/1,
'dec_MasterSlaveDeterminationRelease'/1,
'dec_TerminalCapabilitySet'/1,
'dec_CapabilityTableEntry'/1,
'dec_CapabilityDescriptor'/1,
'dec_AlternativeCapabilitySet'/1,
'dec_CapabilityTableEntryNumber'/1,
'dec_CapabilityDescriptorNumber'/1,
'dec_TerminalCapabilitySetAck'/1,
'dec_TerminalCapabilitySetReject'/1,
'dec_TerminalCapabilitySetRelease'/1,
'dec_Capability'/1,
'dec_H235SecurityCapability'/1,
'dec_MultiplexCapability'/1,
'dec_H222Capability'/1,
'dec_VCCapability'/1,
'dec_H223Capability'/1,
'dec_H223AnnexCCapability'/1,
'dec_V76Capability'/1,
'dec_V75Capability'/1,
'dec_H2250Capability'/1,
'dec_MediaPacketizationCapability'/1,
'dec_RSVPParameters'/1,
'dec_QOSMode'/1,
'dec_ATMParameters'/1,
'dec_QOSCapability'/1,
'dec_MediaTransportType'/1,
'dec_MediaChannelCapability'/1,
'dec_TransportCapability'/1,
'dec_RedundancyEncodingCapability'/1,
'dec_RedundancyEncodingMethod'/1,
'dec_RTPH263VideoRedundancyEncoding'/1,
'dec_RTPH263VideoRedundancyFrameMapping'/1,
'dec_MultipointCapability'/1,
'dec_MediaDistributionCapability'/1,
'dec_VideoCapability'/1,
'dec_H261VideoCapability'/1,
'dec_H262VideoCapability'/1,
'dec_H263VideoCapability'/1,
'dec_EnhancementLayerInfo'/1,
'dec_BEnhancementParameters'/1,
'dec_EnhancementOptions'/1,
'dec_H263Options'/1,
'dec_TransparencyParameters'/1,
'dec_RefPictureSelection'/1,
'dec_CustomPictureClockFrequency'/1,
'dec_CustomPictureFormat'/1,
'dec_H263VideoModeCombos'/1,
'dec_H263ModeComboFlags'/1,
'dec_H263Version3Options'/1,
'dec_IS11172VideoCapability'/1,
'dec_AudioCapability'/1,
'dec_G729Extensions'/1,
'dec_G7231AnnexCCapability'/1,
'dec_IS11172AudioCapability'/1,
'dec_IS13818AudioCapability'/1,
'dec_GSMAudioCapability'/1,
'dec_VBDCapability'/1,
'dec_DataApplicationCapability'/1,
'dec_DataProtocolCapability'/1,
'dec_CompressionType'/1,
'dec_V42bis'/1,
'dec_T84Profile'/1,
'dec_T38FaxProfile'/1,
'dec_T38FaxRateManagement'/1,
'dec_T38FaxUdpOptions'/1,
'dec_T38FaxTcpOptions'/1,
'dec_EncryptionAuthenticationAndIntegrity'/1,
'dec_EncryptionCapability'/1,
'dec_MediaEncryptionAlgorithm'/1,
'dec_AuthenticationCapability'/1,
'dec_IntegrityCapability'/1,
'dec_UserInputCapability'/1,
'dec_ConferenceCapability'/1,
'dec_GenericCapability'/1,
'dec_CapabilityIdentifier'/1,
'dec_GenericParameter'/1,
'dec_ParameterIdentifier'/1,
'dec_ParameterValue'/1,
'dec_MultiplexedStreamCapability'/1,
'dec_MultiplexFormat'/1,
'dec_AudioTelephonyEventCapability'/1,
'dec_AudioToneCapability'/1,
'dec_NoPTAudioTelephonyEventCapability'/1,
'dec_NoPTAudioToneCapability'/1,
'dec_MultiplePayloadStreamCapability'/1,
'dec_FECCapability'/1,
'dec_OpenLogicalChannel'/1,
'dec_LogicalChannelNumber'/1,
'dec_NetworkAccessParameters'/1,
'dec_Q2931Address'/1,
'dec_V75Parameters'/1,
'dec_DataType'/1,
'dec_H235Media'/1,
'dec_MultiplexedStreamParameter'/1,
'dec_H222LogicalChannelParameters'/1,
'dec_H223LogicalChannelParameters'/1,
'dec_H223AL1MParameters'/1,
'dec_H223AL2MParameters'/1,
'dec_H223AL3MParameters'/1,
'dec_H223AnnexCArqParameters'/1,
'dec_V76LogicalChannelParameters'/1,
'dec_V76HDLCParameters'/1,
'dec_CRCLength'/1,
'dec_H2250LogicalChannelParameters'/1,
'dec_RTPPayloadType'/1,
'dec_RedundancyEncoding'/1,
'dec_RedundancyEncodingElement'/1,
'dec_MultiplePayloadStream'/1,
'dec_MultiplePayloadStreamElement'/1,
'dec_FECData'/1,
'dec_TransportAddress'/1,
'dec_UnicastAddress'/1,
'dec_MulticastAddress'/1,
'dec_EncryptionSync'/1,
'dec_EscrowData'/1,
'dec_OpenLogicalChannelAck'/1,
'dec_OpenLogicalChannelReject'/1,
'dec_OpenLogicalChannelConfirm'/1,
'dec_H2250LogicalChannelAckParameters'/1,
'dec_CloseLogicalChannel'/1,
'dec_CloseLogicalChannelAck'/1,
'dec_RequestChannelClose'/1,
'dec_RequestChannelCloseAck'/1,
'dec_RequestChannelCloseReject'/1,
'dec_RequestChannelCloseRelease'/1,
'dec_MultiplexEntrySend'/1,
'dec_MultiplexEntryDescriptor'/1,
'dec_MultiplexElement'/1,
'dec_MultiplexTableEntryNumber'/1,
'dec_MultiplexEntrySendAck'/1,
'dec_MultiplexEntrySendReject'/1,
'dec_MultiplexEntryRejectionDescriptions'/1,
'dec_MultiplexEntrySendRelease'/1,
'dec_RequestMultiplexEntry'/1,
'dec_RequestMultiplexEntryAck'/1,
'dec_RequestMultiplexEntryReject'/1,
'dec_RequestMultiplexEntryRejectionDescriptions'/1,
'dec_RequestMultiplexEntryRelease'/1,
'dec_RequestMode'/1,
'dec_RequestModeAck'/1,
'dec_RequestModeReject'/1,
'dec_RequestModeRelease'/1,
'dec_ModeDescription'/1,
'dec_ModeElementType'/1,
'dec_ModeElement'/1,
'dec_H235Mode'/1,
'dec_MultiplexedStreamModeParameters'/1,
'dec_RedundancyEncodingDTMode'/1,
'dec_RedundancyEncodingDTModeElement'/1,
'dec_MultiplePayloadStreamMode'/1,
'dec_MultiplePayloadStreamElementMode'/1,
'dec_FECMode'/1,
'dec_H223ModeParameters'/1,
'dec_V76ModeParameters'/1,
'dec_H2250ModeParameters'/1,
'dec_RedundancyEncodingMode'/1,
'dec_VideoMode'/1,
'dec_H261VideoMode'/1,
'dec_H262VideoMode'/1,
'dec_H263VideoMode'/1,
'dec_IS11172VideoMode'/1,
'dec_AudioMode'/1,
'dec_IS11172AudioMode'/1,
'dec_IS13818AudioMode'/1,
'dec_G7231AnnexCMode'/1,
'dec_VBDMode'/1,
'dec_DataMode'/1,
'dec_EncryptionMode'/1,
'dec_RoundTripDelayRequest'/1,
'dec_RoundTripDelayResponse'/1,
'dec_MaintenanceLoopRequest'/1,
'dec_MaintenanceLoopAck'/1,
'dec_MaintenanceLoopReject'/1,
'dec_MaintenanceLoopOffCommand'/1,
'dec_CommunicationModeCommand'/1,
'dec_CommunicationModeRequest'/1,
'dec_CommunicationModeResponse'/1,
'dec_CommunicationModeTableEntry'/1,
'dec_ConferenceRequest'/1,
'dec_CertSelectionCriteria'/1,
'dec_Criteria'/1,
'dec_TerminalLabel'/1,
'dec_McuNumber'/1,
'dec_TerminalNumber'/1,
'dec_ConferenceResponse'/1,
'dec_TerminalID'/1,
'dec_ConferenceID'/1,
'dec_Password'/1,
'dec_RequestAllTerminalIDsResponse'/1,
'dec_TerminalInformation'/1,
'dec_RemoteMCRequest'/1,
'dec_RemoteMCResponse'/1,
'dec_MultilinkRequest'/1,
'dec_MultilinkResponse'/1,
'dec_MultilinkIndication'/1,
'dec_DialingInformation'/1,
'dec_DialingInformationNumber'/1,
'dec_DialingInformationNetworkType'/1,
'dec_ConnectionIdentifier'/1,
'dec_MaximumBitRate'/1,
'dec_LogicalChannelRateRequest'/1,
'dec_LogicalChannelRateAcknowledge'/1,
'dec_LogicalChannelRateReject'/1,
'dec_LogicalChannelRateRejectReason'/1,
'dec_LogicalChannelRateRelease'/1,
'dec_SendTerminalCapabilitySet'/1,
'dec_EncryptionCommand'/1,
'dec_FlowControlCommand'/1,
'dec_EndSessionCommand'/1,
'dec_ConferenceCommand'/1,
'dec_SubstituteConferenceIDCommand'/1,
'dec_MiscellaneousCommand'/1,
'dec_KeyProtectionMethod'/1,
'dec_EncryptionUpdateRequest'/1,
'dec_PictureReference'/1,
'dec_H223MultiplexReconfiguration'/1,
'dec_NewATMVCCommand'/1,
'dec_MobileMultilinkReconfigurationCommand'/1,
'dec_FunctionNotUnderstood'/1,
'dec_FunctionNotSupported'/1,
'dec_ConferenceIndication'/1,
'dec_TerminalYouAreSeeingInSubPictureNumber'/1,
'dec_VideoIndicateCompose'/1,
'dec_MiscellaneousIndication'/1,
'dec_JitterIndication'/1,
'dec_H223SkewIndication'/1,
'dec_H2250MaximumSkewIndication'/1,
'dec_MCLocationIndication'/1,
'dec_VendorIdentification'/1,
'dec_NewATMVCIndication'/1,
'dec_UserInputIndication'/1,
'dec_FlowControlIndication'/1,
'dec_MobileMultilinkReconfigurationIndication'/1
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> per.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, Data) of
  {Result,Rest} ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('MultimediaSystemControlMessage',Data) -> 'enc_MultimediaSystemControlMessage'(Data);
encode_disp('RequestMessage',Data) -> 'enc_RequestMessage'(Data);
encode_disp('ResponseMessage',Data) -> 'enc_ResponseMessage'(Data);
encode_disp('CommandMessage',Data) -> 'enc_CommandMessage'(Data);
encode_disp('IndicationMessage',Data) -> 'enc_IndicationMessage'(Data);
encode_disp('SequenceNumber',Data) -> 'enc_SequenceNumber'(Data);
encode_disp('NonStandardMessage',Data) -> 'enc_NonStandardMessage'(Data);
encode_disp('NonStandardParameter',Data) -> 'enc_NonStandardParameter'(Data);
encode_disp('NonStandardIdentifier',Data) -> 'enc_NonStandardIdentifier'(Data);
encode_disp('MasterSlaveDetermination',Data) -> 'enc_MasterSlaveDetermination'(Data);
encode_disp('MasterSlaveDeterminationAck',Data) -> 'enc_MasterSlaveDeterminationAck'(Data);
encode_disp('MasterSlaveDeterminationReject',Data) -> 'enc_MasterSlaveDeterminationReject'(Data);
encode_disp('MasterSlaveDeterminationRelease',Data) -> 'enc_MasterSlaveDeterminationRelease'(Data);
encode_disp('TerminalCapabilitySet',Data) -> 'enc_TerminalCapabilitySet'(Data);
encode_disp('CapabilityTableEntry',Data) -> 'enc_CapabilityTableEntry'(Data);
encode_disp('CapabilityDescriptor',Data) -> 'enc_CapabilityDescriptor'(Data);
encode_disp('AlternativeCapabilitySet',Data) -> 'enc_AlternativeCapabilitySet'(Data);
encode_disp('CapabilityTableEntryNumber',Data) -> 'enc_CapabilityTableEntryNumber'(Data);
encode_disp('CapabilityDescriptorNumber',Data) -> 'enc_CapabilityDescriptorNumber'(Data);
encode_disp('TerminalCapabilitySetAck',Data) -> 'enc_TerminalCapabilitySetAck'(Data);
encode_disp('TerminalCapabilitySetReject',Data) -> 'enc_TerminalCapabilitySetReject'(Data);
encode_disp('TerminalCapabilitySetRelease',Data) -> 'enc_TerminalCapabilitySetRelease'(Data);
encode_disp('Capability',Data) -> 'enc_Capability'(Data);
encode_disp('H235SecurityCapability',Data) -> 'enc_H235SecurityCapability'(Data);
encode_disp('MultiplexCapability',Data) -> 'enc_MultiplexCapability'(Data);
encode_disp('H222Capability',Data) -> 'enc_H222Capability'(Data);
encode_disp('VCCapability',Data) -> 'enc_VCCapability'(Data);
encode_disp('H223Capability',Data) -> 'enc_H223Capability'(Data);
encode_disp('H223AnnexCCapability',Data) -> 'enc_H223AnnexCCapability'(Data);
encode_disp('V76Capability',Data) -> 'enc_V76Capability'(Data);
encode_disp('V75Capability',Data) -> 'enc_V75Capability'(Data);
encode_disp('H2250Capability',Data) -> 'enc_H2250Capability'(Data);
encode_disp('MediaPacketizationCapability',Data) -> 'enc_MediaPacketizationCapability'(Data);
encode_disp('RSVPParameters',Data) -> 'enc_RSVPParameters'(Data);
encode_disp('QOSMode',Data) -> 'enc_QOSMode'(Data);
encode_disp('ATMParameters',Data) -> 'enc_ATMParameters'(Data);
encode_disp('QOSCapability',Data) -> 'enc_QOSCapability'(Data);
encode_disp('MediaTransportType',Data) -> 'enc_MediaTransportType'(Data);
encode_disp('MediaChannelCapability',Data) -> 'enc_MediaChannelCapability'(Data);
encode_disp('TransportCapability',Data) -> 'enc_TransportCapability'(Data);
encode_disp('RedundancyEncodingCapability',Data) -> 'enc_RedundancyEncodingCapability'(Data);
encode_disp('RedundancyEncodingMethod',Data) -> 'enc_RedundancyEncodingMethod'(Data);
encode_disp('RTPH263VideoRedundancyEncoding',Data) -> 'enc_RTPH263VideoRedundancyEncoding'(Data);
encode_disp('RTPH263VideoRedundancyFrameMapping',Data) -> 'enc_RTPH263VideoRedundancyFrameMapping'(Data);
encode_disp('MultipointCapability',Data) -> 'enc_MultipointCapability'(Data);
encode_disp('MediaDistributionCapability',Data) -> 'enc_MediaDistributionCapability'(Data);
encode_disp('VideoCapability',Data) -> 'enc_VideoCapability'(Data);
encode_disp('H261VideoCapability',Data) -> 'enc_H261VideoCapability'(Data);
encode_disp('H262VideoCapability',Data) -> 'enc_H262VideoCapability'(Data);
encode_disp('H263VideoCapability',Data) -> 'enc_H263VideoCapability'(Data);
encode_disp('EnhancementLayerInfo',Data) -> 'enc_EnhancementLayerInfo'(Data);
encode_disp('BEnhancementParameters',Data) -> 'enc_BEnhancementParameters'(Data);
encode_disp('EnhancementOptions',Data) -> 'enc_EnhancementOptions'(Data);
encode_disp('H263Options',Data) -> 'enc_H263Options'(Data);
encode_disp('TransparencyParameters',Data) -> 'enc_TransparencyParameters'(Data);
encode_disp('RefPictureSelection',Data) -> 'enc_RefPictureSelection'(Data);
encode_disp('CustomPictureClockFrequency',Data) -> 'enc_CustomPictureClockFrequency'(Data);
encode_disp('CustomPictureFormat',Data) -> 'enc_CustomPictureFormat'(Data);
encode_disp('H263VideoModeCombos',Data) -> 'enc_H263VideoModeCombos'(Data);
encode_disp('H263ModeComboFlags',Data) -> 'enc_H263ModeComboFlags'(Data);
encode_disp('H263Version3Options',Data) -> 'enc_H263Version3Options'(Data);
encode_disp('IS11172VideoCapability',Data) -> 'enc_IS11172VideoCapability'(Data);
encode_disp('AudioCapability',Data) -> 'enc_AudioCapability'(Data);
encode_disp('G729Extensions',Data) -> 'enc_G729Extensions'(Data);
encode_disp('G7231AnnexCCapability',Data) -> 'enc_G7231AnnexCCapability'(Data);
encode_disp('IS11172AudioCapability',Data) -> 'enc_IS11172AudioCapability'(Data);
encode_disp('IS13818AudioCapability',Data) -> 'enc_IS13818AudioCapability'(Data);
encode_disp('GSMAudioCapability',Data) -> 'enc_GSMAudioCapability'(Data);
encode_disp('VBDCapability',Data) -> 'enc_VBDCapability'(Data);
encode_disp('DataApplicationCapability',Data) -> 'enc_DataApplicationCapability'(Data);
encode_disp('DataProtocolCapability',Data) -> 'enc_DataProtocolCapability'(Data);
encode_disp('CompressionType',Data) -> 'enc_CompressionType'(Data);
encode_disp('V42bis',Data) -> 'enc_V42bis'(Data);
encode_disp('T84Profile',Data) -> 'enc_T84Profile'(Data);
encode_disp('T38FaxProfile',Data) -> 'enc_T38FaxProfile'(Data);
encode_disp('T38FaxRateManagement',Data) -> 'enc_T38FaxRateManagement'(Data);
encode_disp('T38FaxUdpOptions',Data) -> 'enc_T38FaxUdpOptions'(Data);
encode_disp('T38FaxTcpOptions',Data) -> 'enc_T38FaxTcpOptions'(Data);
encode_disp('EncryptionAuthenticationAndIntegrity',Data) -> 'enc_EncryptionAuthenticationAndIntegrity'(Data);
encode_disp('EncryptionCapability',Data) -> 'enc_EncryptionCapability'(Data);
encode_disp('MediaEncryptionAlgorithm',Data) -> 'enc_MediaEncryptionAlgorithm'(Data);
encode_disp('AuthenticationCapability',Data) -> 'enc_AuthenticationCapability'(Data);
encode_disp('IntegrityCapability',Data) -> 'enc_IntegrityCapability'(Data);
encode_disp('UserInputCapability',Data) -> 'enc_UserInputCapability'(Data);
encode_disp('ConferenceCapability',Data) -> 'enc_ConferenceCapability'(Data);
encode_disp('GenericCapability',Data) -> 'enc_GenericCapability'(Data);
encode_disp('CapabilityIdentifier',Data) -> 'enc_CapabilityIdentifier'(Data);
encode_disp('GenericParameter',Data) -> 'enc_GenericParameter'(Data);
encode_disp('ParameterIdentifier',Data) -> 'enc_ParameterIdentifier'(Data);
encode_disp('ParameterValue',Data) -> 'enc_ParameterValue'(Data);
encode_disp('MultiplexedStreamCapability',Data) -> 'enc_MultiplexedStreamCapability'(Data);
encode_disp('MultiplexFormat',Data) -> 'enc_MultiplexFormat'(Data);
encode_disp('AudioTelephonyEventCapability',Data) -> 'enc_AudioTelephonyEventCapability'(Data);
encode_disp('AudioToneCapability',Data) -> 'enc_AudioToneCapability'(Data);
encode_disp('NoPTAudioTelephonyEventCapability',Data) -> 'enc_NoPTAudioTelephonyEventCapability'(Data);
encode_disp('NoPTAudioToneCapability',Data) -> 'enc_NoPTAudioToneCapability'(Data);
encode_disp('MultiplePayloadStreamCapability',Data) -> 'enc_MultiplePayloadStreamCapability'(Data);
encode_disp('FECCapability',Data) -> 'enc_FECCapability'(Data);
encode_disp('OpenLogicalChannel',Data) -> 'enc_OpenLogicalChannel'(Data);
encode_disp('LogicalChannelNumber',Data) -> 'enc_LogicalChannelNumber'(Data);
encode_disp('NetworkAccessParameters',Data) -> 'enc_NetworkAccessParameters'(Data);
encode_disp('Q2931Address',Data) -> 'enc_Q2931Address'(Data);
encode_disp('V75Parameters',Data) -> 'enc_V75Parameters'(Data);
encode_disp('DataType',Data) -> 'enc_DataType'(Data);
encode_disp('H235Media',Data) -> 'enc_H235Media'(Data);
encode_disp('MultiplexedStreamParameter',Data) -> 'enc_MultiplexedStreamParameter'(Data);
encode_disp('H222LogicalChannelParameters',Data) -> 'enc_H222LogicalChannelParameters'(Data);
encode_disp('H223LogicalChannelParameters',Data) -> 'enc_H223LogicalChannelParameters'(Data);
encode_disp('H223AL1MParameters',Data) -> 'enc_H223AL1MParameters'(Data);
encode_disp('H223AL2MParameters',Data) -> 'enc_H223AL2MParameters'(Data);
encode_disp('H223AL3MParameters',Data) -> 'enc_H223AL3MParameters'(Data);
encode_disp('H223AnnexCArqParameters',Data) -> 'enc_H223AnnexCArqParameters'(Data);
encode_disp('V76LogicalChannelParameters',Data) -> 'enc_V76LogicalChannelParameters'(Data);
encode_disp('V76HDLCParameters',Data) -> 'enc_V76HDLCParameters'(Data);
encode_disp('CRCLength',Data) -> 'enc_CRCLength'(Data);
encode_disp('H2250LogicalChannelParameters',Data) -> 'enc_H2250LogicalChannelParameters'(Data);
encode_disp('RTPPayloadType',Data) -> 'enc_RTPPayloadType'(Data);
encode_disp('RedundancyEncoding',Data) -> 'enc_RedundancyEncoding'(Data);
encode_disp('RedundancyEncodingElement',Data) -> 'enc_RedundancyEncodingElement'(Data);
encode_disp('MultiplePayloadStream',Data) -> 'enc_MultiplePayloadStream'(Data);
encode_disp('MultiplePayloadStreamElement',Data) -> 'enc_MultiplePayloadStreamElement'(Data);
encode_disp('FECData',Data) -> 'enc_FECData'(Data);
encode_disp('TransportAddress',Data) -> 'enc_TransportAddress'(Data);
encode_disp('UnicastAddress',Data) -> 'enc_UnicastAddress'(Data);
encode_disp('MulticastAddress',Data) -> 'enc_MulticastAddress'(Data);
encode_disp('EncryptionSync',Data) -> 'enc_EncryptionSync'(Data);
encode_disp('EscrowData',Data) -> 'enc_EscrowData'(Data);
encode_disp('OpenLogicalChannelAck',Data) -> 'enc_OpenLogicalChannelAck'(Data);
encode_disp('OpenLogicalChannelReject',Data) -> 'enc_OpenLogicalChannelReject'(Data);
encode_disp('OpenLogicalChannelConfirm',Data) -> 'enc_OpenLogicalChannelConfirm'(Data);
encode_disp('H2250LogicalChannelAckParameters',Data) -> 'enc_H2250LogicalChannelAckParameters'(Data);
encode_disp('CloseLogicalChannel',Data) -> 'enc_CloseLogicalChannel'(Data);
encode_disp('CloseLogicalChannelAck',Data) -> 'enc_CloseLogicalChannelAck'(Data);
encode_disp('RequestChannelClose',Data) -> 'enc_RequestChannelClose'(Data);
encode_disp('RequestChannelCloseAck',Data) -> 'enc_RequestChannelCloseAck'(Data);
encode_disp('RequestChannelCloseReject',Data) -> 'enc_RequestChannelCloseReject'(Data);
encode_disp('RequestChannelCloseRelease',Data) -> 'enc_RequestChannelCloseRelease'(Data);
encode_disp('MultiplexEntrySend',Data) -> 'enc_MultiplexEntrySend'(Data);
encode_disp('MultiplexEntryDescriptor',Data) -> 'enc_MultiplexEntryDescriptor'(Data);
encode_disp('MultiplexElement',Data) -> 'enc_MultiplexElement'(Data);
encode_disp('MultiplexTableEntryNumber',Data) -> 'enc_MultiplexTableEntryNumber'(Data);
encode_disp('MultiplexEntrySendAck',Data) -> 'enc_MultiplexEntrySendAck'(Data);
encode_disp('MultiplexEntrySendReject',Data) -> 'enc_MultiplexEntrySendReject'(Data);
encode_disp('MultiplexEntryRejectionDescriptions',Data) -> 'enc_MultiplexEntryRejectionDescriptions'(Data);
encode_disp('MultiplexEntrySendRelease',Data) -> 'enc_MultiplexEntrySendRelease'(Data);
encode_disp('RequestMultiplexEntry',Data) -> 'enc_RequestMultiplexEntry'(Data);
encode_disp('RequestMultiplexEntryAck',Data) -> 'enc_RequestMultiplexEntryAck'(Data);
encode_disp('RequestMultiplexEntryReject',Data) -> 'enc_RequestMultiplexEntryReject'(Data);
encode_disp('RequestMultiplexEntryRejectionDescriptions',Data) -> 'enc_RequestMultiplexEntryRejectionDescriptions'(Data);
encode_disp('RequestMultiplexEntryRelease',Data) -> 'enc_RequestMultiplexEntryRelease'(Data);
encode_disp('RequestMode',Data) -> 'enc_RequestMode'(Data);
encode_disp('RequestModeAck',Data) -> 'enc_RequestModeAck'(Data);
encode_disp('RequestModeReject',Data) -> 'enc_RequestModeReject'(Data);
encode_disp('RequestModeRelease',Data) -> 'enc_RequestModeRelease'(Data);
encode_disp('ModeDescription',Data) -> 'enc_ModeDescription'(Data);
encode_disp('ModeElementType',Data) -> 'enc_ModeElementType'(Data);
encode_disp('ModeElement',Data) -> 'enc_ModeElement'(Data);
encode_disp('H235Mode',Data) -> 'enc_H235Mode'(Data);
encode_disp('MultiplexedStreamModeParameters',Data) -> 'enc_MultiplexedStreamModeParameters'(Data);
encode_disp('RedundancyEncodingDTMode',Data) -> 'enc_RedundancyEncodingDTMode'(Data);
encode_disp('RedundancyEncodingDTModeElement',Data) -> 'enc_RedundancyEncodingDTModeElement'(Data);
encode_disp('MultiplePayloadStreamMode',Data) -> 'enc_MultiplePayloadStreamMode'(Data);
encode_disp('MultiplePayloadStreamElementMode',Data) -> 'enc_MultiplePayloadStreamElementMode'(Data);
encode_disp('FECMode',Data) -> 'enc_FECMode'(Data);
encode_disp('H223ModeParameters',Data) -> 'enc_H223ModeParameters'(Data);
encode_disp('V76ModeParameters',Data) -> 'enc_V76ModeParameters'(Data);
encode_disp('H2250ModeParameters',Data) -> 'enc_H2250ModeParameters'(Data);
encode_disp('RedundancyEncodingMode',Data) -> 'enc_RedundancyEncodingMode'(Data);
encode_disp('VideoMode',Data) -> 'enc_VideoMode'(Data);
encode_disp('H261VideoMode',Data) -> 'enc_H261VideoMode'(Data);
encode_disp('H262VideoMode',Data) -> 'enc_H262VideoMode'(Data);
encode_disp('H263VideoMode',Data) -> 'enc_H263VideoMode'(Data);
encode_disp('IS11172VideoMode',Data) -> 'enc_IS11172VideoMode'(Data);
encode_disp('AudioMode',Data) -> 'enc_AudioMode'(Data);
encode_disp('IS11172AudioMode',Data) -> 'enc_IS11172AudioMode'(Data);
encode_disp('IS13818AudioMode',Data) -> 'enc_IS13818AudioMode'(Data);
encode_disp('G7231AnnexCMode',Data) -> 'enc_G7231AnnexCMode'(Data);
encode_disp('VBDMode',Data) -> 'enc_VBDMode'(Data);
encode_disp('DataMode',Data) -> 'enc_DataMode'(Data);
encode_disp('EncryptionMode',Data) -> 'enc_EncryptionMode'(Data);
encode_disp('RoundTripDelayRequest',Data) -> 'enc_RoundTripDelayRequest'(Data);
encode_disp('RoundTripDelayResponse',Data) -> 'enc_RoundTripDelayResponse'(Data);
encode_disp('MaintenanceLoopRequest',Data) -> 'enc_MaintenanceLoopRequest'(Data);
encode_disp('MaintenanceLoopAck',Data) -> 'enc_MaintenanceLoopAck'(Data);
encode_disp('MaintenanceLoopReject',Data) -> 'enc_MaintenanceLoopReject'(Data);
encode_disp('MaintenanceLoopOffCommand',Data) -> 'enc_MaintenanceLoopOffCommand'(Data);
encode_disp('CommunicationModeCommand',Data) -> 'enc_CommunicationModeCommand'(Data);
encode_disp('CommunicationModeRequest',Data) -> 'enc_CommunicationModeRequest'(Data);
encode_disp('CommunicationModeResponse',Data) -> 'enc_CommunicationModeResponse'(Data);
encode_disp('CommunicationModeTableEntry',Data) -> 'enc_CommunicationModeTableEntry'(Data);
encode_disp('ConferenceRequest',Data) -> 'enc_ConferenceRequest'(Data);
encode_disp('CertSelectionCriteria',Data) -> 'enc_CertSelectionCriteria'(Data);
encode_disp('Criteria',Data) -> 'enc_Criteria'(Data);
encode_disp('TerminalLabel',Data) -> 'enc_TerminalLabel'(Data);
encode_disp('McuNumber',Data) -> 'enc_McuNumber'(Data);
encode_disp('TerminalNumber',Data) -> 'enc_TerminalNumber'(Data);
encode_disp('ConferenceResponse',Data) -> 'enc_ConferenceResponse'(Data);
encode_disp('TerminalID',Data) -> 'enc_TerminalID'(Data);
encode_disp('ConferenceID',Data) -> 'enc_ConferenceID'(Data);
encode_disp('Password',Data) -> 'enc_Password'(Data);
encode_disp('RequestAllTerminalIDsResponse',Data) -> 'enc_RequestAllTerminalIDsResponse'(Data);
encode_disp('TerminalInformation',Data) -> 'enc_TerminalInformation'(Data);
encode_disp('RemoteMCRequest',Data) -> 'enc_RemoteMCRequest'(Data);
encode_disp('RemoteMCResponse',Data) -> 'enc_RemoteMCResponse'(Data);
encode_disp('MultilinkRequest',Data) -> 'enc_MultilinkRequest'(Data);
encode_disp('MultilinkResponse',Data) -> 'enc_MultilinkResponse'(Data);
encode_disp('MultilinkIndication',Data) -> 'enc_MultilinkIndication'(Data);
encode_disp('DialingInformation',Data) -> 'enc_DialingInformation'(Data);
encode_disp('DialingInformationNumber',Data) -> 'enc_DialingInformationNumber'(Data);
encode_disp('DialingInformationNetworkType',Data) -> 'enc_DialingInformationNetworkType'(Data);
encode_disp('ConnectionIdentifier',Data) -> 'enc_ConnectionIdentifier'(Data);
encode_disp('MaximumBitRate',Data) -> 'enc_MaximumBitRate'(Data);
encode_disp('LogicalChannelRateRequest',Data) -> 'enc_LogicalChannelRateRequest'(Data);
encode_disp('LogicalChannelRateAcknowledge',Data) -> 'enc_LogicalChannelRateAcknowledge'(Data);
encode_disp('LogicalChannelRateReject',Data) -> 'enc_LogicalChannelRateReject'(Data);
encode_disp('LogicalChannelRateRejectReason',Data) -> 'enc_LogicalChannelRateRejectReason'(Data);
encode_disp('LogicalChannelRateRelease',Data) -> 'enc_LogicalChannelRateRelease'(Data);
encode_disp('SendTerminalCapabilitySet',Data) -> 'enc_SendTerminalCapabilitySet'(Data);
encode_disp('EncryptionCommand',Data) -> 'enc_EncryptionCommand'(Data);
encode_disp('FlowControlCommand',Data) -> 'enc_FlowControlCommand'(Data);
encode_disp('EndSessionCommand',Data) -> 'enc_EndSessionCommand'(Data);
encode_disp('ConferenceCommand',Data) -> 'enc_ConferenceCommand'(Data);
encode_disp('SubstituteConferenceIDCommand',Data) -> 'enc_SubstituteConferenceIDCommand'(Data);
encode_disp('MiscellaneousCommand',Data) -> 'enc_MiscellaneousCommand'(Data);
encode_disp('KeyProtectionMethod',Data) -> 'enc_KeyProtectionMethod'(Data);
encode_disp('EncryptionUpdateRequest',Data) -> 'enc_EncryptionUpdateRequest'(Data);
encode_disp('PictureReference',Data) -> 'enc_PictureReference'(Data);
encode_disp('H223MultiplexReconfiguration',Data) -> 'enc_H223MultiplexReconfiguration'(Data);
encode_disp('NewATMVCCommand',Data) -> 'enc_NewATMVCCommand'(Data);
encode_disp('MobileMultilinkReconfigurationCommand',Data) -> 'enc_MobileMultilinkReconfigurationCommand'(Data);
encode_disp('FunctionNotUnderstood',Data) -> 'enc_FunctionNotUnderstood'(Data);
encode_disp('FunctionNotSupported',Data) -> 'enc_FunctionNotSupported'(Data);
encode_disp('ConferenceIndication',Data) -> 'enc_ConferenceIndication'(Data);
encode_disp('TerminalYouAreSeeingInSubPictureNumber',Data) -> 'enc_TerminalYouAreSeeingInSubPictureNumber'(Data);
encode_disp('VideoIndicateCompose',Data) -> 'enc_VideoIndicateCompose'(Data);
encode_disp('MiscellaneousIndication',Data) -> 'enc_MiscellaneousIndication'(Data);
encode_disp('JitterIndication',Data) -> 'enc_JitterIndication'(Data);
encode_disp('H223SkewIndication',Data) -> 'enc_H223SkewIndication'(Data);
encode_disp('H2250MaximumSkewIndication',Data) -> 'enc_H2250MaximumSkewIndication'(Data);
encode_disp('MCLocationIndication',Data) -> 'enc_MCLocationIndication'(Data);
encode_disp('VendorIdentification',Data) -> 'enc_VendorIdentification'(Data);
encode_disp('NewATMVCIndication',Data) -> 'enc_NewATMVCIndication'(Data);
encode_disp('UserInputIndication',Data) -> 'enc_UserInputIndication'(Data);
encode_disp('FlowControlIndication',Data) -> 'enc_FlowControlIndication'(Data);
encode_disp('MobileMultilinkReconfigurationIndication',Data) -> 'enc_MobileMultilinkReconfigurationIndication'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('MultimediaSystemControlMessage',Data) -> 'dec_MultimediaSystemControlMessage'(Data);
decode_disp('RequestMessage',Data) -> 'dec_RequestMessage'(Data);
decode_disp('ResponseMessage',Data) -> 'dec_ResponseMessage'(Data);
decode_disp('CommandMessage',Data) -> 'dec_CommandMessage'(Data);
decode_disp('IndicationMessage',Data) -> 'dec_IndicationMessage'(Data);
decode_disp('SequenceNumber',Data) -> 'dec_SequenceNumber'(Data);
decode_disp('NonStandardMessage',Data) -> 'dec_NonStandardMessage'(Data);
decode_disp('NonStandardParameter',Data) -> 'dec_NonStandardParameter'(Data);
decode_disp('NonStandardIdentifier',Data) -> 'dec_NonStandardIdentifier'(Data);
decode_disp('MasterSlaveDetermination',Data) -> 'dec_MasterSlaveDetermination'(Data);
decode_disp('MasterSlaveDeterminationAck',Data) -> 'dec_MasterSlaveDeterminationAck'(Data);
decode_disp('MasterSlaveDeterminationReject',Data) -> 'dec_MasterSlaveDeterminationReject'(Data);
decode_disp('MasterSlaveDeterminationRelease',Data) -> 'dec_MasterSlaveDeterminationRelease'(Data);
decode_disp('TerminalCapabilitySet',Data) -> 'dec_TerminalCapabilitySet'(Data);
decode_disp('CapabilityTableEntry',Data) -> 'dec_CapabilityTableEntry'(Data);
decode_disp('CapabilityDescriptor',Data) -> 'dec_CapabilityDescriptor'(Data);
decode_disp('AlternativeCapabilitySet',Data) -> 'dec_AlternativeCapabilitySet'(Data);
decode_disp('CapabilityTableEntryNumber',Data) -> 'dec_CapabilityTableEntryNumber'(Data);
decode_disp('CapabilityDescriptorNumber',Data) -> 'dec_CapabilityDescriptorNumber'(Data);
decode_disp('TerminalCapabilitySetAck',Data) -> 'dec_TerminalCapabilitySetAck'(Data);
decode_disp('TerminalCapabilitySetReject',Data) -> 'dec_TerminalCapabilitySetReject'(Data);
decode_disp('TerminalCapabilitySetRelease',Data) -> 'dec_TerminalCapabilitySetRelease'(Data);
decode_disp('Capability',Data) -> 'dec_Capability'(Data);
decode_disp('H235SecurityCapability',Data) -> 'dec_H235SecurityCapability'(Data);
decode_disp('MultiplexCapability',Data) -> 'dec_MultiplexCapability'(Data);
decode_disp('H222Capability',Data) -> 'dec_H222Capability'(Data);
decode_disp('VCCapability',Data) -> 'dec_VCCapability'(Data);
decode_disp('H223Capability',Data) -> 'dec_H223Capability'(Data);
decode_disp('H223AnnexCCapability',Data) -> 'dec_H223AnnexCCapability'(Data);
decode_disp('V76Capability',Data) -> 'dec_V76Capability'(Data);
decode_disp('V75Capability',Data) -> 'dec_V75Capability'(Data);
decode_disp('H2250Capability',Data) -> 'dec_H2250Capability'(Data);
decode_disp('MediaPacketizationCapability',Data) -> 'dec_MediaPacketizationCapability'(Data);
decode_disp('RSVPParameters',Data) -> 'dec_RSVPParameters'(Data);
decode_disp('QOSMode',Data) -> 'dec_QOSMode'(Data);
decode_disp('ATMParameters',Data) -> 'dec_ATMParameters'(Data);
decode_disp('QOSCapability',Data) -> 'dec_QOSCapability'(Data);
decode_disp('MediaTransportType',Data) -> 'dec_MediaTransportType'(Data);
decode_disp('MediaChannelCapability',Data) -> 'dec_MediaChannelCapability'(Data);
decode_disp('TransportCapability',Data) -> 'dec_TransportCapability'(Data);
decode_disp('RedundancyEncodingCapability',Data) -> 'dec_RedundancyEncodingCapability'(Data);
decode_disp('RedundancyEncodingMethod',Data) -> 'dec_RedundancyEncodingMethod'(Data);
decode_disp('RTPH263VideoRedundancyEncoding',Data) -> 'dec_RTPH263VideoRedundancyEncoding'(Data);
decode_disp('RTPH263VideoRedundancyFrameMapping',Data) -> 'dec_RTPH263VideoRedundancyFrameMapping'(Data);
decode_disp('MultipointCapability',Data) -> 'dec_MultipointCapability'(Data);
decode_disp('MediaDistributionCapability',Data) -> 'dec_MediaDistributionCapability'(Data);
decode_disp('VideoCapability',Data) -> 'dec_VideoCapability'(Data);
decode_disp('H261VideoCapability',Data) -> 'dec_H261VideoCapability'(Data);
decode_disp('H262VideoCapability',Data) -> 'dec_H262VideoCapability'(Data);
decode_disp('H263VideoCapability',Data) -> 'dec_H263VideoCapability'(Data);
decode_disp('EnhancementLayerInfo',Data) -> 'dec_EnhancementLayerInfo'(Data);
decode_disp('BEnhancementParameters',Data) -> 'dec_BEnhancementParameters'(Data);
decode_disp('EnhancementOptions',Data) -> 'dec_EnhancementOptions'(Data);
decode_disp('H263Options',Data) -> 'dec_H263Options'(Data);
decode_disp('TransparencyParameters',Data) -> 'dec_TransparencyParameters'(Data);
decode_disp('RefPictureSelection',Data) -> 'dec_RefPictureSelection'(Data);
decode_disp('CustomPictureClockFrequency',Data) -> 'dec_CustomPictureClockFrequency'(Data);
decode_disp('CustomPictureFormat',Data) -> 'dec_CustomPictureFormat'(Data);
decode_disp('H263VideoModeCombos',Data) -> 'dec_H263VideoModeCombos'(Data);
decode_disp('H263ModeComboFlags',Data) -> 'dec_H263ModeComboFlags'(Data);
decode_disp('H263Version3Options',Data) -> 'dec_H263Version3Options'(Data);
decode_disp('IS11172VideoCapability',Data) -> 'dec_IS11172VideoCapability'(Data);
decode_disp('AudioCapability',Data) -> 'dec_AudioCapability'(Data);
decode_disp('G729Extensions',Data) -> 'dec_G729Extensions'(Data);
decode_disp('G7231AnnexCCapability',Data) -> 'dec_G7231AnnexCCapability'(Data);
decode_disp('IS11172AudioCapability',Data) -> 'dec_IS11172AudioCapability'(Data);
decode_disp('IS13818AudioCapability',Data) -> 'dec_IS13818AudioCapability'(Data);
decode_disp('GSMAudioCapability',Data) -> 'dec_GSMAudioCapability'(Data);
decode_disp('VBDCapability',Data) -> 'dec_VBDCapability'(Data);
decode_disp('DataApplicationCapability',Data) -> 'dec_DataApplicationCapability'(Data);
decode_disp('DataProtocolCapability',Data) -> 'dec_DataProtocolCapability'(Data);
decode_disp('CompressionType',Data) -> 'dec_CompressionType'(Data);
decode_disp('V42bis',Data) -> 'dec_V42bis'(Data);
decode_disp('T84Profile',Data) -> 'dec_T84Profile'(Data);
decode_disp('T38FaxProfile',Data) -> 'dec_T38FaxProfile'(Data);
decode_disp('T38FaxRateManagement',Data) -> 'dec_T38FaxRateManagement'(Data);
decode_disp('T38FaxUdpOptions',Data) -> 'dec_T38FaxUdpOptions'(Data);
decode_disp('T38FaxTcpOptions',Data) -> 'dec_T38FaxTcpOptions'(Data);
decode_disp('EncryptionAuthenticationAndIntegrity',Data) -> 'dec_EncryptionAuthenticationAndIntegrity'(Data);
decode_disp('EncryptionCapability',Data) -> 'dec_EncryptionCapability'(Data);
decode_disp('MediaEncryptionAlgorithm',Data) -> 'dec_MediaEncryptionAlgorithm'(Data);
decode_disp('AuthenticationCapability',Data) -> 'dec_AuthenticationCapability'(Data);
decode_disp('IntegrityCapability',Data) -> 'dec_IntegrityCapability'(Data);
decode_disp('UserInputCapability',Data) -> 'dec_UserInputCapability'(Data);
decode_disp('ConferenceCapability',Data) -> 'dec_ConferenceCapability'(Data);
decode_disp('GenericCapability',Data) -> 'dec_GenericCapability'(Data);
decode_disp('CapabilityIdentifier',Data) -> 'dec_CapabilityIdentifier'(Data);
decode_disp('GenericParameter',Data) -> 'dec_GenericParameter'(Data);
decode_disp('ParameterIdentifier',Data) -> 'dec_ParameterIdentifier'(Data);
decode_disp('ParameterValue',Data) -> 'dec_ParameterValue'(Data);
decode_disp('MultiplexedStreamCapability',Data) -> 'dec_MultiplexedStreamCapability'(Data);
decode_disp('MultiplexFormat',Data) -> 'dec_MultiplexFormat'(Data);
decode_disp('AudioTelephonyEventCapability',Data) -> 'dec_AudioTelephonyEventCapability'(Data);
decode_disp('AudioToneCapability',Data) -> 'dec_AudioToneCapability'(Data);
decode_disp('NoPTAudioTelephonyEventCapability',Data) -> 'dec_NoPTAudioTelephonyEventCapability'(Data);
decode_disp('NoPTAudioToneCapability',Data) -> 'dec_NoPTAudioToneCapability'(Data);
decode_disp('MultiplePayloadStreamCapability',Data) -> 'dec_MultiplePayloadStreamCapability'(Data);
decode_disp('FECCapability',Data) -> 'dec_FECCapability'(Data);
decode_disp('OpenLogicalChannel',Data) -> 'dec_OpenLogicalChannel'(Data);
decode_disp('LogicalChannelNumber',Data) -> 'dec_LogicalChannelNumber'(Data);
decode_disp('NetworkAccessParameters',Data) -> 'dec_NetworkAccessParameters'(Data);
decode_disp('Q2931Address',Data) -> 'dec_Q2931Address'(Data);
decode_disp('V75Parameters',Data) -> 'dec_V75Parameters'(Data);
decode_disp('DataType',Data) -> 'dec_DataType'(Data);
decode_disp('H235Media',Data) -> 'dec_H235Media'(Data);
decode_disp('MultiplexedStreamParameter',Data) -> 'dec_MultiplexedStreamParameter'(Data);
decode_disp('H222LogicalChannelParameters',Data) -> 'dec_H222LogicalChannelParameters'(Data);
decode_disp('H223LogicalChannelParameters',Data) -> 'dec_H223LogicalChannelParameters'(Data);
decode_disp('H223AL1MParameters',Data) -> 'dec_H223AL1MParameters'(Data);
decode_disp('H223AL2MParameters',Data) -> 'dec_H223AL2MParameters'(Data);
decode_disp('H223AL3MParameters',Data) -> 'dec_H223AL3MParameters'(Data);
decode_disp('H223AnnexCArqParameters',Data) -> 'dec_H223AnnexCArqParameters'(Data);
decode_disp('V76LogicalChannelParameters',Data) -> 'dec_V76LogicalChannelParameters'(Data);
decode_disp('V76HDLCParameters',Data) -> 'dec_V76HDLCParameters'(Data);
decode_disp('CRCLength',Data) -> 'dec_CRCLength'(Data);
decode_disp('H2250LogicalChannelParameters',Data) -> 'dec_H2250LogicalChannelParameters'(Data);
decode_disp('RTPPayloadType',Data) -> 'dec_RTPPayloadType'(Data);
decode_disp('RedundancyEncoding',Data) -> 'dec_RedundancyEncoding'(Data);
decode_disp('RedundancyEncodingElement',Data) -> 'dec_RedundancyEncodingElement'(Data);
decode_disp('MultiplePayloadStream',Data) -> 'dec_MultiplePayloadStream'(Data);
decode_disp('MultiplePayloadStreamElement',Data) -> 'dec_MultiplePayloadStreamElement'(Data);
decode_disp('FECData',Data) -> 'dec_FECData'(Data);
decode_disp('TransportAddress',Data) -> 'dec_TransportAddress'(Data);
decode_disp('UnicastAddress',Data) -> 'dec_UnicastAddress'(Data);
decode_disp('MulticastAddress',Data) -> 'dec_MulticastAddress'(Data);
decode_disp('EncryptionSync',Data) -> 'dec_EncryptionSync'(Data);
decode_disp('EscrowData',Data) -> 'dec_EscrowData'(Data);
decode_disp('OpenLogicalChannelAck',Data) -> 'dec_OpenLogicalChannelAck'(Data);
decode_disp('OpenLogicalChannelReject',Data) -> 'dec_OpenLogicalChannelReject'(Data);
decode_disp('OpenLogicalChannelConfirm',Data) -> 'dec_OpenLogicalChannelConfirm'(Data);
decode_disp('H2250LogicalChannelAckParameters',Data) -> 'dec_H2250LogicalChannelAckParameters'(Data);
decode_disp('CloseLogicalChannel',Data) -> 'dec_CloseLogicalChannel'(Data);
decode_disp('CloseLogicalChannelAck',Data) -> 'dec_CloseLogicalChannelAck'(Data);
decode_disp('RequestChannelClose',Data) -> 'dec_RequestChannelClose'(Data);
decode_disp('RequestChannelCloseAck',Data) -> 'dec_RequestChannelCloseAck'(Data);
decode_disp('RequestChannelCloseReject',Data) -> 'dec_RequestChannelCloseReject'(Data);
decode_disp('RequestChannelCloseRelease',Data) -> 'dec_RequestChannelCloseRelease'(Data);
decode_disp('MultiplexEntrySend',Data) -> 'dec_MultiplexEntrySend'(Data);
decode_disp('MultiplexEntryDescriptor',Data) -> 'dec_MultiplexEntryDescriptor'(Data);
decode_disp('MultiplexElement',Data) -> 'dec_MultiplexElement'(Data);
decode_disp('MultiplexTableEntryNumber',Data) -> 'dec_MultiplexTableEntryNumber'(Data);
decode_disp('MultiplexEntrySendAck',Data) -> 'dec_MultiplexEntrySendAck'(Data);
decode_disp('MultiplexEntrySendReject',Data) -> 'dec_MultiplexEntrySendReject'(Data);
decode_disp('MultiplexEntryRejectionDescriptions',Data) -> 'dec_MultiplexEntryRejectionDescriptions'(Data);
decode_disp('MultiplexEntrySendRelease',Data) -> 'dec_MultiplexEntrySendRelease'(Data);
decode_disp('RequestMultiplexEntry',Data) -> 'dec_RequestMultiplexEntry'(Data);
decode_disp('RequestMultiplexEntryAck',Data) -> 'dec_RequestMultiplexEntryAck'(Data);
decode_disp('RequestMultiplexEntryReject',Data) -> 'dec_RequestMultiplexEntryReject'(Data);
decode_disp('RequestMultiplexEntryRejectionDescriptions',Data) -> 'dec_RequestMultiplexEntryRejectionDescriptions'(Data);
decode_disp('RequestMultiplexEntryRelease',Data) -> 'dec_RequestMultiplexEntryRelease'(Data);
decode_disp('RequestMode',Data) -> 'dec_RequestMode'(Data);
decode_disp('RequestModeAck',Data) -> 'dec_RequestModeAck'(Data);
decode_disp('RequestModeReject',Data) -> 'dec_RequestModeReject'(Data);
decode_disp('RequestModeRelease',Data) -> 'dec_RequestModeRelease'(Data);
decode_disp('ModeDescription',Data) -> 'dec_ModeDescription'(Data);
decode_disp('ModeElementType',Data) -> 'dec_ModeElementType'(Data);
decode_disp('ModeElement',Data) -> 'dec_ModeElement'(Data);
decode_disp('H235Mode',Data) -> 'dec_H235Mode'(Data);
decode_disp('MultiplexedStreamModeParameters',Data) -> 'dec_MultiplexedStreamModeParameters'(Data);
decode_disp('RedundancyEncodingDTMode',Data) -> 'dec_RedundancyEncodingDTMode'(Data);
decode_disp('RedundancyEncodingDTModeElement',Data) -> 'dec_RedundancyEncodingDTModeElement'(Data);
decode_disp('MultiplePayloadStreamMode',Data) -> 'dec_MultiplePayloadStreamMode'(Data);
decode_disp('MultiplePayloadStreamElementMode',Data) -> 'dec_MultiplePayloadStreamElementMode'(Data);
decode_disp('FECMode',Data) -> 'dec_FECMode'(Data);
decode_disp('H223ModeParameters',Data) -> 'dec_H223ModeParameters'(Data);
decode_disp('V76ModeParameters',Data) -> 'dec_V76ModeParameters'(Data);
decode_disp('H2250ModeParameters',Data) -> 'dec_H2250ModeParameters'(Data);
decode_disp('RedundancyEncodingMode',Data) -> 'dec_RedundancyEncodingMode'(Data);
decode_disp('VideoMode',Data) -> 'dec_VideoMode'(Data);
decode_disp('H261VideoMode',Data) -> 'dec_H261VideoMode'(Data);
decode_disp('H262VideoMode',Data) -> 'dec_H262VideoMode'(Data);
decode_disp('H263VideoMode',Data) -> 'dec_H263VideoMode'(Data);
decode_disp('IS11172VideoMode',Data) -> 'dec_IS11172VideoMode'(Data);
decode_disp('AudioMode',Data) -> 'dec_AudioMode'(Data);
decode_disp('IS11172AudioMode',Data) -> 'dec_IS11172AudioMode'(Data);
decode_disp('IS13818AudioMode',Data) -> 'dec_IS13818AudioMode'(Data);
decode_disp('G7231AnnexCMode',Data) -> 'dec_G7231AnnexCMode'(Data);
decode_disp('VBDMode',Data) -> 'dec_VBDMode'(Data);
decode_disp('DataMode',Data) -> 'dec_DataMode'(Data);
decode_disp('EncryptionMode',Data) -> 'dec_EncryptionMode'(Data);
decode_disp('RoundTripDelayRequest',Data) -> 'dec_RoundTripDelayRequest'(Data);
decode_disp('RoundTripDelayResponse',Data) -> 'dec_RoundTripDelayResponse'(Data);
decode_disp('MaintenanceLoopRequest',Data) -> 'dec_MaintenanceLoopRequest'(Data);
decode_disp('MaintenanceLoopAck',Data) -> 'dec_MaintenanceLoopAck'(Data);
decode_disp('MaintenanceLoopReject',Data) -> 'dec_MaintenanceLoopReject'(Data);
decode_disp('MaintenanceLoopOffCommand',Data) -> 'dec_MaintenanceLoopOffCommand'(Data);
decode_disp('CommunicationModeCommand',Data) -> 'dec_CommunicationModeCommand'(Data);
decode_disp('CommunicationModeRequest',Data) -> 'dec_CommunicationModeRequest'(Data);
decode_disp('CommunicationModeResponse',Data) -> 'dec_CommunicationModeResponse'(Data);
decode_disp('CommunicationModeTableEntry',Data) -> 'dec_CommunicationModeTableEntry'(Data);
decode_disp('ConferenceRequest',Data) -> 'dec_ConferenceRequest'(Data);
decode_disp('CertSelectionCriteria',Data) -> 'dec_CertSelectionCriteria'(Data);
decode_disp('Criteria',Data) -> 'dec_Criteria'(Data);
decode_disp('TerminalLabel',Data) -> 'dec_TerminalLabel'(Data);
decode_disp('McuNumber',Data) -> 'dec_McuNumber'(Data);
decode_disp('TerminalNumber',Data) -> 'dec_TerminalNumber'(Data);
decode_disp('ConferenceResponse',Data) -> 'dec_ConferenceResponse'(Data);
decode_disp('TerminalID',Data) -> 'dec_TerminalID'(Data);
decode_disp('ConferenceID',Data) -> 'dec_ConferenceID'(Data);
decode_disp('Password',Data) -> 'dec_Password'(Data);
decode_disp('RequestAllTerminalIDsResponse',Data) -> 'dec_RequestAllTerminalIDsResponse'(Data);
decode_disp('TerminalInformation',Data) -> 'dec_TerminalInformation'(Data);
decode_disp('RemoteMCRequest',Data) -> 'dec_RemoteMCRequest'(Data);
decode_disp('RemoteMCResponse',Data) -> 'dec_RemoteMCResponse'(Data);
decode_disp('MultilinkRequest',Data) -> 'dec_MultilinkRequest'(Data);
decode_disp('MultilinkResponse',Data) -> 'dec_MultilinkResponse'(Data);
decode_disp('MultilinkIndication',Data) -> 'dec_MultilinkIndication'(Data);
decode_disp('DialingInformation',Data) -> 'dec_DialingInformation'(Data);
decode_disp('DialingInformationNumber',Data) -> 'dec_DialingInformationNumber'(Data);
decode_disp('DialingInformationNetworkType',Data) -> 'dec_DialingInformationNetworkType'(Data);
decode_disp('ConnectionIdentifier',Data) -> 'dec_ConnectionIdentifier'(Data);
decode_disp('MaximumBitRate',Data) -> 'dec_MaximumBitRate'(Data);
decode_disp('LogicalChannelRateRequest',Data) -> 'dec_LogicalChannelRateRequest'(Data);
decode_disp('LogicalChannelRateAcknowledge',Data) -> 'dec_LogicalChannelRateAcknowledge'(Data);
decode_disp('LogicalChannelRateReject',Data) -> 'dec_LogicalChannelRateReject'(Data);
decode_disp('LogicalChannelRateRejectReason',Data) -> 'dec_LogicalChannelRateRejectReason'(Data);
decode_disp('LogicalChannelRateRelease',Data) -> 'dec_LogicalChannelRateRelease'(Data);
decode_disp('SendTerminalCapabilitySet',Data) -> 'dec_SendTerminalCapabilitySet'(Data);
decode_disp('EncryptionCommand',Data) -> 'dec_EncryptionCommand'(Data);
decode_disp('FlowControlCommand',Data) -> 'dec_FlowControlCommand'(Data);
decode_disp('EndSessionCommand',Data) -> 'dec_EndSessionCommand'(Data);
decode_disp('ConferenceCommand',Data) -> 'dec_ConferenceCommand'(Data);
decode_disp('SubstituteConferenceIDCommand',Data) -> 'dec_SubstituteConferenceIDCommand'(Data);
decode_disp('MiscellaneousCommand',Data) -> 'dec_MiscellaneousCommand'(Data);
decode_disp('KeyProtectionMethod',Data) -> 'dec_KeyProtectionMethod'(Data);
decode_disp('EncryptionUpdateRequest',Data) -> 'dec_EncryptionUpdateRequest'(Data);
decode_disp('PictureReference',Data) -> 'dec_PictureReference'(Data);
decode_disp('H223MultiplexReconfiguration',Data) -> 'dec_H223MultiplexReconfiguration'(Data);
decode_disp('NewATMVCCommand',Data) -> 'dec_NewATMVCCommand'(Data);
decode_disp('MobileMultilinkReconfigurationCommand',Data) -> 'dec_MobileMultilinkReconfigurationCommand'(Data);
decode_disp('FunctionNotUnderstood',Data) -> 'dec_FunctionNotUnderstood'(Data);
decode_disp('FunctionNotSupported',Data) -> 'dec_FunctionNotSupported'(Data);
decode_disp('ConferenceIndication',Data) -> 'dec_ConferenceIndication'(Data);
decode_disp('TerminalYouAreSeeingInSubPictureNumber',Data) -> 'dec_TerminalYouAreSeeingInSubPictureNumber'(Data);
decode_disp('VideoIndicateCompose',Data) -> 'dec_VideoIndicateCompose'(Data);
decode_disp('MiscellaneousIndication',Data) -> 'dec_MiscellaneousIndication'(Data);
decode_disp('JitterIndication',Data) -> 'dec_JitterIndication'(Data);
decode_disp('H223SkewIndication',Data) -> 'dec_H223SkewIndication'(Data);
decode_disp('H2250MaximumSkewIndication',Data) -> 'dec_H2250MaximumSkewIndication'(Data);
decode_disp('MCLocationIndication',Data) -> 'dec_MCLocationIndication'(Data);
decode_disp('VendorIdentification',Data) -> 'dec_VendorIdentification'(Data);
decode_disp('NewATMVCIndication',Data) -> 'dec_NewATMVCIndication'(Data);
decode_disp('UserInputIndication',Data) -> 'dec_UserInputIndication'(Data);
decode_disp('FlowControlIndication',Data) -> 'dec_FlowControlIndication'(Data);
decode_disp('MobileMultilinkReconfigurationIndication',Data) -> 'dec_MobileMultilinkReconfigurationIndication'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
'enc_MultimediaSystemControlMessage'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= request ->
[<<0:1,0:2>>|enc_RequestMessage(ChoiceVal)];
ChoiceTag =:= response ->
[<<0:1,1:2>>|enc_ResponseMessage(ChoiceVal)];
ChoiceTag =:= command ->
[<<0:1,2:2>>|enc_CommandMessage(ChoiceVal)];
ChoiceTag =:= indication ->
[<<0:1,3:2>>|enc_IndicationMessage(ChoiceVal)]
end.


dec_MultimediaSystemControlMessage(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_RequestMessage(Bytes2)
end,
{{request,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_ResponseMessage(Bytes2)
end,
{{response,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_CommandMessage(Bytes2)
end,
{{command,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_IndicationMessage(Bytes2)
end,
{{indication,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_RequestMessage'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:4>>|enc_NonStandardMessage(ChoiceVal)];
ChoiceTag =:= masterSlaveDetermination ->
[<<0:1,1:4>>|enc_MasterSlaveDetermination(ChoiceVal)];
ChoiceTag =:= terminalCapabilitySet ->
[<<0:1,2:4>>|enc_TerminalCapabilitySet(ChoiceVal)];
ChoiceTag =:= openLogicalChannel ->
[<<0:1,3:4>>|enc_OpenLogicalChannel(ChoiceVal)];
ChoiceTag =:= closeLogicalChannel ->
[<<0:1,4:4>>|enc_CloseLogicalChannel(ChoiceVal)];
ChoiceTag =:= requestChannelClose ->
[<<0:1,5:4>>|enc_RequestChannelClose(ChoiceVal)];
ChoiceTag =:= multiplexEntrySend ->
[<<0:1,6:4>>|enc_MultiplexEntrySend(ChoiceVal)];
ChoiceTag =:= requestMultiplexEntry ->
[<<0:1,7:4>>|enc_RequestMultiplexEntry(ChoiceVal)];
ChoiceTag =:= requestMode ->
[<<0:1,8:4>>|enc_RequestMode(ChoiceVal)];
ChoiceTag =:= roundTripDelayRequest ->
[<<0:1,9:4>>|enc_RoundTripDelayRequest(ChoiceVal)];
ChoiceTag =:= maintenanceLoopRequest ->
[<<0:1,10:4>>|enc_MaintenanceLoopRequest(ChoiceVal)];
ChoiceTag =:= communicationModeRequest ->
begin
Enc12@output = enc_CommunicationModeRequest(ChoiceVal),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[<<1:1,0:7>>,
align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc12@bin, 8)]
end
end;
ChoiceTag =:= conferenceRequest ->
begin
Enc13@output = enc_ConferenceRequest(ChoiceVal),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[<<1:1,1:7>>,
align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc13@bin, 8)]
end
end;
ChoiceTag =:= multilinkRequest ->
begin
Enc14@output = enc_MultilinkRequest(ChoiceVal),
Enc14@bin = complete(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[<<1:1,2:7>>,
align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc14@bin, 8)]
end
end;
ChoiceTag =:= logicalChannelRateRequest ->
begin
Enc15@output = enc_LogicalChannelRateRequest(ChoiceVal),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[<<1:1,3:7>>,
align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc15@bin, 8)]
end
end
end.


dec_RequestMessage(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardMessage(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_MasterSlaveDetermination(Bytes2)
end,
{{masterSlaveDetermination,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_TerminalCapabilitySet(Bytes2)
end,
{{terminalCapabilitySet,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_OpenLogicalChannel(Bytes2)
end,
{{openLogicalChannel,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_CloseLogicalChannel(Bytes2)
end,
{{closeLogicalChannel,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_RequestChannelClose(Bytes2)
end,
{{requestChannelClose,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_MultiplexEntrySend(Bytes2)
end,
{{multiplexEntrySend,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_RequestMultiplexEntry(Bytes2)
end,
{{requestMultiplexEntry,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_RequestMode(Bytes2)
end,
{{requestMode,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
dec_RoundTripDelayRequest(Bytes2)
end,
{{roundTripDelayRequest,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
dec_MaintenanceLoopRequest(Bytes2)
end,
{{maintenanceLoopRequest,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_CommunicationModeRequest(V2@V0),
{TmpVal,V2@Buf1}
end,
{{communicationModeRequest,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_ConferenceRequest(V2@V0),
{TmpVal,V2@Buf1}
end,
{{conferenceRequest,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MultilinkRequest(V2@V0),
{TmpVal,V2@Buf1}
end,
{{multilinkRequest,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_LogicalChannelRateRequest(V2@V0),
{TmpVal,V2@Buf1}
end,
{{logicalChannelRateRequest,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ResponseMessage'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:5>>|enc_NonStandardMessage(ChoiceVal)];
ChoiceTag =:= masterSlaveDeterminationAck ->
[<<0:1,1:5>>|enc_MasterSlaveDeterminationAck(ChoiceVal)];
ChoiceTag =:= masterSlaveDeterminationReject ->
[<<0:1,2:5>>|enc_MasterSlaveDeterminationReject(ChoiceVal)];
ChoiceTag =:= terminalCapabilitySetAck ->
[<<0:1,3:5>>|enc_TerminalCapabilitySetAck(ChoiceVal)];
ChoiceTag =:= terminalCapabilitySetReject ->
[<<0:1,4:5>>|enc_TerminalCapabilitySetReject(ChoiceVal)];
ChoiceTag =:= openLogicalChannelAck ->
[<<0:1,5:5>>|enc_OpenLogicalChannelAck(ChoiceVal)];
ChoiceTag =:= openLogicalChannelReject ->
[<<0:1,6:5>>|enc_OpenLogicalChannelReject(ChoiceVal)];
ChoiceTag =:= closeLogicalChannelAck ->
[<<0:1,7:5>>|enc_CloseLogicalChannelAck(ChoiceVal)];
ChoiceTag =:= requestChannelCloseAck ->
[<<0:1,8:5>>|enc_RequestChannelCloseAck(ChoiceVal)];
ChoiceTag =:= requestChannelCloseReject ->
[<<0:1,9:5>>|enc_RequestChannelCloseReject(ChoiceVal)];
ChoiceTag =:= multiplexEntrySendAck ->
[<<0:1,10:5>>|enc_MultiplexEntrySendAck(ChoiceVal)];
ChoiceTag =:= multiplexEntrySendReject ->
[<<0:1,11:5>>|enc_MultiplexEntrySendReject(ChoiceVal)];
ChoiceTag =:= requestMultiplexEntryAck ->
[<<0:1,12:5>>|enc_RequestMultiplexEntryAck(ChoiceVal)];
ChoiceTag =:= requestMultiplexEntryReject ->
[<<0:1,13:5>>|enc_RequestMultiplexEntryReject(ChoiceVal)];
ChoiceTag =:= requestModeAck ->
[<<0:1,14:5>>|enc_RequestModeAck(ChoiceVal)];
ChoiceTag =:= requestModeReject ->
[<<0:1,15:5>>|enc_RequestModeReject(ChoiceVal)];
ChoiceTag =:= roundTripDelayResponse ->
[<<0:1,16:5>>|enc_RoundTripDelayResponse(ChoiceVal)];
ChoiceTag =:= maintenanceLoopAck ->
[<<0:1,17:5>>|enc_MaintenanceLoopAck(ChoiceVal)];
ChoiceTag =:= maintenanceLoopReject ->
[<<0:1,18:5>>|enc_MaintenanceLoopReject(ChoiceVal)];
ChoiceTag =:= communicationModeResponse ->
begin
Enc20@output = enc_CommunicationModeResponse(ChoiceVal),
Enc20@bin = complete(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[<<1:1,0:7>>,
align,
Enc20@len|Enc20@bin];
Enc20@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc20@len:14>>|Enc20@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc20@bin, 8)]
end
end;
ChoiceTag =:= conferenceResponse ->
begin
Enc21@output = enc_ConferenceResponse(ChoiceVal),
Enc21@bin = complete(Enc21@output),
Enc21@len = byte_size(Enc21@bin),
if Enc21@len < 128 ->
[<<1:1,1:7>>,
align,
Enc21@len|Enc21@bin];
Enc21@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc21@len:14>>|Enc21@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc21@bin, 8)]
end
end;
ChoiceTag =:= multilinkResponse ->
begin
Enc22@output = enc_MultilinkResponse(ChoiceVal),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[<<1:1,2:7>>,
align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc22@bin, 8)]
end
end;
ChoiceTag =:= logicalChannelRateAcknowledge ->
begin
Enc23@output = enc_LogicalChannelRateAcknowledge(ChoiceVal),
Enc23@bin = complete(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[<<1:1,3:7>>,
align,
Enc23@len|Enc23@bin];
Enc23@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc23@len:14>>|Enc23@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc23@bin, 8)]
end
end;
ChoiceTag =:= logicalChannelRateReject ->
begin
Enc24@output = enc_LogicalChannelRateReject(ChoiceVal),
Enc24@bin = complete(Enc24@output),
Enc24@len = byte_size(Enc24@bin),
if Enc24@len < 128 ->
[<<1:1,4:7>>,
align,
Enc24@len|Enc24@bin];
Enc24@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc24@len:14>>|Enc24@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc24@bin, 8)]
end
end
end.


dec_ResponseMessage(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:5/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardMessage(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_MasterSlaveDeterminationAck(Bytes2)
end,
{{masterSlaveDeterminationAck,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_MasterSlaveDeterminationReject(Bytes2)
end,
{{masterSlaveDeterminationReject,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_TerminalCapabilitySetAck(Bytes2)
end,
{{terminalCapabilitySetAck,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_TerminalCapabilitySetReject(Bytes2)
end,
{{terminalCapabilitySetReject,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_OpenLogicalChannelAck(Bytes2)
end,
{{openLogicalChannelAck,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_OpenLogicalChannelReject(Bytes2)
end,
{{openLogicalChannelReject,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_CloseLogicalChannelAck(Bytes2)
end,
{{closeLogicalChannelAck,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_RequestChannelCloseAck(Bytes2)
end,
{{requestChannelCloseAck,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
dec_RequestChannelCloseReject(Bytes2)
end,
{{requestChannelCloseReject,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
dec_MultiplexEntrySendAck(Bytes2)
end,
{{multiplexEntrySendAck,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
dec_MultiplexEntrySendReject(Bytes2)
end,
{{multiplexEntrySendReject,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
dec_RequestMultiplexEntryAck(Bytes2)
end,
{{requestMultiplexEntryAck,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
dec_RequestMultiplexEntryReject(Bytes2)
end,
{{requestMultiplexEntryReject,Val},NewBytes};
14 ->
{Val,NewBytes} = begin
dec_RequestModeAck(Bytes2)
end,
{{requestModeAck,Val},NewBytes};
15 ->
{Val,NewBytes} = begin
dec_RequestModeReject(Bytes2)
end,
{{requestModeReject,Val},NewBytes};
16 ->
{Val,NewBytes} = begin
dec_RoundTripDelayResponse(Bytes2)
end,
{{roundTripDelayResponse,Val},NewBytes};
17 ->
{Val,NewBytes} = begin
dec_MaintenanceLoopAck(Bytes2)
end,
{{maintenanceLoopAck,Val},NewBytes};
18 ->
{Val,NewBytes} = begin
dec_MaintenanceLoopReject(Bytes2)
end,
{{maintenanceLoopReject,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_CommunicationModeResponse(V2@V0),
{TmpVal,V2@Buf1}
end,
{{communicationModeResponse,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_ConferenceResponse(V2@V0),
{TmpVal,V2@Buf1}
end,
{{conferenceResponse,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MultilinkResponse(V2@V0),
{TmpVal,V2@Buf1}
end,
{{multilinkResponse,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_LogicalChannelRateAcknowledge(V2@V0),
{TmpVal,V2@Buf1}
end,
{{logicalChannelRateAcknowledge,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_LogicalChannelRateReject(V2@V0),
{TmpVal,V2@Buf1}
end,
{{logicalChannelRateReject,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_CommandMessage'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:3>>|enc_NonStandardMessage(ChoiceVal)];
ChoiceTag =:= maintenanceLoopOffCommand ->
[<<0:1,1:3>>|enc_MaintenanceLoopOffCommand(ChoiceVal)];
ChoiceTag =:= sendTerminalCapabilitySet ->
[<<0:1,2:3>>|enc_SendTerminalCapabilitySet(ChoiceVal)];
ChoiceTag =:= encryptionCommand ->
[<<0:1,3:3>>|enc_EncryptionCommand(ChoiceVal)];
ChoiceTag =:= flowControlCommand ->
[<<0:1,4:3>>|enc_FlowControlCommand(ChoiceVal)];
ChoiceTag =:= endSessionCommand ->
[<<0:1,5:3>>|enc_EndSessionCommand(ChoiceVal)];
ChoiceTag =:= miscellaneousCommand ->
[<<0:1,6:3>>|enc_MiscellaneousCommand(ChoiceVal)];
ChoiceTag =:= communicationModeCommand ->
begin
Enc8@output = enc_CommunicationModeCommand(ChoiceVal),
Enc8@bin = complete(Enc8@output),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[<<1:1,0:7>>,
align,
Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc8@bin, 8)]
end
end;
ChoiceTag =:= conferenceCommand ->
begin
Enc9@output = enc_ConferenceCommand(ChoiceVal),
Enc9@bin = complete(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[<<1:1,1:7>>,
align,
Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc9@bin, 8)]
end
end;
ChoiceTag =:= h223MultiplexReconfiguration ->
begin
Enc10@output = enc_H223MultiplexReconfiguration(ChoiceVal),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[<<1:1,2:7>>,
align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc10@bin, 8)]
end
end;
ChoiceTag =:= newATMVCCommand ->
begin
Enc11@output = enc_NewATMVCCommand(ChoiceVal),
Enc11@bin = complete(Enc11@output),
Enc11@len = byte_size(Enc11@bin),
if Enc11@len < 128 ->
[<<1:1,3:7>>,
align,
Enc11@len|Enc11@bin];
Enc11@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc11@len:14>>|Enc11@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc11@bin, 8)]
end
end;
ChoiceTag =:= mobileMultilinkReconfigurationCommand ->
begin
Enc12@output = enc_MobileMultilinkReconfigurationCommand(ChoiceVal),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[<<1:1,4:7>>,
align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc12@bin, 8)]
end
end
end.


dec_CommandMessage(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardMessage(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_MaintenanceLoopOffCommand(Bytes2)
end,
{{maintenanceLoopOffCommand,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_SendTerminalCapabilitySet(Bytes2)
end,
{{sendTerminalCapabilitySet,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_EncryptionCommand(Bytes2)
end,
{{encryptionCommand,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_FlowControlCommand(Bytes2)
end,
{{flowControlCommand,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_EndSessionCommand(Bytes2)
end,
{{endSessionCommand,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_MiscellaneousCommand(Bytes2)
end,
{{miscellaneousCommand,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_CommunicationModeCommand(V2@V0),
{TmpVal,V2@Buf1}
end,
{{communicationModeCommand,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_ConferenceCommand(V2@V0),
{TmpVal,V2@Buf1}
end,
{{conferenceCommand,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H223MultiplexReconfiguration(V2@V0),
{TmpVal,V2@Buf1}
end,
{{h223MultiplexReconfiguration,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_NewATMVCCommand(V2@V0),
{TmpVal,V2@Buf1}
end,
{{newATMVCCommand,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MobileMultilinkReconfigurationCommand(V2@V0),
{TmpVal,V2@Buf1}
end,
{{mobileMultilinkReconfigurationCommand,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_IndicationMessage'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:4>>|enc_NonStandardMessage(ChoiceVal)];
ChoiceTag =:= functionNotUnderstood ->
[<<0:1,1:4>>|enc_FunctionNotUnderstood(ChoiceVal)];
ChoiceTag =:= masterSlaveDeterminationRelease ->
[<<0:1,2:4>>|enc_MasterSlaveDeterminationRelease(ChoiceVal)];
ChoiceTag =:= terminalCapabilitySetRelease ->
[<<0:1,3:4>>|enc_TerminalCapabilitySetRelease(ChoiceVal)];
ChoiceTag =:= openLogicalChannelConfirm ->
[<<0:1,4:4>>|enc_OpenLogicalChannelConfirm(ChoiceVal)];
ChoiceTag =:= requestChannelCloseRelease ->
[<<0:1,5:4>>|enc_RequestChannelCloseRelease(ChoiceVal)];
ChoiceTag =:= multiplexEntrySendRelease ->
[<<0:1,6:4>>|enc_MultiplexEntrySendRelease(ChoiceVal)];
ChoiceTag =:= requestMultiplexEntryRelease ->
[<<0:1,7:4>>|enc_RequestMultiplexEntryRelease(ChoiceVal)];
ChoiceTag =:= requestModeRelease ->
[<<0:1,8:4>>|enc_RequestModeRelease(ChoiceVal)];
ChoiceTag =:= miscellaneousIndication ->
[<<0:1,9:4>>|enc_MiscellaneousIndication(ChoiceVal)];
ChoiceTag =:= jitterIndication ->
[<<0:1,10:4>>|enc_JitterIndication(ChoiceVal)];
ChoiceTag =:= h223SkewIndication ->
[<<0:1,11:4>>|enc_H223SkewIndication(ChoiceVal)];
ChoiceTag =:= newATMVCIndication ->
[<<0:1,12:4>>|enc_NewATMVCIndication(ChoiceVal)];
ChoiceTag =:= userInput ->
[<<0:1,13:4>>|enc_UserInputIndication(ChoiceVal)];
ChoiceTag =:= h2250MaximumSkewIndication ->
begin
Enc15@output = enc_H2250MaximumSkewIndication(ChoiceVal),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[<<1:1,0:7>>,
align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc15@bin, 8)]
end
end;
ChoiceTag =:= mcLocationIndication ->
begin
Enc16@output = enc_MCLocationIndication(ChoiceVal),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[<<1:1,1:7>>,
align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc16@bin, 8)]
end
end;
ChoiceTag =:= conferenceIndication ->
begin
Enc17@output = enc_ConferenceIndication(ChoiceVal),
Enc17@bin = complete(Enc17@output),
Enc17@len = byte_size(Enc17@bin),
if Enc17@len < 128 ->
[<<1:1,2:7>>,
align,
Enc17@len|Enc17@bin];
Enc17@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc17@len:14>>|Enc17@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc17@bin, 8)]
end
end;
ChoiceTag =:= vendorIdentification ->
begin
Enc18@output = enc_VendorIdentification(ChoiceVal),
Enc18@bin = complete(Enc18@output),
Enc18@len = byte_size(Enc18@bin),
if Enc18@len < 128 ->
[<<1:1,3:7>>,
align,
Enc18@len|Enc18@bin];
Enc18@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc18@len:14>>|Enc18@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc18@bin, 8)]
end
end;
ChoiceTag =:= functionNotSupported ->
begin
Enc19@output = enc_FunctionNotSupported(ChoiceVal),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[<<1:1,4:7>>,
align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc19@bin, 8)]
end
end;
ChoiceTag =:= multilinkIndication ->
begin
Enc20@output = enc_MultilinkIndication(ChoiceVal),
Enc20@bin = complete(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[<<1:1,5:7>>,
align,
Enc20@len|Enc20@bin];
Enc20@len < 16384 ->
[<<1:1,5:7>>,
align,
<<2:2,Enc20@len:14>>|Enc20@bin];
true ->
[<<1:1,5:7>>,
align|encode_fragmented(Enc20@bin, 8)]
end
end;
ChoiceTag =:= logicalChannelRateRelease ->
begin
Enc21@output = enc_LogicalChannelRateRelease(ChoiceVal),
Enc21@bin = complete(Enc21@output),
Enc21@len = byte_size(Enc21@bin),
if Enc21@len < 128 ->
[<<1:1,6:7>>,
align,
Enc21@len|Enc21@bin];
Enc21@len < 16384 ->
[<<1:1,6:7>>,
align,
<<2:2,Enc21@len:14>>|Enc21@bin];
true ->
[<<1:1,6:7>>,
align|encode_fragmented(Enc21@bin, 8)]
end
end;
ChoiceTag =:= flowControlIndication ->
begin
Enc22@output = enc_FlowControlIndication(ChoiceVal),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[<<1:1,7:7>>,
align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[<<1:1,7:7>>,
align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[<<1:1,7:7>>,
align|encode_fragmented(Enc22@bin, 8)]
end
end;
ChoiceTag =:= mobileMultilinkReconfigurationIndication ->
begin
Enc23@output = enc_MobileMultilinkReconfigurationIndication(ChoiceVal),
Enc23@bin = complete(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[<<1:1,8:7>>,
align,
Enc23@len|Enc23@bin];
Enc23@len < 16384 ->
[<<1:1,8:7>>,
align,
<<2:2,Enc23@len:14>>|Enc23@bin];
true ->
[<<1:1,8:7>>,
align|encode_fragmented(Enc23@bin, 8)]
end
end
end.


dec_IndicationMessage(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardMessage(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_FunctionNotUnderstood(Bytes2)
end,
{{functionNotUnderstood,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_MasterSlaveDeterminationRelease(Bytes2)
end,
{{masterSlaveDeterminationRelease,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_TerminalCapabilitySetRelease(Bytes2)
end,
{{terminalCapabilitySetRelease,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_OpenLogicalChannelConfirm(Bytes2)
end,
{{openLogicalChannelConfirm,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_RequestChannelCloseRelease(Bytes2)
end,
{{requestChannelCloseRelease,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_MultiplexEntrySendRelease(Bytes2)
end,
{{multiplexEntrySendRelease,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_RequestMultiplexEntryRelease(Bytes2)
end,
{{requestMultiplexEntryRelease,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_RequestModeRelease(Bytes2)
end,
{{requestModeRelease,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
dec_MiscellaneousIndication(Bytes2)
end,
{{miscellaneousIndication,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
dec_JitterIndication(Bytes2)
end,
{{jitterIndication,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
dec_H223SkewIndication(Bytes2)
end,
{{h223SkewIndication,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
dec_NewATMVCIndication(Bytes2)
end,
{{newATMVCIndication,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
dec_UserInputIndication(Bytes2)
end,
{{userInput,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H2250MaximumSkewIndication(V2@V0),
{TmpVal,V2@Buf1}
end,
{{h2250MaximumSkewIndication,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MCLocationIndication(V2@V0),
{TmpVal,V2@Buf1}
end,
{{mcLocationIndication,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_ConferenceIndication(V2@V0),
{TmpVal,V2@Buf1}
end,
{{conferenceIndication,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_VendorIdentification(V2@V0),
{TmpVal,V2@Buf1}
end,
{{vendorIdentification,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_FunctionNotSupported(V2@V0),
{TmpVal,V2@Buf1}
end,
{{functionNotSupported,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MultilinkIndication(V2@V0),
{TmpVal,V2@Buf1}
end,
{{multilinkIndication,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_LogicalChannelRateRelease(V2@V0),
{TmpVal,V2@Buf1}
end,
{{logicalChannelRateRelease,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_FlowControlIndication(V2@V0),
{TmpVal,V2@Buf1}
end,
{{flowControlIndication,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MobileMultilinkReconfigurationIndication(V2@V0),
{TmpVal,V2@Buf1}
end,
{{mobileMultilinkReconfigurationIndication,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_SequenceNumber'(Val) ->
if Val bsr 8 =:= 0 ->
[align,
Val];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_SequenceNumber(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_NonStandardMessage'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_NonStandardParameter(Enc2@element)
end].


dec_NonStandardMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes2} = dec_NonStandardParameter(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'NonStandardMessage',Term1},Bytes4}.

'enc_NonStandardParameter'(Val) ->
[begin
Enc1@element = element(2, Val),
enc_NonStandardIdentifier(Enc1@element)
end,
align|begin
Enc2@element = element(3, Val),
Enc3@len = byte_size(Enc2@element),
if Enc3@len < 128 ->
[Enc3@len|Enc2@element];
Enc3@len < 16384 ->
[<<2:2,Enc3@len:14>>|Enc2@element];
true ->
encode_fragmented(Enc2@element, 8)
end
end].


dec_NonStandardParameter(Bytes) ->

%% attribute number 1 with type NonStandardIdentifier
{Term1,Bytes1} = dec_NonStandardIdentifier(Bytes),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} = begin
V1@Pad3 = bit_size(Bytes1) band 7,
{V1@V0,V1@Buf1} = case Bytes1 of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end,
{{'NonStandardParameter',Term1,Term2},Bytes2}.

'enc_NonStandardIdentifier'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= object ->
begin
Enc2@bin = encode_oid(ChoiceVal),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 128 ->
[<<0:1>>,
align,
Enc2@len|Enc2@bin];
Enc2@len < 16384 ->
[<<0:1>>,
align,
<<2:2,Enc2@len:14>>|Enc2@bin];
true ->
[<<0:1>>,
align|encode_fragmented(Enc2@bin, 8)]
end
end;
ChoiceTag =:= h221NonStandard ->
[<<1:1>>|enc_NonStandardIdentifier_h221NonStandard(ChoiceVal)]
end.
'enc_NonStandardIdentifier_h221NonStandard'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 8 =:= 0 ->
Enc1@element;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end,
begin
Enc3@element = element(3, Val),
if Enc3@element bsr 8 =:= 0 ->
Enc3@element;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end|begin
Enc5@element = element(4, Val),
if Enc5@element bsr 16 =:= 0 ->
<<Enc5@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end].

dec_NonStandardIdentifier_h221NonStandard(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,
{{'NonStandardIdentifier_h221NonStandard',Term1,Term2,Term3},Bytes3}.



dec_NonStandardIdentifier(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad3 = bit_size(Bytes1) band 7,
{V2@V0,V2@Buf1} = case Bytes1 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/binary-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
V2@Conv10 = binary_to_list(V2@V8),
{V2@V11,V2@Buf12}  = {decode_oid(V2@Conv10),V2@Buf9},
{V2@V11,V2@Buf12}
end
end,
{{object,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_NonStandardIdentifier_h221NonStandard'(Bytes1)
end,
{{h221NonStandard,Val},NewBytes}
end.
'enc_MasterSlaveDetermination'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element bsr 24 =:= 0 ->
begin
Enc4@element@bin = binary:encode_unsigned(Enc4@element),
Enc4@element@bin_size0 = byte_size(Enc4@element@bin),
Enc4@element@bin_size = Enc4@element@bin_size0 - 1,
[<<Enc4@element@bin_size:2,0:6>>|Enc4@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].


dec_MasterSlaveDetermination(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<_:6,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MasterSlaveDetermination',Term1,Term2},Bytes5}.

'enc_MasterSlaveDeterminationAck'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MasterSlaveDeterminationAck_decision(Enc2@element)
end].
'enc_MasterSlaveDeterminationAck_decision'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= master ->
<<0:1>>;
ChoiceTag =:= slave ->
<<1:1>>
end.

dec_MasterSlaveDeterminationAck_decision(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{master,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{slave,Val},NewBytes}
end.


dec_MasterSlaveDeterminationAck(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_MasterSlaveDeterminationAck_decision'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MasterSlaveDeterminationAck',Term1},Bytes4}.

'enc_MasterSlaveDeterminationReject'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MasterSlaveDeterminationReject_cause(Enc2@element)
end].
'enc_MasterSlaveDeterminationReject_cause'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= identicalNumbers ->
<<0:1>>
end.

dec_MasterSlaveDeterminationReject_cause(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{identicalNumbers,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_MasterSlaveDeterminationReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_MasterSlaveDeterminationReject_cause'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MasterSlaveDeterminationReject',Term1},Bytes4}.

'enc_MasterSlaveDeterminationRelease'(Val) ->
<<0:1>>.


dec_MasterSlaveDeterminationRelease(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% Extensions
{Extensions,Bytes2} = case Ext of
0 -> {<<>>,Bytes1};
1 ->
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes3= skipextensions(Bytes2, 1, Extensions),
{{'MasterSlaveDeterminationRelease'},Bytes3}.

'enc_TerminalCapabilitySet'(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc5@element = element(2, Val),
if Enc5@element bsr 8 =:= 0 ->
Enc5@element;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(3, Val),
Enc8@bin = encode_oid(Enc7@element),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
encode_fragmented(Enc8@bin, 8)
end
end,
begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_MultiplexCapability(Enc9@element)
end
end,
begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_TerminalCapabilitySet_capabilityTable(Enc11@element)
end
end|begin
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_TerminalCapabilitySet_capabilityDescriptors(Enc13@element)
end
end].
'enc_TerminalCapabilitySet_capabilityTable'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_CapabilityTableEntry(Comp) || Comp <- Val]]
end.


dec_TerminalCapabilitySet_capabilityTable(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components1(V1@Add4, V1@Buf1, []).

'enc_TerminalCapabilitySet_capabilityDescriptors'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_CapabilityDescriptor(Comp) || Comp <- Val]]
end.


dec_TerminalCapabilitySet_capabilityDescriptors(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components2(V1@Add4, V1@Buf1, []).



dec_TerminalCapabilitySet(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type OBJECT IDENTIFIER
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:7,V4@Buf4/bitstring>> ->
{V4@V3,V4@Buf4};
<<1:1,0:1,V4@V4:14,V4@Buf5/bitstring>> ->
{V4@V4,V4@Buf5}
end,
<<V4@V6:V4@V0/binary-unit:8,V4@Buf7/bitstring>> = V4@Buf1,
V4@Conv8 = binary_to_list(V4@V6),
{V4@V9,V4@Buf10}  = {decode_oid(V4@Conv8),V4@Buf7},
{V4@V9,V4@Buf10}
end,

%% attribute number 3 with type MultiplexCapability
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
dec_MultiplexCapability(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SET OF
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
'dec_TerminalCapabilitySet_capabilityTable'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SET OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_TerminalCapabilitySet_capabilityDescriptors'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'TerminalCapabilitySet',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_CapabilityTableEntry'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
<<Enc2@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Capability(Enc4@element)
end
end].


dec_CapabilityTableEntry(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type Capability
{Term2,Bytes3} = case Opt band 1 of
1 ->
dec_Capability(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'CapabilityTableEntry',Term1,Term2},Bytes3}.

'enc_CapabilityDescriptor'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_CapabilityDescriptor_simultaneousCapabilities(Enc4@element)
end
end].
'enc_CapabilityDescriptor_simultaneousCapabilities'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_AlternativeCapabilitySet(Comp) || Comp <- Val]]
end.


dec_CapabilityDescriptor_simultaneousCapabilities(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components3(V1@Add4, V1@Buf1, []).



dec_CapabilityDescriptor(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type SET OF
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_CapabilityDescriptor_simultaneousCapabilities'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'CapabilityDescriptor',Term1,Term2},Bytes3}.

'enc_AlternativeCapabilitySet'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 8 =:= 0 ->
[align,
Enc2@len@sub|[begin
Comp@sub = Comp - 1,
if 0 =< Comp@sub, Comp@sub < 65535 ->
<<Comp@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.



dec_AlternativeCapabilitySet(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components4(V1@Add4, V1@Buf1, []).

'enc_CapabilityTableEntryNumber'(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 65535 ->
[align|<<Val@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CapabilityTableEntryNumber(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
{V1@Add4,V1@Buf1}
end.

'enc_CapabilityDescriptorNumber'(Val) ->
if Val bsr 8 =:= 0 ->
[align,
Val];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CapabilityDescriptorNumber(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_TerminalCapabilitySetAck'(Val) ->
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.


dec_TerminalCapabilitySetAck(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'TerminalCapabilitySetAck',Term1},Bytes4}.

'enc_TerminalCapabilitySetReject'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_TerminalCapabilitySetReject_cause(Enc4@element)
end].
'enc_TerminalCapabilitySetReject_cause'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= unspecified ->
<<0:1,0:2>>;
ChoiceTag =:= undefinedTableEntryUsed ->
<<0:1,1:2>>;
ChoiceTag =:= descriptorCapacityExceeded ->
<<0:1,2:2>>;
ChoiceTag =:= tableEntryCapacityExceeded ->
[<<0:1,3:2>>|enc_TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded(ChoiceVal)]
end.
'enc_TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= highestEntryNumberProcessed ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:1>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= noneProcessed ->
<<1:1>>
end.

dec_TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end
end,
{{highestEntryNumberProcessed,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{noneProcessed,Val},NewBytes}
end.

dec_TerminalCapabilitySetReject_cause(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unspecified,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefinedTableEntryUsed,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{descriptorCapacityExceeded,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
'dec_TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded'(Bytes2)
end,
{{tableEntryCapacityExceeded,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_TerminalCapabilitySetReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_TerminalCapabilitySetReject_cause'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'TerminalCapabilitySetReject',Term1,Term2},Bytes5}.

'enc_TerminalCapabilitySetRelease'(Val) ->
<<0:1>>.


dec_TerminalCapabilitySetRelease(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% Extensions
{Extensions,Bytes2} = case Ext of
0 -> {<<>>,Bytes1};
1 ->
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes3= skipextensions(Bytes2, 1, Extensions),
{{'TerminalCapabilitySetRelease'},Bytes3}.

'enc_Capability'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:4>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= receiveVideoCapability ->
[<<0:1,1:4>>|enc_VideoCapability(ChoiceVal)];
ChoiceTag =:= transmitVideoCapability ->
[<<0:1,2:4>>|enc_VideoCapability(ChoiceVal)];
ChoiceTag =:= receiveAndTransmitVideoCapability ->
[<<0:1,3:4>>|enc_VideoCapability(ChoiceVal)];
ChoiceTag =:= receiveAudioCapability ->
[<<0:1,4:4>>|enc_AudioCapability(ChoiceVal)];
ChoiceTag =:= transmitAudioCapability ->
[<<0:1,5:4>>|enc_AudioCapability(ChoiceVal)];
ChoiceTag =:= receiveAndTransmitAudioCapability ->
[<<0:1,6:4>>|enc_AudioCapability(ChoiceVal)];
ChoiceTag =:= receiveDataApplicationCapability ->
[<<0:1,7:4>>|enc_DataApplicationCapability(ChoiceVal)];
ChoiceTag =:= transmitDataApplicationCapability ->
[<<0:1,8:4>>|enc_DataApplicationCapability(ChoiceVal)];
ChoiceTag =:= receiveAndTransmitDataApplicationCapability ->
[<<0:1,9:4>>|enc_DataApplicationCapability(ChoiceVal)];
ChoiceTag =:= h233EncryptionTransmitCapability ->
if ChoiceVal =:= false ->
<<0:1,10:4,0:1>>;
ChoiceVal =:= true ->
<<0:1,10:4,1:1>>
end;
ChoiceTag =:= h233EncryptionReceiveCapability ->
[<<0:1,11:4>>|enc_Capability_h233EncryptionReceiveCapability(ChoiceVal)];
ChoiceTag =:= conferenceCapability ->
begin
Enc14@output = enc_ConferenceCapability(ChoiceVal),
Enc14@bin = complete(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[<<1:1,0:7>>,
align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc14@bin, 8)]
end
end;
ChoiceTag =:= h235SecurityCapability ->
begin
Enc15@output = enc_H235SecurityCapability(ChoiceVal),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[<<1:1,1:7>>,
align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc15@bin, 8)]
end
end;
ChoiceTag =:= maxPendingReplacementFor ->
begin
Enc17@output = if ChoiceVal bsr 8 =:= 0 ->
[ChoiceVal];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end,
Enc17@bin = iolist_to_binary(Enc17@output),
[<<1:1,2:7>>,
align,
1|Enc17@bin]
end;
ChoiceTag =:= receiveUserInputCapability ->
begin
Enc18@output = enc_UserInputCapability(ChoiceVal),
Enc18@bin = complete(Enc18@output),
Enc18@len = byte_size(Enc18@bin),
if Enc18@len < 128 ->
[<<1:1,3:7>>,
align,
Enc18@len|Enc18@bin];
Enc18@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc18@len:14>>|Enc18@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc18@bin, 8)]
end
end;
ChoiceTag =:= transmitUserInputCapability ->
begin
Enc19@output = enc_UserInputCapability(ChoiceVal),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[<<1:1,4:7>>,
align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc19@bin, 8)]
end
end;
ChoiceTag =:= receiveAndTransmitUserInputCapability ->
begin
Enc20@output = enc_UserInputCapability(ChoiceVal),
Enc20@bin = complete(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[<<1:1,5:7>>,
align,
Enc20@len|Enc20@bin];
Enc20@len < 16384 ->
[<<1:1,5:7>>,
align,
<<2:2,Enc20@len:14>>|Enc20@bin];
true ->
[<<1:1,5:7>>,
align|encode_fragmented(Enc20@bin, 8)]
end
end;
ChoiceTag =:= genericControlCapability ->
begin
Enc21@output = enc_GenericCapability(ChoiceVal),
Enc21@bin = complete(Enc21@output),
Enc21@len = byte_size(Enc21@bin),
if Enc21@len < 128 ->
[<<1:1,6:7>>,
align,
Enc21@len|Enc21@bin];
Enc21@len < 16384 ->
[<<1:1,6:7>>,
align,
<<2:2,Enc21@len:14>>|Enc21@bin];
true ->
[<<1:1,6:7>>,
align|encode_fragmented(Enc21@bin, 8)]
end
end;
ChoiceTag =:= receiveMultiplexedStreamCapability ->
begin
Enc22@output = enc_MultiplexedStreamCapability(ChoiceVal),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[<<1:1,7:7>>,
align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[<<1:1,7:7>>,
align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[<<1:1,7:7>>,
align|encode_fragmented(Enc22@bin, 8)]
end
end;
ChoiceTag =:= transmitMultiplexedStreamCapability ->
begin
Enc23@output = enc_MultiplexedStreamCapability(ChoiceVal),
Enc23@bin = complete(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[<<1:1,8:7>>,
align,
Enc23@len|Enc23@bin];
Enc23@len < 16384 ->
[<<1:1,8:7>>,
align,
<<2:2,Enc23@len:14>>|Enc23@bin];
true ->
[<<1:1,8:7>>,
align|encode_fragmented(Enc23@bin, 8)]
end
end;
ChoiceTag =:= receiveAndTransmitMultiplexedStreamCapability ->
begin
Enc24@output = enc_MultiplexedStreamCapability(ChoiceVal),
Enc24@bin = complete(Enc24@output),
Enc24@len = byte_size(Enc24@bin),
if Enc24@len < 128 ->
[<<1:1,9:7>>,
align,
Enc24@len|Enc24@bin];
Enc24@len < 16384 ->
[<<1:1,9:7>>,
align,
<<2:2,Enc24@len:14>>|Enc24@bin];
true ->
[<<1:1,9:7>>,
align|encode_fragmented(Enc24@bin, 8)]
end
end;
ChoiceTag =:= receiveRTPAudioTelephonyEventCapability ->
begin
Enc25@output = enc_AudioTelephonyEventCapability(ChoiceVal),
Enc25@bin = complete(Enc25@output),
Enc25@len = byte_size(Enc25@bin),
if Enc25@len < 128 ->
[<<1:1,10:7>>,
align,
Enc25@len|Enc25@bin];
Enc25@len < 16384 ->
[<<1:1,10:7>>,
align,
<<2:2,Enc25@len:14>>|Enc25@bin];
true ->
[<<1:1,10:7>>,
align|encode_fragmented(Enc25@bin, 8)]
end
end;
ChoiceTag =:= receiveRTPAudioToneCapability ->
begin
Enc26@output = enc_AudioToneCapability(ChoiceVal),
Enc26@bin = complete(Enc26@output),
Enc26@len = byte_size(Enc26@bin),
if Enc26@len < 128 ->
[<<1:1,11:7>>,
align,
Enc26@len|Enc26@bin];
Enc26@len < 16384 ->
[<<1:1,11:7>>,
align,
<<2:2,Enc26@len:14>>|Enc26@bin];
true ->
[<<1:1,11:7>>,
align|encode_fragmented(Enc26@bin, 8)]
end
end;
ChoiceTag =:= fecCapability ->
begin
Enc27@output = enc_FECCapability(ChoiceVal),
Enc27@bin = complete(Enc27@output),
Enc27@len = byte_size(Enc27@bin),
if Enc27@len < 128 ->
[<<1:1,12:7>>,
align,
Enc27@len|Enc27@bin];
Enc27@len < 16384 ->
[<<1:1,12:7>>,
align,
<<2:2,Enc27@len:14>>|Enc27@bin];
true ->
[<<1:1,12:7>>,
align|encode_fragmented(Enc27@bin, 8)]
end
end;
ChoiceTag =:= multiplePayloadStreamCapability ->
begin
Enc28@output = enc_MultiplePayloadStreamCapability(ChoiceVal),
Enc28@bin = complete(Enc28@output),
Enc28@len = byte_size(Enc28@bin),
if Enc28@len < 128 ->
[<<1:1,13:7>>,
align,
Enc28@len|Enc28@bin];
Enc28@len < 16384 ->
[<<1:1,13:7>>,
align,
<<2:2,Enc28@len:14>>|Enc28@bin];
true ->
[<<1:1,13:7>>,
align|encode_fragmented(Enc28@bin, 8)]
end
end
end.
'enc_Capability_h233EncryptionReceiveCapability'(Val) ->
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.

dec_Capability_h233EncryptionReceiveCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'Capability_h233EncryptionReceiveCapability',Term1},Bytes4}.



dec_Capability(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_VideoCapability(Bytes2)
end,
{{receiveVideoCapability,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_VideoCapability(Bytes2)
end,
{{transmitVideoCapability,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_VideoCapability(Bytes2)
end,
{{receiveAndTransmitVideoCapability,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_AudioCapability(Bytes2)
end,
{{receiveAudioCapability,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_AudioCapability(Bytes2)
end,
{{transmitAudioCapability,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_AudioCapability(Bytes2)
end,
{{receiveAndTransmitAudioCapability,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_DataApplicationCapability(Bytes2)
end,
{{receiveDataApplicationCapability,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_DataApplicationCapability(Bytes2)
end,
{{transmitDataApplicationCapability,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
dec_DataApplicationCapability(Bytes2)
end,
{{receiveAndTransmitDataApplicationCapability,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end
end,
{{h233EncryptionTransmitCapability,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
'dec_Capability_h233EncryptionReceiveCapability'(Bytes2)
end,
{{h233EncryptionReceiveCapability,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_ConferenceCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{conferenceCapability,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H235SecurityCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{h235SecurityCapability,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
V3@Pad2 = bit_size(V2@V0) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = V2@V0,
{V3@V0,V3@Buf1}
end,
{TmpVal,V2@Buf1}
end,
{{maxPendingReplacementFor,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_UserInputCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{receiveUserInputCapability,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_UserInputCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{transmitUserInputCapability,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_UserInputCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{receiveAndTransmitUserInputCapability,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_GenericCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{genericControlCapability,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MultiplexedStreamCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{receiveMultiplexedStreamCapability,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MultiplexedStreamCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{transmitMultiplexedStreamCapability,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MultiplexedStreamCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{receiveAndTransmitMultiplexedStreamCapability,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_AudioTelephonyEventCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{receiveRTPAudioTelephonyEventCapability,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_AudioToneCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{receiveRTPAudioToneCapability,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_FECCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{fecCapability,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MultiplePayloadStreamCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{multiplePayloadStreamCapability,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H235SecurityCapability'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_EncryptionAuthenticationAndIntegrity(Enc2@element)
end,
align|begin
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - 1,
if 0 =< Enc3@element@sub, Enc3@element@sub < 65535 ->
<<Enc3@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end].


dec_H235SecurityCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type EncryptionAuthenticationAndIntegrity
{Term1,Bytes2} = dec_EncryptionAuthenticationAndIntegrity(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'H235SecurityCapability',Term1,Term2},Bytes5}.

'enc_MultiplexCapability'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:2>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= h222Capability ->
[<<0:1,1:2>>|enc_H222Capability(ChoiceVal)];
ChoiceTag =:= h223Capability ->
[<<0:1,2:2>>|enc_H223Capability(ChoiceVal)];
ChoiceTag =:= v76Capability ->
[<<0:1,3:2>>|enc_V76Capability(ChoiceVal)];
ChoiceTag =:= h2250Capability ->
begin
Enc5@output = enc_H2250Capability(ChoiceVal),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[<<1:1,0:7>>,
align,
Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc5@bin, 8)]
end
end;
ChoiceTag =:= genericMultiplexCapability ->
begin
Enc6@output = enc_GenericCapability(ChoiceVal),
Enc6@bin = complete(Enc6@output),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[<<1:1,1:7>>,
align,
Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc6@bin, 8)]
end
end
end.


dec_MultiplexCapability(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_H222Capability(Bytes2)
end,
{{h222Capability,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_H223Capability(Bytes2)
end,
{{h223Capability,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_V76Capability(Bytes2)
end,
{{v76Capability,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H2250Capability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{h2250Capability,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_GenericCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{genericMultiplexCapability,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H222Capability'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if Enc2@element@sub bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_H222Capability_vcCapability(Enc4@element)
end].
'enc_H222Capability_vcCapability'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_VCCapability(Comp) || Comp <- Val]].


dec_H222Capability_vcCapability(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components5(V1@V0, V1@Buf1, []).



dec_H222Capability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type SET OF
{Term2,Bytes3} = 'dec_H222Capability_vcCapability'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'H222Capability',Term1,Term2},Bytes5}.

'enc_VCCapability'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 7, 8),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(3, Val),
if Enc2@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_VCCapability_aal1(Enc5@element)
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_VCCapability_aal5(Enc7@element)
end
end,
begin
Enc9@element = element(4, Val),
Enc11@element = element(5, Val),
if Enc9@element =:= false ->
if Enc11@element =:= false ->
<<0:1,0:1>>;
Enc11@element =:= true ->
<<0:1,1:1>>
end;
Enc9@element =:= true ->
if Enc11@element =:= false ->
<<1:1,0:1>>;
Enc11@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@element = element(6, Val),
enc_VCCapability_availableBitRates(Enc13@element)
end,
Extensions|begin
Enc14@element = element(7, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@output = enc_VCCapability_aal1ViaGateway(Enc14@element),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[align|encode_fragmented(Enc15@bin, 8)]
end
end
end
end].
'enc_VCCapability_aal1'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc4@element = element(3, Val),
if Enc2@element =:= false ->
if Enc4@element =:= false ->
<<0:1,0:1,0:1>>;
Enc4@element =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@element =:= true ->
if Enc4@element =:= false ->
<<0:1,1:1,0:1>>;
Enc4@element =:= true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc6@element = element(4, Val),
Enc8@element = element(5, Val),
if Enc6@element =:= false ->
if Enc8@element =:= false ->
<<0:1,0:1>>;
Enc8@element =:= true ->
<<0:1,1:1>>
end;
Enc6@element =:= true ->
if Enc8@element =:= false ->
<<1:1,0:1>>;
Enc8@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(6, Val),
Enc12@element = element(7, Val),
if Enc10@element =:= false ->
if Enc12@element =:= false ->
<<0:1,0:1>>;
Enc12@element =:= true ->
<<0:1,1:1>>
end;
Enc10@element =:= true ->
if Enc12@element =:= false ->
<<1:1,0:1>>;
Enc12@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc14@element = element(8, Val),
Enc16@element = element(9, Val),
if Enc14@element =:= false ->
if Enc16@element =:= false ->
<<0:1,0:1>>;
Enc16@element =:= true ->
<<0:1,1:1>>
end;
Enc14@element =:= true ->
if Enc16@element =:= false ->
<<1:1,0:1>>;
Enc16@element =:= true ->
<<1:1,1:1>>
end
end
end|begin
Enc18@element = element(10, Val),
if Enc18@element =:= false ->
<<0:1>>;
Enc18@element =:= true ->
<<1:1>>
end
end].

dec_VCCapability_aal1(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes10} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes9,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V11@V0,V11@Buf1} = case Bytes10 of
<<0:1,V11@V3:6,V11@Buf4/bitstring>> ->
V11@Add5 = V11@V3 + 1,
{V11@Add5,V11@Buf4};
<<1:1,V11@Buf2/bitstring>> ->
V11@Pad6 = bit_size(V11@Buf2) band 7,
{V11@V3,V11@Buf4} = case V11@Buf2 of
<<_:V11@Pad6,0:1,V11@V8:7,V11@Buf9/bitstring>> when V11@V8 =/= 0 ->
{V11@V8,V11@Buf9};
<<_:V11@Pad6,1:1,0:1,V11@V9:14,V11@Buf10/bitstring>> when V11@V9 =/= 0 ->
{V11@V9,V11@Buf10}
end,
{V11@V3,V11@Buf4}
end,
<<V11@V11:V11@V0/bitstring-unit:1,V11@Buf12/bitstring>> = V11@Buf1,
{V11@V11,V11@Buf12}
end,
Bytes12= skipextensions(Bytes11, 1, Extensions),
{{'VCCapability_aal1',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},Bytes12}.

'enc_VCCapability_aal5'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element bsr 16 =:= 0 ->
<<Enc4@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].

dec_VCCapability_aal5(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'VCCapability_aal5',Term1,Term2},Bytes5}.

'enc_VCCapability_availableBitRates'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_VCCapability_availableBitRates_type(Enc2@element)
end].
'enc_VCCapability_availableBitRates_type'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= singleBitRate ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:1>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= rangeOfBitRates ->
[<<1:1>>|enc_VCCapability_availableBitRates_type_rangeOfBitRates(ChoiceVal)]
end.
'enc_VCCapability_availableBitRates_type_rangeOfBitRates'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - 1,
if 0 =< Enc1@element@sub, Enc1@element@sub < 65535 ->
<<Enc1@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - 1,
if 0 =< Enc3@element@sub, Enc3@element@sub < 65535 ->
<<Enc3@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end].

dec_VCCapability_availableBitRates_type_rangeOfBitRates(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
{V1@Add4,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,
{{'VCCapability_availableBitRates_type_rangeOfBitRates',Term1,Term2},Bytes2}.


dec_VCCapability_availableBitRates_type(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end
end,
{{singleBitRate,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_VCCapability_availableBitRates_type_rangeOfBitRates'(Bytes1)
end,
{{rangeOfBitRates,Val},NewBytes}
end.

dec_VCCapability_availableBitRates(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_VCCapability_availableBitRates_type'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'VCCapability_availableBitRates',Term1},Bytes4}.

'enc_VCCapability_aal1ViaGateway'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_VCCapability_aal1ViaGateway_gatewayAddress(Enc2@element)
end,
begin
Enc3@element = element(3, Val),
Enc5@element = element(4, Val),
if Enc3@element =:= false ->
if Enc5@element =:= false ->
<<0:1,0:1>>;
Enc5@element =:= true ->
<<0:1,1:1>>
end;
Enc3@element =:= true ->
if Enc5@element =:= false ->
<<1:1,0:1>>;
Enc5@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(5, Val),
Enc9@element = element(6, Val),
if Enc7@element =:= false ->
if Enc9@element =:= false ->
<<0:1,0:1>>;
Enc9@element =:= true ->
<<0:1,1:1>>
end;
Enc7@element =:= true ->
if Enc9@element =:= false ->
<<1:1,0:1>>;
Enc9@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@element = element(7, Val),
Enc13@element = element(8, Val),
if Enc11@element =:= false ->
if Enc13@element =:= false ->
<<0:1,0:1>>;
Enc13@element =:= true ->
<<0:1,1:1>>
end;
Enc11@element =:= true ->
if Enc13@element =:= false ->
<<1:1,0:1>>;
Enc13@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc15@element = element(9, Val),
Enc17@element = element(10, Val),
if Enc15@element =:= false ->
if Enc17@element =:= false ->
<<0:1,0:1>>;
Enc17@element =:= true ->
<<0:1,1:1>>
end;
Enc15@element =:= true ->
if Enc17@element =:= false ->
<<1:1,0:1>>;
Enc17@element =:= true ->
<<1:1,1:1>>
end
end
end|begin
Enc19@element = element(11, Val),
if Enc19@element =:= false ->
<<0:1>>;
Enc19@element =:= true ->
<<1:1>>
end
end].
'enc_VCCapability_aal1ViaGateway_gatewayAddress'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_Q2931Address(Comp) || Comp <- Val]]
end.


dec_VCCapability_aal1ViaGateway_gatewayAddress(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components6(V1@Add4, V1@Buf1, []).


dec_VCCapability_aal1ViaGateway(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SET OF
{Term1,Bytes2} = 'dec_VCCapability_aal1ViaGateway_gatewayAddress'(Bytes1),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes3,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes4,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes5,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes6,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes7,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes9} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes8,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes10} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes9,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes11} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes10,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% Extensions
{Extensions,Bytes12} = case Ext of
0 -> {<<>>,Bytes11};
1 ->
{V11@V0,V11@Buf1} = case Bytes11 of
<<0:1,V11@V3:6,V11@Buf4/bitstring>> ->
V11@Add5 = V11@V3 + 1,
{V11@Add5,V11@Buf4};
<<1:1,V11@Buf2/bitstring>> ->
V11@Pad6 = bit_size(V11@Buf2) band 7,
{V11@V3,V11@Buf4} = case V11@Buf2 of
<<_:V11@Pad6,0:1,V11@V8:7,V11@Buf9/bitstring>> when V11@V8 =/= 0 ->
{V11@V8,V11@Buf9};
<<_:V11@Pad6,1:1,0:1,V11@V9:14,V11@Buf10/bitstring>> when V11@V9 =/= 0 ->
{V11@V9,V11@Buf10}
end,
{V11@V3,V11@Buf4}
end,
<<V11@V11:V11@V0/bitstring-unit:1,V11@Buf12/bitstring>> = V11@Buf1,
{V11@V11,V11@Buf12}
end,
Bytes13= skipextensions(Bytes12, 1, Extensions),
{{'VCCapability_aal1ViaGateway',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},Bytes13}.



dec_VCCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
'dec_VCCapability_aal1'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_VCCapability_aal5'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes5} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes4,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes5,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 5 with type SEQUENCE
{Term5,Bytes7} = 'dec_VCCapability_availableBitRates'(Bytes6),

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 6 with type SEQUENCE
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes8) band 7,
{V6@V0,V6@Buf1} = case Bytes8 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx6,_} = 'dec_VCCapability_aal1ViaGateway'(V6@V0),
{TmpValx6,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,
Bytes10= skipextensions(Bytes9, 2, Extensions),
{{'VCCapability',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_H223Capability'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 16, 22),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<5:7,Enc1@bitmap:6>>
end,
[begin
Enc3@element = element(2, Val),
if Extensions =:= [] ->
if Enc3@element =:= false ->
<<0:1,0:1>>;
Enc3@element =:= true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= false ->
<<1:1,0:1>>;
Enc3@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(3, Val),
Enc7@element = element(4, Val),
if Enc5@element =:= false ->
if Enc7@element =:= false ->
<<0:1,0:1>>;
Enc7@element =:= true ->
<<0:1,1:1>>
end;
Enc5@element =:= true ->
if Enc7@element =:= false ->
<<1:1,0:1>>;
Enc7@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(5, Val),
Enc11@element = element(6, Val),
if Enc9@element =:= false ->
if Enc11@element =:= false ->
<<0:1,0:1>>;
Enc11@element =:= true ->
<<0:1,1:1>>
end;
Enc9@element =:= true ->
if Enc11@element =:= false ->
<<1:1,0:1>>;
Enc11@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@element = element(7, Val),
Enc15@element = element(8, Val),
if Enc13@element =:= false ->
if Enc15@element =:= false ->
<<0:1,0:1>>;
Enc15@element =:= true ->
<<0:1,1:1>>
end;
Enc13@element =:= true ->
if Enc15@element =:= false ->
<<1:1,0:1>>;
Enc15@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc17@element = element(9, Val),
Enc19@element = element(10, Val),
if Enc17@element =:= false ->
if Enc19@element =:= false ->
<<0:1,0:1>>;
Enc19@element =:= true ->
<<0:1,1:1>>
end;
Enc17@element =:= true ->
if Enc19@element =:= false ->
<<1:1,0:1>>;
Enc19@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc21@element = element(11, Val),
if Enc21@element =:= false ->
<<0:1>>;
Enc21@element =:= true ->
<<1:1>>
end
end,
align,
begin
Enc23@element = element(12, Val),
if Enc23@element bsr 16 =:= 0 ->
<<Enc23@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc23@element}}})
end
end,
begin
Enc25@element = element(13, Val),
if Enc25@element bsr 16 =:= 0 ->
<<Enc25@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc25@element}}})
end
end,
begin
Enc27@element = element(14, Val),
if Enc27@element bsr 10 =:= 0 ->
<<Enc27@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc27@element}}})
end
end,
begin
Enc29@element = element(15, Val),
enc_H223Capability_h223MultiplexTableCapability(Enc29@element)
end,
Extensions,
begin
Enc30@element = element(16, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc32@output = if Enc30@element =:= false ->
<<0:1,0:7>>;
Enc30@element =:= true ->
<<1:1,0:7>>
end,
Enc32@bin = Enc32@output,
[align,
1|Enc32@bin]
end
end
end,
begin
Enc34@element = element(17, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc36@output = if Enc34@element =:= false ->
<<0:1,0:7>>;
Enc34@element =:= true ->
<<1:1,0:7>>
end,
Enc36@bin = Enc36@output,
[align,
1|Enc36@bin]
end
end
end,
begin
Enc38@element = element(18, Val),
if Enc38@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc39@output = enc_H223Capability_mobileOperationTransmitCapability(Enc38@element),
Enc39@bin = complete(Enc39@output),
Enc39@len = byte_size(Enc39@bin),
if Enc39@len < 128 ->
[align,
Enc39@len|Enc39@bin];
Enc39@len < 16384 ->
[align,
<<2:2,Enc39@len:14>>|Enc39@bin];
true ->
[align|encode_fragmented(Enc39@bin, 8)]
end
end
end
end,
begin
Enc41@element = element(19, Val),
if Enc41@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc42@output = enc_H223AnnexCCapability(Enc41@element),
Enc42@bin = complete(Enc42@output),
Enc42@len = byte_size(Enc42@bin),
if Enc42@len < 128 ->
[align,
Enc42@len|Enc42@bin];
Enc42@len < 16384 ->
[align,
<<2:2,Enc42@len:14>>|Enc42@bin];
true ->
[align|encode_fragmented(Enc42@bin, 8)]
end
end
end
end,
begin
Enc44@element = element(20, Val),
if Enc44@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc46@output = begin
Enc44@element@sub = Enc44@element - 1,
if 0 =< Enc44@element@sub, Enc44@element@sub < 19200 ->
<<Enc44@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc44@element}}})
end
end,
Enc46@bin = Enc46@output,
[align,
2|Enc46@bin]
end
end
end|begin
Enc48@element = element(21, Val),
if Enc48@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc49@output = enc_H223Capability_mobileMultilinkFrameCapability(Enc48@element),
Enc49@bin = complete(Enc49@output),
Enc49@len = byte_size(Enc49@bin),
if Enc49@len < 128 ->
[align,
Enc49@len|Enc49@bin];
Enc49@len < 16384 ->
[align,
<<2:2,Enc49@len:14>>|Enc49@bin];
true ->
[align|encode_fragmented(Enc49@bin, 8)]
end
end
end
end].
'enc_H223Capability_h223MultiplexTableCapability'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= basic ->
<<0:1>>;
ChoiceTag =:= enhanced ->
[<<1:1>>|enc_H223Capability_h223MultiplexTableCapability_enhanced(ChoiceVal)]
end.
'enc_H223Capability_h223MultiplexTableCapability_enhanced'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 15 ->
<<0:1,Enc2@element@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 2,
if 0 =< Enc4@element@sub, Enc4@element@sub < 254 ->
Enc4@element@sub;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc6@element@sub = Enc6@element - 2,
if 0 =< Enc6@element@sub, Enc6@element@sub < 254 ->
[Enc6@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end].

dec_H223Capability_h223MultiplexTableCapability_enhanced(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:4/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 2,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:8/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 2,
{V4@Add2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'H223Capability_h223MultiplexTableCapability_enhanced',Term1,Term2,Term3},Bytes6}.


dec_H223Capability_h223MultiplexTableCapability(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{basic,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_H223Capability_h223MultiplexTableCapability_enhanced'(Bytes1)
end,
{{enhanced,Val},NewBytes}
end.
'enc_H223Capability_mobileOperationTransmitCapability'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc4@element = element(3, Val),
if Enc2@element =:= false ->
if Enc4@element =:= false ->
<<0:1,0:1,0:1>>;
Enc4@element =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@element =:= true ->
if Enc4@element =:= false ->
<<0:1,1:1,0:1>>;
Enc4@element =:= true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc6@element = element(4, Val),
Enc8@element = element(5, Val),
if Enc6@element =:= false ->
if Enc8@element =:= false ->
<<0:1,0:1>>;
Enc8@element =:= true ->
<<0:1,1:1>>
end;
Enc6@element =:= true ->
if Enc8@element =:= false ->
<<1:1,0:1>>;
Enc8@element =:= true ->
<<1:1,1:1>>
end
end
end|begin
Enc10@element = element(6, Val),
if Enc10@element =:= false ->
<<0:1>>;
Enc10@element =:= true ->
<<1:1>>
end
end].

dec_H223Capability_mobileOperationTransmitCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'H223Capability_mobileOperationTransmitCapability',Term1,Term2,Term3,Term4,Term5},Bytes8}.

'enc_H223Capability_mobileMultilinkFrameCapability'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 255 ->
[<<0:1,Enc2@element@sub:8>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
align|begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65025 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].

dec_H223Capability_mobileMultilinkFrameCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:8/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'H223Capability_mobileMultilinkFrameCapability',Term1,Term2},Bytes5}.



dec_H223Capability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes10} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes9,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes11} = begin
<<V11@V0:1,V11@Buf1/bitstring>> = Bytes10,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end,

%% attribute number 11 with type INTEGER
{Term11,Bytes12} = begin
V12@Pad2 = bit_size(Bytes11) band 7,
<<_:V12@Pad2,V12@V0:2/unsigned-unit:8,V12@Buf1/bitstring>> = Bytes11,
{V12@V0,V12@Buf1}
end,

%% attribute number 12 with type INTEGER
{Term12,Bytes13} = begin
<<V13@V0:2/unsigned-unit:8,V13@Buf1/bitstring>> = Bytes12,
{V13@V0,V13@Buf1}
end,

%% attribute number 13 with type INTEGER
{Term13,Bytes14} = begin
<<V14@V0:2/unsigned-unit:8,V14@Buf1/bitstring>> = Bytes13,
{V14@V0,V14@Buf1}
end,

%% attribute number 14 with type CHOICE
{Term14,Bytes15} = 'dec_H223Capability_h223MultiplexTableCapability'(Bytes14),

%% Extensions
{Extensions,Bytes16} = case Ext of
0 -> {<<>>,Bytes15};
1 ->
{V15@V0,V15@Buf1} = case Bytes15 of
<<0:1,V15@V3:6,V15@Buf4/bitstring>> ->
V15@Add5 = V15@V3 + 1,
{V15@Add5,V15@Buf4};
<<1:1,V15@Buf2/bitstring>> ->
V15@Pad6 = bit_size(V15@Buf2) band 7,
{V15@V3,V15@Buf4} = case V15@Buf2 of
<<_:V15@Pad6,0:1,V15@V8:7,V15@Buf9/bitstring>> when V15@V8 =/= 0 ->
{V15@V8,V15@Buf9};
<<_:V15@Pad6,1:1,0:1,V15@V9:14,V15@Buf10/bitstring>> when V15@V9 =/= 0 ->
{V15@V9,V15@Buf10}
end,
{V15@V3,V15@Buf4}
end,
<<V15@V11:V15@V0/bitstring-unit:1,V15@Buf12/bitstring>> = V15@Buf1,
{V15@V11,V15@Buf12}
end,

%% attribute number 15 with type BOOLEAN
{Term15,Bytes17} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes16) band 7,
{V16@V0,V16@Buf1} = case Bytes16 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx15,_} = begin
<<V17@V0:1,V17@Buf1/bitstring>> = V16@V0,
V17@Int2 = case V17@V0 of
0 -> false;
1 -> true
end,
{V17@Int2,V17@Buf1}
end,
{TmpValx15,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 16 with type BOOLEAN
{Term16,Bytes18} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V18@Pad3 = bit_size(Bytes17) band 7,
{V18@V0,V18@Buf1} = case Bytes17 of
<<_:V18@Pad3,0:1,V18@V5:7,V18@V7:V18@V5/binary-unit:8,V18@Buf8/bitstring>> ->
{V18@V7,V18@Buf8};
<<_:V18@Pad3,1:1,0:1,V18@V6:14,V18@V8:V18@V6/binary-unit:8,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<_:V18@Pad3,1:1,1:1,V18@V6:6,V18@Buf7/bitstring>> ->
{V18@V8,V18@Buf9}  = decode_fragmented(V18@V6, V18@Buf7, 8),
{V18@V8,V18@Buf9}
end,
{TmpValx16,_} = begin
<<V19@V0:1,V19@Buf1/bitstring>> = V18@V0,
V19@Int2 = case V19@V0 of
0 -> false;
1 -> true
end,
{V19@Int2,V19@Buf1}
end,
{TmpValx16,V18@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 17 with type SEQUENCE
{Term17,Bytes19} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V20@Pad3 = bit_size(Bytes18) band 7,
{V20@V0,V20@Buf1} = case Bytes18 of
<<_:V20@Pad3,0:1,V20@V5:7,V20@V7:V20@V5/binary-unit:8,V20@Buf8/bitstring>> ->
{V20@V7,V20@Buf8};
<<_:V20@Pad3,1:1,0:1,V20@V6:14,V20@V8:V20@V6/binary-unit:8,V20@Buf9/bitstring>> ->
{V20@V8,V20@Buf9};
<<_:V20@Pad3,1:1,1:1,V20@V6:6,V20@Buf7/bitstring>> ->
{V20@V8,V20@Buf9}  = decode_fragmented(V20@V6, V20@Buf7, 8),
{V20@V8,V20@Buf9}
end,
{TmpValx17,_} = 'dec_H223Capability_mobileOperationTransmitCapability'(V20@V0),
{TmpValx17,V20@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 18 with type H223AnnexCCapability
{Term18,Bytes20} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V21@Pad3 = bit_size(Bytes19) band 7,
{V21@V0,V21@Buf1} = case Bytes19 of
<<_:V21@Pad3,0:1,V21@V5:7,V21@V7:V21@V5/binary-unit:8,V21@Buf8/bitstring>> ->
{V21@V7,V21@Buf8};
<<_:V21@Pad3,1:1,0:1,V21@V6:14,V21@V8:V21@V6/binary-unit:8,V21@Buf9/bitstring>> ->
{V21@V8,V21@Buf9};
<<_:V21@Pad3,1:1,1:1,V21@V6:6,V21@Buf7/bitstring>> ->
{V21@V8,V21@Buf9}  = decode_fragmented(V21@V6, V21@Buf7, 8),
{V21@V8,V21@Buf9}
end,
{TmpValx18,_} = dec_H223AnnexCCapability(V21@V0),
{TmpValx18,V21@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 19 with type INTEGER
{Term19,Bytes21} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V22@Pad3 = bit_size(Bytes20) band 7,
{V22@V0,V22@Buf1} = case Bytes20 of
<<_:V22@Pad3,0:1,V22@V5:7,V22@V7:V22@V5/binary-unit:8,V22@Buf8/bitstring>> ->
{V22@V7,V22@Buf8};
<<_:V22@Pad3,1:1,0:1,V22@V6:14,V22@V8:V22@V6/binary-unit:8,V22@Buf9/bitstring>> ->
{V22@V8,V22@Buf9};
<<_:V22@Pad3,1:1,1:1,V22@V6:6,V22@Buf7/bitstring>> ->
{V22@V8,V22@Buf9}  = decode_fragmented(V22@V6, V22@Buf7, 8),
{V22@V8,V22@Buf9}
end,
{TmpValx19,_} = begin
V23@Pad2 = bit_size(V22@V0) band 7,
<<_:V23@Pad2,V23@V0:2/unsigned-unit:8,V23@Buf1/bitstring>> = V22@V0,
V23@Add4 = V23@V0 + 1,
{V23@Add4,V23@Buf1}
end,
{TmpValx19,V22@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute number 20 with type SEQUENCE
{Term20,Bytes22} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V24@Pad3 = bit_size(Bytes21) band 7,
{V24@V0,V24@Buf1} = case Bytes21 of
<<_:V24@Pad3,0:1,V24@V5:7,V24@V7:V24@V5/binary-unit:8,V24@Buf8/bitstring>> ->
{V24@V7,V24@Buf8};
<<_:V24@Pad3,1:1,0:1,V24@V6:14,V24@V8:V24@V6/binary-unit:8,V24@Buf9/bitstring>> ->
{V24@V8,V24@Buf9};
<<_:V24@Pad3,1:1,1:1,V24@V6:6,V24@Buf7/bitstring>> ->
{V24@V8,V24@Buf9}  = decode_fragmented(V24@V6, V24@Buf7, 8),
{V24@V8,V24@Buf9}
end,
{TmpValx20,_} = 'dec_H223Capability_mobileMultilinkFrameCapability'(V24@V0),
{TmpValx20,V24@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes21}
end,
Bytes23= skipextensions(Bytes22, 7, Extensions),
{{'H223Capability',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20},Bytes23}.

'enc_H223AnnexCCapability'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 15, 16),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc3@element = element(2, Val),
if Extensions =:= [] ->
if Enc3@element =:= false ->
<<0:1,0:1>>;
Enc3@element =:= true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= false ->
<<1:1,0:1>>;
Enc3@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(3, Val),
Enc7@element = element(4, Val),
if Enc5@element =:= false ->
if Enc7@element =:= false ->
<<0:1,0:1>>;
Enc7@element =:= true ->
<<0:1,1:1>>
end;
Enc5@element =:= true ->
if Enc7@element =:= false ->
<<1:1,0:1>>;
Enc7@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(5, Val),
Enc11@element = element(6, Val),
if Enc9@element =:= false ->
if Enc11@element =:= false ->
<<0:1,0:1>>;
Enc11@element =:= true ->
<<0:1,1:1>>
end;
Enc9@element =:= true ->
if Enc11@element =:= false ->
<<1:1,0:1>>;
Enc11@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@element = element(7, Val),
Enc15@element = element(8, Val),
if Enc13@element =:= false ->
if Enc15@element =:= false ->
<<0:1,0:1>>;
Enc15@element =:= true ->
<<0:1,1:1>>
end;
Enc13@element =:= true ->
if Enc15@element =:= false ->
<<1:1,0:1>>;
Enc15@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc17@element = element(9, Val),
Enc19@element = element(10, Val),
if Enc17@element =:= false ->
if Enc19@element =:= false ->
<<0:1,0:1>>;
Enc19@element =:= true ->
<<0:1,1:1>>
end;
Enc17@element =:= true ->
if Enc19@element =:= false ->
<<1:1,0:1>>;
Enc19@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc21@element = element(11, Val),
if Enc21@element =:= false ->
<<0:1>>;
Enc21@element =:= true ->
<<1:1>>
end
end,
align,
begin
Enc23@element = element(12, Val),
if Enc23@element bsr 16 =:= 0 ->
<<Enc23@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc23@element}}})
end
end,
begin
Enc25@element = element(13, Val),
if Enc25@element bsr 16 =:= 0 ->
<<Enc25@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc25@element}}})
end
end,
begin
Enc27@element = element(14, Val),
if Enc27@element bsr 16 =:= 0 ->
<<Enc27@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc27@element}}})
end
end,
Extensions|begin
Enc29@element = element(15, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@output = if Enc29@element =:= false ->
<<0:1,0:7>>;
Enc29@element =:= true ->
<<1:1,0:7>>
end,
Enc31@bin = Enc31@output,
[align,
1|Enc31@bin]
end
end
end].


dec_H223AnnexCCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes10} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes9,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes11} = begin
<<V11@V0:1,V11@Buf1/bitstring>> = Bytes10,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end,

%% attribute number 11 with type INTEGER
{Term11,Bytes12} = begin
V12@Pad2 = bit_size(Bytes11) band 7,
<<_:V12@Pad2,V12@V0:2/unsigned-unit:8,V12@Buf1/bitstring>> = Bytes11,
{V12@V0,V12@Buf1}
end,

%% attribute number 12 with type INTEGER
{Term12,Bytes13} = begin
<<V13@V0:2/unsigned-unit:8,V13@Buf1/bitstring>> = Bytes12,
{V13@V0,V13@Buf1}
end,

%% attribute number 13 with type INTEGER
{Term13,Bytes14} = begin
<<V14@V0:2/unsigned-unit:8,V14@Buf1/bitstring>> = Bytes13,
{V14@V0,V14@Buf1}
end,

%% Extensions
{Extensions,Bytes15} = case Ext of
0 -> {<<>>,Bytes14};
1 ->
{V15@V0,V15@Buf1} = case Bytes14 of
<<0:1,V15@V3:6,V15@Buf4/bitstring>> ->
V15@Add5 = V15@V3 + 1,
{V15@Add5,V15@Buf4};
<<1:1,V15@Buf2/bitstring>> ->
{V15@V3,V15@Buf4} = case V15@Buf2 of
<<_:7,0:1,V15@V7:7,V15@Buf8/bitstring>> when V15@V7 =/= 0 ->
{V15@V7,V15@Buf8};
<<_:7,1:1,0:1,V15@V8:14,V15@Buf9/bitstring>> when V15@V8 =/= 0 ->
{V15@V8,V15@Buf9}
end,
{V15@V3,V15@Buf4}
end,
<<V15@V10:V15@V0/bitstring-unit:1,V15@Buf11/bitstring>> = V15@Buf1,
{V15@V10,V15@Buf11}
end,

%% attribute number 14 with type BOOLEAN
{Term14,Bytes16} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes15) band 7,
{V16@V0,V16@Buf1} = case Bytes15 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx14,_} = begin
<<V17@V0:1,V17@Buf1/bitstring>> = V16@V0,
V17@Int2 = case V17@V0 of
0 -> false;
1 -> true
end,
{V17@Int2,V17@Buf1}
end,
{TmpValx14,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,
Bytes17= skipextensions(Bytes16, 2, Extensions),
{{'H223AnnexCCapability',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14},Bytes17}.

'enc_V76Capability'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc4@element = element(3, Val),
if Enc2@element =:= false ->
if Enc4@element =:= false ->
<<0:1,0:1,0:1>>;
Enc4@element =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@element =:= true ->
if Enc4@element =:= false ->
<<0:1,1:1,0:1>>;
Enc4@element =:= true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc6@element = element(4, Val),
Enc8@element = element(5, Val),
if Enc6@element =:= false ->
if Enc8@element =:= false ->
<<0:1,0:1>>;
Enc8@element =:= true ->
<<0:1,1:1>>
end;
Enc6@element =:= true ->
if Enc8@element =:= false ->
<<1:1,0:1>>;
Enc8@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(6, Val),
Enc12@element = element(7, Val),
if Enc10@element =:= false ->
if Enc12@element =:= false ->
<<0:1,0:1>>;
Enc12@element =:= true ->
<<0:1,1:1>>
end;
Enc10@element =:= true ->
if Enc12@element =:= false ->
<<1:1,0:1>>;
Enc12@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc14@element = element(8, Val),
Enc16@element = element(9, Val),
if Enc14@element =:= false ->
if Enc16@element =:= false ->
<<0:1,0:1>>;
Enc16@element =:= true ->
<<0:1,1:1>>
end;
Enc14@element =:= true ->
if Enc16@element =:= false ->
<<1:1,0:1>>;
Enc16@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc18@element = element(10, Val),
if Enc18@element =:= false ->
<<0:1>>;
Enc18@element =:= true ->
<<1:1>>
end
end,
align,
begin
Enc20@element = element(11, Val),
Enc20@element@sub = Enc20@element - 2,
if 0 =< Enc20@element@sub, Enc20@element@sub < 8190 ->
<<Enc20@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc20@element}}})
end
end,
begin
Enc22@element = element(12, Val),
Enc24@element = element(13, Val),
if Enc22@element =:= false ->
if Enc24@element =:= false ->
<<0:1,0:1,0:6>>;
Enc24@element =:= true ->
<<0:1,1:1,0:6>>
end;
Enc22@element =:= true ->
if Enc24@element =:= false ->
<<1:1,0:1,0:6>>;
Enc24@element =:= true ->
<<1:1,1:1,0:6>>
end
end
end,
begin
Enc26@element = element(14, Val),
Enc26@element@sub = Enc26@element - 1,
if 0 =< Enc26@element@sub, Enc26@element@sub < 4095 ->
<<Enc26@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc26@element}}})
end
end,
begin
Enc28@element = element(15, Val),
Enc28@element@sub = Enc28@element - 1,
if 0 =< Enc28@element@sub, Enc28@element@sub < 127 ->
<<Enc28@element@sub:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc28@element}}})
end
end|begin
Enc30@element = element(16, Val),
enc_V75Capability(Enc30@element)
end].


dec_V76Capability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes10} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes9,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% attribute number 10 with type INTEGER
{Term10,Bytes11} = begin
V11@Pad2 = bit_size(Bytes10) band 7,
<<_:V11@Pad2,V11@V0:2/unsigned-unit:8,V11@Buf1/bitstring>> = Bytes10,
V11@Add4 = V11@V0 + 2,
{V11@Add4,V11@Buf1}
end,

%% attribute number 11 with type BOOLEAN
{Term11,Bytes12} = begin
<<V12@V0:1,V12@Buf1/bitstring>> = Bytes11,
V12@Int2 = case V12@V0 of
0 -> false;
1 -> true
end,
{V12@Int2,V12@Buf1}
end,

%% attribute number 12 with type BOOLEAN
{Term12,Bytes13} = begin
<<V13@V0:1,V13@Buf1/bitstring>> = Bytes12,
V13@Int2 = case V13@V0 of
0 -> false;
1 -> true
end,
{V13@Int2,V13@Buf1}
end,

%% attribute number 13 with type INTEGER
{Term13,Bytes14} = begin
<<_:6,V14@V0:2/unsigned-unit:8,V14@Buf1/bitstring>> = Bytes13,
V14@Add3 = V14@V0 + 1,
{V14@Add3,V14@Buf1}
end,

%% attribute number 14 with type INTEGER
{Term14,Bytes15} = begin
<<V15@V0:7/unsigned-unit:1,V15@Buf1/bitstring>> = Bytes14,
V15@Add2 = V15@V0 + 1,
{V15@Add2,V15@Buf1}
end,

%% attribute number 15 with type V75Capability
{Term15,Bytes16} = dec_V75Capability(Bytes15),

%% Extensions
{Extensions,Bytes17} = case Ext of
0 -> {<<>>,Bytes16};
1 ->
{V16@V0,V16@Buf1} = case Bytes16 of
<<0:1,V16@V3:6,V16@Buf4/bitstring>> ->
V16@Add5 = V16@V3 + 1,
{V16@Add5,V16@Buf4};
<<1:1,V16@Buf2/bitstring>> ->
V16@Pad6 = bit_size(V16@Buf2) band 7,
{V16@V3,V16@Buf4} = case V16@Buf2 of
<<_:V16@Pad6,0:1,V16@V8:7,V16@Buf9/bitstring>> when V16@V8 =/= 0 ->
{V16@V8,V16@Buf9};
<<_:V16@Pad6,1:1,0:1,V16@V9:14,V16@Buf10/bitstring>> when V16@V9 =/= 0 ->
{V16@V9,V16@Buf10}
end,
{V16@V3,V16@Buf4}
end,
<<V16@V11:V16@V0/bitstring-unit:1,V16@Buf12/bitstring>> = V16@Buf1,
{V16@V11,V16@Buf12}
end,
Bytes18= skipextensions(Bytes17, 1, Extensions),
{{'V76Capability',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15},Bytes18}.

'enc_V75Capability'(Val) ->
Enc2@element = element(2, Val),
if Enc2@element =:= false ->
<<0:1,0:1>>;
Enc2@element =:= true ->
<<0:1,1:1>>
end.


dec_V75Capability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'V75Capability',Term1},Bytes4}.

'enc_H2250Capability'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 9, 13),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<3:7,Enc1@bitmap:4>>
end,
[if Extensions =:= [] ->
<<0:1>>;
true ->
<<1:1>>
end,
align,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 10 =:= 0 ->
<<Enc3@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
begin
Enc5@element = element(3, Val),
enc_MultipointCapability(Enc5@element)
end,
begin
Enc6@element = element(4, Val),
enc_MultipointCapability(Enc6@element)
end,
begin
Enc7@element = element(5, Val),
enc_MultipointCapability(Enc7@element)
end,
begin
Enc8@element = element(6, Val),
enc_H2250Capability_mcCapability(Enc8@element)
end,
begin
Enc9@element = element(7, Val),
if Enc9@element =:= false ->
<<0:1>>;
Enc9@element =:= true ->
<<1:1>>
end
end,
begin
Enc11@element = element(8, Val),
enc_MediaPacketizationCapability(Enc11@element)
end,
Extensions,
begin
Enc12@element = element(9, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@output = enc_TransportCapability(Enc12@element),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[align|encode_fragmented(Enc13@bin, 8)]
end
end
end
end,
begin
Enc15@element = element(10, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = enc_H2250Capability_redundancyEncodingCapability(Enc15@element),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[align|encode_fragmented(Enc16@bin, 8)]
end
end
end
end,
begin
Enc18@element = element(11, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@output = if Enc18@element =:= false ->
<<0:1,0:7>>;
Enc18@element =:= true ->
<<1:1,0:7>>
end,
Enc20@bin = Enc20@output,
[align,
1|Enc20@bin]
end
end
end|begin
Enc22@element = element(12, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc24@output = if Enc22@element =:= false ->
<<0:1,0:7>>;
Enc22@element =:= true ->
<<1:1,0:7>>
end,
Enc24@bin = Enc24@output,
[align,
1|Enc24@bin]
end
end
end].
'enc_H2250Capability_mcCapability'(Val) ->
Enc2@element = element(2, Val),
Enc4@element = element(3, Val),
if Enc2@element =:= false ->
if Enc4@element =:= false ->
<<0:1,0:1,0:1>>;
Enc4@element =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@element =:= true ->
if Enc4@element =:= false ->
<<0:1,1:1,0:1>>;
Enc4@element =:= true ->
<<0:1,1:1,1:1>>
end
end.

dec_H2250Capability_mcCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'H2250Capability_mcCapability',Term1,Term2},Bytes5}.

'enc_H2250Capability_redundancyEncodingCapability'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_RedundancyEncodingCapability(Comp) || Comp <- Val]]
end.


dec_H2250Capability_redundancyEncodingCapability(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components7(V1@Add4, V1@Buf1, []).



dec_H2250Capability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type MultipointCapability
{Term2,Bytes3} = dec_MultipointCapability(Bytes2),

%% attribute number 3 with type MultipointCapability
{Term3,Bytes4} = dec_MultipointCapability(Bytes3),

%% attribute number 4 with type MultipointCapability
{Term4,Bytes5} = dec_MultipointCapability(Bytes4),

%% attribute number 5 with type SEQUENCE
{Term5,Bytes6} = 'dec_H2250Capability_mcCapability'(Bytes5),

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes6,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 7 with type MediaPacketizationCapability
{Term7,Bytes8} = dec_MediaPacketizationCapability(Bytes7),

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V4@V0,V4@Buf1} = case Bytes8 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 8 with type TransportCapability
{Term8,Bytes10} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes9) band 7,
{V5@V0,V5@Buf1} = case Bytes9 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx8,_} = dec_TransportCapability(V5@V0),
{TmpValx8,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes11} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes10) band 7,
{V6@V0,V6@Buf1} = case Bytes10 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx9,_} = 'dec_H2250Capability_redundancyEncodingCapability'(V6@V0),
{TmpValx9,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes12} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes11) band 7,
{V7@V0,V7@Buf1} = case Bytes11 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx10,_} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = V7@V0,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,
{TmpValx10,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 11 with type BOOLEAN
{Term11,Bytes13} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes12) band 7,
{V9@V0,V9@Buf1} = case Bytes12 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx11,_} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = V9@V0,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,
{TmpValx11,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,
Bytes14= skipextensions(Bytes13, 5, Extensions),
{{'H2250Capability',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},Bytes14}.

'enc_MediaPacketizationCapability'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 3, 4),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc3@element = element(2, Val),
if Extensions =:= [] ->
if Enc3@element =:= false ->
<<0:1,0:1>>;
Enc3@element =:= true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= false ->
<<1:1,0:1>>;
Enc3@element =:= true ->
<<1:1,1:1>>
end
end
end,
Extensions|begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@output = enc_MediaPacketizationCapability_rtpPayloadType(Enc5@element),
Enc6@bin = complete(Enc6@output),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[align,
Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[align,
<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
[align|encode_fragmented(Enc6@bin, 8)]
end
end
end
end].
'enc_MediaPacketizationCapability_rtpPayloadType'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_RTPPayloadType(Comp) || Comp <- Val]]
end.


dec_MediaPacketizationCapability_rtpPayloadType(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components8(V1@Add4, V1@Buf1, []).



dec_MediaPacketizationCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes3) band 7,
{V4@V0,V4@Buf1} = case Bytes3 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = 'dec_MediaPacketizationCapability_rtpPayloadType'(V4@V0),
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes3}
end,
Bytes5= skipextensions(Bytes4, 2, Extensions),
{{'MediaPacketizationCapability',Term1,Term2},Bytes5}.

'enc_RSVPParameters'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@element = element(2, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
enc_QOSMode(Enc8@element)
end
end,
begin
Enc10@element = element(3, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@element@sub = Enc10@element - 1,
if 0 =< Enc10@element@sub, Enc10@element@sub < 4294967295 ->
begin
Enc10@element@sub@bin = binary:encode_unsigned(Enc10@element@sub),
Enc10@element@sub@bin_size0 = byte_size(Enc10@element@sub@bin),
Enc10@element@sub@bin_size = Enc10@element@sub@bin_size0 - 1,
[<<Enc10@element@sub@bin_size:2>>,
align|Enc10@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end
end
end,
begin
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@element@sub = Enc13@element - 1,
if 0 =< Enc13@element@sub, Enc13@element@sub < 4294967295 ->
begin
Enc13@element@sub@bin = binary:encode_unsigned(Enc13@element@sub),
Enc13@element@sub@bin_size0 = byte_size(Enc13@element@sub@bin),
Enc13@element@sub@bin_size = Enc13@element@sub@bin_size0 - 1,
[<<Enc13@element@sub@bin_size:2>>,
align|Enc13@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc13@element}}})
end
end
end
end,
begin
Enc16@element = element(5, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@element@sub = Enc16@element - 1,
if 0 =< Enc16@element@sub, Enc16@element@sub < 4294967295 ->
begin
Enc16@element@sub@bin = binary:encode_unsigned(Enc16@element@sub),
Enc16@element@sub@bin_size0 = byte_size(Enc16@element@sub@bin),
Enc16@element@sub@bin_size = Enc16@element@sub@bin_size0 - 1,
[<<Enc16@element@sub@bin_size:2>>,
align|Enc16@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc16@element}}})
end
end
end
end,
begin
Enc19@element = element(6, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@element@sub = Enc19@element - 1,
if 0 =< Enc19@element@sub, Enc19@element@sub < 4294967295 ->
begin
Enc19@element@sub@bin = binary:encode_unsigned(Enc19@element@sub),
Enc19@element@sub@bin_size0 = byte_size(Enc19@element@sub@bin),
Enc19@element@sub@bin_size = Enc19@element@sub@bin_size0 - 1,
[<<Enc19@element@sub@bin_size:2>>,
align|Enc19@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc19@element}}})
end
end
end
end|begin
Enc22@element = element(7, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@element@sub = Enc22@element - 1,
if 0 =< Enc22@element@sub, Enc22@element@sub < 4294967295 ->
begin
Enc22@element@sub@bin = binary:encode_unsigned(Enc22@element@sub),
Enc22@element@sub@bin_size0 = byte_size(Enc22@element@sub@bin),
Enc22@element@sub@bin_size = Enc22@element@sub@bin_size0 - 1,
[<<Enc22@element@sub@bin_size:2>>,
align|Enc22@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc22@element}}})
end
end
end
end].


dec_RSVPParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type QOSMode
{Term1,Bytes3} = case (Opt bsr 5) band 1 of
1 ->
dec_QOSMode(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Add7 = V3@V3 + 1,
{V3@Add7,V3@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Add7 = V4@V3 + 1,
{V4@Add7,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:2/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes5,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/unsigned-unit:8,V5@Buf4/bitstring>> = V5@Buf1,
V5@Add7 = V5@V3 + 1,
{V5@Add7,V5@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V6@V0:2/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes6,
V6@Add2 = V6@V0 + 1,
V6@Pad5 = bit_size(V6@Buf1) band 7,
<<_:V6@Pad5,V6@V3:V6@Add2/unsigned-unit:8,V6@Buf4/bitstring>> = V6@Buf1,
V6@Add7 = V6@V3 + 1,
{V6@Add7,V6@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = case Opt band 1 of
1 ->
begin
<<V7@V0:2/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes7,
V7@Add2 = V7@V0 + 1,
V7@Pad5 = bit_size(V7@Buf1) band 7,
<<_:V7@Pad5,V7@V3:V7@Add2/unsigned-unit:8,V7@Buf4/bitstring>> = V7@Buf1,
V7@Add7 = V7@V3 + 1,
{V7@Add7,V7@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
V8@Pad6 = bit_size(V8@Buf2) band 7,
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<_:V8@Pad6,0:1,V8@V8:7,V8@Buf9/bitstring>> when V8@V8 =/= 0 ->
{V8@V8,V8@Buf9};
<<_:V8@Pad6,1:1,0:1,V8@V9:14,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V11:V8@V0/bitstring-unit:1,V8@Buf12/bitstring>> = V8@Buf1,
{V8@V11,V8@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'RSVPParameters',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_QOSMode'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= guaranteedQOS ->
<<0:1,0:1>>;
ChoiceTag =:= controlledLoad ->
<<0:1,1:1>>
end.


dec_QOSMode(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{guaranteedQOS,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{controlledLoad,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ATMParameters'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc6@element = element(4, Val),
if Enc4@element =:= false ->
if Enc6@element =:= false ->
<<0:1,0:1>>;
Enc6@element =:= true ->
<<0:1,1:1>>
end;
Enc4@element =:= true ->
if Enc6@element =:= false ->
<<1:1,0:1>>;
Enc6@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@element = element(5, Val),
Enc10@element = element(6, Val),
if Enc8@element =:= false ->
if Enc10@element =:= false ->
<<0:1,0:1>>;
Enc10@element =:= true ->
<<0:1,1:1>>
end;
Enc8@element =:= true ->
if Enc10@element =:= false ->
<<1:1,0:1>>;
Enc10@element =:= true ->
<<1:1,1:1>>
end
end
end|begin
Enc12@element = element(7, Val),
if Enc12@element =:= false ->
<<0:1>>;
Enc12@element =:= true ->
<<1:1>>
end
end].


dec_ATMParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V8@V0,V8@Buf1} = case Bytes7 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<_:2,0:1,V8@V7:7,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<_:2,1:1,0:1,V8@V8:14,V8@Buf9/bitstring>> when V8@V8 =/= 0 ->
{V8@V8,V8@Buf9}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'ATMParameters',Term1,Term2,Term3,Term4,Term5,Term6},Bytes9}.

'enc_QOSCapability'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc5@element)
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_RSVPParameters(Enc7@element)
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_ATMParameters(Enc9@element)
end
end].


dec_QOSCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type RSVPParameters
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_RSVPParameters(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type ATMParameters
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_ATMParameters(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'QOSCapability',Term1,Term2,Term3},Bytes7}.

'enc_MediaTransportType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'ip-UDP' ->
<<0:1,0:2>>;
ChoiceTag =:= 'ip-TCP' ->
<<0:1,1:2>>;
ChoiceTag =:= 'atm-AAL5-UNIDIR' ->
<<0:1,2:2>>;
ChoiceTag =:= 'atm-AAL5-BIDIR' ->
<<0:1,3:2>>;
ChoiceTag =:= 'atm-AAL5-compressed' ->
begin
Enc5@output = 'enc_MediaTransportType_atm-AAL5-compressed'(ChoiceVal),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[<<1:1,0:7>>,
align,
Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc5@bin, 8)]
end
end
end.
'enc_MediaTransportType_atm-AAL5-compressed'(Val) ->
Enc2@element = element(2, Val),
if Enc2@element =:= false ->
<<0:1,0:1>>;
Enc2@element =:= true ->
<<0:1,1:1>>
end.

'dec_MediaTransportType_atm-AAL5-compressed'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MediaTransportType_atm-AAL5-compressed',Term1},Bytes4}.



dec_MediaTransportType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'ip-UDP',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'ip-TCP',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'atm-AAL5-UNIDIR',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'atm-AAL5-BIDIR',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_MediaTransportType_atm-AAL5-compressed'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{'atm-AAL5-compressed',Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_MediaChannelCapability'(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end|begin
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
true ->
enc_MediaTransportType(Enc3@element)
end
end].


dec_MediaChannelCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type MediaTransportType
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_MediaTransportType(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MediaChannelCapability',Term1},Bytes5}.

'enc_TransportCapability'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc5@element)
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportCapability_qOSCapabilities(Enc7@element)
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportCapability_mediaChannelCapabilities(Enc9@element)
end
end].
'enc_TransportCapability_qOSCapabilities'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_QOSCapability(Comp) || Comp <- Val]]
end.


dec_TransportCapability_qOSCapabilities(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components9(V1@Add4, V1@Buf1, []).

'enc_TransportCapability_mediaChannelCapabilities'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_MediaChannelCapability(Comp) || Comp <- Val]]
end.


dec_TransportCapability_mediaChannelCapabilities(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components10(V1@Add4, V1@Buf1, []).



dec_TransportCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
'dec_TransportCapability_qOSCapabilities'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_TransportCapability_mediaChannelCapabilities'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'TransportCapability',Term1,Term2,Term3},Bytes7}.

'enc_RedundancyEncodingCapability'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_RedundancyEncodingMethod(Enc3@element)
end,
align,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_RedundancyEncodingCapability_secondaryEncoding(Enc6@element)
end
end].
'enc_RedundancyEncodingCapability_secondaryEncoding'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 8 =:= 0 ->
[align,
Enc2@len@sub|[begin
Comp@sub = Comp - 1,
if 0 =< Comp@sub, Comp@sub < 65535 ->
<<Comp@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.


dec_RedundancyEncodingCapability_secondaryEncoding(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components11(V1@Add4, V1@Buf1, []).



dec_RedundancyEncodingCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type RedundancyEncodingMethod
{Term1,Bytes3} = dec_RedundancyEncodingMethod(Bytes2),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
V3@Pad2 = bit_size(Bytes3) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes3,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_RedundancyEncodingCapability_secondaryEncoding'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'RedundancyEncodingCapability',Term1,Term2,Term3},Bytes7}.

'enc_RedundancyEncodingMethod'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:1>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= rtpAudioRedundancyEncoding ->
<<0:1,1:1>>;
ChoiceTag =:= rtpH263VideoRedundancyEncoding ->
begin
Enc3@output = enc_RTPH263VideoRedundancyEncoding(ChoiceVal),
Enc3@bin = complete(Enc3@output),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 128 ->
[<<1:1,0:7>>,
align,
Enc3@len|Enc3@bin];
Enc3@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc3@len:14>>|Enc3@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc3@bin, 8)]
end
end
end.


dec_RedundancyEncodingMethod(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{rtpAudioRedundancyEncoding,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_RTPH263VideoRedundancyEncoding(V2@V0),
{TmpVal,V2@Buf1}
end,
{{rtpH263VideoRedundancyEncoding,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_RTPH263VideoRedundancyEncoding'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
Enc3@element@sub = Enc3@element - 1,
if Enc3@element@sub bsr 4 =:= 0 ->
<<Enc3@element@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
align,
begin
Enc5@element = element(3, Val),
Enc5@element@sub = Enc5@element - 1,
if Enc5@element@sub bsr 8 =:= 0 ->
Enc5@element@sub;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(4, Val),
enc_RTPH263VideoRedundancyEncoding_frameToThreadMapping(Enc7@element)
end|begin
Enc8@element = element(5, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
enc_RTPH263VideoRedundancyEncoding_containedThreads(Enc8@element)
end
end].
'enc_RTPH263VideoRedundancyEncoding_frameToThreadMapping'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= roundrobin ->
<<0:1,0:1>>;
ChoiceTag =:= custom ->
[<<0:1,1:1>>|enc_RTPH263VideoRedundancyEncoding_frameToThreadMapping_custom(ChoiceVal)]
end.
'enc_RTPH263VideoRedundancyEncoding_frameToThreadMapping_custom'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_RTPH263VideoRedundancyFrameMapping(Comp) || Comp <- Val]]
end.


dec_RTPH263VideoRedundancyEncoding_frameToThreadMapping_custom(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components12(V1@Add4, V1@Buf1, []).


dec_RTPH263VideoRedundancyEncoding_frameToThreadMapping(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{roundrobin,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RTPH263VideoRedundancyEncoding_frameToThreadMapping_custom'(Bytes2)
end,
{{custom,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_RTPH263VideoRedundancyEncoding_containedThreads'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 8 =:= 0 ->
[align,
Enc2@len@sub|[if Comp bsr 4 =:= 0 ->
<<Comp:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.


dec_RTPH263VideoRedundancyEncoding_containedThreads(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components13(V1@Add4, V1@Buf1, []).



dec_RTPH263VideoRedundancyEncoding(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:4/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:1/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end,

%% attribute number 3 with type CHOICE
{Term3,Bytes5} = 'dec_RTPH263VideoRedundancyEncoding_frameToThreadMapping'(Bytes4),

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_RTPH263VideoRedundancyEncoding_containedThreads'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'RTPH263VideoRedundancyEncoding',Term1,Term2,Term3,Term4},Bytes8}.

'enc_RTPH263VideoRedundancyFrameMapping'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 4 =:= 0 ->
<<0:1,Enc2@element:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_RTPH263VideoRedundancyFrameMapping_frameSequence(Enc4@element)
end].
'enc_RTPH263VideoRedundancyFrameMapping_frameSequence'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 8 =:= 0 ->
[align,
Enc2@len@sub|[if Comp bsr 8 =:= 0 ->
[Comp];
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.


dec_RTPH263VideoRedundancyFrameMapping_frameSequence(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components14(V1@Add4, V1@Buf1, []).



dec_RTPH263VideoRedundancyFrameMapping(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:4/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes3} = 'dec_RTPH263VideoRedundancyFrameMapping_frameSequence'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'RTPH263VideoRedundancyFrameMapping',Term1,Term2},Bytes5}.

'enc_MultipointCapability'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc4@element = element(3, Val),
if Enc2@element =:= false ->
if Enc4@element =:= false ->
<<0:1,0:1,0:1>>;
Enc4@element =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@element =:= true ->
if Enc4@element =:= false ->
<<0:1,1:1,0:1>>;
Enc4@element =:= true ->
<<0:1,1:1,1:1>>
end
end
end|begin
Enc6@element = element(4, Val),
enc_MultipointCapability_mediaDistributionCapability(Enc6@element)
end].
'enc_MultipointCapability_mediaDistributionCapability'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_MediaDistributionCapability(Comp) || Comp <- Val]].


dec_MultipointCapability_mediaDistributionCapability(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components15(V1@V0, V1@Buf1, []).



dec_MultipointCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes4} = 'dec_MultipointCapability_mediaDistributionCapability'(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'MultipointCapability',Term1,Term2,Term3},Bytes6}.

'enc_MediaDistributionCapability'(Val) ->
[begin
Enc1@element = element(8, Val),
Enc2@element = element(9, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
Enc6@element = element(3, Val),
if Enc4@element =:= false ->
if Enc6@element =:= false ->
<<0:1,0:1>>;
Enc6@element =:= true ->
<<0:1,1:1>>
end;
Enc4@element =:= true ->
if Enc6@element =:= false ->
<<1:1,0:1>>;
Enc6@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@element = element(4, Val),
Enc10@element = element(5, Val),
if Enc8@element =:= false ->
if Enc10@element =:= false ->
<<0:1,0:1>>;
Enc10@element =:= true ->
<<0:1,1:1>>
end;
Enc8@element =:= true ->
if Enc10@element =:= false ->
<<1:1,0:1>>;
Enc10@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc12@element = element(6, Val),
Enc14@element = element(7, Val),
if Enc12@element =:= false ->
if Enc14@element =:= false ->
<<0:1,0:1>>;
Enc14@element =:= true ->
<<0:1,1:1>>
end;
Enc12@element =:= true ->
if Enc14@element =:= false ->
<<1:1,0:1>>;
Enc14@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc16@element = element(8, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
enc_MediaDistributionCapability_centralizedData(Enc16@element)
end
end|begin
Enc18@element = element(9, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
enc_MediaDistributionCapability_distributedData(Enc18@element)
end
end].
'enc_MediaDistributionCapability_centralizedData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_DataApplicationCapability(Comp) || Comp <- Val]].


dec_MediaDistributionCapability_centralizedData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components16(V1@V0, V1@Buf1, []).

'enc_MediaDistributionCapability_distributedData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_DataApplicationCapability(Comp) || Comp <- Val]].


dec_MediaDistributionCapability_distributedData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components17(V1@V0, V1@Buf1, []).



dec_MediaDistributionCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes9} = case (Opt bsr 1) band 1 of
1 ->
'dec_MediaDistributionCapability_centralizedData'(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes10} = case Opt band 1 of
1 ->
'dec_MediaDistributionCapability_distributedData'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V9@V0,V9@Buf1} = case Bytes10 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
V9@Pad6 = bit_size(V9@Buf2) band 7,
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<_:V9@Pad6,0:1,V9@V8:7,V9@Buf9/bitstring>> when V9@V8 =/= 0 ->
{V9@V8,V9@Buf9};
<<_:V9@Pad6,1:1,0:1,V9@V9:14,V9@Buf10/bitstring>> when V9@V9 =/= 0 ->
{V9@V9,V9@Buf10}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V11:V9@V0/bitstring-unit:1,V9@Buf12/bitstring>> = V9@Buf1,
{V9@V11,V9@Buf12}
end,
Bytes12= skipextensions(Bytes11, 1, Extensions),
{{'MediaDistributionCapability',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes12}.

'enc_VideoCapability'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:3>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= h261VideoCapability ->
[<<0:1,1:3>>|enc_H261VideoCapability(ChoiceVal)];
ChoiceTag =:= h262VideoCapability ->
[<<0:1,2:3>>|enc_H262VideoCapability(ChoiceVal)];
ChoiceTag =:= h263VideoCapability ->
[<<0:1,3:3>>|enc_H263VideoCapability(ChoiceVal)];
ChoiceTag =:= is11172VideoCapability ->
[<<0:1,4:3>>|enc_IS11172VideoCapability(ChoiceVal)];
ChoiceTag =:= genericVideoCapability ->
begin
Enc6@output = enc_GenericCapability(ChoiceVal),
Enc6@bin = complete(Enc6@output),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[<<1:1,0:7>>,
align,
Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc6@bin, 8)]
end
end
end.


dec_VideoCapability(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_H261VideoCapability(Bytes2)
end,
{{h261VideoCapability,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_H262VideoCapability(Bytes2)
end,
{{h262VideoCapability,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_H263VideoCapability(Bytes2)
end,
{{h263VideoCapability,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_IS11172VideoCapability(Bytes2)
end,
{{is11172VideoCapability,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_GenericCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{genericVideoCapability,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H261VideoCapability'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 7, 8),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(3, Val),
if Enc2@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@element@sub = Enc5@element - 1,
if Enc5@element@sub bsr 2 =:= 0 ->
<<Enc5@element@sub:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end
end
end,
begin
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@element@sub = Enc8@element - 1,
if Enc8@element@sub bsr 2 =:= 0 ->
<<Enc8@element@sub:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@element}}})
end
end
end
end,
begin
Enc11@element = element(4, Val),
if Enc11@element =:= false ->
<<0:1>>;
Enc11@element =:= true ->
<<1:1>>
end
end,
align,
begin
Enc13@element = element(5, Val),
Enc13@element@sub = Enc13@element - 1,
if 0 =< Enc13@element@sub, Enc13@element@sub < 19200 ->
<<Enc13@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc13@element}}})
end
end,
begin
Enc15@element = element(6, Val),
if Enc15@element =:= false ->
<<0:1>>;
Enc15@element =:= true ->
<<1:1>>
end
end,
Extensions|begin
Enc17@element = element(7, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@output = if Enc17@element =:= false ->
<<0:1,0:7>>;
Enc17@element =:= true ->
<<1:1,0:7>>
end,
Enc19@bin = Enc19@output,
[align,
1|Enc19@bin]
end
end
end].


dec_H261VideoCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = begin
V6@Pad2 = bit_size(Bytes5) band 7,
<<_:V6@Pad2,V6@V0:2/unsigned-unit:8,V6@Buf1/bitstring>> = Bytes5,
V6@Add4 = V6@V0 + 1,
{V6@Add4,V6@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V8@V0,V8@Buf1} = case Bytes7 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<_:6,0:1,V8@V7:7,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<_:6,1:1,0:1,V8@V8:14,V8@Buf9/bitstring>> when V8@V8 =/= 0 ->
{V8@V8,V8@Buf9}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes8) band 7,
{V9@V0,V9@Buf1} = case Bytes8 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx6,_} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = V9@V0,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,
{TmpValx6,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,
Bytes10= skipextensions(Bytes9, 2, Extensions),
{{'H261VideoCapability',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_H262VideoCapability'(Val) ->
Enc7@bitmap = extension_bitmap(Val, 19, 20),
Extensions = if Enc7@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(13, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(14, Val),
Enc3@element = element(15, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(16, Val),
Enc5@element = element(17, Val),
if Enc4@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@element = element(18, Val),
Enc9@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
if Enc9@element =:= false ->
<<0:1,0:1>>;
Enc9@element =:= true ->
<<0:1,1:1>>
end;
true ->
if Enc9@element =:= false ->
<<1:1,0:1>>;
Enc9@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@element = element(3, Val),
Enc13@element = element(4, Val),
if Enc11@element =:= false ->
if Enc13@element =:= false ->
<<0:1,0:1>>;
Enc13@element =:= true ->
<<0:1,1:1>>
end;
Enc11@element =:= true ->
if Enc13@element =:= false ->
<<1:1,0:1>>;
Enc13@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc15@element = element(5, Val),
Enc17@element = element(6, Val),
if Enc15@element =:= false ->
if Enc17@element =:= false ->
<<0:1,0:1>>;
Enc17@element =:= true ->
<<0:1,1:1>>
end;
Enc15@element =:= true ->
if Enc17@element =:= false ->
<<1:1,0:1>>;
Enc17@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc19@element = element(7, Val),
Enc21@element = element(8, Val),
if Enc19@element =:= false ->
if Enc21@element =:= false ->
<<0:1,0:1>>;
Enc21@element =:= true ->
<<0:1,1:1>>
end;
Enc19@element =:= true ->
if Enc21@element =:= false ->
<<1:1,0:1>>;
Enc21@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc23@element = element(9, Val),
Enc25@element = element(10, Val),
if Enc23@element =:= false ->
if Enc25@element =:= false ->
<<0:1,0:1>>;
Enc25@element =:= true ->
<<0:1,1:1>>
end;
Enc23@element =:= true ->
if Enc25@element =:= false ->
<<1:1,0:1>>;
Enc25@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc27@element = element(11, Val),
Enc29@element = element(12, Val),
if Enc27@element =:= false ->
if Enc29@element =:= false ->
<<0:1,0:1>>;
Enc29@element =:= true ->
<<0:1,1:1>>
end;
Enc27@element =:= true ->
if Enc29@element =:= false ->
<<1:1,0:1>>;
Enc29@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc31@element = element(13, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
Enc31@element bsr 30 =:= 0 ->
begin
Enc31@element@bin = binary:encode_unsigned(Enc31@element),
Enc31@element@bin_size0 = byte_size(Enc31@element@bin),
Enc31@element@bin_size = Enc31@element@bin_size0 - 1,
[<<Enc31@element@bin_size:2>>,
align|Enc31@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc31@element}}})
end
end,
begin
Enc34@element = element(14, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
Enc34@element bsr 18 =:= 0 ->
begin
Enc34@element@bin = binary:encode_unsigned(Enc34@element),
Enc34@element@bin_size0 = byte_size(Enc34@element@bin),
Enc34@element@bin_size = Enc34@element@bin_size0 - 1,
[<<Enc34@element@bin_size:2>>,
align|Enc34@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc34@element}}})
end
end,
begin
Enc37@element = element(15, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
Enc37@element bsr 14 =:= 0 ->
[align|<<Enc37@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc37@element}}})
end
end,
begin
Enc40@element = element(16, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
Enc40@element bsr 14 =:= 0 ->
[align|<<Enc40@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc40@element}}})
end
end,
begin
Enc43@element = element(17, Val),
if Enc43@element =:= asn1_NOVALUE ->
[];
Enc43@element bsr 4 =:= 0 ->
<<Enc43@element:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc43@element}}})
end
end,
begin
Enc46@element = element(18, Val),
if Enc46@element =:= asn1_NOVALUE ->
[];
Enc46@element bsr 32 =:= 0 ->
begin
Enc46@element@bin = binary:encode_unsigned(Enc46@element),
Enc46@element@bin_size0 = byte_size(Enc46@element@bin),
Enc46@element@bin_size = Enc46@element@bin_size0 - 1,
[<<Enc46@element@bin_size:2>>,
align|Enc46@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc46@element}}})
end
end,
Extensions|begin
Enc49@element = element(19, Val),
if Enc49@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc51@output = if Enc49@element =:= false ->
<<0:1,0:7>>;
Enc49@element =:= true ->
<<1:1,0:7>>
end,
Enc51@bin = Enc51@output,
[align,
1|Enc51@bin]
end
end
end].


dec_H262VideoCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes10} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes9,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes11} = begin
<<V11@V0:1,V11@Buf1/bitstring>> = Bytes10,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes12} = begin
<<V12@V0:1,V12@Buf1/bitstring>> = Bytes11,
V12@Int2 = case V12@V0 of
0 -> false;
1 -> true
end,
{V12@Int2,V12@Buf1}
end,

%% attribute number 11 with type BOOLEAN
{Term11,Bytes13} = begin
<<V13@V0:1,V13@Buf1/bitstring>> = Bytes12,
V13@Int2 = case V13@V0 of
0 -> false;
1 -> true
end,
{V13@Int2,V13@Buf1}
end,

%% attribute number 12 with type INTEGER
{Term12,Bytes14} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V14@V0:2/unsigned-unit:1,V14@Buf1/bitstring>> = Bytes13,
V14@Add2 = V14@V0 + 1,
V14@Pad5 = bit_size(V14@Buf1) band 7,
<<_:V14@Pad5,V14@V3:V14@Add2/unsigned-unit:8,V14@Buf4/bitstring>> = V14@Buf1,
{V14@V3,V14@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 13 with type INTEGER
{Term13,Bytes15} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V15@V0:2/unsigned-unit:1,V15@Buf1/bitstring>> = Bytes14,
V15@Add2 = V15@V0 + 1,
V15@Pad5 = bit_size(V15@Buf1) band 7,
<<_:V15@Pad5,V15@V3:V15@Add2/unsigned-unit:8,V15@Buf4/bitstring>> = V15@Buf1,
{V15@V3,V15@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 14 with type INTEGER
{Term14,Bytes16} = case (Opt bsr 3) band 1 of
1 ->
begin
V16@Pad2 = bit_size(Bytes15) band 7,
<<_:V16@Pad2,V16@V0:2/unsigned-unit:8,V16@Buf1/bitstring>> = Bytes15,
{V16@V0,V16@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 15 with type INTEGER
{Term15,Bytes17} = case (Opt bsr 2) band 1 of
1 ->
begin
V17@Pad2 = bit_size(Bytes16) band 7,
<<_:V17@Pad2,V17@V0:2/unsigned-unit:8,V17@Buf1/bitstring>> = Bytes16,
{V17@V0,V17@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 16 with type INTEGER
{Term16,Bytes18} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V18@V0:4/unsigned-unit:1,V18@Buf1/bitstring>> = Bytes17,
{V18@V0,V18@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 17 with type INTEGER
{Term17,Bytes19} = case Opt band 1 of
1 ->
begin
<<V19@V0:2/unsigned-unit:1,V19@Buf1/bitstring>> = Bytes18,
V19@Add2 = V19@V0 + 1,
V19@Pad5 = bit_size(V19@Buf1) band 7,
<<_:V19@Pad5,V19@V3:V19@Add2/unsigned-unit:8,V19@Buf4/bitstring>> = V19@Buf1,
{V19@V3,V19@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes18}
end,

%% Extensions
{Extensions,Bytes20} = case Ext of
0 -> {<<>>,Bytes19};
1 ->
{V20@V0,V20@Buf1} = case Bytes19 of
<<0:1,V20@V3:6,V20@Buf4/bitstring>> ->
V20@Add5 = V20@V3 + 1,
{V20@Add5,V20@Buf4};
<<1:1,V20@Buf2/bitstring>> ->
V20@Pad6 = bit_size(V20@Buf2) band 7,
{V20@V3,V20@Buf4} = case V20@Buf2 of
<<_:V20@Pad6,0:1,V20@V8:7,V20@Buf9/bitstring>> when V20@V8 =/= 0 ->
{V20@V8,V20@Buf9};
<<_:V20@Pad6,1:1,0:1,V20@V9:14,V20@Buf10/bitstring>> when V20@V9 =/= 0 ->
{V20@V9,V20@Buf10}
end,
{V20@V3,V20@Buf4}
end,
<<V20@V11:V20@V0/bitstring-unit:1,V20@Buf12/bitstring>> = V20@Buf1,
{V20@V11,V20@Buf12}
end,

%% attribute number 18 with type BOOLEAN
{Term18,Bytes21} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V21@Pad3 = bit_size(Bytes20) band 7,
{V21@V0,V21@Buf1} = case Bytes20 of
<<_:V21@Pad3,0:1,V21@V5:7,V21@V7:V21@V5/binary-unit:8,V21@Buf8/bitstring>> ->
{V21@V7,V21@Buf8};
<<_:V21@Pad3,1:1,0:1,V21@V6:14,V21@V8:V21@V6/binary-unit:8,V21@Buf9/bitstring>> ->
{V21@V8,V21@Buf9};
<<_:V21@Pad3,1:1,1:1,V21@V6:6,V21@Buf7/bitstring>> ->
{V21@V8,V21@Buf9}  = decode_fragmented(V21@V6, V21@Buf7, 8),
{V21@V8,V21@Buf9}
end,
{TmpValx18,_} = begin
<<V22@V0:1,V22@Buf1/bitstring>> = V21@V0,
V22@Int2 = case V22@V0 of
0 -> false;
1 -> true
end,
{V22@Int2,V22@Buf1}
end,
{TmpValx18,V21@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,
Bytes22= skipextensions(Bytes21, 2, Extensions),
{{'H262VideoCapability',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18},Bytes22}.

'enc_H263VideoCapability'(Val) ->
Enc8@bitmap = extension_bitmap(Val, 15, 23),
Extensions = if Enc8@bitmap =:= 0 ->
[];
true ->
[<<7:7,Enc8@bitmap:8>>]
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(3, Val),
Enc3@element = element(4, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(5, Val),
Enc5@element = element(6, Val),
if Enc4@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@element = element(13, Val),
Enc7@element = element(14, Val),
if Enc6@element =:= asn1_NOVALUE ->
if Enc7@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc7@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(2, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@element@sub = Enc10@element - 1,
if Enc10@element@sub bsr 5 =:= 0 ->
<<Enc10@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end
end
end,
begin
Enc13@element = element(3, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@element@sub = Enc13@element - 1,
if Enc13@element@sub bsr 5 =:= 0 ->
<<Enc13@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc13@element}}})
end
end
end
end,
begin
Enc16@element = element(4, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@element@sub = Enc16@element - 1,
if Enc16@element@sub bsr 5 =:= 0 ->
<<Enc16@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc16@element}}})
end
end
end
end,
begin
Enc19@element = element(5, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@element@sub = Enc19@element - 1,
if Enc19@element@sub bsr 5 =:= 0 ->
<<Enc19@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc19@element}}})
end
end
end
end,
begin
Enc22@element = element(6, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@element@sub = Enc22@element - 1,
if Enc22@element@sub bsr 5 =:= 0 ->
<<Enc22@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc22@element}}})
end
end
end
end,
begin
Enc25@element = element(7, Val),
Enc25@element@sub = Enc25@element - 1,
if 0 =< Enc25@element@sub, Enc25@element@sub < 192400 ->
begin
Enc25@element@sub@bin = binary:encode_unsigned(Enc25@element@sub),
Enc25@element@sub@bin_size0 = byte_size(Enc25@element@sub@bin),
Enc25@element@sub@bin_size = Enc25@element@sub@bin_size0 - 1,
[<<Enc25@element@sub@bin_size:2>>,
align|Enc25@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc25@element}}})
end
end,
begin
Enc27@element = element(8, Val),
Enc29@element = element(9, Val),
if Enc27@element =:= false ->
if Enc29@element =:= false ->
<<0:1,0:1>>;
Enc29@element =:= true ->
<<0:1,1:1>>
end;
Enc27@element =:= true ->
if Enc29@element =:= false ->
<<1:1,0:1>>;
Enc29@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc31@element = element(10, Val),
Enc33@element = element(11, Val),
if Enc31@element =:= false ->
if Enc33@element =:= false ->
<<0:1,0:1>>;
Enc33@element =:= true ->
<<0:1,1:1>>
end;
Enc31@element =:= true ->
if Enc33@element =:= false ->
<<1:1,0:1>>;
Enc33@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc35@element = element(12, Val),
if Enc35@element =:= false ->
<<0:1>>;
Enc35@element =:= true ->
<<1:1>>
end
end,
begin
Enc37@element = element(13, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
Enc37@element bsr 19 =:= 0 ->
begin
Enc37@element@bin = binary:encode_unsigned(Enc37@element),
Enc37@element@bin_size0 = byte_size(Enc37@element@bin),
Enc37@element@bin_size = Enc37@element@bin_size0 - 1,
[<<Enc37@element@bin_size:2,0:1>>|Enc37@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc37@element}}})
end
end,
begin
Enc40@element = element(14, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
Enc40@element bsr 16 =:= 0 ->
[align|<<Enc40@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc40@element}}})
end
end,
Extensions,
begin
Enc43@element = element(15, Val),
if Enc43@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@output = begin
Enc43@element@sub = Enc43@element - 1,
if 0 =< Enc43@element@sub, Enc43@element@sub < 3600 ->
<<Enc43@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc43@element}}})
end
end,
Enc45@bin = Enc45@output,
[align,
2|Enc45@bin]
end
end
end,
begin
Enc47@element = element(16, Val),
if Enc47@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc49@output = begin
Enc47@element@sub = Enc47@element - 1,
if 0 =< Enc47@element@sub, Enc47@element@sub < 3600 ->
<<Enc47@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc47@element}}})
end
end,
Enc49@bin = Enc49@output,
[align,
2|Enc49@bin]
end
end
end,
begin
Enc51@element = element(17, Val),
if Enc51@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc53@output = begin
Enc51@element@sub = Enc51@element - 1,
if 0 =< Enc51@element@sub, Enc51@element@sub < 3600 ->
<<Enc51@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc51@element}}})
end
end,
Enc53@bin = Enc53@output,
[align,
2|Enc53@bin]
end
end
end,
begin
Enc55@element = element(18, Val),
if Enc55@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc57@output = begin
Enc55@element@sub = Enc55@element - 1,
if 0 =< Enc55@element@sub, Enc55@element@sub < 3600 ->
<<Enc55@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc55@element}}})
end
end,
Enc57@bin = Enc57@output,
[align,
2|Enc57@bin]
end
end
end,
begin
Enc59@element = element(19, Val),
if Enc59@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc61@output = begin
Enc59@element@sub = Enc59@element - 1,
if 0 =< Enc59@element@sub, Enc59@element@sub < 3600 ->
<<Enc59@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc59@element}}})
end
end,
Enc61@bin = Enc61@output,
[align,
2|Enc61@bin]
end
end
end,
begin
Enc63@element = element(20, Val),
if Enc63@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc65@output = if Enc63@element =:= false ->
<<0:1,0:7>>;
Enc63@element =:= true ->
<<1:1,0:7>>
end,
Enc65@bin = Enc65@output,
[align,
1|Enc65@bin]
end
end
end,
begin
Enc67@element = element(21, Val),
if Enc67@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc68@output = enc_EnhancementLayerInfo(Enc67@element),
Enc68@bin = complete(Enc68@output),
Enc68@len = byte_size(Enc68@bin),
if Enc68@len < 128 ->
[align,
Enc68@len|Enc68@bin];
Enc68@len < 16384 ->
[align,
<<2:2,Enc68@len:14>>|Enc68@bin];
true ->
[align|encode_fragmented(Enc68@bin, 8)]
end
end
end
end|begin
Enc70@element = element(22, Val),
if Enc70@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc71@output = enc_H263Options(Enc70@element),
Enc71@bin = complete(Enc71@output),
Enc71@len = byte_size(Enc71@bin),
if Enc71@len < 128 ->
[align,
Enc71@len|Enc71@bin];
Enc71@len < 16384 ->
[align,
<<2:2,Enc71@len:14>>|Enc71@bin];
true ->
[align|encode_fragmented(Enc71@bin, 8)]
end
end
end
end].


dec_H263VideoCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V3@V0:5/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V4@V0:5/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V5@V0:5/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V6@V0:5/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 1,
{V6@Add2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V7@V0:5/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes6,
V7@Add2 = V7@V0 + 1,
{V7@Add2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = begin
<<V8@V0:2/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes7,
V8@Add2 = V8@V0 + 1,
V8@Pad5 = bit_size(V8@Buf1) band 7,
<<_:V8@Pad5,V8@V3:V8@Add2/unsigned-unit:8,V8@Buf4/bitstring>> = V8@Buf1,
V8@Add7 = V8@V3 + 1,
{V8@Add7,V8@Buf4}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes10} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes9,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes11} = begin
<<V11@V0:1,V11@Buf1/bitstring>> = Bytes10,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes12} = begin
<<V12@V0:1,V12@Buf1/bitstring>> = Bytes11,
V12@Int2 = case V12@V0 of
0 -> false;
1 -> true
end,
{V12@Int2,V12@Buf1}
end,

%% attribute number 11 with type BOOLEAN
{Term11,Bytes13} = begin
<<V13@V0:1,V13@Buf1/bitstring>> = Bytes12,
V13@Int2 = case V13@V0 of
0 -> false;
1 -> true
end,
{V13@Int2,V13@Buf1}
end,

%% attribute number 12 with type INTEGER
{Term12,Bytes14} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V14@V0:2/unsigned-unit:1,V14@Buf1/bitstring>> = Bytes13,
V14@Add2 = V14@V0 + 1,
V14@Pad5 = bit_size(V14@Buf1) band 7,
<<_:V14@Pad5,V14@V3:V14@Add2/unsigned-unit:8,V14@Buf4/bitstring>> = V14@Buf1,
{V14@V3,V14@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 13 with type INTEGER
{Term13,Bytes15} = case Opt band 1 of
1 ->
begin
V15@Pad2 = bit_size(Bytes14) band 7,
<<_:V15@Pad2,V15@V0:2/unsigned-unit:8,V15@Buf1/bitstring>> = Bytes14,
{V15@V0,V15@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% Extensions
{Extensions,Bytes16} = case Ext of
0 -> {<<>>,Bytes15};
1 ->
{V16@V0,V16@Buf1} = case Bytes15 of
<<0:1,V16@V3:6,V16@Buf4/bitstring>> ->
V16@Add5 = V16@V3 + 1,
{V16@Add5,V16@Buf4};
<<1:1,V16@Buf2/bitstring>> ->
V16@Pad6 = bit_size(V16@Buf2) band 7,
{V16@V3,V16@Buf4} = case V16@Buf2 of
<<_:V16@Pad6,0:1,V16@V8:7,V16@Buf9/bitstring>> when V16@V8 =/= 0 ->
{V16@V8,V16@Buf9};
<<_:V16@Pad6,1:1,0:1,V16@V9:14,V16@Buf10/bitstring>> when V16@V9 =/= 0 ->
{V16@V9,V16@Buf10}
end,
{V16@V3,V16@Buf4}
end,
<<V16@V11:V16@V0/bitstring-unit:1,V16@Buf12/bitstring>> = V16@Buf1,
{V16@V11,V16@Buf12}
end,

%% attribute number 14 with type INTEGER
{Term14,Bytes17} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V17@Pad3 = bit_size(Bytes16) band 7,
{V17@V0,V17@Buf1} = case Bytes16 of
<<_:V17@Pad3,0:1,V17@V5:7,V17@V7:V17@V5/binary-unit:8,V17@Buf8/bitstring>> ->
{V17@V7,V17@Buf8};
<<_:V17@Pad3,1:1,0:1,V17@V6:14,V17@V8:V17@V6/binary-unit:8,V17@Buf9/bitstring>> ->
{V17@V8,V17@Buf9};
<<_:V17@Pad3,1:1,1:1,V17@V6:6,V17@Buf7/bitstring>> ->
{V17@V8,V17@Buf9}  = decode_fragmented(V17@V6, V17@Buf7, 8),
{V17@V8,V17@Buf9}
end,
{TmpValx14,_} = begin
V18@Pad2 = bit_size(V17@V0) band 7,
<<_:V18@Pad2,V18@V0:2/unsigned-unit:8,V18@Buf1/bitstring>> = V17@V0,
V18@Add4 = V18@V0 + 1,
{V18@Add4,V18@Buf1}
end,
{TmpValx14,V17@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type INTEGER
{Term15,Bytes18} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V19@Pad3 = bit_size(Bytes17) band 7,
{V19@V0,V19@Buf1} = case Bytes17 of
<<_:V19@Pad3,0:1,V19@V5:7,V19@V7:V19@V5/binary-unit:8,V19@Buf8/bitstring>> ->
{V19@V7,V19@Buf8};
<<_:V19@Pad3,1:1,0:1,V19@V6:14,V19@V8:V19@V6/binary-unit:8,V19@Buf9/bitstring>> ->
{V19@V8,V19@Buf9};
<<_:V19@Pad3,1:1,1:1,V19@V6:6,V19@Buf7/bitstring>> ->
{V19@V8,V19@Buf9}  = decode_fragmented(V19@V6, V19@Buf7, 8),
{V19@V8,V19@Buf9}
end,
{TmpValx15,_} = begin
V20@Pad2 = bit_size(V19@V0) band 7,
<<_:V20@Pad2,V20@V0:2/unsigned-unit:8,V20@Buf1/bitstring>> = V19@V0,
V20@Add4 = V20@V0 + 1,
{V20@Add4,V20@Buf1}
end,
{TmpValx15,V19@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type INTEGER
{Term16,Bytes19} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V21@Pad3 = bit_size(Bytes18) band 7,
{V21@V0,V21@Buf1} = case Bytes18 of
<<_:V21@Pad3,0:1,V21@V5:7,V21@V7:V21@V5/binary-unit:8,V21@Buf8/bitstring>> ->
{V21@V7,V21@Buf8};
<<_:V21@Pad3,1:1,0:1,V21@V6:14,V21@V8:V21@V6/binary-unit:8,V21@Buf9/bitstring>> ->
{V21@V8,V21@Buf9};
<<_:V21@Pad3,1:1,1:1,V21@V6:6,V21@Buf7/bitstring>> ->
{V21@V8,V21@Buf9}  = decode_fragmented(V21@V6, V21@Buf7, 8),
{V21@V8,V21@Buf9}
end,
{TmpValx16,_} = begin
V22@Pad2 = bit_size(V21@V0) band 7,
<<_:V22@Pad2,V22@V0:2/unsigned-unit:8,V22@Buf1/bitstring>> = V21@V0,
V22@Add4 = V22@V0 + 1,
{V22@Add4,V22@Buf1}
end,
{TmpValx16,V21@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type INTEGER
{Term17,Bytes20} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V23@Pad3 = bit_size(Bytes19) band 7,
{V23@V0,V23@Buf1} = case Bytes19 of
<<_:V23@Pad3,0:1,V23@V5:7,V23@V7:V23@V5/binary-unit:8,V23@Buf8/bitstring>> ->
{V23@V7,V23@Buf8};
<<_:V23@Pad3,1:1,0:1,V23@V6:14,V23@V8:V23@V6/binary-unit:8,V23@Buf9/bitstring>> ->
{V23@V8,V23@Buf9};
<<_:V23@Pad3,1:1,1:1,V23@V6:6,V23@Buf7/bitstring>> ->
{V23@V8,V23@Buf9}  = decode_fragmented(V23@V6, V23@Buf7, 8),
{V23@V8,V23@Buf9}
end,
{TmpValx17,_} = begin
V24@Pad2 = bit_size(V23@V0) band 7,
<<_:V24@Pad2,V24@V0:2/unsigned-unit:8,V24@Buf1/bitstring>> = V23@V0,
V24@Add4 = V24@V0 + 1,
{V24@Add4,V24@Buf1}
end,
{TmpValx17,V23@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type INTEGER
{Term18,Bytes21} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V25@Pad3 = bit_size(Bytes20) band 7,
{V25@V0,V25@Buf1} = case Bytes20 of
<<_:V25@Pad3,0:1,V25@V5:7,V25@V7:V25@V5/binary-unit:8,V25@Buf8/bitstring>> ->
{V25@V7,V25@Buf8};
<<_:V25@Pad3,1:1,0:1,V25@V6:14,V25@V8:V25@V6/binary-unit:8,V25@Buf9/bitstring>> ->
{V25@V8,V25@Buf9};
<<_:V25@Pad3,1:1,1:1,V25@V6:6,V25@Buf7/bitstring>> ->
{V25@V8,V25@Buf9}  = decode_fragmented(V25@V6, V25@Buf7, 8),
{V25@V8,V25@Buf9}
end,
{TmpValx18,_} = begin
V26@Pad2 = bit_size(V25@V0) band 7,
<<_:V26@Pad2,V26@V0:2/unsigned-unit:8,V26@Buf1/bitstring>> = V25@V0,
V26@Add4 = V26@V0 + 1,
{V26@Add4,V26@Buf1}
end,
{TmpValx18,V25@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute number 19 with type BOOLEAN
{Term19,Bytes22} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V27@Pad3 = bit_size(Bytes21) band 7,
{V27@V0,V27@Buf1} = case Bytes21 of
<<_:V27@Pad3,0:1,V27@V5:7,V27@V7:V27@V5/binary-unit:8,V27@Buf8/bitstring>> ->
{V27@V7,V27@Buf8};
<<_:V27@Pad3,1:1,0:1,V27@V6:14,V27@V8:V27@V6/binary-unit:8,V27@Buf9/bitstring>> ->
{V27@V8,V27@Buf9};
<<_:V27@Pad3,1:1,1:1,V27@V6:6,V27@Buf7/bitstring>> ->
{V27@V8,V27@Buf9}  = decode_fragmented(V27@V6, V27@Buf7, 8),
{V27@V8,V27@Buf9}
end,
{TmpValx19,_} = begin
<<V28@V0:1,V28@Buf1/bitstring>> = V27@V0,
V28@Int2 = case V28@V0 of
0 -> false;
1 -> true
end,
{V28@Int2,V28@Buf1}
end,
{TmpValx19,V27@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes21}
end,

%% attribute number 20 with type EnhancementLayerInfo
{Term20,Bytes23} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V29@Pad3 = bit_size(Bytes22) band 7,
{V29@V0,V29@Buf1} = case Bytes22 of
<<_:V29@Pad3,0:1,V29@V5:7,V29@V7:V29@V5/binary-unit:8,V29@Buf8/bitstring>> ->
{V29@V7,V29@Buf8};
<<_:V29@Pad3,1:1,0:1,V29@V6:14,V29@V8:V29@V6/binary-unit:8,V29@Buf9/bitstring>> ->
{V29@V8,V29@Buf9};
<<_:V29@Pad3,1:1,1:1,V29@V6:6,V29@Buf7/bitstring>> ->
{V29@V8,V29@Buf9}  = decode_fragmented(V29@V6, V29@Buf7, 8),
{V29@V8,V29@Buf9}
end,
{TmpValx20,_} = dec_EnhancementLayerInfo(V29@V0),
{TmpValx20,V29@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes22}
end,

%% attribute number 21 with type H263Options
{Term21,Bytes24} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V30@Pad3 = bit_size(Bytes23) band 7,
{V30@V0,V30@Buf1} = case Bytes23 of
<<_:V30@Pad3,0:1,V30@V5:7,V30@V7:V30@V5/binary-unit:8,V30@Buf8/bitstring>> ->
{V30@V7,V30@Buf8};
<<_:V30@Pad3,1:1,0:1,V30@V6:14,V30@V8:V30@V6/binary-unit:8,V30@Buf9/bitstring>> ->
{V30@V8,V30@Buf9};
<<_:V30@Pad3,1:1,1:1,V30@V6:6,V30@Buf7/bitstring>> ->
{V30@V8,V30@Buf9}  = decode_fragmented(V30@V6, V30@Buf7, 8),
{V30@V8,V30@Buf9}
end,
{TmpValx21,_} = dec_H263Options(V30@V0),
{TmpValx21,V30@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes23}
end,
Bytes25= skipextensions(Bytes24, 9, Extensions),
{{'H263VideoCapability',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21},Bytes25}.

'enc_EnhancementLayerInfo'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc5@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc5@element =:= false ->
<<0:1,0:1>>;
Enc5@element =:= true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= false ->
<<1:1,0:1>>;
Enc5@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_EnhancementLayerInfo_snrEnhancement(Enc7@element)
end
end,
begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_EnhancementLayerInfo_spatialEnhancement(Enc9@element)
end
end|begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_EnhancementLayerInfo_bPictureEnhancement(Enc11@element)
end
end].
'enc_EnhancementLayerInfo_snrEnhancement'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 14 ->
[<<Enc1@len@sub:4>>|[enc_EnhancementOptions(Comp) || Comp <- Val]]
end.


dec_EnhancementLayerInfo_snrEnhancement(Bytes) ->
%% Length with constraint {1,14}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components18(V1@Add2, V1@Buf1, []).

'enc_EnhancementLayerInfo_spatialEnhancement'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 14 ->
[<<Enc1@len@sub:4>>|[enc_EnhancementOptions(Comp) || Comp <- Val]]
end.


dec_EnhancementLayerInfo_spatialEnhancement(Bytes) ->
%% Length with constraint {1,14}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components19(V1@Add2, V1@Buf1, []).

'enc_EnhancementLayerInfo_bPictureEnhancement'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 14 ->
[<<Enc1@len@sub:4>>|[enc_BEnhancementParameters(Comp) || Comp <- Val]]
end.


dec_EnhancementLayerInfo_bPictureEnhancement(Bytes) ->
%% Length with constraint {1,14}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components20(V1@Add2, V1@Buf1, []).



dec_EnhancementLayerInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type SET OF
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
'dec_EnhancementLayerInfo_snrEnhancement'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SET OF
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
'dec_EnhancementLayerInfo_spatialEnhancement'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SET OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_EnhancementLayerInfo_bPictureEnhancement'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'EnhancementLayerInfo',Term1,Term2,Term3,Term4},Bytes8}.

'enc_BEnhancementParameters'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_EnhancementOptions(Enc2@element)
end|begin
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - 1,
if Enc3@element@sub bsr 6 =:= 0 ->
<<Enc3@element@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end].


dec_BEnhancementParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type EnhancementOptions
{Term1,Bytes2} = dec_EnhancementOptions(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V2@V0:6/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'BEnhancementParameters',Term1,Term2},Bytes5}.

'enc_EnhancementOptions'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(11, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(12, Val),
Enc8@element = element(13, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(14, Val),
Enc10@element = element(15, Val),
if Enc9@element =:= asn1_NOVALUE ->
if Enc10@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@element = element(17, Val),
if Enc11@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc13@element = element(2, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@element@sub = Enc13@element - 1,
if Enc13@element@sub bsr 5 =:= 0 ->
<<Enc13@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc13@element}}})
end
end
end
end,
begin
Enc16@element = element(3, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@element@sub = Enc16@element - 1,
if Enc16@element@sub bsr 5 =:= 0 ->
<<Enc16@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc16@element}}})
end
end
end
end,
begin
Enc19@element = element(4, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@element@sub = Enc19@element - 1,
if Enc19@element@sub bsr 5 =:= 0 ->
<<Enc19@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc19@element}}})
end
end
end
end,
begin
Enc22@element = element(5, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@element@sub = Enc22@element - 1,
if Enc22@element@sub bsr 5 =:= 0 ->
<<Enc22@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc22@element}}})
end
end
end
end,
begin
Enc25@element = element(6, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc25@element@sub = Enc25@element - 1,
if Enc25@element@sub bsr 5 =:= 0 ->
<<Enc25@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc25@element}}})
end
end
end
end,
begin
Enc28@element = element(7, Val),
Enc28@element@sub = Enc28@element - 1,
if 0 =< Enc28@element@sub, Enc28@element@sub < 192400 ->
begin
Enc28@element@sub@bin = binary:encode_unsigned(Enc28@element@sub),
Enc28@element@sub@bin_size0 = byte_size(Enc28@element@sub@bin),
Enc28@element@sub@bin_size = Enc28@element@sub@bin_size0 - 1,
[<<Enc28@element@sub@bin_size:2>>,
align|Enc28@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc28@element}}})
end
end,
begin
Enc30@element = element(8, Val),
Enc32@element = element(9, Val),
if Enc30@element =:= false ->
if Enc32@element =:= false ->
<<0:1,0:1>>;
Enc32@element =:= true ->
<<0:1,1:1>>
end;
Enc30@element =:= true ->
if Enc32@element =:= false ->
<<1:1,0:1>>;
Enc32@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc34@element = element(10, Val),
if Enc34@element =:= false ->
<<0:1>>;
Enc34@element =:= true ->
<<1:1>>
end
end,
begin
Enc36@element = element(11, Val),
if Enc36@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc36@element@sub = Enc36@element - 1,
if 0 =< Enc36@element@sub, Enc36@element@sub < 3600 ->
<<Enc36@element@sub:21>>;
true ->
exit({error,{asn1,{illegal_value,Enc36@element}}})
end
end
end
end,
begin
Enc39@element = element(12, Val),
if Enc39@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc39@element@sub = Enc39@element - 1,
if 0 =< Enc39@element@sub, Enc39@element@sub < 3600 ->
[align|<<Enc39@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc39@element}}})
end
end
end
end,
begin
Enc42@element = element(13, Val),
if Enc42@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc42@element@sub = Enc42@element - 1,
if 0 =< Enc42@element@sub, Enc42@element@sub < 3600 ->
[align|<<Enc42@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc42@element}}})
end
end
end
end,
begin
Enc45@element = element(14, Val),
if Enc45@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@element@sub = Enc45@element - 1,
if 0 =< Enc45@element@sub, Enc45@element@sub < 3600 ->
[align|<<Enc45@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc45@element}}})
end
end
end
end,
begin
Enc48@element = element(15, Val),
if Enc48@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc48@element@sub = Enc48@element - 1,
if 0 =< Enc48@element@sub, Enc48@element@sub < 3600 ->
[align|<<Enc48@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc48@element}}})
end
end
end
end,
begin
Enc51@element = element(16, Val),
if Enc51@element =:= false ->
<<0:1>>;
Enc51@element =:= true ->
<<1:1>>
end
end|begin
Enc53@element = element(17, Val),
if Enc53@element =:= asn1_NOVALUE ->
[];
true ->
enc_H263Options(Enc53@element)
end
end].


dec_EnhancementOptions(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:11,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 10) band 1 of
1 ->
begin
<<V3@V0:5/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 9) band 1 of
1 ->
begin
<<V4@V0:5/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 8) band 1 of
1 ->
begin
<<V5@V0:5/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 7) band 1 of
1 ->
begin
<<V6@V0:5/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 1,
{V6@Add2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V7@V0:5/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes6,
V7@Add2 = V7@V0 + 1,
{V7@Add2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = begin
<<V8@V0:2/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes7,
V8@Add2 = V8@V0 + 1,
V8@Pad5 = bit_size(V8@Buf1) band 7,
<<_:V8@Pad5,V8@V3:V8@Add2/unsigned-unit:8,V8@Buf4/bitstring>> = V8@Buf1,
V8@Add7 = V8@V3 + 1,
{V8@Add7,V8@Buf4}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes10} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes9,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes11} = begin
<<V11@V0:1,V11@Buf1/bitstring>> = Bytes10,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end,

%% attribute number 10 with type INTEGER
{Term10,Bytes12} = case (Opt bsr 5) band 1 of
1 ->
begin
V12@Pad2 = bit_size(Bytes11) band 7,
<<_:V12@Pad2,V12@V0:2/unsigned-unit:8,V12@Buf1/bitstring>> = Bytes11,
V12@Add4 = V12@V0 + 1,
{V12@Add4,V12@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 11 with type INTEGER
{Term11,Bytes13} = case (Opt bsr 4) band 1 of
1 ->
begin
V13@Pad2 = bit_size(Bytes12) band 7,
<<_:V13@Pad2,V13@V0:2/unsigned-unit:8,V13@Buf1/bitstring>> = Bytes12,
V13@Add4 = V13@V0 + 1,
{V13@Add4,V13@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 12 with type INTEGER
{Term12,Bytes14} = case (Opt bsr 3) band 1 of
1 ->
begin
V14@Pad2 = bit_size(Bytes13) band 7,
<<_:V14@Pad2,V14@V0:2/unsigned-unit:8,V14@Buf1/bitstring>> = Bytes13,
V14@Add4 = V14@V0 + 1,
{V14@Add4,V14@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 13 with type INTEGER
{Term13,Bytes15} = case (Opt bsr 2) band 1 of
1 ->
begin
V15@Pad2 = bit_size(Bytes14) band 7,
<<_:V15@Pad2,V15@V0:2/unsigned-unit:8,V15@Buf1/bitstring>> = Bytes14,
V15@Add4 = V15@V0 + 1,
{V15@Add4,V15@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 14 with type INTEGER
{Term14,Bytes16} = case (Opt bsr 1) band 1 of
1 ->
begin
V16@Pad2 = bit_size(Bytes15) band 7,
<<_:V16@Pad2,V16@V0:2/unsigned-unit:8,V16@Buf1/bitstring>> = Bytes15,
V16@Add4 = V16@V0 + 1,
{V16@Add4,V16@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 15 with type BOOLEAN
{Term15,Bytes17} = begin
<<V17@V0:1,V17@Buf1/bitstring>> = Bytes16,
V17@Int2 = case V17@V0 of
0 -> false;
1 -> true
end,
{V17@Int2,V17@Buf1}
end,

%% attribute number 16 with type H263Options
{Term16,Bytes18} = case Opt band 1 of
1 ->
dec_H263Options(Bytes17);
0 ->
{asn1_NOVALUE,Bytes17}
end,

%% Extensions
{Extensions,Bytes19} = case Ext of
0 -> {<<>>,Bytes18};
1 ->
{V18@V0,V18@Buf1} = case Bytes18 of
<<0:1,V18@V3:6,V18@Buf4/bitstring>> ->
V18@Add5 = V18@V3 + 1,
{V18@Add5,V18@Buf4};
<<1:1,V18@Buf2/bitstring>> ->
V18@Pad6 = bit_size(V18@Buf2) band 7,
{V18@V3,V18@Buf4} = case V18@Buf2 of
<<_:V18@Pad6,0:1,V18@V8:7,V18@Buf9/bitstring>> when V18@V8 =/= 0 ->
{V18@V8,V18@Buf9};
<<_:V18@Pad6,1:1,0:1,V18@V9:14,V18@Buf10/bitstring>> when V18@V9 =/= 0 ->
{V18@V9,V18@Buf10}
end,
{V18@V3,V18@Buf4}
end,
<<V18@V11:V18@V0/bitstring-unit:1,V18@Buf12/bitstring>> = V18@Buf1,
{V18@V11,V18@Buf12}
end,
Bytes20= skipextensions(Bytes19, 1, Extensions),
{{'EnhancementOptions',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16},Bytes20}.

'enc_H263Options'(Val) ->
Enc6@bitmap = extension_bitmap(Val, 31, 33),
Extensions = if Enc6@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc6@bitmap:2>>
end,
[begin
Enc1@element = element(25, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(27, Val),
Enc3@element = element(28, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(29, Val),
Enc5@element = element(30, Val),
if Enc4@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@element = element(2, Val),
Enc10@element = element(3, Val),
if Enc8@element =:= false ->
if Enc10@element =:= false ->
<<0:1,0:1>>;
Enc10@element =:= true ->
<<0:1,1:1>>
end;
Enc8@element =:= true ->
if Enc10@element =:= false ->
<<1:1,0:1>>;
Enc10@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc12@element = element(4, Val),
Enc14@element = element(5, Val),
if Enc12@element =:= false ->
if Enc14@element =:= false ->
<<0:1,0:1>>;
Enc14@element =:= true ->
<<0:1,1:1>>
end;
Enc12@element =:= true ->
if Enc14@element =:= false ->
<<1:1,0:1>>;
Enc14@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc16@element = element(6, Val),
Enc18@element = element(7, Val),
if Enc16@element =:= false ->
if Enc18@element =:= false ->
<<0:1,0:1>>;
Enc18@element =:= true ->
<<0:1,1:1>>
end;
Enc16@element =:= true ->
if Enc18@element =:= false ->
<<1:1,0:1>>;
Enc18@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc20@element = element(8, Val),
Enc22@element = element(9, Val),
if Enc20@element =:= false ->
if Enc22@element =:= false ->
<<0:1,0:1>>;
Enc22@element =:= true ->
<<0:1,1:1>>
end;
Enc20@element =:= true ->
if Enc22@element =:= false ->
<<1:1,0:1>>;
Enc22@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc24@element = element(10, Val),
Enc26@element = element(11, Val),
if Enc24@element =:= false ->
if Enc26@element =:= false ->
<<0:1,0:1>>;
Enc26@element =:= true ->
<<0:1,1:1>>
end;
Enc24@element =:= true ->
if Enc26@element =:= false ->
<<1:1,0:1>>;
Enc26@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc28@element = element(12, Val),
Enc30@element = element(13, Val),
if Enc28@element =:= false ->
if Enc30@element =:= false ->
<<0:1,0:1>>;
Enc30@element =:= true ->
<<0:1,1:1>>
end;
Enc28@element =:= true ->
if Enc30@element =:= false ->
<<1:1,0:1>>;
Enc30@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc32@element = element(14, Val),
Enc34@element = element(15, Val),
if Enc32@element =:= false ->
if Enc34@element =:= false ->
<<0:1,0:1>>;
Enc34@element =:= true ->
<<0:1,1:1>>
end;
Enc32@element =:= true ->
if Enc34@element =:= false ->
<<1:1,0:1>>;
Enc34@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc36@element = element(16, Val),
Enc38@element = element(17, Val),
if Enc36@element =:= false ->
if Enc38@element =:= false ->
<<0:1,0:1>>;
Enc38@element =:= true ->
<<0:1,1:1>>
end;
Enc36@element =:= true ->
if Enc38@element =:= false ->
<<1:1,0:1>>;
Enc38@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc40@element = element(18, Val),
Enc42@element = element(19, Val),
if Enc40@element =:= false ->
if Enc42@element =:= false ->
<<0:1,0:1>>;
Enc42@element =:= true ->
<<0:1,1:1>>
end;
Enc40@element =:= true ->
if Enc42@element =:= false ->
<<1:1,0:1>>;
Enc42@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc44@element = element(20, Val),
Enc46@element = element(21, Val),
if Enc44@element =:= false ->
if Enc46@element =:= false ->
<<0:1,0:1>>;
Enc46@element =:= true ->
<<0:1,1:1>>
end;
Enc44@element =:= true ->
if Enc46@element =:= false ->
<<1:1,0:1>>;
Enc46@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc48@element = element(22, Val),
Enc50@element = element(23, Val),
if Enc48@element =:= false ->
if Enc50@element =:= false ->
<<0:1,0:1>>;
Enc50@element =:= true ->
<<0:1,1:1>>
end;
Enc48@element =:= true ->
if Enc50@element =:= false ->
<<1:1,0:1>>;
Enc50@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc52@element = element(24, Val),
if Enc52@element =:= false ->
<<0:1>>;
Enc52@element =:= true ->
<<1:1>>
end
end,
begin
Enc54@element = element(25, Val),
if Enc54@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransparencyParameters(Enc54@element)
end
end,
begin
Enc56@element = element(26, Val),
if Enc56@element =:= false ->
<<0:1>>;
Enc56@element =:= true ->
<<1:1>>
end
end,
begin
Enc58@element = element(27, Val),
if Enc58@element =:= asn1_NOVALUE ->
[];
true ->
enc_RefPictureSelection(Enc58@element)
end
end,
begin
Enc60@element = element(28, Val),
if Enc60@element =:= asn1_NOVALUE ->
[];
true ->
enc_H263Options_customPictureClockFrequency(Enc60@element)
end
end,
begin
Enc62@element = element(29, Val),
if Enc62@element =:= asn1_NOVALUE ->
[];
true ->
enc_H263Options_customPictureFormat(Enc62@element)
end
end,
begin
Enc64@element = element(30, Val),
if Enc64@element =:= asn1_NOVALUE ->
[];
true ->
enc_H263Options_modeCombos(Enc64@element)
end
end,
Extensions,
begin
Enc66@element = element(31, Val),
if Enc66@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc68@output = if Enc66@element =:= false ->
<<0:1,0:7>>;
Enc66@element =:= true ->
<<1:1,0:7>>
end,
Enc68@bin = Enc68@output,
[align,
1|Enc68@bin]
end
end
end|begin
Enc70@element = element(32, Val),
if Enc70@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc71@output = enc_H263Version3Options(Enc70@element),
Enc71@bin = complete(Enc71@output),
Enc71@len = byte_size(Enc71@bin),
if Enc71@len < 128 ->
[align,
Enc71@len|Enc71@bin];
Enc71@len < 16384 ->
[align,
<<2:2,Enc71@len:14>>|Enc71@bin];
true ->
[align|encode_fragmented(Enc71@bin, 8)]
end
end
end
end].
'enc_H263Options_customPictureClockFrequency'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_CustomPictureClockFrequency(Comp) || Comp <- Val]]
end.


dec_H263Options_customPictureClockFrequency(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components21(V1@Add2, V1@Buf1, []).

'enc_H263Options_customPictureFormat'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_CustomPictureFormat(Comp) || Comp <- Val]]
end.


dec_H263Options_customPictureFormat(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components22(V1@Add2, V1@Buf1, []).

'enc_H263Options_modeCombos'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_H263VideoModeCombos(Comp) || Comp <- Val]]
end.


dec_H263Options_modeCombos(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components23(V1@Add2, V1@Buf1, []).



dec_H263Options(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes10} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes9,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes11} = begin
<<V11@V0:1,V11@Buf1/bitstring>> = Bytes10,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes12} = begin
<<V12@V0:1,V12@Buf1/bitstring>> = Bytes11,
V12@Int2 = case V12@V0 of
0 -> false;
1 -> true
end,
{V12@Int2,V12@Buf1}
end,

%% attribute number 11 with type BOOLEAN
{Term11,Bytes13} = begin
<<V13@V0:1,V13@Buf1/bitstring>> = Bytes12,
V13@Int2 = case V13@V0 of
0 -> false;
1 -> true
end,
{V13@Int2,V13@Buf1}
end,

%% attribute number 12 with type BOOLEAN
{Term12,Bytes14} = begin
<<V14@V0:1,V14@Buf1/bitstring>> = Bytes13,
V14@Int2 = case V14@V0 of
0 -> false;
1 -> true
end,
{V14@Int2,V14@Buf1}
end,

%% attribute number 13 with type BOOLEAN
{Term13,Bytes15} = begin
<<V15@V0:1,V15@Buf1/bitstring>> = Bytes14,
V15@Int2 = case V15@V0 of
0 -> false;
1 -> true
end,
{V15@Int2,V15@Buf1}
end,

%% attribute number 14 with type BOOLEAN
{Term14,Bytes16} = begin
<<V16@V0:1,V16@Buf1/bitstring>> = Bytes15,
V16@Int2 = case V16@V0 of
0 -> false;
1 -> true
end,
{V16@Int2,V16@Buf1}
end,

%% attribute number 15 with type BOOLEAN
{Term15,Bytes17} = begin
<<V17@V0:1,V17@Buf1/bitstring>> = Bytes16,
V17@Int2 = case V17@V0 of
0 -> false;
1 -> true
end,
{V17@Int2,V17@Buf1}
end,

%% attribute number 16 with type BOOLEAN
{Term16,Bytes18} = begin
<<V18@V0:1,V18@Buf1/bitstring>> = Bytes17,
V18@Int2 = case V18@V0 of
0 -> false;
1 -> true
end,
{V18@Int2,V18@Buf1}
end,

%% attribute number 17 with type BOOLEAN
{Term17,Bytes19} = begin
<<V19@V0:1,V19@Buf1/bitstring>> = Bytes18,
V19@Int2 = case V19@V0 of
0 -> false;
1 -> true
end,
{V19@Int2,V19@Buf1}
end,

%% attribute number 18 with type BOOLEAN
{Term18,Bytes20} = begin
<<V20@V0:1,V20@Buf1/bitstring>> = Bytes19,
V20@Int2 = case V20@V0 of
0 -> false;
1 -> true
end,
{V20@Int2,V20@Buf1}
end,

%% attribute number 19 with type BOOLEAN
{Term19,Bytes21} = begin
<<V21@V0:1,V21@Buf1/bitstring>> = Bytes20,
V21@Int2 = case V21@V0 of
0 -> false;
1 -> true
end,
{V21@Int2,V21@Buf1}
end,

%% attribute number 20 with type BOOLEAN
{Term20,Bytes22} = begin
<<V22@V0:1,V22@Buf1/bitstring>> = Bytes21,
V22@Int2 = case V22@V0 of
0 -> false;
1 -> true
end,
{V22@Int2,V22@Buf1}
end,

%% attribute number 21 with type BOOLEAN
{Term21,Bytes23} = begin
<<V23@V0:1,V23@Buf1/bitstring>> = Bytes22,
V23@Int2 = case V23@V0 of
0 -> false;
1 -> true
end,
{V23@Int2,V23@Buf1}
end,

%% attribute number 22 with type BOOLEAN
{Term22,Bytes24} = begin
<<V24@V0:1,V24@Buf1/bitstring>> = Bytes23,
V24@Int2 = case V24@V0 of
0 -> false;
1 -> true
end,
{V24@Int2,V24@Buf1}
end,

%% attribute number 23 with type BOOLEAN
{Term23,Bytes25} = begin
<<V25@V0:1,V25@Buf1/bitstring>> = Bytes24,
V25@Int2 = case V25@V0 of
0 -> false;
1 -> true
end,
{V25@Int2,V25@Buf1}
end,

%% attribute number 24 with type TransparencyParameters
{Term24,Bytes26} = case (Opt bsr 4) band 1 of
1 ->
dec_TransparencyParameters(Bytes25);
0 ->
{asn1_NOVALUE,Bytes25}
end,

%% attribute number 25 with type BOOLEAN
{Term25,Bytes27} = begin
<<V26@V0:1,V26@Buf1/bitstring>> = Bytes26,
V26@Int2 = case V26@V0 of
0 -> false;
1 -> true
end,
{V26@Int2,V26@Buf1}
end,

%% attribute number 26 with type RefPictureSelection
{Term26,Bytes28} = case (Opt bsr 3) band 1 of
1 ->
dec_RefPictureSelection(Bytes27);
0 ->
{asn1_NOVALUE,Bytes27}
end,

%% attribute number 27 with type SET OF
{Term27,Bytes29} = case (Opt bsr 2) band 1 of
1 ->
'dec_H263Options_customPictureClockFrequency'(Bytes28);
0 ->
{asn1_NOVALUE,Bytes28}
end,

%% attribute number 28 with type SET OF
{Term28,Bytes30} = case (Opt bsr 1) band 1 of
1 ->
'dec_H263Options_customPictureFormat'(Bytes29);
0 ->
{asn1_NOVALUE,Bytes29}
end,

%% attribute number 29 with type SET OF
{Term29,Bytes31} = case Opt band 1 of
1 ->
'dec_H263Options_modeCombos'(Bytes30);
0 ->
{asn1_NOVALUE,Bytes30}
end,

%% Extensions
{Extensions,Bytes32} = case Ext of
0 -> {<<>>,Bytes31};
1 ->
{V27@V0,V27@Buf1} = case Bytes31 of
<<0:1,V27@V3:6,V27@Buf4/bitstring>> ->
V27@Add5 = V27@V3 + 1,
{V27@Add5,V27@Buf4};
<<1:1,V27@Buf2/bitstring>> ->
V27@Pad6 = bit_size(V27@Buf2) band 7,
{V27@V3,V27@Buf4} = case V27@Buf2 of
<<_:V27@Pad6,0:1,V27@V8:7,V27@Buf9/bitstring>> when V27@V8 =/= 0 ->
{V27@V8,V27@Buf9};
<<_:V27@Pad6,1:1,0:1,V27@V9:14,V27@Buf10/bitstring>> when V27@V9 =/= 0 ->
{V27@V9,V27@Buf10}
end,
{V27@V3,V27@Buf4}
end,
<<V27@V11:V27@V0/bitstring-unit:1,V27@Buf12/bitstring>> = V27@Buf1,
{V27@V11,V27@Buf12}
end,

%% attribute number 30 with type BOOLEAN
{Term30,Bytes33} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V28@Pad3 = bit_size(Bytes32) band 7,
{V28@V0,V28@Buf1} = case Bytes32 of
<<_:V28@Pad3,0:1,V28@V5:7,V28@V7:V28@V5/binary-unit:8,V28@Buf8/bitstring>> ->
{V28@V7,V28@Buf8};
<<_:V28@Pad3,1:1,0:1,V28@V6:14,V28@V8:V28@V6/binary-unit:8,V28@Buf9/bitstring>> ->
{V28@V8,V28@Buf9};
<<_:V28@Pad3,1:1,1:1,V28@V6:6,V28@Buf7/bitstring>> ->
{V28@V8,V28@Buf9}  = decode_fragmented(V28@V6, V28@Buf7, 8),
{V28@V8,V28@Buf9}
end,
{TmpValx30,_} = begin
<<V29@V0:1,V29@Buf1/bitstring>> = V28@V0,
V29@Int2 = case V29@V0 of
0 -> false;
1 -> true
end,
{V29@Int2,V29@Buf1}
end,
{TmpValx30,V28@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes32}
end,

%% attribute number 31 with type H263Version3Options
{Term31,Bytes34} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V30@Pad3 = bit_size(Bytes33) band 7,
{V30@V0,V30@Buf1} = case Bytes33 of
<<_:V30@Pad3,0:1,V30@V5:7,V30@V7:V30@V5/binary-unit:8,V30@Buf8/bitstring>> ->
{V30@V7,V30@Buf8};
<<_:V30@Pad3,1:1,0:1,V30@V6:14,V30@V8:V30@V6/binary-unit:8,V30@Buf9/bitstring>> ->
{V30@V8,V30@Buf9};
<<_:V30@Pad3,1:1,1:1,V30@V6:6,V30@Buf7/bitstring>> ->
{V30@V8,V30@Buf9}  = decode_fragmented(V30@V6, V30@Buf7, 8),
{V30@V8,V30@Buf9}
end,
{TmpValx31,_} = dec_H263Version3Options(V30@V0),
{TmpValx31,V30@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes33}
end,
Bytes35= skipextensions(Bytes34, 3, Extensions),
{{'H263Options',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21,Term22,Term23,Term24,Term25,Term26,Term27,Term28,Term29,Term30,Term31},Bytes35}.

'enc_TransparencyParameters'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if Enc2@element@sub bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - -262144,
if Enc4@element@sub bsr 19 =:= 0 ->
begin
Enc4@element@sub@bin = binary:encode_unsigned(Enc4@element@sub),
Enc4@element@sub@bin_size0 = byte_size(Enc4@element@sub@bin),
Enc4@element@sub@bin_size = Enc4@element@sub@bin_size0 - 1,
[<<Enc4@element@sub@bin_size:2,0:6>>|Enc4@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(4, Val),
Enc6@element@sub = Enc6@element - -262144,
if Enc6@element@sub bsr 19 =:= 0 ->
begin
Enc6@element@sub@bin = binary:encode_unsigned(Enc6@element@sub),
Enc6@element@sub@bin_size0 = byte_size(Enc6@element@sub@bin),
Enc6@element@sub@bin_size = Enc6@element@sub@bin_size0 - 1,
[<<Enc6@element@sub@bin_size:2,0:6>>|Enc6@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end,
begin
Enc8@element = element(5, Val),
Enc8@element@sub = Enc8@element - 1,
if 0 =< Enc8@element@sub, Enc8@element@sub < 255 ->
Enc8@element@sub;
true ->
exit({error,{asn1,{illegal_value,Enc8@element}}})
end
end|begin
Enc10@element = element(6, Val),
Enc10@element@sub = Enc10@element - 1,
if 0 =< Enc10@element@sub, Enc10@element@sub < 255 ->
[Enc10@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end].


dec_TransparencyParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<_:6,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Add6 = V3@V3 + -262144,
{V3@Add6,V3@Buf4}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:6,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Add6 = V4@V3 + -262144,
{V4@Add6,V4@Buf4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
<<V5@V0:8/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
{V5@Add2,V5@Buf1}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes6} = begin
<<V6@V0:8/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 1,
{V6@Add2,V6@Buf1}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:7,0:1,V7@V7:7,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<_:7,1:1,0:1,V7@V8:14,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'TransparencyParameters',Term1,Term2,Term3,Term4,Term5},Bytes8}.

'enc_RefPictureSelection'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 5, 6),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_RefPictureSelection_additionalPictureMemory(Enc4@element)
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= false ->
<<0:1>>;
Enc6@element =:= true ->
<<1:1>>
end
end,
begin
Enc8@element = element(4, Val),
enc_RefPictureSelection_videoBackChannelSend(Enc8@element)
end,
Extensions|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_RefPictureSelection_enhancedReferencePicSelect(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end].
'enc_RefPictureSelection_additionalPictureMemory'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@element = element(2, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@element@sub = Enc8@element - 1,
if Enc8@element@sub bsr 8 =:= 0 ->
[align,
Enc8@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc8@element}}})
end
end
end
end,
begin
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@element@sub = Enc11@element - 1,
if Enc11@element@sub bsr 8 =:= 0 ->
[align,
Enc11@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc11@element}}})
end
end
end
end,
begin
Enc14@element = element(4, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@element@sub = Enc14@element - 1,
if Enc14@element@sub bsr 8 =:= 0 ->
[align,
Enc14@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc14@element}}})
end
end
end
end,
begin
Enc17@element = element(5, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@element@sub = Enc17@element - 1,
if Enc17@element@sub bsr 8 =:= 0 ->
[align,
Enc17@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc17@element}}})
end
end
end
end,
begin
Enc20@element = element(6, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@element@sub = Enc20@element - 1,
if Enc20@element@sub bsr 8 =:= 0 ->
[align,
Enc20@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc20@element}}})
end
end
end
end|begin
Enc23@element = element(7, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@element@sub = Enc23@element - 1,
if Enc23@element@sub bsr 8 =:= 0 ->
[align,
Enc23@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc23@element}}})
end
end
end
end].

dec_RefPictureSelection_additionalPictureMemory(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 5) band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:1/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:1/unsigned-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Add4 = V5@V0 + 1,
{V5@Add4,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
V6@Pad2 = bit_size(Bytes5) band 7,
<<_:V6@Pad2,V6@V0:1/unsigned-unit:8,V6@Buf1/bitstring>> = Bytes5,
V6@Add4 = V6@V0 + 1,
{V6@Add4,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
V7@Pad2 = bit_size(Bytes6) band 7,
<<_:V7@Pad2,V7@V0:1/unsigned-unit:8,V7@Buf1/bitstring>> = Bytes6,
V7@Add4 = V7@V0 + 1,
{V7@Add4,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = case Opt band 1 of
1 ->
begin
V8@Pad2 = bit_size(Bytes7) band 7,
<<_:V8@Pad2,V8@V0:1/unsigned-unit:8,V8@Buf1/bitstring>> = Bytes7,
V8@Add4 = V8@V0 + 1,
{V8@Add4,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V9@V0,V9@Buf1} = case Bytes8 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
V9@Pad6 = bit_size(V9@Buf2) band 7,
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<_:V9@Pad6,0:1,V9@V8:7,V9@Buf9/bitstring>> when V9@V8 =/= 0 ->
{V9@V8,V9@Buf9};
<<_:V9@Pad6,1:1,0:1,V9@V9:14,V9@Buf10/bitstring>> when V9@V9 =/= 0 ->
{V9@V9,V9@Buf10}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V11:V9@V0/bitstring-unit:1,V9@Buf12/bitstring>> = V9@Buf1,
{V9@V11,V9@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'RefPictureSelection_additionalPictureMemory',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_RefPictureSelection_videoBackChannelSend'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= none ->
<<0:1,0:3>>;
ChoiceTag =:= ackMessageOnly ->
<<0:1,1:3>>;
ChoiceTag =:= nackMessageOnly ->
<<0:1,2:3>>;
ChoiceTag =:= ackOrNackMessageOnly ->
<<0:1,3:3>>;
ChoiceTag =:= ackAndNackMessage ->
<<0:1,4:3>>
end.

dec_RefPictureSelection_videoBackChannelSend(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{none,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{ackMessageOnly,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{nackMessageOnly,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{ackOrNackMessageOnly,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{ackAndNackMessage,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_RefPictureSelection_enhancedReferencePicSelect'(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end|begin
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
true ->
enc_RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters(Enc3@element)
end
end].
'enc_RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if Enc2@element@sub bsr 7 =:= 0 ->
<<0:1,Enc2@element@sub:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 72 ->
<<Enc4@element@sub:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
align|begin
Enc6@element = element(4, Val),
Enc6@element@sub = Enc6@element - 1,
if Enc6@element@sub bsr 16 =:= 0 ->
<<Enc6@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end].

dec_RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:7/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:7,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:7,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters',Term1,Term2,Term3},Bytes6}.


dec_RefPictureSelection_enhancedReferencePicSelect(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes3} = case Opt band 1 of
1 ->
'dec_RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'RefPictureSelection_enhancedReferencePicSelect',Term1},Bytes5}.



dec_RefPictureSelection(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes3} = case Opt band 1 of
1 ->
'dec_RefPictureSelection_additionalPictureMemory'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes4} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes3,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type CHOICE
{Term3,Bytes5} = 'dec_RefPictureSelection_videoBackChannelSend'(Bytes4),

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 4 with type SEQUENCE
{Term4,Bytes7} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes6) band 7,
{V5@V0,V5@Buf1} = case Bytes6 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx4,_} = 'dec_RefPictureSelection_enhancedReferencePicSelect'(V5@V0),
{TmpValx4,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,
Bytes8= skipextensions(Bytes7, 2, Extensions),
{{'RefPictureSelection',Term1,Term2,Term3,Term4},Bytes8}.

'enc_CustomPictureClockFrequency'(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
Enc4@element = element(7, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(8, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc7@element = element(2, Val),
Enc7@element@sub = Enc7@element - 1000,
if Enc7@element@sub bsr 1 =:= 0 ->
<<Enc7@element@sub:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc9@element = element(3, Val),
Enc9@element@sub = Enc9@element - 1,
if 0 =< Enc9@element@sub, Enc9@element@sub < 127 ->
<<Enc9@element@sub:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@element}}})
end
end,
begin
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@element@sub = Enc11@element - 1,
if Enc11@element@sub bsr 11 =:= 0 ->
[align|<<Enc11@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc11@element}}})
end
end
end
end,
begin
Enc14@element = element(5, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@element@sub = Enc14@element - 1,
if Enc14@element@sub bsr 11 =:= 0 ->
[align|<<Enc14@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc14@element}}})
end
end
end
end,
begin
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@element@sub = Enc17@element - 1,
if Enc17@element@sub bsr 11 =:= 0 ->
[align|<<Enc17@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc17@element}}})
end
end
end
end,
begin
Enc20@element = element(7, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@element@sub = Enc20@element - 1,
if Enc20@element@sub bsr 11 =:= 0 ->
[align|<<Enc20@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc20@element}}})
end
end
end
end|begin
Enc23@element = element(8, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@element@sub = Enc23@element - 1,
if Enc23@element@sub bsr 11 =:= 0 ->
[align|<<Enc23@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc23@element}}})
end
end
end
end].


dec_CustomPictureClockFrequency(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:1/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1000,
{V3@Add2,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:2/unsigned-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Add4 = V5@V0 + 1,
{V5@Add4,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
begin
V6@Pad2 = bit_size(Bytes5) band 7,
<<_:V6@Pad2,V6@V0:2/unsigned-unit:8,V6@Buf1/bitstring>> = Bytes5,
V6@Add4 = V6@V0 + 1,
{V6@Add4,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
V7@Pad2 = bit_size(Bytes6) band 7,
<<_:V7@Pad2,V7@V0:2/unsigned-unit:8,V7@Buf1/bitstring>> = Bytes6,
V7@Add4 = V7@V0 + 1,
{V7@Add4,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
V8@Pad2 = bit_size(Bytes7) band 7,
<<_:V8@Pad2,V8@V0:2/unsigned-unit:8,V8@Buf1/bitstring>> = Bytes7,
V8@Add4 = V8@V0 + 1,
{V8@Add4,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type INTEGER
{Term7,Bytes9} = case Opt band 1 of
1 ->
begin
V9@Pad2 = bit_size(Bytes8) band 7,
<<_:V9@Pad2,V9@V0:2/unsigned-unit:8,V9@Buf1/bitstring>> = Bytes8,
V9@Add4 = V9@V0 + 1,
{V9@Add4,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V10@V0,V10@Buf1} = case Bytes9 of
<<0:1,V10@V3:6,V10@Buf4/bitstring>> ->
V10@Add5 = V10@V3 + 1,
{V10@Add5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
V10@Pad6 = bit_size(V10@Buf2) band 7,
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<_:V10@Pad6,0:1,V10@V8:7,V10@Buf9/bitstring>> when V10@V8 =/= 0 ->
{V10@V8,V10@Buf9};
<<_:V10@Pad6,1:1,0:1,V10@V9:14,V10@Buf10/bitstring>> when V10@V9 =/= 0 ->
{V10@V9,V10@Buf10}
end,
{V10@V3,V10@Buf4}
end,
<<V10@V11:V10@V0/bitstring-unit:1,V10@Buf12/bitstring>> = V10@Buf1,
{V10@V11,V10@Buf12}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
{{'CustomPictureClockFrequency',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_CustomPictureFormat'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if Enc2@element@sub bsr 11 =:= 0 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if Enc4@element@sub bsr 11 =:= 0 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(4, Val),
Enc6@element@sub = Enc6@element - 1,
if Enc6@element@sub bsr 11 =:= 0 ->
<<Enc6@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end,
begin
Enc8@element = element(5, Val),
Enc8@element@sub = Enc8@element - 1,
if Enc8@element@sub bsr 11 =:= 0 ->
<<Enc8@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@element}}})
end
end,
begin
Enc10@element = element(6, Val),
enc_CustomPictureFormat_mPI(Enc10@element)
end|begin
Enc11@element = element(7, Val),
enc_CustomPictureFormat_pixelAspectInformation(Enc11@element)
end].
'enc_CustomPictureFormat_mPI'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 31 ->
<<Enc4@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end
end
end|begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_CustomPictureFormat_mPI_customPCF(Enc7@element)
end
end].
'enc_CustomPictureFormat_mPI_customPCF'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_CustomPictureFormat_mPI_customPCF_SETOF(Comp) || Comp <- Val]]
end.

'enc_CustomPictureFormat_mPI_customPCF_SETOF'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1000,
if Enc2@element@sub bsr 1 =:= 0 ->
<<0:1,Enc2@element@sub:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 127 ->
<<Enc4@element@sub:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
align|begin
Enc6@element = element(4, Val),
Enc6@element@sub = Enc6@element - 1,
if Enc6@element@sub bsr 11 =:= 0 ->
<<Enc6@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end].

dec_CustomPictureFormat_mPI_customPCF_SETOF(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:1/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1000,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:7/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:7,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:7,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'CustomPictureFormat_mPI_customPCF_SETOF',Term1,Term2,Term3},Bytes6}.


dec_CustomPictureFormat_mPI_customPCF(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components24(V1@Add2, V1@Buf1, []).


dec_CustomPictureFormat_mPI(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:5/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type SET OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_CustomPictureFormat_mPI_customPCF'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'CustomPictureFormat_mPI',Term1,Term2},Bytes6}.

'enc_CustomPictureFormat_pixelAspectInformation'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= anyPixelAspectRatio ->
if ChoiceVal =:= false ->
<<0:1,0:2,0:1>>;
ChoiceVal =:= true ->
<<0:1,0:2,1:1>>
end;
ChoiceTag =:= pixelAspectCode ->
[<<0:1,1:2>>|enc_CustomPictureFormat_pixelAspectInformation_pixelAspectCode(ChoiceVal)];
ChoiceTag =:= extendedPAR ->
[<<0:1,2:2>>|enc_CustomPictureFormat_pixelAspectInformation_extendedPAR(ChoiceVal)]
end.
'enc_CustomPictureFormat_pixelAspectInformation_pixelAspectCode'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 14 ->
[<<Enc2@len@sub:4>>|[begin
Comp@sub = Comp - 1,
if 0 =< Comp@sub, Comp@sub < 14 ->
<<Comp@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.


dec_CustomPictureFormat_pixelAspectInformation_pixelAspectCode(Bytes) ->
%% Length with constraint {1,14}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components25(V1@Add2, V1@Buf1, []).

'enc_CustomPictureFormat_pixelAspectInformation_extendedPAR'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_CustomPictureFormat_pixelAspectInformation_extendedPAR_SETOF(Comp) || Comp <- Val]]
end.

'enc_CustomPictureFormat_pixelAspectInformation_extendedPAR_SETOF'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 255 ->
[<<0:1,Enc2@element@sub:8>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 255 ->
[Enc4@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].

dec_CustomPictureFormat_pixelAspectInformation_extendedPAR_SETOF(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:8/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'CustomPictureFormat_pixelAspectInformation_extendedPAR_SETOF',Term1,Term2},Bytes5}.


dec_CustomPictureFormat_pixelAspectInformation_extendedPAR(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components26(V1@Add4, V1@Buf1, []).


dec_CustomPictureFormat_pixelAspectInformation(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end
end,
{{anyPixelAspectRatio,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_CustomPictureFormat_pixelAspectInformation_pixelAspectCode'(Bytes2)
end,
{{pixelAspectCode,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_CustomPictureFormat_pixelAspectInformation_extendedPAR'(Bytes2)
end,
{{extendedPAR,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_CustomPictureFormat(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
<<V5@V0:2/unsigned-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
{V5@Add2,V5@Buf1}
end,

%% attribute number 5 with type SEQUENCE
{Term5,Bytes6} = 'dec_CustomPictureFormat_mPI'(Bytes5),

%% attribute number 6 with type CHOICE
{Term6,Bytes7} = 'dec_CustomPictureFormat_pixelAspectInformation'(Bytes6),

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'CustomPictureFormat',Term1,Term2,Term3,Term4,Term5,Term6},Bytes9}.

'enc_H263VideoModeCombos'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_H263ModeComboFlags(Enc2@element)
end|begin
Enc3@element = element(3, Val),
enc_H263VideoModeCombos_h263VideoCoupledModes(Enc3@element)
end].
'enc_H263VideoModeCombos_h263VideoCoupledModes'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_H263ModeComboFlags(Comp) || Comp <- Val]]
end.


dec_H263VideoModeCombos_h263VideoCoupledModes(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components27(V1@Add2, V1@Buf1, []).



dec_H263VideoModeCombos(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type H263ModeComboFlags
{Term1,Bytes2} = dec_H263ModeComboFlags(Bytes1),

%% attribute number 2 with type SET OF
{Term2,Bytes3} = 'dec_H263VideoModeCombos_h263VideoCoupledModes'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V2@V0,V2@Buf1} = case Bytes3 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'H263VideoModeCombos',Term1,Term2},Bytes5}.

'enc_H263ModeComboFlags'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 23, 25),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc1@bitmap:2>>
end,
[begin
Enc3@element = element(2, Val),
if Extensions =:= [] ->
if Enc3@element =:= false ->
<<0:1,0:1>>;
Enc3@element =:= true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= false ->
<<1:1,0:1>>;
Enc3@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(3, Val),
Enc7@element = element(4, Val),
if Enc5@element =:= false ->
if Enc7@element =:= false ->
<<0:1,0:1>>;
Enc7@element =:= true ->
<<0:1,1:1>>
end;
Enc5@element =:= true ->
if Enc7@element =:= false ->
<<1:1,0:1>>;
Enc7@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(5, Val),
Enc11@element = element(6, Val),
if Enc9@element =:= false ->
if Enc11@element =:= false ->
<<0:1,0:1>>;
Enc11@element =:= true ->
<<0:1,1:1>>
end;
Enc9@element =:= true ->
if Enc11@element =:= false ->
<<1:1,0:1>>;
Enc11@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@element = element(7, Val),
Enc15@element = element(8, Val),
if Enc13@element =:= false ->
if Enc15@element =:= false ->
<<0:1,0:1>>;
Enc15@element =:= true ->
<<0:1,1:1>>
end;
Enc13@element =:= true ->
if Enc15@element =:= false ->
<<1:1,0:1>>;
Enc15@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc17@element = element(9, Val),
Enc19@element = element(10, Val),
if Enc17@element =:= false ->
if Enc19@element =:= false ->
<<0:1,0:1>>;
Enc19@element =:= true ->
<<0:1,1:1>>
end;
Enc17@element =:= true ->
if Enc19@element =:= false ->
<<1:1,0:1>>;
Enc19@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc21@element = element(11, Val),
Enc23@element = element(12, Val),
if Enc21@element =:= false ->
if Enc23@element =:= false ->
<<0:1,0:1>>;
Enc23@element =:= true ->
<<0:1,1:1>>
end;
Enc21@element =:= true ->
if Enc23@element =:= false ->
<<1:1,0:1>>;
Enc23@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc25@element = element(13, Val),
Enc27@element = element(14, Val),
if Enc25@element =:= false ->
if Enc27@element =:= false ->
<<0:1,0:1>>;
Enc27@element =:= true ->
<<0:1,1:1>>
end;
Enc25@element =:= true ->
if Enc27@element =:= false ->
<<1:1,0:1>>;
Enc27@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc29@element = element(15, Val),
Enc31@element = element(16, Val),
if Enc29@element =:= false ->
if Enc31@element =:= false ->
<<0:1,0:1>>;
Enc31@element =:= true ->
<<0:1,1:1>>
end;
Enc29@element =:= true ->
if Enc31@element =:= false ->
<<1:1,0:1>>;
Enc31@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc33@element = element(17, Val),
Enc35@element = element(18, Val),
if Enc33@element =:= false ->
if Enc35@element =:= false ->
<<0:1,0:1>>;
Enc35@element =:= true ->
<<0:1,1:1>>
end;
Enc33@element =:= true ->
if Enc35@element =:= false ->
<<1:1,0:1>>;
Enc35@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc37@element = element(19, Val),
Enc39@element = element(20, Val),
if Enc37@element =:= false ->
if Enc39@element =:= false ->
<<0:1,0:1>>;
Enc39@element =:= true ->
<<0:1,1:1>>
end;
Enc37@element =:= true ->
if Enc39@element =:= false ->
<<1:1,0:1>>;
Enc39@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc41@element = element(21, Val),
Enc43@element = element(22, Val),
if Enc41@element =:= false ->
if Enc43@element =:= false ->
<<0:1,0:1>>;
Enc43@element =:= true ->
<<0:1,1:1>>
end;
Enc41@element =:= true ->
if Enc43@element =:= false ->
<<1:1,0:1>>;
Enc43@element =:= true ->
<<1:1,1:1>>
end
end
end,
Extensions,
begin
Enc45@element = element(23, Val),
if Enc45@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc47@output = if Enc45@element =:= false ->
<<0:1,0:7>>;
Enc45@element =:= true ->
<<1:1,0:7>>
end,
Enc47@bin = Enc47@output,
[align,
1|Enc47@bin]
end
end
end|begin
Enc49@element = element(24, Val),
if Enc49@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc50@output = enc_H263Version3Options(Enc49@element),
Enc50@bin = complete(Enc50@output),
Enc50@len = byte_size(Enc50@bin),
if Enc50@len < 128 ->
[align,
Enc50@len|Enc50@bin];
Enc50@len < 16384 ->
[align,
<<2:2,Enc50@len:14>>|Enc50@bin];
true ->
[align|encode_fragmented(Enc50@bin, 8)]
end
end
end
end].


dec_H263ModeComboFlags(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes10} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes9,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes11} = begin
<<V11@V0:1,V11@Buf1/bitstring>> = Bytes10,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end,

%% attribute number 11 with type BOOLEAN
{Term11,Bytes12} = begin
<<V12@V0:1,V12@Buf1/bitstring>> = Bytes11,
V12@Int2 = case V12@V0 of
0 -> false;
1 -> true
end,
{V12@Int2,V12@Buf1}
end,

%% attribute number 12 with type BOOLEAN
{Term12,Bytes13} = begin
<<V13@V0:1,V13@Buf1/bitstring>> = Bytes12,
V13@Int2 = case V13@V0 of
0 -> false;
1 -> true
end,
{V13@Int2,V13@Buf1}
end,

%% attribute number 13 with type BOOLEAN
{Term13,Bytes14} = begin
<<V14@V0:1,V14@Buf1/bitstring>> = Bytes13,
V14@Int2 = case V14@V0 of
0 -> false;
1 -> true
end,
{V14@Int2,V14@Buf1}
end,

%% attribute number 14 with type BOOLEAN
{Term14,Bytes15} = begin
<<V15@V0:1,V15@Buf1/bitstring>> = Bytes14,
V15@Int2 = case V15@V0 of
0 -> false;
1 -> true
end,
{V15@Int2,V15@Buf1}
end,

%% attribute number 15 with type BOOLEAN
{Term15,Bytes16} = begin
<<V16@V0:1,V16@Buf1/bitstring>> = Bytes15,
V16@Int2 = case V16@V0 of
0 -> false;
1 -> true
end,
{V16@Int2,V16@Buf1}
end,

%% attribute number 16 with type BOOLEAN
{Term16,Bytes17} = begin
<<V17@V0:1,V17@Buf1/bitstring>> = Bytes16,
V17@Int2 = case V17@V0 of
0 -> false;
1 -> true
end,
{V17@Int2,V17@Buf1}
end,

%% attribute number 17 with type BOOLEAN
{Term17,Bytes18} = begin
<<V18@V0:1,V18@Buf1/bitstring>> = Bytes17,
V18@Int2 = case V18@V0 of
0 -> false;
1 -> true
end,
{V18@Int2,V18@Buf1}
end,

%% attribute number 18 with type BOOLEAN
{Term18,Bytes19} = begin
<<V19@V0:1,V19@Buf1/bitstring>> = Bytes18,
V19@Int2 = case V19@V0 of
0 -> false;
1 -> true
end,
{V19@Int2,V19@Buf1}
end,

%% attribute number 19 with type BOOLEAN
{Term19,Bytes20} = begin
<<V20@V0:1,V20@Buf1/bitstring>> = Bytes19,
V20@Int2 = case V20@V0 of
0 -> false;
1 -> true
end,
{V20@Int2,V20@Buf1}
end,

%% attribute number 20 with type BOOLEAN
{Term20,Bytes21} = begin
<<V21@V0:1,V21@Buf1/bitstring>> = Bytes20,
V21@Int2 = case V21@V0 of
0 -> false;
1 -> true
end,
{V21@Int2,V21@Buf1}
end,

%% attribute number 21 with type BOOLEAN
{Term21,Bytes22} = begin
<<V22@V0:1,V22@Buf1/bitstring>> = Bytes21,
V22@Int2 = case V22@V0 of
0 -> false;
1 -> true
end,
{V22@Int2,V22@Buf1}
end,

%% Extensions
{Extensions,Bytes23} = case Ext of
0 -> {<<>>,Bytes22};
1 ->
{V23@V0,V23@Buf1} = case Bytes22 of
<<0:1,V23@V3:6,V23@Buf4/bitstring>> ->
V23@Add5 = V23@V3 + 1,
{V23@Add5,V23@Buf4};
<<1:1,V23@Buf2/bitstring>> ->
V23@Pad6 = bit_size(V23@Buf2) band 7,
{V23@V3,V23@Buf4} = case V23@Buf2 of
<<_:V23@Pad6,0:1,V23@V8:7,V23@Buf9/bitstring>> when V23@V8 =/= 0 ->
{V23@V8,V23@Buf9};
<<_:V23@Pad6,1:1,0:1,V23@V9:14,V23@Buf10/bitstring>> when V23@V9 =/= 0 ->
{V23@V9,V23@Buf10}
end,
{V23@V3,V23@Buf4}
end,
<<V23@V11:V23@V0/bitstring-unit:1,V23@Buf12/bitstring>> = V23@Buf1,
{V23@V11,V23@Buf12}
end,

%% attribute number 22 with type BOOLEAN
{Term22,Bytes24} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V24@Pad3 = bit_size(Bytes23) band 7,
{V24@V0,V24@Buf1} = case Bytes23 of
<<_:V24@Pad3,0:1,V24@V5:7,V24@V7:V24@V5/binary-unit:8,V24@Buf8/bitstring>> ->
{V24@V7,V24@Buf8};
<<_:V24@Pad3,1:1,0:1,V24@V6:14,V24@V8:V24@V6/binary-unit:8,V24@Buf9/bitstring>> ->
{V24@V8,V24@Buf9};
<<_:V24@Pad3,1:1,1:1,V24@V6:6,V24@Buf7/bitstring>> ->
{V24@V8,V24@Buf9}  = decode_fragmented(V24@V6, V24@Buf7, 8),
{V24@V8,V24@Buf9}
end,
{TmpValx22,_} = begin
<<V25@V0:1,V25@Buf1/bitstring>> = V24@V0,
V25@Int2 = case V25@V0 of
0 -> false;
1 -> true
end,
{V25@Int2,V25@Buf1}
end,
{TmpValx22,V24@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes23}
end,

%% attribute number 23 with type H263Version3Options
{Term23,Bytes25} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V26@Pad3 = bit_size(Bytes24) band 7,
{V26@V0,V26@Buf1} = case Bytes24 of
<<_:V26@Pad3,0:1,V26@V5:7,V26@V7:V26@V5/binary-unit:8,V26@Buf8/bitstring>> ->
{V26@V7,V26@Buf8};
<<_:V26@Pad3,1:1,0:1,V26@V6:14,V26@V8:V26@V6/binary-unit:8,V26@Buf9/bitstring>> ->
{V26@V8,V26@Buf9};
<<_:V26@Pad3,1:1,1:1,V26@V6:6,V26@Buf7/bitstring>> ->
{V26@V8,V26@Buf9}  = decode_fragmented(V26@V6, V26@Buf7, 8),
{V26@V8,V26@Buf9}
end,
{TmpValx23,_} = dec_H263Version3Options(V26@V0),
{TmpValx23,V26@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes24}
end,
Bytes26= skipextensions(Bytes25, 3, Extensions),
{{'H263ModeComboFlags',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21,Term22,Term23},Bytes26}.

'enc_H263Version3Options'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc4@element = element(3, Val),
if Enc2@element =:= false ->
if Enc4@element =:= false ->
<<0:1,0:1,0:1>>;
Enc4@element =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@element =:= true ->
if Enc4@element =:= false ->
<<0:1,1:1,0:1>>;
Enc4@element =:= true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc6@element = element(4, Val),
Enc8@element = element(5, Val),
if Enc6@element =:= false ->
if Enc8@element =:= false ->
<<0:1,0:1>>;
Enc8@element =:= true ->
<<0:1,1:1>>
end;
Enc6@element =:= true ->
if Enc8@element =:= false ->
<<1:1,0:1>>;
Enc8@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(6, Val),
Enc12@element = element(7, Val),
if Enc10@element =:= false ->
if Enc12@element =:= false ->
<<0:1,0:1>>;
Enc12@element =:= true ->
<<0:1,1:1>>
end;
Enc10@element =:= true ->
if Enc12@element =:= false ->
<<1:1,0:1>>;
Enc12@element =:= true ->
<<1:1,1:1>>
end
end
end|begin
Enc14@element = element(8, Val),
Enc16@element = element(9, Val),
if Enc14@element =:= false ->
if Enc16@element =:= false ->
<<0:1,0:1>>;
Enc16@element =:= true ->
<<0:1,1:1>>
end;
Enc14@element =:= true ->
if Enc16@element =:= false ->
<<1:1,0:1>>;
Enc16@element =:= true ->
<<1:1,1:1>>
end
end
end].


dec_H263Version3Options(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V10@V0,V10@Buf1} = case Bytes9 of
<<0:1,V10@V3:6,V10@Buf4/bitstring>> ->
V10@Add5 = V10@V3 + 1,
{V10@Add5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
V10@Pad6 = bit_size(V10@Buf2) band 7,
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<_:V10@Pad6,0:1,V10@V8:7,V10@Buf9/bitstring>> when V10@V8 =/= 0 ->
{V10@V8,V10@Buf9};
<<_:V10@Pad6,1:1,0:1,V10@V9:14,V10@Buf10/bitstring>> when V10@V9 =/= 0 ->
{V10@V9,V10@Buf10}
end,
{V10@V3,V10@Buf4}
end,
<<V10@V11:V10@V0/bitstring-unit:1,V10@Buf12/bitstring>> = V10@Buf1,
{V10@V11,V10@Buf12}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
{{'H263Version3Options',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes11}.

'enc_IS11172VideoCapability'(Val) ->
Enc7@bitmap = extension_bitmap(Val, 9, 10),
Extensions = if Enc7@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(4, Val),
Enc3@element = element(5, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(6, Val),
Enc5@element = element(7, Val),
if Enc4@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@element = element(8, Val),
Enc9@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
if Enc9@element =:= false ->
<<0:1,0:1>>;
Enc9@element =:= true ->
<<0:1,1:1>>
end;
true ->
if Enc9@element =:= false ->
<<1:1,0:1>>;
Enc9@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
Enc11@element bsr 30 =:= 0 ->
begin
Enc11@element@bin = binary:encode_unsigned(Enc11@element),
Enc11@element@bin_size0 = byte_size(Enc11@element@bin),
Enc11@element@bin_size = Enc11@element@bin_size0 - 1,
[<<Enc11@element@bin_size:2>>,
align|Enc11@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc11@element}}})
end
end,
begin
Enc14@element = element(4, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
Enc14@element bsr 18 =:= 0 ->
begin
Enc14@element@bin = binary:encode_unsigned(Enc14@element),
Enc14@element@bin_size0 = byte_size(Enc14@element@bin),
Enc14@element@bin_size = Enc14@element@bin_size0 - 1,
[<<Enc14@element@bin_size:2>>,
align|Enc14@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc14@element}}})
end
end,
begin
Enc17@element = element(5, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
Enc17@element bsr 14 =:= 0 ->
[align|<<Enc17@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc17@element}}})
end
end,
begin
Enc20@element = element(6, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
Enc20@element bsr 14 =:= 0 ->
[align|<<Enc20@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc20@element}}})
end
end,
begin
Enc23@element = element(7, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
Enc23@element bsr 4 =:= 0 ->
<<Enc23@element:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc23@element}}})
end
end,
begin
Enc26@element = element(8, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
Enc26@element bsr 32 =:= 0 ->
begin
Enc26@element@bin = binary:encode_unsigned(Enc26@element),
Enc26@element@bin_size0 = byte_size(Enc26@element@bin),
Enc26@element@bin_size = Enc26@element@bin_size0 - 1,
[<<Enc26@element@bin_size:2>>,
align|Enc26@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc26@element}}})
end
end,
Extensions|begin
Enc29@element = element(9, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@output = if Enc29@element =:= false ->
<<0:1,0:7>>;
Enc29@element =:= true ->
<<1:1,0:7>>
end,
Enc31@bin = Enc31@output,
[align,
1|Enc31@bin]
end
end
end].


dec_IS11172VideoCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V5@V0:2/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/unsigned-unit:8,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V3,V5@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
begin
V6@Pad2 = bit_size(Bytes5) band 7,
<<_:V6@Pad2,V6@V0:2/unsigned-unit:8,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
V7@Pad2 = bit_size(Bytes6) band 7,
<<_:V7@Pad2,V7@V0:2/unsigned-unit:8,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V8@V0:4/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes7,
{V8@V0,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type INTEGER
{Term7,Bytes9} = case Opt band 1 of
1 ->
begin
<<V9@V0:2/unsigned-unit:1,V9@Buf1/bitstring>> = Bytes8,
V9@Add2 = V9@V0 + 1,
V9@Pad5 = bit_size(V9@Buf1) band 7,
<<_:V9@Pad5,V9@V3:V9@Add2/unsigned-unit:8,V9@Buf4/bitstring>> = V9@Buf1,
{V9@V3,V9@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V10@V0,V10@Buf1} = case Bytes9 of
<<0:1,V10@V3:6,V10@Buf4/bitstring>> ->
V10@Add5 = V10@V3 + 1,
{V10@Add5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
V10@Pad6 = bit_size(V10@Buf2) band 7,
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<_:V10@Pad6,0:1,V10@V8:7,V10@Buf9/bitstring>> when V10@V8 =/= 0 ->
{V10@V8,V10@Buf9};
<<_:V10@Pad6,1:1,0:1,V10@V9:14,V10@Buf10/bitstring>> when V10@V9 =/= 0 ->
{V10@V9,V10@Buf10}
end,
{V10@V3,V10@Buf4}
end,
<<V10@V11:V10@V0/bitstring-unit:1,V10@Buf12/bitstring>> = V10@Buf1,
{V10@V11,V10@Buf12}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes11} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes10) band 7,
{V11@V0,V11@Buf1} = case Bytes10 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx8,_} = begin
<<V12@V0:1,V12@Buf1/bitstring>> = V11@V0,
V12@Int2 = case V12@V0 of
0 -> false;
1 -> true
end,
{V12@Int2,V12@Buf1}
end,
{TmpValx8,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,
Bytes12= skipextensions(Bytes11, 2, Extensions),
{{'IS11172VideoCapability',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes12}.

'enc_AudioCapability'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:4>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= g711Alaw64k ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,1:4>>,
align,
ChoiceVal@sub];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= g711Alaw56k ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,2:4>>,
align,
ChoiceVal@sub];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= g711Ulaw64k ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,3:4>>,
align,
ChoiceVal@sub];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= g711Ulaw56k ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,4:4>>,
align,
ChoiceVal@sub];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= 'g722-64k' ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,5:4>>,
align,
ChoiceVal@sub];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= 'g722-56k' ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,6:4>>,
align,
ChoiceVal@sub];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= 'g722-48k' ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,7:4>>,
align,
ChoiceVal@sub];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= g7231 ->
[<<0:1,8:4>>|enc_AudioCapability_g7231(ChoiceVal)];
ChoiceTag =:= g728 ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,9:4>>,
align,
ChoiceVal@sub];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= g729 ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,10:4>>,
align,
ChoiceVal@sub];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= g729AnnexA ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,11:4>>,
align,
ChoiceVal@sub];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= is11172AudioCapability ->
[<<0:1,12:4>>|enc_IS11172AudioCapability(ChoiceVal)];
ChoiceTag =:= is13818AudioCapability ->
[<<0:1,13:4>>|enc_IS13818AudioCapability(ChoiceVal)];
ChoiceTag =:= g729wAnnexB ->
begin
Enc26@output = begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 8 =:= 0 ->
[ChoiceVal@sub];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end,
Enc26@bin = iolist_to_binary(Enc26@output),
[<<1:1,0:7>>,
align,
1|Enc26@bin]
end;
ChoiceTag =:= g729AnnexAwAnnexB ->
begin
Enc28@output = begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 8 =:= 0 ->
[ChoiceVal@sub];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end,
Enc28@bin = iolist_to_binary(Enc28@output),
[<<1:1,1:7>>,
align,
1|Enc28@bin]
end;
ChoiceTag =:= g7231AnnexCCapability ->
begin
Enc29@output = enc_G7231AnnexCCapability(ChoiceVal),
Enc29@bin = complete(Enc29@output),
Enc29@len = byte_size(Enc29@bin),
if Enc29@len < 128 ->
[<<1:1,2:7>>,
align,
Enc29@len|Enc29@bin];
Enc29@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc29@len:14>>|Enc29@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc29@bin, 8)]
end
end;
ChoiceTag =:= gsmFullRate ->
begin
Enc30@output = enc_GSMAudioCapability(ChoiceVal),
Enc30@bin = complete(Enc30@output),
Enc30@len = byte_size(Enc30@bin),
if Enc30@len < 128 ->
[<<1:1,3:7>>,
align,
Enc30@len|Enc30@bin];
Enc30@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc30@len:14>>|Enc30@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc30@bin, 8)]
end
end;
ChoiceTag =:= gsmHalfRate ->
begin
Enc31@output = enc_GSMAudioCapability(ChoiceVal),
Enc31@bin = complete(Enc31@output),
Enc31@len = byte_size(Enc31@bin),
if Enc31@len < 128 ->
[<<1:1,4:7>>,
align,
Enc31@len|Enc31@bin];
Enc31@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc31@len:14>>|Enc31@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc31@bin, 8)]
end
end;
ChoiceTag =:= gsmEnhancedFullRate ->
begin
Enc32@output = enc_GSMAudioCapability(ChoiceVal),
Enc32@bin = complete(Enc32@output),
Enc32@len = byte_size(Enc32@bin),
if Enc32@len < 128 ->
[<<1:1,5:7>>,
align,
Enc32@len|Enc32@bin];
Enc32@len < 16384 ->
[<<1:1,5:7>>,
align,
<<2:2,Enc32@len:14>>|Enc32@bin];
true ->
[<<1:1,5:7>>,
align|encode_fragmented(Enc32@bin, 8)]
end
end;
ChoiceTag =:= genericAudioCapability ->
begin
Enc33@output = enc_GenericCapability(ChoiceVal),
Enc33@bin = complete(Enc33@output),
Enc33@len = byte_size(Enc33@bin),
if Enc33@len < 128 ->
[<<1:1,6:7>>,
align,
Enc33@len|Enc33@bin];
Enc33@len < 16384 ->
[<<1:1,6:7>>,
align,
<<2:2,Enc33@len:14>>|Enc33@bin];
true ->
[<<1:1,6:7>>,
align|encode_fragmented(Enc33@bin, 8)]
end
end;
ChoiceTag =:= g729Extensions ->
begin
Enc34@output = enc_G729Extensions(ChoiceVal),
Enc34@bin = complete(Enc34@output),
Enc34@len = byte_size(Enc34@bin),
if Enc34@len < 128 ->
[<<1:1,7:7>>,
align,
Enc34@len|Enc34@bin];
Enc34@len < 16384 ->
[<<1:1,7:7>>,
align,
<<2:2,Enc34@len:14>>|Enc34@bin];
true ->
[<<1:1,7:7>>,
align|encode_fragmented(Enc34@bin, 8)]
end
end;
ChoiceTag =:= vbd ->
begin
Enc35@output = enc_VBDCapability(ChoiceVal),
Enc35@bin = complete(Enc35@output),
Enc35@len = byte_size(Enc35@bin),
if Enc35@len < 128 ->
[<<1:1,8:7>>,
align,
Enc35@len|Enc35@bin];
Enc35@len < 16384 ->
[<<1:1,8:7>>,
align,
<<2:2,Enc35@len:14>>|Enc35@bin];
true ->
[<<1:1,8:7>>,
align|encode_fragmented(Enc35@bin, 8)]
end
end;
ChoiceTag =:= audioTelephonyEvent ->
begin
Enc36@output = enc_NoPTAudioTelephonyEventCapability(ChoiceVal),
Enc36@bin = complete(Enc36@output),
Enc36@len = byte_size(Enc36@bin),
if Enc36@len < 128 ->
[<<1:1,9:7>>,
align,
Enc36@len|Enc36@bin];
Enc36@len < 16384 ->
[<<1:1,9:7>>,
align,
<<2:2,Enc36@len:14>>|Enc36@bin];
true ->
[<<1:1,9:7>>,
align|encode_fragmented(Enc36@bin, 8)]
end
end;
ChoiceTag =:= audioTone ->
begin
Enc37@output = enc_NoPTAudioToneCapability(ChoiceVal),
Enc37@bin = complete(Enc37@output),
Enc37@len = byte_size(Enc37@bin),
if Enc37@len < 128 ->
[<<1:1,10:7>>,
align,
Enc37@len|Enc37@bin];
Enc37@len < 16384 ->
[<<1:1,10:7>>,
align,
<<2:2,Enc37@len:14>>|Enc37@bin];
true ->
[<<1:1,10:7>>,
align|encode_fragmented(Enc37@bin, 8)]
end
end
end.
'enc_AudioCapability_g7231'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - 1,
if Enc1@element@sub bsr 8 =:= 0 ->
Enc1@element@sub;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
if Enc3@element =:= false ->
<<0:1>>;
Enc3@element =:= true ->
<<1:1>>
end
end].

dec_AudioCapability_g7231(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
{V1@Add4,V1@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,
{{'AudioCapability_g7231',Term1,Term2},Bytes2}.



dec_AudioCapability(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end
end,
{{g711Alaw64k,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end
end,
{{g711Alaw56k,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
V4@Pad2 = bit_size(Bytes2) band 7,
<<_:V4@Pad2,V4@V0:1/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes2,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end
end,
{{g711Ulaw64k,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
V5@Pad2 = bit_size(Bytes2) band 7,
<<_:V5@Pad2,V5@V0:1/unsigned-unit:8,V5@Buf1/bitstring>> = Bytes2,
V5@Add4 = V5@V0 + 1,
{V5@Add4,V5@Buf1}
end
end,
{{g711Ulaw56k,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
V6@Pad2 = bit_size(Bytes2) band 7,
<<_:V6@Pad2,V6@V0:1/unsigned-unit:8,V6@Buf1/bitstring>> = Bytes2,
V6@Add4 = V6@V0 + 1,
{V6@Add4,V6@Buf1}
end
end,
{{'g722-64k',Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
V7@Pad2 = bit_size(Bytes2) band 7,
<<_:V7@Pad2,V7@V0:1/unsigned-unit:8,V7@Buf1/bitstring>> = Bytes2,
V7@Add4 = V7@V0 + 1,
{V7@Add4,V7@Buf1}
end
end,
{{'g722-56k',Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
V8@Pad2 = bit_size(Bytes2) band 7,
<<_:V8@Pad2,V8@V0:1/unsigned-unit:8,V8@Buf1/bitstring>> = Bytes2,
V8@Add4 = V8@V0 + 1,
{V8@Add4,V8@Buf1}
end
end,
{{'g722-48k',Val},NewBytes};
8 ->
{Val,NewBytes} = begin
'dec_AudioCapability_g7231'(Bytes2)
end,
{{g7231,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
V9@Pad2 = bit_size(Bytes2) band 7,
<<_:V9@Pad2,V9@V0:1/unsigned-unit:8,V9@Buf1/bitstring>> = Bytes2,
V9@Add4 = V9@V0 + 1,
{V9@Add4,V9@Buf1}
end
end,
{{g728,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
begin
V10@Pad2 = bit_size(Bytes2) band 7,
<<_:V10@Pad2,V10@V0:1/unsigned-unit:8,V10@Buf1/bitstring>> = Bytes2,
V10@Add4 = V10@V0 + 1,
{V10@Add4,V10@Buf1}
end
end,
{{g729,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
begin
V11@Pad2 = bit_size(Bytes2) band 7,
<<_:V11@Pad2,V11@V0:1/unsigned-unit:8,V11@Buf1/bitstring>> = Bytes2,
V11@Add4 = V11@V0 + 1,
{V11@Add4,V11@Buf1}
end
end,
{{g729AnnexA,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
dec_IS11172AudioCapability(Bytes2)
end,
{{is11172AudioCapability,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
dec_IS13818AudioCapability(Bytes2)
end,
{{is13818AudioCapability,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
V3@Pad2 = bit_size(V2@V0) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = V2@V0,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,
{TmpVal,V2@Buf1}
end,
{{g729wAnnexB,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
V4@Pad2 = bit_size(V2@V0) band 7,
<<_:V4@Pad2,V4@V0:1/unsigned-unit:8,V4@Buf1/bitstring>> = V2@V0,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end,
{TmpVal,V2@Buf1}
end,
{{g729AnnexAwAnnexB,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_G7231AnnexCCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{g7231AnnexCCapability,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_GSMAudioCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{gsmFullRate,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_GSMAudioCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{gsmHalfRate,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_GSMAudioCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{gsmEnhancedFullRate,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_GenericCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{genericAudioCapability,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_G729Extensions(V2@V0),
{TmpVal,V2@Buf1}
end,
{{g729Extensions,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_VBDCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{vbd,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_NoPTAudioTelephonyEventCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{audioTelephonyEvent,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_NoPTAudioToneCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{audioTone,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_G729Extensions'(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc3@element@sub = Enc3@element - 1,
if Enc3@element@sub bsr 8 =:= 0 ->
[align,
Enc3@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end
end
end,
begin
Enc6@element = element(3, Val),
Enc8@element = element(4, Val),
if Enc6@element =:= false ->
if Enc8@element =:= false ->
<<0:1,0:1>>;
Enc8@element =:= true ->
<<0:1,1:1>>
end;
Enc6@element =:= true ->
if Enc8@element =:= false ->
<<1:1,0:1>>;
Enc8@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(5, Val),
Enc12@element = element(6, Val),
if Enc10@element =:= false ->
if Enc12@element =:= false ->
<<0:1,0:1>>;
Enc12@element =:= true ->
<<0:1,1:1>>
end;
Enc10@element =:= true ->
if Enc12@element =:= false ->
<<1:1,0:1>>;
Enc12@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc14@element = element(7, Val),
Enc16@element = element(8, Val),
if Enc14@element =:= false ->
if Enc16@element =:= false ->
<<0:1,0:1>>;
Enc16@element =:= true ->
<<0:1,1:1>>
end;
Enc14@element =:= true ->
if Enc16@element =:= false ->
<<1:1,0:1>>;
Enc16@element =:= true ->
<<1:1,1:1>>
end
end
end|begin
Enc18@element = element(9, Val),
if Enc18@element =:= false ->
<<0:1>>;
Enc18@element =:= true ->
<<1:1>>
end
end].


dec_G729Extensions(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case Opt band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes10} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes9,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V11@V0,V11@Buf1} = case Bytes10 of
<<0:1,V11@V3:6,V11@Buf4/bitstring>> ->
V11@Add5 = V11@V3 + 1,
{V11@Add5,V11@Buf4};
<<1:1,V11@Buf2/bitstring>> ->
V11@Pad6 = bit_size(V11@Buf2) band 7,
{V11@V3,V11@Buf4} = case V11@Buf2 of
<<_:V11@Pad6,0:1,V11@V8:7,V11@Buf9/bitstring>> when V11@V8 =/= 0 ->
{V11@V8,V11@Buf9};
<<_:V11@Pad6,1:1,0:1,V11@V9:14,V11@Buf10/bitstring>> when V11@V9 =/= 0 ->
{V11@V9,V11@Buf10}
end,
{V11@V3,V11@Buf4}
end,
<<V11@V11:V11@V0/bitstring-unit:1,V11@Buf12/bitstring>> = V11@Buf1,
{V11@V11,V11@Buf12}
end,
Bytes12= skipextensions(Bytes11, 1, Extensions),
{{'G729Extensions',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes12}.

'enc_G7231AnnexCCapability'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc3@element@sub = Enc3@element - 1,
if Enc3@element@sub bsr 8 =:= 0 ->
Enc3@element@sub;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= false ->
<<0:1>>;
Enc5@element =:= true ->
<<1:1>>
end
end|begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_G7231AnnexCCapability_g723AnnexCAudioMode(Enc7@element)
end
end].
'enc_G7231AnnexCCapability_g723AnnexCAudioMode'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 27,
if 0 =< Enc2@element@sub, Enc2@element@sub < 52 ->
<<0:1,Enc2@element@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 27,
if 0 =< Enc4@element@sub, Enc4@element@sub < 52 ->
<<Enc4@element@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(4, Val),
Enc6@element@sub = Enc6@element - 23,
if 0 =< Enc6@element@sub, Enc6@element@sub < 44 ->
<<Enc6@element@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end,
begin
Enc8@element = element(5, Val),
Enc8@element@sub = Enc8@element - 23,
if 0 =< Enc8@element@sub, Enc8@element@sub < 44 ->
<<Enc8@element@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@element}}})
end
end,
begin
Enc10@element = element(6, Val),
Enc10@element@sub = Enc10@element - 6,
if 0 =< Enc10@element@sub, Enc10@element@sub < 12 ->
<<Enc10@element@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end|begin
Enc12@element = element(7, Val),
Enc12@element@sub = Enc12@element - 6,
if 0 =< Enc12@element@sub, Enc12@element@sub < 12 ->
<<Enc12@element@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc12@element}}})
end
end].

dec_G7231AnnexCCapability_g723AnnexCAudioMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:6/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 27,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:6/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 27,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:6/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 23,
{V4@Add2,V4@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
<<V5@V0:6/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 23,
{V5@Add2,V5@Buf1}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes6} = begin
<<V6@V0:4/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 6,
{V6@Add2,V6@Buf1}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes7} = begin
<<V7@V0:4/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes6,
V7@Add2 = V7@V0 + 6,
{V7@Add2,V7@Buf1}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V8@V0,V8@Buf1} = case Bytes7 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
V8@Pad6 = bit_size(V8@Buf2) band 7,
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<_:V8@Pad6,0:1,V8@V8:7,V8@Buf9/bitstring>> when V8@V8 =/= 0 ->
{V8@V8,V8@Buf9};
<<_:V8@Pad6,1:1,0:1,V8@V9:14,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V11:V8@V0/bitstring-unit:1,V8@Buf12/bitstring>> = V8@Buf1,
{V8@V11,V8@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'G7231AnnexCCapability_g723AnnexCAudioMode',Term1,Term2,Term3,Term4,Term5,Term6},Bytes9}.



dec_G7231AnnexCCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 3 with type SEQUENCE
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_G7231AnnexCCapability_g723AnnexCAudioMode'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'G7231AnnexCCapability',Term1,Term2,Term3},Bytes7}.

'enc_IS11172AudioCapability'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc4@element = element(3, Val),
if Enc2@element =:= false ->
if Enc4@element =:= false ->
<<0:1,0:1,0:1>>;
Enc4@element =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@element =:= true ->
if Enc4@element =:= false ->
<<0:1,1:1,0:1>>;
Enc4@element =:= true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc6@element = element(4, Val),
Enc8@element = element(5, Val),
if Enc6@element =:= false ->
if Enc8@element =:= false ->
<<0:1,0:1>>;
Enc8@element =:= true ->
<<0:1,1:1>>
end;
Enc6@element =:= true ->
if Enc8@element =:= false ->
<<1:1,0:1>>;
Enc8@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(6, Val),
Enc12@element = element(7, Val),
if Enc10@element =:= false ->
if Enc12@element =:= false ->
<<0:1,0:1>>;
Enc12@element =:= true ->
<<0:1,1:1>>
end;
Enc10@element =:= true ->
if Enc12@element =:= false ->
<<1:1,0:1>>;
Enc12@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc14@element = element(8, Val),
Enc16@element = element(9, Val),
if Enc14@element =:= false ->
if Enc16@element =:= false ->
<<0:1,0:1>>;
Enc16@element =:= true ->
<<0:1,1:1>>
end;
Enc14@element =:= true ->
if Enc16@element =:= false ->
<<1:1,0:1>>;
Enc16@element =:= true ->
<<1:1,1:1>>
end
end
end,
align|begin
Enc18@element = element(10, Val),
Enc18@element@sub = Enc18@element - 1,
if 0 =< Enc18@element@sub, Enc18@element@sub < 448 ->
<<Enc18@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc18@element}}})
end
end].


dec_IS11172AudioCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 9 with type INTEGER
{Term9,Bytes10} = begin
V10@Pad2 = bit_size(Bytes9) band 7,
<<_:V10@Pad2,V10@V0:2/unsigned-unit:8,V10@Buf1/bitstring>> = Bytes9,
V10@Add4 = V10@V0 + 1,
{V10@Add4,V10@Buf1}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V11@V0,V11@Buf1} = case Bytes10 of
<<0:1,V11@V3:6,V11@Buf4/bitstring>> ->
V11@Add5 = V11@V3 + 1,
{V11@Add5,V11@Buf4};
<<1:1,V11@Buf2/bitstring>> ->
{V11@V3,V11@Buf4} = case V11@Buf2 of
<<_:7,0:1,V11@V7:7,V11@Buf8/bitstring>> when V11@V7 =/= 0 ->
{V11@V7,V11@Buf8};
<<_:7,1:1,0:1,V11@V8:14,V11@Buf9/bitstring>> when V11@V8 =/= 0 ->
{V11@V8,V11@Buf9}
end,
{V11@V3,V11@Buf4}
end,
<<V11@V10:V11@V0/bitstring-unit:1,V11@Buf11/bitstring>> = V11@Buf1,
{V11@V10,V11@Buf11}
end,
Bytes12= skipextensions(Bytes11, 1, Extensions),
{{'IS11172AudioCapability',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},Bytes12}.

'enc_IS13818AudioCapability'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc4@element = element(3, Val),
if Enc2@element =:= false ->
if Enc4@element =:= false ->
<<0:1,0:1,0:1>>;
Enc4@element =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@element =:= true ->
if Enc4@element =:= false ->
<<0:1,1:1,0:1>>;
Enc4@element =:= true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc6@element = element(4, Val),
Enc8@element = element(5, Val),
if Enc6@element =:= false ->
if Enc8@element =:= false ->
<<0:1,0:1>>;
Enc8@element =:= true ->
<<0:1,1:1>>
end;
Enc6@element =:= true ->
if Enc8@element =:= false ->
<<1:1,0:1>>;
Enc8@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(6, Val),
Enc12@element = element(7, Val),
if Enc10@element =:= false ->
if Enc12@element =:= false ->
<<0:1,0:1>>;
Enc12@element =:= true ->
<<0:1,1:1>>
end;
Enc10@element =:= true ->
if Enc12@element =:= false ->
<<1:1,0:1>>;
Enc12@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc14@element = element(8, Val),
Enc16@element = element(9, Val),
if Enc14@element =:= false ->
if Enc16@element =:= false ->
<<0:1,0:1>>;
Enc16@element =:= true ->
<<0:1,1:1>>
end;
Enc14@element =:= true ->
if Enc16@element =:= false ->
<<1:1,0:1>>;
Enc16@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc18@element = element(10, Val),
Enc20@element = element(11, Val),
if Enc18@element =:= false ->
if Enc20@element =:= false ->
<<0:1,0:1>>;
Enc20@element =:= true ->
<<0:1,1:1>>
end;
Enc18@element =:= true ->
if Enc20@element =:= false ->
<<1:1,0:1>>;
Enc20@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc22@element = element(12, Val),
Enc24@element = element(13, Val),
if Enc22@element =:= false ->
if Enc24@element =:= false ->
<<0:1,0:1>>;
Enc24@element =:= true ->
<<0:1,1:1>>
end;
Enc22@element =:= true ->
if Enc24@element =:= false ->
<<1:1,0:1>>;
Enc24@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc26@element = element(14, Val),
Enc28@element = element(15, Val),
if Enc26@element =:= false ->
if Enc28@element =:= false ->
<<0:1,0:1>>;
Enc28@element =:= true ->
<<0:1,1:1>>
end;
Enc26@element =:= true ->
if Enc28@element =:= false ->
<<1:1,0:1>>;
Enc28@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc30@element = element(16, Val),
Enc32@element = element(17, Val),
if Enc30@element =:= false ->
if Enc32@element =:= false ->
<<0:1,0:1>>;
Enc32@element =:= true ->
<<0:1,1:1>>
end;
Enc30@element =:= true ->
if Enc32@element =:= false ->
<<1:1,0:1>>;
Enc32@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc34@element = element(18, Val),
Enc36@element = element(19, Val),
if Enc34@element =:= false ->
if Enc36@element =:= false ->
<<0:1,0:1>>;
Enc36@element =:= true ->
<<0:1,1:1>>
end;
Enc34@element =:= true ->
if Enc36@element =:= false ->
<<1:1,0:1>>;
Enc36@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc38@element = element(20, Val),
Enc40@element = element(21, Val),
if Enc38@element =:= false ->
if Enc40@element =:= false ->
<<0:1,0:1>>;
Enc40@element =:= true ->
<<0:1,1:1>>
end;
Enc38@element =:= true ->
if Enc40@element =:= false ->
<<1:1,0:1>>;
Enc40@element =:= true ->
<<1:1,1:1>>
end
end
end,
align|begin
Enc42@element = element(22, Val),
Enc42@element@sub = Enc42@element - 1,
if 0 =< Enc42@element@sub, Enc42@element@sub < 1130 ->
<<Enc42@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc42@element}}})
end
end].


dec_IS13818AudioCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes10} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes9,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes11} = begin
<<V11@V0:1,V11@Buf1/bitstring>> = Bytes10,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end,

%% attribute number 11 with type BOOLEAN
{Term11,Bytes12} = begin
<<V12@V0:1,V12@Buf1/bitstring>> = Bytes11,
V12@Int2 = case V12@V0 of
0 -> false;
1 -> true
end,
{V12@Int2,V12@Buf1}
end,

%% attribute number 12 with type BOOLEAN
{Term12,Bytes13} = begin
<<V13@V0:1,V13@Buf1/bitstring>> = Bytes12,
V13@Int2 = case V13@V0 of
0 -> false;
1 -> true
end,
{V13@Int2,V13@Buf1}
end,

%% attribute number 13 with type BOOLEAN
{Term13,Bytes14} = begin
<<V14@V0:1,V14@Buf1/bitstring>> = Bytes13,
V14@Int2 = case V14@V0 of
0 -> false;
1 -> true
end,
{V14@Int2,V14@Buf1}
end,

%% attribute number 14 with type BOOLEAN
{Term14,Bytes15} = begin
<<V15@V0:1,V15@Buf1/bitstring>> = Bytes14,
V15@Int2 = case V15@V0 of
0 -> false;
1 -> true
end,
{V15@Int2,V15@Buf1}
end,

%% attribute number 15 with type BOOLEAN
{Term15,Bytes16} = begin
<<V16@V0:1,V16@Buf1/bitstring>> = Bytes15,
V16@Int2 = case V16@V0 of
0 -> false;
1 -> true
end,
{V16@Int2,V16@Buf1}
end,

%% attribute number 16 with type BOOLEAN
{Term16,Bytes17} = begin
<<V17@V0:1,V17@Buf1/bitstring>> = Bytes16,
V17@Int2 = case V17@V0 of
0 -> false;
1 -> true
end,
{V17@Int2,V17@Buf1}
end,

%% attribute number 17 with type BOOLEAN
{Term17,Bytes18} = begin
<<V18@V0:1,V18@Buf1/bitstring>> = Bytes17,
V18@Int2 = case V18@V0 of
0 -> false;
1 -> true
end,
{V18@Int2,V18@Buf1}
end,

%% attribute number 18 with type BOOLEAN
{Term18,Bytes19} = begin
<<V19@V0:1,V19@Buf1/bitstring>> = Bytes18,
V19@Int2 = case V19@V0 of
0 -> false;
1 -> true
end,
{V19@Int2,V19@Buf1}
end,

%% attribute number 19 with type BOOLEAN
{Term19,Bytes20} = begin
<<V20@V0:1,V20@Buf1/bitstring>> = Bytes19,
V20@Int2 = case V20@V0 of
0 -> false;
1 -> true
end,
{V20@Int2,V20@Buf1}
end,

%% attribute number 20 with type BOOLEAN
{Term20,Bytes21} = begin
<<V21@V0:1,V21@Buf1/bitstring>> = Bytes20,
V21@Int2 = case V21@V0 of
0 -> false;
1 -> true
end,
{V21@Int2,V21@Buf1}
end,

%% attribute number 21 with type INTEGER
{Term21,Bytes22} = begin
V22@Pad2 = bit_size(Bytes21) band 7,
<<_:V22@Pad2,V22@V0:2/unsigned-unit:8,V22@Buf1/bitstring>> = Bytes21,
V22@Add4 = V22@V0 + 1,
{V22@Add4,V22@Buf1}
end,

%% Extensions
{Extensions,Bytes23} = case Ext of
0 -> {<<>>,Bytes22};
1 ->
{V23@V0,V23@Buf1} = case Bytes22 of
<<0:1,V23@V3:6,V23@Buf4/bitstring>> ->
V23@Add5 = V23@V3 + 1,
{V23@Add5,V23@Buf4};
<<1:1,V23@Buf2/bitstring>> ->
{V23@V3,V23@Buf4} = case V23@Buf2 of
<<_:7,0:1,V23@V7:7,V23@Buf8/bitstring>> when V23@V7 =/= 0 ->
{V23@V7,V23@Buf8};
<<_:7,1:1,0:1,V23@V8:14,V23@Buf9/bitstring>> when V23@V8 =/= 0 ->
{V23@V8,V23@Buf9}
end,
{V23@V3,V23@Buf4}
end,
<<V23@V10:V23@V0/bitstring-unit:1,V23@Buf11/bitstring>> = V23@Buf1,
{V23@V10,V23@Buf11}
end,
Bytes24= skipextensions(Bytes23, 1, Extensions),
{{'IS13818AudioCapability',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21},Bytes24}.

'enc_GSMAudioCapability'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if Enc2@element@sub bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
Enc6@element = element(4, Val),
if Enc4@element =:= false ->
if Enc6@element =:= false ->
<<0:1,0:1>>;
Enc6@element =:= true ->
<<0:1,1:1>>
end;
Enc4@element =:= true ->
if Enc6@element =:= false ->
<<1:1,0:1>>;
Enc6@element =:= true ->
<<1:1,1:1>>
end
end
end].


dec_GSMAudioCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:5,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:5,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'GSMAudioCapability',Term1,Term2,Term3},Bytes6}.

'enc_VBDCapability'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_AudioCapability(Enc2@element)
end].


dec_VBDCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type AudioCapability
{Term1,Bytes2} = dec_AudioCapability(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'VBDCapability',Term1},Bytes4}.

'enc_DataApplicationCapability'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_DataApplicationCapability_application(Enc2@element)
end|begin
Enc3@element = element(3, Val),
if Enc3@element bsr 32 =:= 0 ->
begin
Enc3@element@bin = binary:encode_unsigned(Enc3@element),
Enc3@element@bin_size0 = byte_size(Enc3@element@bin),
Enc3@element@bin_size = Enc3@element@bin_size0 - 1,
[<<Enc3@element@bin_size:2>>,
align|Enc3@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end].
'enc_DataApplicationCapability_application'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:4>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= t120 ->
[<<0:1,1:4>>|enc_DataProtocolCapability(ChoiceVal)];
ChoiceTag =:= 'dsm-cc' ->
[<<0:1,2:4>>|enc_DataProtocolCapability(ChoiceVal)];
ChoiceTag =:= userData ->
[<<0:1,3:4>>|enc_DataProtocolCapability(ChoiceVal)];
ChoiceTag =:= t84 ->
[<<0:1,4:4>>|enc_DataApplicationCapability_application_t84(ChoiceVal)];
ChoiceTag =:= t434 ->
[<<0:1,5:4>>|enc_DataProtocolCapability(ChoiceVal)];
ChoiceTag =:= h224 ->
[<<0:1,6:4>>|enc_DataProtocolCapability(ChoiceVal)];
ChoiceTag =:= nlpid ->
[<<0:1,7:4>>|enc_DataApplicationCapability_application_nlpid(ChoiceVal)];
ChoiceTag =:= dsvdControl ->
<<0:1,8:4>>;
ChoiceTag =:= h222DataPartitioning ->
[<<0:1,9:4>>|enc_DataProtocolCapability(ChoiceVal)];
ChoiceTag =:= t30fax ->
begin
Enc11@output = enc_DataProtocolCapability(ChoiceVal),
Enc11@bin = complete(Enc11@output),
Enc11@len = byte_size(Enc11@bin),
if Enc11@len < 128 ->
[<<1:1,0:7>>,
align,
Enc11@len|Enc11@bin];
Enc11@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc11@len:14>>|Enc11@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc11@bin, 8)]
end
end;
ChoiceTag =:= t140 ->
begin
Enc12@output = enc_DataProtocolCapability(ChoiceVal),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[<<1:1,1:7>>,
align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc12@bin, 8)]
end
end;
ChoiceTag =:= t38fax ->
begin
Enc13@output = enc_DataApplicationCapability_application_t38fax(ChoiceVal),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[<<1:1,2:7>>,
align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc13@bin, 8)]
end
end;
ChoiceTag =:= genericDataCapability ->
begin
Enc14@output = enc_GenericCapability(ChoiceVal),
Enc14@bin = complete(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[<<1:1,3:7>>,
align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc14@bin, 8)]
end
end
end.
'enc_DataApplicationCapability_application_t84'(Val) ->
[begin
Enc1@element = element(2, Val),
enc_DataProtocolCapability(Enc1@element)
end|begin
Enc2@element = element(3, Val),
enc_T84Profile(Enc2@element)
end].

dec_DataApplicationCapability_application_t84(Bytes) ->

%% attribute number 1 with type DataProtocolCapability
{Term1,Bytes1} = dec_DataProtocolCapability(Bytes),

%% attribute number 2 with type T84Profile
{Term2,Bytes2} = dec_T84Profile(Bytes1),
{{'DataApplicationCapability_application_t84',Term1,Term2},Bytes2}.

'enc_DataApplicationCapability_application_nlpid'(Val) ->
[begin
Enc1@element = element(2, Val),
enc_DataProtocolCapability(Enc1@element)
end,
align|begin
Enc2@element = element(3, Val),
Enc3@len = byte_size(Enc2@element),
if Enc3@len < 128 ->
[Enc3@len|Enc2@element];
Enc3@len < 16384 ->
[<<2:2,Enc3@len:14>>|Enc2@element];
true ->
encode_fragmented(Enc2@element, 8)
end
end].

dec_DataApplicationCapability_application_nlpid(Bytes) ->

%% attribute number 1 with type DataProtocolCapability
{Term1,Bytes1} = dec_DataProtocolCapability(Bytes),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} = begin
V1@Pad3 = bit_size(Bytes1) band 7,
{V1@V0,V1@Buf1} = case Bytes1 of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end,
{{'DataApplicationCapability_application_nlpid',Term1,Term2},Bytes2}.

'enc_DataApplicationCapability_application_t38fax'(Val) ->
[begin
Enc1@element = element(2, Val),
enc_DataProtocolCapability(Enc1@element)
end|begin
Enc2@element = element(3, Val),
enc_T38FaxProfile(Enc2@element)
end].

dec_DataApplicationCapability_application_t38fax(Bytes) ->

%% attribute number 1 with type DataProtocolCapability
{Term1,Bytes1} = dec_DataProtocolCapability(Bytes),

%% attribute number 2 with type T38FaxProfile
{Term2,Bytes2} = dec_T38FaxProfile(Bytes1),
{{'DataApplicationCapability_application_t38fax',Term1,Term2},Bytes2}.


dec_DataApplicationCapability_application(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_DataProtocolCapability(Bytes2)
end,
{{t120,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_DataProtocolCapability(Bytes2)
end,
{{'dsm-cc',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_DataProtocolCapability(Bytes2)
end,
{{userData,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
'dec_DataApplicationCapability_application_t84'(Bytes2)
end,
{{t84,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_DataProtocolCapability(Bytes2)
end,
{{t434,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_DataProtocolCapability(Bytes2)
end,
{{h224,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
'dec_DataApplicationCapability_application_nlpid'(Bytes2)
end,
{{nlpid,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{dsvdControl,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
dec_DataProtocolCapability(Bytes2)
end,
{{h222DataPartitioning,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_DataProtocolCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{t30fax,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_DataProtocolCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{t140,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_DataApplicationCapability_application_t38fax'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{t38fax,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_GenericCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{genericDataCapability,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_DataApplicationCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_DataApplicationCapability_application'(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V3,V2@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'DataApplicationCapability',Term1,Term2},Bytes5}.

'enc_DataProtocolCapability'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:3>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= v14buffered ->
<<0:1,1:3>>;
ChoiceTag =:= v42lapm ->
<<0:1,2:3>>;
ChoiceTag =:= hdlcFrameTunnelling ->
<<0:1,3:3>>;
ChoiceTag =:= h310SeparateVCStack ->
<<0:1,4:3>>;
ChoiceTag =:= h310SingleVCStack ->
<<0:1,5:3>>;
ChoiceTag =:= transparent ->
<<0:1,6:3>>;
ChoiceTag =:= segmentationAndReassembly ->
begin
Enc8@output = [],
Enc8@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc8@bin]
end;
ChoiceTag =:= hdlcFrameTunnelingwSAR ->
begin
Enc9@output = [],
Enc9@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc9@bin]
end;
ChoiceTag =:= v120 ->
begin
Enc10@output = [],
Enc10@bin = <<0:8>>,
[<<1:1,2:7>>,
align,
1|Enc10@bin]
end;
ChoiceTag =:= separateLANStack ->
begin
Enc11@output = [],
Enc11@bin = <<0:8>>,
[<<1:1,3:7>>,
align,
1|Enc11@bin]
end;
ChoiceTag =:= v76wCompression ->
begin
Enc12@output = enc_DataProtocolCapability_v76wCompression(ChoiceVal),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[<<1:1,4:7>>,
align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc12@bin, 8)]
end
end;
ChoiceTag =:= tcp ->
begin
Enc13@output = [],
Enc13@bin = <<0:8>>,
[<<1:1,5:7>>,
align,
1|Enc13@bin]
end;
ChoiceTag =:= udp ->
begin
Enc14@output = [],
Enc14@bin = <<0:8>>,
[<<1:1,6:7>>,
align,
1|Enc14@bin]
end
end.
'enc_DataProtocolCapability_v76wCompression'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= transmitCompression ->
[<<0:1,0:2>>|enc_CompressionType(ChoiceVal)];
ChoiceTag =:= receiveCompression ->
[<<0:1,1:2>>|enc_CompressionType(ChoiceVal)];
ChoiceTag =:= transmitAndReceiveCompression ->
[<<0:1,2:2>>|enc_CompressionType(ChoiceVal)]
end.

dec_DataProtocolCapability_v76wCompression(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_CompressionType(Bytes2)
end,
{{transmitCompression,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_CompressionType(Bytes2)
end,
{{receiveCompression,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_CompressionType(Bytes2)
end,
{{transmitAndReceiveCompression,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_DataProtocolCapability(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{v14buffered,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{v42lapm,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{hdlcFrameTunnelling,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{h310SeparateVCStack,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{h310SingleVCStack,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{transparent,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{segmentationAndReassembly,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{hdlcFrameTunnelingwSAR,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{v120,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{separateLANStack,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_DataProtocolCapability_v76wCompression'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{v76wCompression,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{tcp,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{udp,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_CompressionType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= v42bis ->
[<<0:1>>|enc_V42bis(ChoiceVal)]
end.


dec_CompressionType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_V42bis(Bytes2)
end,
{{v42bis,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_V42bis'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if Enc2@element@sub bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if Enc4@element@sub bsr 8 =:= 0 ->
[Enc4@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].


dec_V42bis(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'V42bis',Term1,Term2},Bytes5}.

'enc_T84Profile'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= t84Unrestricted ->
<<0:1>>;
ChoiceTag =:= t84Restricted ->
[<<1:1>>|enc_T84Profile_t84Restricted(ChoiceVal)]
end.
'enc_T84Profile_t84Restricted'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc4@element = element(3, Val),
if Enc2@element =:= false ->
if Enc4@element =:= false ->
<<0:1,0:1,0:1>>;
Enc4@element =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@element =:= true ->
if Enc4@element =:= false ->
<<0:1,1:1,0:1>>;
Enc4@element =:= true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc6@element = element(4, Val),
Enc8@element = element(5, Val),
if Enc6@element =:= false ->
if Enc8@element =:= false ->
<<0:1,0:1>>;
Enc8@element =:= true ->
<<0:1,1:1>>
end;
Enc6@element =:= true ->
if Enc8@element =:= false ->
<<1:1,0:1>>;
Enc8@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(6, Val),
Enc12@element = element(7, Val),
if Enc10@element =:= false ->
if Enc12@element =:= false ->
<<0:1,0:1>>;
Enc12@element =:= true ->
<<0:1,1:1>>
end;
Enc10@element =:= true ->
if Enc12@element =:= false ->
<<1:1,0:1>>;
Enc12@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc14@element = element(8, Val),
Enc16@element = element(9, Val),
if Enc14@element =:= false ->
if Enc16@element =:= false ->
<<0:1,0:1>>;
Enc16@element =:= true ->
<<0:1,1:1>>
end;
Enc14@element =:= true ->
if Enc16@element =:= false ->
<<1:1,0:1>>;
Enc16@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc18@element = element(10, Val),
Enc20@element = element(11, Val),
if Enc18@element =:= false ->
if Enc20@element =:= false ->
<<0:1,0:1>>;
Enc20@element =:= true ->
<<0:1,1:1>>
end;
Enc18@element =:= true ->
if Enc20@element =:= false ->
<<1:1,0:1>>;
Enc20@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc22@element = element(12, Val),
Enc24@element = element(13, Val),
if Enc22@element =:= false ->
if Enc24@element =:= false ->
<<0:1,0:1>>;
Enc24@element =:= true ->
<<0:1,1:1>>
end;
Enc22@element =:= true ->
if Enc24@element =:= false ->
<<1:1,0:1>>;
Enc24@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc26@element = element(14, Val),
Enc28@element = element(15, Val),
if Enc26@element =:= false ->
if Enc28@element =:= false ->
<<0:1,0:1>>;
Enc28@element =:= true ->
<<0:1,1:1>>
end;
Enc26@element =:= true ->
if Enc28@element =:= false ->
<<1:1,0:1>>;
Enc28@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc30@element = element(16, Val),
Enc32@element = element(17, Val),
if Enc30@element =:= false ->
if Enc32@element =:= false ->
<<0:1,0:1>>;
Enc32@element =:= true ->
<<0:1,1:1>>
end;
Enc30@element =:= true ->
if Enc32@element =:= false ->
<<1:1,0:1>>;
Enc32@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc34@element = element(18, Val),
Enc36@element = element(19, Val),
if Enc34@element =:= false ->
if Enc36@element =:= false ->
<<0:1,0:1>>;
Enc36@element =:= true ->
<<0:1,1:1>>
end;
Enc34@element =:= true ->
if Enc36@element =:= false ->
<<1:1,0:1>>;
Enc36@element =:= true ->
<<1:1,1:1>>
end
end
end|begin
Enc38@element = element(20, Val),
if Enc38@element =:= false ->
<<0:1>>;
Enc38@element =:= true ->
<<1:1>>
end
end].

dec_T84Profile_t84Restricted(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes10} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes9,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes11} = begin
<<V11@V0:1,V11@Buf1/bitstring>> = Bytes10,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end,

%% attribute number 11 with type BOOLEAN
{Term11,Bytes12} = begin
<<V12@V0:1,V12@Buf1/bitstring>> = Bytes11,
V12@Int2 = case V12@V0 of
0 -> false;
1 -> true
end,
{V12@Int2,V12@Buf1}
end,

%% attribute number 12 with type BOOLEAN
{Term12,Bytes13} = begin
<<V13@V0:1,V13@Buf1/bitstring>> = Bytes12,
V13@Int2 = case V13@V0 of
0 -> false;
1 -> true
end,
{V13@Int2,V13@Buf1}
end,

%% attribute number 13 with type BOOLEAN
{Term13,Bytes14} = begin
<<V14@V0:1,V14@Buf1/bitstring>> = Bytes13,
V14@Int2 = case V14@V0 of
0 -> false;
1 -> true
end,
{V14@Int2,V14@Buf1}
end,

%% attribute number 14 with type BOOLEAN
{Term14,Bytes15} = begin
<<V15@V0:1,V15@Buf1/bitstring>> = Bytes14,
V15@Int2 = case V15@V0 of
0 -> false;
1 -> true
end,
{V15@Int2,V15@Buf1}
end,

%% attribute number 15 with type BOOLEAN
{Term15,Bytes16} = begin
<<V16@V0:1,V16@Buf1/bitstring>> = Bytes15,
V16@Int2 = case V16@V0 of
0 -> false;
1 -> true
end,
{V16@Int2,V16@Buf1}
end,

%% attribute number 16 with type BOOLEAN
{Term16,Bytes17} = begin
<<V17@V0:1,V17@Buf1/bitstring>> = Bytes16,
V17@Int2 = case V17@V0 of
0 -> false;
1 -> true
end,
{V17@Int2,V17@Buf1}
end,

%% attribute number 17 with type BOOLEAN
{Term17,Bytes18} = begin
<<V18@V0:1,V18@Buf1/bitstring>> = Bytes17,
V18@Int2 = case V18@V0 of
0 -> false;
1 -> true
end,
{V18@Int2,V18@Buf1}
end,

%% attribute number 18 with type BOOLEAN
{Term18,Bytes19} = begin
<<V19@V0:1,V19@Buf1/bitstring>> = Bytes18,
V19@Int2 = case V19@V0 of
0 -> false;
1 -> true
end,
{V19@Int2,V19@Buf1}
end,

%% attribute number 19 with type BOOLEAN
{Term19,Bytes20} = begin
<<V20@V0:1,V20@Buf1/bitstring>> = Bytes19,
V20@Int2 = case V20@V0 of
0 -> false;
1 -> true
end,
{V20@Int2,V20@Buf1}
end,

%% Extensions
{Extensions,Bytes21} = case Ext of
0 -> {<<>>,Bytes20};
1 ->
{V21@V0,V21@Buf1} = case Bytes20 of
<<0:1,V21@V3:6,V21@Buf4/bitstring>> ->
V21@Add5 = V21@V3 + 1,
{V21@Add5,V21@Buf4};
<<1:1,V21@Buf2/bitstring>> ->
V21@Pad6 = bit_size(V21@Buf2) band 7,
{V21@V3,V21@Buf4} = case V21@Buf2 of
<<_:V21@Pad6,0:1,V21@V8:7,V21@Buf9/bitstring>> when V21@V8 =/= 0 ->
{V21@V8,V21@Buf9};
<<_:V21@Pad6,1:1,0:1,V21@V9:14,V21@Buf10/bitstring>> when V21@V9 =/= 0 ->
{V21@V9,V21@Buf10}
end,
{V21@V3,V21@Buf4}
end,
<<V21@V11:V21@V0/bitstring-unit:1,V21@Buf12/bitstring>> = V21@Buf1,
{V21@V11,V21@Buf12}
end,
Bytes22= skipextensions(Bytes21, 1, Extensions),
{{'T84Profile_t84Restricted',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19},Bytes22}.



dec_T84Profile(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{t84Unrestricted,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_T84Profile_t84Restricted'(Bytes1)
end,
{{t84Restricted,Val},NewBytes}
end.
'enc_T38FaxProfile'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 5, 9),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<3:7,Enc1@bitmap:4>>
end,
[begin
Enc3@element = element(2, Val),
if Extensions =:= [] ->
if Enc3@element =:= false ->
<<0:1,0:1>>;
Enc3@element =:= true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= false ->
<<1:1,0:1>>;
Enc3@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(3, Val),
Enc7@element = element(4, Val),
if Enc5@element =:= false ->
if Enc7@element =:= false ->
<<0:1,0:1>>;
Enc7@element =:= true ->
<<0:1,1:1>>
end;
Enc5@element =:= true ->
if Enc7@element =:= false ->
<<1:1,0:1>>;
Enc7@element =:= true ->
<<1:1,1:1>>
end
end
end,
Extensions,
begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@output = if Enc9@element bsr 8 =:= 0 ->
[Enc9@element];
true ->
exit({error,{asn1,{illegal_value,Enc9@element}}})
end,
Enc11@bin = iolist_to_binary(Enc11@output),
[align,
1|Enc11@bin]
end
end
end,
begin
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@output = enc_T38FaxRateManagement(Enc13@element),
Enc14@bin = complete(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[align|encode_fragmented(Enc14@bin, 8)]
end
end
end
end,
begin
Enc16@element = element(7, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@output = enc_T38FaxUdpOptions(Enc16@element),
Enc17@bin = complete(Enc17@output),
Enc17@len = byte_size(Enc17@bin),
if Enc17@len < 128 ->
[align,
Enc17@len|Enc17@bin];
Enc17@len < 16384 ->
[align,
<<2:2,Enc17@len:14>>|Enc17@bin];
true ->
[align|encode_fragmented(Enc17@bin, 8)]
end
end
end
end|begin
Enc19@element = element(8, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@output = enc_T38FaxTcpOptions(Enc19@element),
Enc20@bin = complete(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[align,
Enc20@len|Enc20@bin];
Enc20@len < 16384 ->
[align,
<<2:2,Enc20@len:14>>|Enc20@bin];
true ->
[align|encode_fragmented(Enc20@bin, 8)]
end
end
end
end].


dec_T38FaxProfile(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes5) band 7,
{V6@V0,V6@Buf1} = case Bytes5 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx4,_} = begin
V7@Pad2 = bit_size(V6@V0) band 7,
<<_:V7@Pad2,V7@V0:1/unsigned-unit:8,V7@Buf1/bitstring>> = V6@V0,
{V7@V0,V7@Buf1}
end,
{TmpValx4,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type T38FaxRateManagement
{Term5,Bytes7} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes6) band 7,
{V8@V0,V8@Buf1} = case Bytes6 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx5,_} = dec_T38FaxRateManagement(V8@V0),
{TmpValx5,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type T38FaxUdpOptions
{Term6,Bytes8} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes7) band 7,
{V9@V0,V9@Buf1} = case Bytes7 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx6,_} = dec_T38FaxUdpOptions(V9@V0),
{TmpValx6,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type T38FaxTcpOptions
{Term7,Bytes9} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes8) band 7,
{V10@V0,V10@Buf1} = case Bytes8 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx7,_} = dec_T38FaxTcpOptions(V10@V0),
{TmpValx7,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,
Bytes10= skipextensions(Bytes9, 5, Extensions),
{{'T38FaxProfile',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes10}.

'enc_T38FaxRateManagement'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= localTCF ->
<<0:1,0:1>>;
ChoiceTag =:= transferredTCF ->
<<0:1,1:1>>
end.


dec_T38FaxRateManagement(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{localTCF,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{transferredTCF,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_T38FaxUdpOptions'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
true ->
[align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
[align|encode_unconstrained_number(Enc6@element)]
end
end|begin
Enc9@element = element(4, Val),
enc_T38FaxUdpOptions_t38FaxUdpEC(Enc9@element)
end].
'enc_T38FaxUdpOptions_t38FaxUdpEC'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= t38UDPFEC ->
<<0:1,0:1>>;
ChoiceTag =:= t38UDPRedundancy ->
<<0:1,1:1>>
end.

dec_T38FaxUdpOptions_t38FaxUdpEC(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{t38UDPFEC,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{t38UDPRedundancy,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_T38FaxUdpOptions(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = case (Opt bsr 1) band 1 of
1 ->
begin
V2@Pad3 = bit_size(Bytes1) band 7,
{V2@V0,V2@Buf1} = case Bytes1 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> when V2@V5 =/= 0 ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/signed-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
{V2@V8,V2@Buf9}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> when V3@V5 =/= 0 ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/signed-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
{V3@V8,V3@Buf9}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type CHOICE
{Term3,Bytes4} = 'dec_T38FaxUdpOptions_t38FaxUdpEC'(Bytes3),
{{'T38FaxUdpOptions',Term1,Term2,Term3},Bytes4}.

'enc_T38FaxTcpOptions'(Val) ->
Enc2@element = element(2, Val),
if Enc2@element =:= false ->
<<0:1,0:1>>;
Enc2@element =:= true ->
<<0:1,1:1>>
end.


dec_T38FaxTcpOptions(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'T38FaxTcpOptions',Term1},Bytes4}.

'enc_EncryptionAuthenticationAndIntegrity'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_EncryptionCapability(Enc5@element)
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_AuthenticationCapability(Enc7@element)
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_IntegrityCapability(Enc9@element)
end
end].


dec_EncryptionAuthenticationAndIntegrity(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type EncryptionCapability
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
dec_EncryptionCapability(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type AuthenticationCapability
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_AuthenticationCapability(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type IntegrityCapability
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_IntegrityCapability(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'EncryptionAuthenticationAndIntegrity',Term1,Term2,Term3},Bytes7}.

'enc_EncryptionCapability'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_MediaEncryptionAlgorithm(Comp) || Comp <- Val]]
end.



dec_EncryptionCapability(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components28(V1@Add4, V1@Buf1, []).

'enc_MediaEncryptionAlgorithm'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:1>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= algorithm ->
begin
Enc3@bin = encode_oid(ChoiceVal),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 128 ->
[<<0:1,1:1>>,
align,
Enc3@len|Enc3@bin];
Enc3@len < 16384 ->
[<<0:1,1:1>>,
align,
<<2:2,Enc3@len:14>>|Enc3@bin];
true ->
[<<0:1,1:1>>,
align|encode_fragmented(Enc3@bin, 8)]
end
end
end.


dec_MediaEncryptionAlgorithm(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/binary-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
V2@Conv10 = binary_to_list(V2@V8),
{V2@V11,V2@Buf12}  = {decode_oid(V2@Conv10),V2@Buf9},
{V2@V11,V2@Buf12}
end
end,
{{algorithm,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_AuthenticationCapability'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 3, 4),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@element)
end
end,
Extensions|begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@output = begin
Enc7@bin = encode_oid(Enc6@element),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end,
Enc8@bin = iolist_to_binary(Enc8@output),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[align,
Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[align,
<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
[align|encode_fragmented(Enc8@bin, 8)]
end
end
end
end].


dec_AuthenticationCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type OBJECT IDENTIFIER
{Term2,Bytes5} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = begin
V5@Pad3 = bit_size(V4@V0) band 7,
{V5@V0,V5@Buf1} = case V4@V0 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@Buf6/bitstring>> ->
{V5@V5,V5@Buf6};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7}
end,
<<V5@V8:V5@V0/binary-unit:8,V5@Buf9/bitstring>> = V5@Buf1,
V5@Conv10 = binary_to_list(V5@V8),
{V5@V11,V5@Buf12}  = {decode_oid(V5@Conv10),V5@Buf9},
{V5@V11,V5@Buf12}
end,
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,
Bytes6= skipextensions(Bytes5, 2, Extensions),
{{'AuthenticationCapability',Term1,Term2},Bytes6}.

'enc_IntegrityCapability'(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end|begin
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc3@element)
end
end].


dec_IntegrityCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'IntegrityCapability',Term1},Bytes5}.

'enc_UserInputCapability'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:3>>|enc_UserInputCapability_nonStandard(ChoiceVal)];
ChoiceTag =:= basicString ->
<<0:1,1:3>>;
ChoiceTag =:= iA5String ->
<<0:1,2:3>>;
ChoiceTag =:= generalString ->
<<0:1,3:3>>;
ChoiceTag =:= dtmf ->
<<0:1,4:3>>;
ChoiceTag =:= hookflash ->
<<0:1,5:3>>;
ChoiceTag =:= extendedAlphanumeric ->
begin
Enc7@output = [],
Enc7@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc7@bin]
end
end.
'enc_UserInputCapability_nonStandard'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_NonStandardParameter(Comp) || Comp <- Val]]
end.


dec_UserInputCapability_nonStandard(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components29(V1@Add2, V1@Buf1, []).



dec_UserInputCapability(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_UserInputCapability_nonStandard'(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{basicString,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{iA5String,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{generalString,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{dtmf,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{hookflash,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{extendedAlphanumeric,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ConferenceCapability'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 4, 6),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc2@bitmap:2>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_ConferenceCapability_nonStandardData(Enc4@element)
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= false ->
<<0:1>>;
Enc6@element =:= true ->
<<1:1>>
end
end,
Extensions,
begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = if Enc8@element =:= false ->
<<0:1,0:7>>;
Enc8@element =:= true ->
<<1:1,0:7>>
end,
Enc10@bin = Enc10@output,
[align,
1|Enc10@bin]
end
end
end|begin
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@output = if Enc12@element =:= false ->
<<0:1,0:7>>;
Enc12@element =:= true ->
<<1:1,0:7>>
end,
Enc14@bin = Enc14@output,
[align,
1|Enc14@bin]
end
end
end].
'enc_ConferenceCapability_nonStandardData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_NonStandardParameter(Comp) || Comp <- Val]].


dec_ConferenceCapability_nonStandardData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components30(V1@V0, V1@Buf1, []).



dec_ConferenceCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes3} = case Opt band 1 of
1 ->
'dec_ConferenceCapability_nonStandardData'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes4} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes3,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes5) band 7,
{V5@V0,V5@Buf1} = case Bytes5 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = V5@V0,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes7} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes6) band 7,
{V7@V0,V7@Buf1} = case Bytes6 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx4,_} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = V7@V0,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,
{TmpValx4,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,
Bytes8= skipextensions(Bytes7, 3, Extensions),
{{'ConferenceCapability',Term1,Term2,Term3,Term4},Bytes8}.

'enc_GenericCapability'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc7@element = element(2, Val),
enc_CapabilityIdentifier(Enc7@element)
end,
begin
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
Enc8@element bsr 32 =:= 0 ->
begin
Enc8@element@bin = binary:encode_unsigned(Enc8@element),
Enc8@element@bin_size0 = byte_size(Enc8@element@bin),
Enc8@element@bin_size = Enc8@element@bin_size0 - 1,
[<<Enc8@element@bin_size:2>>,
align|Enc8@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc8@element}}})
end
end,
begin
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_GenericCapability_collapsing(Enc11@element)
end
end,
begin
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_GenericCapability_nonCollapsing(Enc13@element)
end
end,
begin
Enc15@element = element(6, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@len = byte_size(Enc15@element),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc15@element];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc15@element];
true ->
[align|encode_fragmented(Enc15@element, 8)]
end
end
end
end|begin
Enc18@element = element(7, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
enc_DataProtocolCapability(Enc18@element)
end
end].
'enc_GenericCapability_collapsing'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericParameter(Comp) || Comp <- Val]].


dec_GenericCapability_collapsing(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components31(V1@V0, V1@Buf1, []).

'enc_GenericCapability_nonCollapsing'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericParameter(Comp) || Comp <- Val]].


dec_GenericCapability_nonCollapsing(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components32(V1@V0, V1@Buf1, []).



dec_GenericCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CapabilityIdentifier
{Term1,Bytes3} = dec_CapabilityIdentifier(Bytes2),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
'dec_GenericCapability_collapsing'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
'dec_GenericCapability_nonCollapsing'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
V4@Pad3 = bit_size(Bytes6) band 7,
{V4@V0,V4@Buf1} = case Bytes6 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
V4@Conv10 = binary:copy(V4@V0),
{V4@Conv10,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type DataProtocolCapability
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_DataProtocolCapability(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V5@V0,V5@Buf1} = case Bytes8 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'GenericCapability',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_CapabilityIdentifier'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= standard ->
begin
Enc2@bin = encode_oid(ChoiceVal),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 128 ->
[<<0:1,0:2>>,
align,
Enc2@len|Enc2@bin];
Enc2@len < 16384 ->
[<<0:1,0:2>>,
align,
<<2:2,Enc2@len:14>>|Enc2@bin];
true ->
[<<0:1,0:2>>,
align|encode_fragmented(Enc2@bin, 8)]
end
end;
ChoiceTag =:= h221NonStandard ->
[<<0:1,1:2>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= uuid ->
begin
Enc5@len = byte_size(ChoiceVal),
if Enc5@len =:= 16 ->
[<<0:1,2:2>>,
align|ChoiceVal]
end
end;
ChoiceTag =:= domainBased ->
begin
Enc7@bin = list_to_binary(ChoiceVal),
Enc7@len = byte_size(Enc7@bin),
Enc7@len@sub = Enc7@len - 1,
if Enc7@len@sub bsr 6 =:= 0 ->
[<<0:1,3:2,Enc7@len@sub:6>>,
align|Enc7@bin]
end
end
end.


dec_CapabilityIdentifier(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/binary-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
V2@Conv10 = binary_to_list(V2@V8),
{V2@V11,V2@Buf12}  = {decode_oid(V2@Conv10),V2@Buf9},
{V2@V11,V2@Buf12}
end
end,
{{standard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{h221NonStandard,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:16/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end
end,
{{uuid,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
<<V4@V0:6/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes2,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Conv7 = binary_to_list(V4@V3),
{V4@Conv7,V4@Buf4}
end
end,
{{domainBased,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_GenericParameter'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_ParameterIdentifier(Enc3@element)
end,
begin
Enc4@element = element(3, Val),
enc_ParameterValue(Enc4@element)
end|begin
Enc5@element = element(4, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_GenericParameter_supersedes(Enc5@element)
end
end].
'enc_GenericParameter_supersedes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ParameterIdentifier(Comp) || Comp <- Val]].


dec_GenericParameter_supersedes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components33(V1@V0, V1@Buf1, []).



dec_GenericParameter(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ParameterIdentifier
{Term1,Bytes3} = dec_ParameterIdentifier(Bytes2),

%% attribute number 2 with type ParameterValue
{Term2,Bytes4} = dec_ParameterValue(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_GenericParameter_supersedes'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'GenericParameter',Term1,Term2,Term3},Bytes7}.

'enc_ParameterIdentifier'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= standard ->
if ChoiceVal bsr 7 =:= 0 ->
<<0:1,0:2,ChoiceVal:7>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= h221NonStandard ->
[<<0:1,1:2>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= uuid ->
begin
Enc5@len = byte_size(ChoiceVal),
if Enc5@len =:= 16 ->
[<<0:1,2:2>>,
align|ChoiceVal]
end
end;
ChoiceTag =:= domainBased ->
begin
Enc7@bin = list_to_binary(ChoiceVal),
Enc7@len = byte_size(Enc7@bin),
Enc7@len@sub = Enc7@len - 1,
if Enc7@len@sub bsr 6 =:= 0 ->
[<<0:1,3:2,Enc7@len@sub:6>>,
align|Enc7@bin]
end
end
end.


dec_ParameterIdentifier(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V0,V2@Buf1}
end
end,
{{standard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{h221NonStandard,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:16/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end
end,
{{uuid,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
<<V4@V0:6/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes2,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Conv7 = binary_to_list(V4@V3),
{V4@Conv7,V4@Buf4}
end
end,
{{domainBased,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ParameterValue'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= logical ->
<<0:1,0:3>>;
ChoiceTag =:= booleanArray ->
if ChoiceVal bsr 8 =:= 0 ->
[<<0:1,1:3>>,
align,
ChoiceVal];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= unsignedMin ->
if ChoiceVal bsr 16 =:= 0 ->
[<<0:1,2:3>>,
align|<<ChoiceVal:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= unsignedMax ->
if ChoiceVal bsr 16 =:= 0 ->
[<<0:1,3:3>>,
align|<<ChoiceVal:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= unsigned32Min ->
if ChoiceVal bsr 32 =:= 0 ->
[<<0:1,4:3>>|begin
ChoiceVal@bin = binary:encode_unsigned(ChoiceVal),
ChoiceVal@bin_size0 = byte_size(ChoiceVal@bin),
ChoiceVal@bin_size = ChoiceVal@bin_size0 - 1,
[<<ChoiceVal@bin_size:2>>,
align|ChoiceVal@bin]
end];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= unsigned32Max ->
if ChoiceVal bsr 32 =:= 0 ->
[<<0:1,5:3>>|begin
ChoiceVal@bin = binary:encode_unsigned(ChoiceVal),
ChoiceVal@bin_size0 = byte_size(ChoiceVal@bin),
ChoiceVal@bin_size = ChoiceVal@bin_size0 - 1,
[<<ChoiceVal@bin_size:2>>,
align|ChoiceVal@bin]
end];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= octetString ->
begin
Enc13@len = byte_size(ChoiceVal),
if Enc13@len < 128 ->
[<<0:1,6:3>>,
align,
Enc13@len|ChoiceVal];
Enc13@len < 16384 ->
[<<0:1,6:3>>,
align,
<<2:2,Enc13@len:14>>|ChoiceVal];
true ->
[<<0:1,6:3>>,
align|encode_fragmented(ChoiceVal, 8)]
end
end;
ChoiceTag =:= genericParameter ->
[<<0:1,7:3>>|enc_ParameterValue_genericParameter(ChoiceVal)]
end.
'enc_ParameterValue_genericParameter'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericParameter(Comp) || Comp <- Val]].


dec_ParameterValue_genericParameter(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components34(V1@V0, V1@Buf1, []).



dec_ParameterValue(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{logical,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end
end,
{{booleanArray,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
V4@Pad2 = bit_size(Bytes2) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes2,
{V4@V0,V4@Buf1}
end
end,
{{unsignedMin,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
V5@Pad2 = bit_size(Bytes2) band 7,
<<_:V5@Pad2,V5@V0:2/unsigned-unit:8,V5@Buf1/bitstring>> = Bytes2,
{V5@V0,V5@Buf1}
end
end,
{{unsignedMax,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
<<V6@V0:2/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes2,
V6@Add2 = V6@V0 + 1,
V6@Pad5 = bit_size(V6@Buf1) band 7,
<<_:V6@Pad5,V6@V3:V6@Add2/unsigned-unit:8,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V3,V6@Buf4}
end
end,
{{unsigned32Min,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
<<V7@V0:2/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes2,
V7@Add2 = V7@V0 + 1,
V7@Pad5 = bit_size(V7@Buf1) band 7,
<<_:V7@Pad5,V7@V3:V7@Add2/unsigned-unit:8,V7@Buf4/bitstring>> = V7@Buf1,
{V7@V3,V7@Buf4}
end
end,
{{unsigned32Max,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
V8@Pad3 = bit_size(Bytes2) band 7,
{V8@V0,V8@Buf1} = case Bytes2 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
V8@Conv10 = binary:copy(V8@V0),
{V8@Conv10,V8@Buf1}
end
end,
{{octetString,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
'dec_ParameterValue_genericParameter'(Bytes2)
end,
{{genericParameter,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_MultiplexedStreamCapability'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_MultiplexFormat(Enc3@element)
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= false ->
<<0:1>>;
Enc4@element =:= true ->
<<1:1>>
end
end|begin
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_MultiplexedStreamCapability_capabilityOnMuxStream(Enc6@element)
end
end].
'enc_MultiplexedStreamCapability_capabilityOnMuxStream'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_AlternativeCapabilitySet(Comp) || Comp <- Val]]
end.


dec_MultiplexedStreamCapability_capabilityOnMuxStream(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components35(V1@Add4, V1@Buf1, []).



dec_MultiplexedStreamCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type MultiplexFormat
{Term1,Bytes3} = dec_MultiplexFormat(Bytes2),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes4} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes3,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type SET OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_MultiplexedStreamCapability_capabilityOnMuxStream'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'MultiplexedStreamCapability',Term1,Term2,Term3},Bytes7}.

'enc_MultiplexFormat'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:2>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= h222Capability ->
[<<0:1,1:2>>|enc_H222Capability(ChoiceVal)];
ChoiceTag =:= h223Capability ->
[<<0:1,2:2>>|enc_H223Capability(ChoiceVal)]
end.


dec_MultiplexFormat(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_H222Capability(Bytes2)
end,
{{h222Capability,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_H223Capability(Bytes2)
end,
{{h223Capability,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_AudioTelephonyEventCapability'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 96,
if Enc2@element@sub bsr 5 =:= 0 ->
<<0:1,Enc2@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
align|begin
Enc4@element = element(3, Val),
Enc5@bin = iolist_to_binary(Enc4@element),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_AudioTelephonyEventCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:5/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 96,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type GeneralString
{Term2,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@Conv10,V3@Buf9}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'AudioTelephonyEventCapability',Term1,Term2},Bytes5}.

'enc_AudioToneCapability'(Val) ->
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 96,
if Enc2@element@sub bsr 5 =:= 0 ->
<<0:1,Enc2@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.


dec_AudioToneCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:5/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 96,
{V2@Add2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'AudioToneCapability',Term1},Bytes4}.

'enc_NoPTAudioTelephonyEventCapability'(Val) ->
Enc2@element = element(2, Val),
Enc3@bin = iolist_to_binary(Enc2@element),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 128 ->
[<<0:1>>,
align,
Enc3@len|Enc3@bin];
Enc3@len < 16384 ->
[<<0:1>>,
align,
<<2:2,Enc3@len:14>>|Enc3@bin];
true ->
[<<0:1>>,
align|encode_fragmented(Enc3@bin, 8)]
end.


dec_NoPTAudioTelephonyEventCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type GeneralString
{Term1,Bytes2} = begin
V2@Pad3 = bit_size(Bytes1) band 7,
{V2@V0,V2@Buf1} = case Bytes1 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/binary-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
V2@Conv10 = binary_to_list(V2@V8),
{V2@Conv10,V2@Buf9}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'NoPTAudioTelephonyEventCapability',Term1},Bytes4}.

'enc_NoPTAudioToneCapability'(Val) ->
<<0:1>>.


dec_NoPTAudioToneCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% Extensions
{Extensions,Bytes2} = case Ext of
0 -> {<<>>,Bytes1};
1 ->
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes3= skipextensions(Bytes2, 1, Extensions),
{{'NoPTAudioToneCapability'},Bytes3}.

'enc_MultiplePayloadStreamCapability'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MultiplePayloadStreamCapability_capabilities(Enc2@element)
end].
'enc_MultiplePayloadStreamCapability_capabilities'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_AlternativeCapabilitySet(Comp) || Comp <- Val]]
end.


dec_MultiplePayloadStreamCapability_capabilities(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components36(V1@Add4, V1@Buf1, []).



dec_MultiplePayloadStreamCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SET OF
{Term1,Bytes2} = 'dec_MultiplePayloadStreamCapability_capabilities'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MultiplePayloadStreamCapability',Term1},Bytes4}.

'enc_FECCapability'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= rfc2733 ->
[<<0:1>>|enc_FECCapability_rfc2733(ChoiceVal)]
end.
'enc_FECCapability_rfc2733'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element =:= false ->
<<0:1,0:1>>;
Enc2@element =:= true ->
<<0:1,1:1>>
end
end|begin
Enc4@element = element(3, Val),
enc_FECCapability_rfc2733_separateStream(Enc4@element)
end].
'enc_FECCapability_rfc2733_separateStream'(Val) ->
Enc2@element = element(2, Val),
Enc4@element = element(3, Val),
if Enc2@element =:= false ->
if Enc4@element =:= false ->
<<0:1,0:1,0:1>>;
Enc4@element =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@element =:= true ->
if Enc4@element =:= false ->
<<0:1,1:1,0:1>>;
Enc4@element =:= true ->
<<0:1,1:1,1:1>>
end
end.

dec_FECCapability_rfc2733_separateStream(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'FECCapability_rfc2733_separateStream',Term1,Term2},Bytes5}.


dec_FECCapability_rfc2733(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = 'dec_FECCapability_rfc2733_separateStream'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'FECCapability_rfc2733',Term1,Term2},Bytes5}.



dec_FECCapability(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_FECCapability_rfc2733'(Bytes2)
end,
{{rfc2733,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_OpenLogicalChannel'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 5, 7),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc2@bitmap:2>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
enc_OpenLogicalChannel_forwardLogicalChannelParameters(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_OpenLogicalChannel_reverseLogicalChannelParameters(Enc7@element)
end
end,
Extensions,
begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_NetworkAccessParameters(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end|begin
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@output = enc_EncryptionSync(Enc12@element),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[align|encode_fragmented(Enc13@bin, 8)]
end
end
end
end].
'enc_OpenLogicalChannel_forwardLogicalChannelParameters'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 5, 7),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc2@bitmap:2>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
Enc4@element bsr 16 =:= 0 ->
[align|<<Enc4@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc7@element = element(3, Val),
enc_DataType(Enc7@element)
end,
begin
Enc8@element = element(4, Val),
enc_OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters(Enc8@element)
end,
Extensions,
begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@output = begin
Enc9@element@sub = Enc9@element - 1,
if 0 =< Enc9@element@sub, Enc9@element@sub < 65535 ->
<<Enc9@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@element}}})
end
end,
Enc11@bin = Enc11@output,
[align,
2|Enc11@bin]
end
end
end|begin
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@output = begin
Enc13@element@sub = Enc13@element - 1,
if 0 =< Enc13@element@sub, Enc13@element@sub < 65535 ->
<<Enc13@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc13@element}}})
end
end,
Enc15@bin = Enc15@output,
[align,
2|Enc15@bin]
end
end
end].
'enc_OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= h222LogicalChannelParameters ->
[<<0:1,0:2>>|enc_H222LogicalChannelParameters(ChoiceVal)];
ChoiceTag =:= h223LogicalChannelParameters ->
[<<0:1,1:2>>|enc_H223LogicalChannelParameters(ChoiceVal)];
ChoiceTag =:= v76LogicalChannelParameters ->
[<<0:1,2:2>>|enc_V76LogicalChannelParameters(ChoiceVal)];
ChoiceTag =:= h2250LogicalChannelParameters ->
begin
Enc4@output = enc_H2250LogicalChannelParameters(ChoiceVal),
Enc4@bin = complete(Enc4@output),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[<<1:1,0:7>>,
align,
Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc4@bin, 8)]
end
end;
ChoiceTag =:= none ->
begin
Enc5@output = [],
Enc5@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc5@bin]
end
end.

dec_OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_H222LogicalChannelParameters(Bytes2)
end,
{{h222LogicalChannelParameters,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_H223LogicalChannelParameters(Bytes2)
end,
{{h223LogicalChannelParameters,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_V76LogicalChannelParameters(Bytes2)
end,
{{v76LogicalChannelParameters,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H2250LogicalChannelParameters(V2@V0),
{TmpVal,V2@Buf1}
end,
{{h2250LogicalChannelParameters,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{none,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_OpenLogicalChannel_forwardLogicalChannelParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case Opt band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type DataType
{Term2,Bytes4} = dec_DataType(Bytes3),

%% attribute number 3 with type CHOICE
{Term3,Bytes5} = 'dec_OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters'(Bytes4),

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes7} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes6) band 7,
{V5@V0,V5@Buf1} = case Bytes6 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx4,_} = begin
V6@Pad2 = bit_size(V5@V0) band 7,
<<_:V6@Pad2,V6@V0:2/unsigned-unit:8,V6@Buf1/bitstring>> = V5@V0,
V6@Add4 = V6@V0 + 1,
{V6@Add4,V6@Buf1}
end,
{TmpValx4,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes8} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes7) band 7,
{V7@V0,V7@Buf1} = case Bytes7 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx5,_} = begin
V8@Pad2 = bit_size(V7@V0) band 7,
<<_:V8@Pad2,V8@V0:2/unsigned-unit:8,V8@Buf1/bitstring>> = V7@V0,
V8@Add4 = V8@V0 + 1,
{V8@Add4,V8@Buf1}
end,
{TmpValx5,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,
Bytes9= skipextensions(Bytes8, 3, Extensions),
{{'OpenLogicalChannel_forwardLogicalChannelParameters',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_OpenLogicalChannel_reverseLogicalChannelParameters'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 4, 6),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc2@bitmap:2>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
enc_DataType(Enc4@element)
end,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters(Enc5@element)
end
end,
Extensions,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@output = begin
Enc7@element@sub = Enc7@element - 1,
if 0 =< Enc7@element@sub, Enc7@element@sub < 65535 ->
<<Enc7@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
Enc9@bin = Enc9@output,
[align,
2|Enc9@bin]
end
end
end|begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@output = begin
Enc11@element@sub = Enc11@element - 1,
if 0 =< Enc11@element@sub, Enc11@element@sub < 65535 ->
<<Enc11@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc11@element}}})
end
end,
Enc13@bin = Enc13@output,
[align,
2|Enc13@bin]
end
end
end].
'enc_OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= h223LogicalChannelParameters ->
[<<0:1,0:1>>|enc_H223LogicalChannelParameters(ChoiceVal)];
ChoiceTag =:= v76LogicalChannelParameters ->
[<<0:1,1:1>>|enc_V76LogicalChannelParameters(ChoiceVal)];
ChoiceTag =:= h2250LogicalChannelParameters ->
begin
Enc3@output = enc_H2250LogicalChannelParameters(ChoiceVal),
Enc3@bin = complete(Enc3@output),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 128 ->
[<<1:1,0:7>>,
align,
Enc3@len|Enc3@bin];
Enc3@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc3@len:14>>|Enc3@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc3@bin, 8)]
end
end
end.

dec_OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_H223LogicalChannelParameters(Bytes2)
end,
{{h223LogicalChannelParameters,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_V76LogicalChannelParameters(Bytes2)
end,
{{v76LogicalChannelParameters,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H2250LogicalChannelParameters(V2@V0),
{TmpVal,V2@Buf1}
end,
{{h2250LogicalChannelParameters,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_OpenLogicalChannel_reverseLogicalChannelParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type DataType
{Term1,Bytes3} = dec_DataType(Bytes2),

%% attribute number 2 with type CHOICE
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes5) band 7,
{V4@V0,V4@Buf1} = case Bytes5 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx3,_} = begin
V5@Pad2 = bit_size(V4@V0) band 7,
<<_:V5@Pad2,V5@V0:2/unsigned-unit:8,V5@Buf1/bitstring>> = V4@V0,
V5@Add4 = V5@V0 + 1,
{V5@Add4,V5@Buf1}
end,
{TmpValx3,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes7} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes6) band 7,
{V6@V0,V6@Buf1} = case Bytes6 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx4,_} = begin
V7@Pad2 = bit_size(V6@V0) band 7,
<<_:V7@Pad2,V7@V0:2/unsigned-unit:8,V7@Buf1/bitstring>> = V6@V0,
V7@Add4 = V7@V0 + 1,
{V7@Add4,V7@Buf1}
end,
{TmpValx4,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,
Bytes8= skipextensions(Bytes7, 3, Extensions),
{{'OpenLogicalChannel_reverseLogicalChannelParameters',Term1,Term2,Term3,Term4},Bytes8}.



dec_OpenLogicalChannel(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type SEQUENCE
{Term2,Bytes4} = 'dec_OpenLogicalChannel_forwardLogicalChannelParameters'(Bytes3),

%% attribute number 3 with type SEQUENCE
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_OpenLogicalChannel_reverseLogicalChannelParameters'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 4 with type NetworkAccessParameters
{Term4,Bytes7} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes6) band 7,
{V5@V0,V5@Buf1} = case Bytes6 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx4,_} = dec_NetworkAccessParameters(V5@V0),
{TmpValx4,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type EncryptionSync
{Term5,Bytes8} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes7) band 7,
{V6@V0,V6@Buf1} = case Bytes7 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx5,_} = dec_EncryptionSync(V6@V0),
{TmpValx5,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,
Bytes9= skipextensions(Bytes8, 3, Extensions),
{{'OpenLogicalChannel',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_LogicalChannelNumber'(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 65535 ->
[align|<<Val@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_LogicalChannelNumber(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
{V1@Add4,V1@Buf1}
end.

'enc_NetworkAccessParameters'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 6, 7),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(5, Val),
if Enc2@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_NetworkAccessParameters_distribution(Enc5@element)
end
end,
begin
Enc7@element = element(3, Val),
enc_NetworkAccessParameters_networkAddress(Enc7@element)
end,
begin
Enc8@element = element(4, Val),
if Enc8@element =:= false ->
<<0:1>>;
Enc8@element =:= true ->
<<1:1>>
end
end,
begin
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@len = byte_size(Enc10@element),
Enc11@len@sub = Enc11@len - 1,
if 0 =< Enc11@len@sub, Enc11@len@sub < 255 ->
[Enc11@len@sub,
align|Enc10@element]
end
end
end
end,
Extensions|begin
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@output = enc_NetworkAccessParameters_t120SetupProcedure(Enc13@element),
Enc14@bin = complete(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[align|encode_fragmented(Enc14@bin, 8)]
end
end
end
end].
'enc_NetworkAccessParameters_distribution'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= unicast ->
<<0:1,0:1>>;
ChoiceTag =:= multicast ->
<<0:1,1:1>>
end.

dec_NetworkAccessParameters_distribution(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unicast,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{multicast,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_NetworkAccessParameters_networkAddress'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= q2931Address ->
[<<0:1,0:2>>|enc_Q2931Address(ChoiceVal)];
ChoiceTag =:= e164Address ->
begin
Enc3@len = length(ChoiceVal),
Enc3@bin = encode_chars(ChoiceVal, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,2,ill,ill,ill,3,4,5,6,7,8,9,10,11,12}}),
Enc3@len@sub = Enc3@len - 1,
if Enc3@len@sub bsr 7 =:= 0 ->
[<<0:1,1:2,Enc3@len@sub:7>>,
align|Enc3@bin]
end
end;
ChoiceTag =:= localAreaAddress ->
[<<0:1,2:2>>|enc_TransportAddress(ChoiceVal)]
end.

dec_NetworkAccessParameters_networkAddress(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_Q2931Address(Bytes2)
end,
{{q2931Address,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:4,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V7,V2@Buf8}  = {decode_chars(V2@V3, 4, {35,42,44,48,49,50,51,52,53,54,55,56,57}),V2@Buf4},
{V2@V7,V2@Buf8}
end
end,
{{e164Address,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_TransportAddress(Bytes2)
end,
{{localAreaAddress,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_NetworkAccessParameters_t120SetupProcedure'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= originateCall ->
<<0:1,0:2>>;
ChoiceTag =:= waitForCall ->
<<0:1,1:2>>;
ChoiceTag =:= issueQuery ->
<<0:1,2:2>>
end.

dec_NetworkAccessParameters_t120SetupProcedure(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{originateCall,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{waitForCall,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{issueQuery,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_NetworkAccessParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
'dec_NetworkAccessParameters_distribution'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes4} = 'dec_NetworkAccessParameters_networkAddress'(Bytes3),

%% attribute number 3 with type BOOLEAN
{Term3,Bytes5} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes4,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 4 with type OCTET STRING
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V4@V0:8/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes5,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Conv7 = binary:copy(V4@V3),
{V4@Conv7,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 5 with type CHOICE
{Term5,Bytes8} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes7) band 7,
{V6@V0,V6@Buf1} = case Bytes7 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx5,_} = 'dec_NetworkAccessParameters_t120SetupProcedure'(V6@V0),
{TmpValx5,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,
Bytes9= skipextensions(Bytes8, 2, Extensions),
{{'NetworkAccessParameters',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_Q2931Address'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_Q2931Address_address(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@len = byte_size(Enc4@element),
Enc5@len@sub = Enc5@len - 1,
if 0 =< Enc5@len@sub, Enc5@len@sub < 20 ->
[<<Enc5@len@sub:5>>,
align|Enc4@element]
end
end
end
end].
'enc_Q2931Address_address'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= internationalNumber ->
begin
Enc2@len = length(ChoiceVal),
Enc2@bin = encode_chars(ChoiceVal, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 4 =:= 0 ->
[<<0:1,0:1,Enc2@len@sub:4>>,
align|Enc2@bin]
end
end;
ChoiceTag =:= nsapAddress ->
begin
Enc4@len = byte_size(ChoiceVal),
Enc4@len@sub = Enc4@len - 1,
if 0 =< Enc4@len@sub, Enc4@len@sub < 20 ->
[<<0:1,1:1,Enc4@len@sub:5>>,
align|ChoiceVal]
end
end
end.

dec_Q2931Address_address(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:4/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:4,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V7,V2@Buf8}  = {decode_chars(V2@V3, 4, {32,48,49,50,51,52,53,54,55,56,57}),V2@Buf4},
{V2@V7,V2@Buf8}
end
end,
{{internationalNumber,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:5/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Conv7 = binary:copy(V3@V3),
{V3@Conv7,V3@Buf4}
end
end,
{{nsapAddress,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_Q2931Address(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes3} = 'dec_Q2931Address_address'(Bytes2),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V3@V0:5/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Conv7 = binary:copy(V3@V3),
{V3@Conv7,V3@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'Q2931Address',Term1,Term2},Bytes6}.

'enc_V75Parameters'(Val) ->
Enc2@element = element(2, Val),
if Enc2@element =:= false ->
<<0:1,0:1>>;
Enc2@element =:= true ->
<<0:1,1:1>>
end.


dec_V75Parameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'V75Parameters',Term1},Bytes4}.

'enc_DataType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:3>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= nullData ->
<<0:1,1:3>>;
ChoiceTag =:= videoData ->
[<<0:1,2:3>>|enc_VideoCapability(ChoiceVal)];
ChoiceTag =:= audioData ->
[<<0:1,3:3>>|enc_AudioCapability(ChoiceVal)];
ChoiceTag =:= data ->
[<<0:1,4:3>>|enc_DataApplicationCapability(ChoiceVal)];
ChoiceTag =:= encryptionData ->
[<<0:1,5:3>>|enc_EncryptionMode(ChoiceVal)];
ChoiceTag =:= h235Control ->
begin
Enc7@output = enc_NonStandardParameter(ChoiceVal),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[<<1:1,0:7>>,
align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc7@bin, 8)]
end
end;
ChoiceTag =:= h235Media ->
begin
Enc8@output = enc_H235Media(ChoiceVal),
Enc8@bin = complete(Enc8@output),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[<<1:1,1:7>>,
align,
Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc8@bin, 8)]
end
end;
ChoiceTag =:= multiplexedStream ->
begin
Enc9@output = enc_MultiplexedStreamParameter(ChoiceVal),
Enc9@bin = complete(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[<<1:1,2:7>>,
align,
Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc9@bin, 8)]
end
end;
ChoiceTag =:= redundancyEncoding ->
begin
Enc10@output = enc_RedundancyEncoding(ChoiceVal),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[<<1:1,3:7>>,
align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc10@bin, 8)]
end
end;
ChoiceTag =:= multiplePayloadStream ->
begin
Enc11@output = enc_MultiplePayloadStream(ChoiceVal),
Enc11@bin = complete(Enc11@output),
Enc11@len = byte_size(Enc11@bin),
if Enc11@len < 128 ->
[<<1:1,4:7>>,
align,
Enc11@len|Enc11@bin];
Enc11@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc11@len:14>>|Enc11@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc11@bin, 8)]
end
end;
ChoiceTag =:= fec ->
begin
Enc12@output = enc_FECData(ChoiceVal),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[<<1:1,5:7>>,
align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[<<1:1,5:7>>,
align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[<<1:1,5:7>>,
align|encode_fragmented(Enc12@bin, 8)]
end
end
end.


dec_DataType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{nullData,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_VideoCapability(Bytes2)
end,
{{videoData,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_AudioCapability(Bytes2)
end,
{{audioData,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_DataApplicationCapability(Bytes2)
end,
{{data,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_EncryptionMode(Bytes2)
end,
{{encryptionData,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_NonStandardParameter(V2@V0),
{TmpVal,V2@Buf1}
end,
{{h235Control,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H235Media(V2@V0),
{TmpVal,V2@Buf1}
end,
{{h235Media,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MultiplexedStreamParameter(V2@V0),
{TmpVal,V2@Buf1}
end,
{{multiplexedStream,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_RedundancyEncoding(V2@V0),
{TmpVal,V2@Buf1}
end,
{{redundancyEncoding,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MultiplePayloadStream(V2@V0),
{TmpVal,V2@Buf1}
end,
{{multiplePayloadStream,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_FECData(V2@V0),
{TmpVal,V2@Buf1}
end,
{{fec,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H235Media'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_EncryptionAuthenticationAndIntegrity(Enc2@element)
end|begin
Enc3@element = element(3, Val),
enc_H235Media_mediaType(Enc3@element)
end].
'enc_H235Media_mediaType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:2>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= videoData ->
[<<0:1,1:2>>|enc_VideoCapability(ChoiceVal)];
ChoiceTag =:= audioData ->
[<<0:1,2:2>>|enc_AudioCapability(ChoiceVal)];
ChoiceTag =:= data ->
[<<0:1,3:2>>|enc_DataApplicationCapability(ChoiceVal)];
ChoiceTag =:= redundancyEncoding ->
begin
Enc5@output = enc_RedundancyEncoding(ChoiceVal),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[<<1:1,0:7>>,
align,
Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc5@bin, 8)]
end
end;
ChoiceTag =:= multiplePayloadStream ->
begin
Enc6@output = enc_MultiplePayloadStream(ChoiceVal),
Enc6@bin = complete(Enc6@output),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[<<1:1,1:7>>,
align,
Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc6@bin, 8)]
end
end;
ChoiceTag =:= fec ->
begin
Enc7@output = enc_FECData(ChoiceVal),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[<<1:1,2:7>>,
align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc7@bin, 8)]
end
end
end.

dec_H235Media_mediaType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_VideoCapability(Bytes2)
end,
{{videoData,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_AudioCapability(Bytes2)
end,
{{audioData,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_DataApplicationCapability(Bytes2)
end,
{{data,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_RedundancyEncoding(V2@V0),
{TmpVal,V2@Buf1}
end,
{{redundancyEncoding,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MultiplePayloadStream(V2@V0),
{TmpVal,V2@Buf1}
end,
{{multiplePayloadStream,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_FECData(V2@V0),
{TmpVal,V2@Buf1}
end,
{{fec,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_H235Media(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type EncryptionAuthenticationAndIntegrity
{Term1,Bytes2} = dec_EncryptionAuthenticationAndIntegrity(Bytes1),

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_H235Media_mediaType'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V2@V0,V2@Buf1} = case Bytes3 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'H235Media',Term1,Term2},Bytes5}.

'enc_MultiplexedStreamParameter'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_MultiplexFormat(Enc2@element)
end|begin
Enc3@element = element(3, Val),
if Enc3@element =:= false ->
<<0:1>>;
Enc3@element =:= true ->
<<1:1>>
end
end].


dec_MultiplexedStreamParameter(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type MultiplexFormat
{Term1,Bytes2} = dec_MultiplexFormat(Bytes1),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MultiplexedStreamParameter',Term1,Term2},Bytes5}.

'enc_H222LogicalChannelParameters'(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc5@element = element(2, Val),
if Enc5@element bsr 16 =:= 0 ->
<<Enc5@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element bsr 13 =:= 0 ->
<<Enc7@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element bsr 13 =:= 0 ->
<<Enc9@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@element}}})
end
end,
begin
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@len = byte_size(Enc12@element),
if Enc13@len < 128 ->
[Enc13@len|Enc12@element];
Enc13@len < 16384 ->
[<<2:2,Enc13@len:14>>|Enc12@element];
true ->
encode_fragmented(Enc12@element, 8)
end
end
end
end|begin
Enc15@element = element(6, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@len = byte_size(Enc15@element),
if Enc16@len < 128 ->
[Enc16@len|Enc15@element];
Enc16@len < 16384 ->
[<<2:2,Enc16@len:14>>|Enc15@element];
true ->
encode_fragmented(Enc15@element, 8)
end
end
end
end].


dec_H222LogicalChannelParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:2/unsigned-unit:8,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type OCTET STRING
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
V6@Pad3 = bit_size(Bytes5) band 7,
{V6@V0,V6@Buf1} = case Bytes5 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
V6@Conv10 = binary:copy(V6@V0),
{V6@Conv10,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes7} = case Opt band 1 of
1 ->
begin
V7@Pad3 = bit_size(Bytes6) band 7,
{V7@V0,V7@Buf1} = case Bytes6 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
V7@Conv10 = binary:copy(V7@V0),
{V7@Conv10,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V8@V0,V8@Buf1} = case Bytes7 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
V8@Pad6 = bit_size(V8@Buf2) band 7,
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<_:V8@Pad6,0:1,V8@V8:7,V8@Buf9/bitstring>> when V8@V8 =/= 0 ->
{V8@V8,V8@Buf9};
<<_:V8@Pad6,1:1,0:1,V8@V9:14,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V11:V8@V0/bitstring-unit:1,V8@Buf12/bitstring>> = V8@Buf1,
{V8@V11,V8@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'H222LogicalChannelParameters',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_H223LogicalChannelParameters'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_H223LogicalChannelParameters_adaptationLayerType(Enc2@element)
end|begin
Enc3@element = element(3, Val),
if Enc3@element =:= false ->
<<0:1>>;
Enc3@element =:= true ->
<<1:1>>
end
end].
'enc_H223LogicalChannelParameters_adaptationLayerType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:3>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= al1Framed ->
<<0:1,1:3>>;
ChoiceTag =:= al1NotFramed ->
<<0:1,2:3>>;
ChoiceTag =:= al2WithoutSequenceNumbers ->
<<0:1,3:3>>;
ChoiceTag =:= al2WithSequenceNumbers ->
<<0:1,4:3>>;
ChoiceTag =:= al3 ->
[<<0:1,5:3>>|enc_H223LogicalChannelParameters_adaptationLayerType_al3(ChoiceVal)];
ChoiceTag =:= al1M ->
begin
Enc7@output = enc_H223AL1MParameters(ChoiceVal),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[<<1:1,0:7>>,
align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc7@bin, 8)]
end
end;
ChoiceTag =:= al2M ->
begin
Enc8@output = enc_H223AL2MParameters(ChoiceVal),
Enc8@bin = complete(Enc8@output),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[<<1:1,1:7>>,
align,
Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc8@bin, 8)]
end
end;
ChoiceTag =:= al3M ->
begin
Enc9@output = enc_H223AL3MParameters(ChoiceVal),
Enc9@bin = complete(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[<<1:1,2:7>>,
align,
Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc9@bin, 8)]
end
end
end.
'enc_H223LogicalChannelParameters_adaptationLayerType_al3'(Val) ->
[begin
Enc1@element = element(2, Val),
if 0 =< Enc1@element, Enc1@element < 3 ->
<<Enc1@element:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
if Enc3@element bsr 24 =:= 0 ->
begin
Enc3@element@bin = binary:encode_unsigned(Enc3@element),
Enc3@element@bin_size0 = byte_size(Enc3@element@bin),
Enc3@element@bin_size = Enc3@element@bin_size0 - 1,
[<<Enc3@element@bin_size:2>>,
align|Enc3@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end].

dec_H223LogicalChannelParameters_adaptationLayerType_al3(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V3,V2@Buf4}
end,
{{'H223LogicalChannelParameters_adaptationLayerType_al3',Term1,Term2},Bytes2}.


dec_H223LogicalChannelParameters_adaptationLayerType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{al1Framed,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{al1NotFramed,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{al2WithoutSequenceNumbers,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{al2WithSequenceNumbers,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
'dec_H223LogicalChannelParameters_adaptationLayerType_al3'(Bytes2)
end,
{{al3,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H223AL1MParameters(V2@V0),
{TmpVal,V2@Buf1}
end,
{{al1M,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H223AL2MParameters(V2@V0),
{TmpVal,V2@Buf1}
end,
{{al2M,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H223AL3MParameters(V2@V0),
{TmpVal,V2@Buf1}
end,
{{al3M,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_H223LogicalChannelParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_H223LogicalChannelParameters_adaptationLayerType'(Bytes1),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'H223LogicalChannelParameters',Term1,Term2},Bytes5}.

'enc_H223AL1MParameters'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 9, 10),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[if Extensions =:= [] ->
<<0:1>>;
true ->
<<1:1>>
end,
begin
Enc3@element = element(2, Val),
enc_H223AL1MParameters_transferMode(Enc3@element)
end,
begin
Enc4@element = element(3, Val),
enc_H223AL1MParameters_headerFEC(Enc4@element)
end,
begin
Enc5@element = element(4, Val),
enc_H223AL1MParameters_crcLength(Enc5@element)
end,
begin
Enc6@element = element(5, Val),
Enc6@element@sub = Enc6@element - 8,
if 0 =< Enc6@element@sub, Enc6@element@sub < 25 ->
<<Enc6@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end,
begin
Enc8@element = element(6, Val),
enc_H223AL1MParameters_arqType(Enc8@element)
end,
begin
Enc9@element = element(7, Val),
Enc11@element = element(8, Val),
if Enc9@element =:= false ->
if Enc11@element =:= false ->
<<0:1,0:1>>;
Enc11@element =:= true ->
<<0:1,1:1>>
end;
Enc9@element =:= true ->
if Enc11@element =:= false ->
<<1:1,0:1>>;
Enc11@element =:= true ->
<<1:1,1:1>>
end
end
end,
Extensions|begin
Enc13@element = element(9, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@output = if Enc13@element bsr 7 =:= 0 ->
<<Enc13@element:7,0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc13@element}}})
end,
Enc15@bin = Enc15@output,
[align,
1|Enc15@bin]
end
end
end].
'enc_H223AL1MParameters_transferMode'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= framed ->
<<0:1,0:1>>;
ChoiceTag =:= unframed ->
<<0:1,1:1>>
end.

dec_H223AL1MParameters_transferMode(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{framed,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unframed,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H223AL1MParameters_headerFEC'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'sebch16-7' ->
<<0:1,0:1>>;
ChoiceTag =:= 'golay24-12' ->
<<0:1,1:1>>
end.

dec_H223AL1MParameters_headerFEC(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'sebch16-7',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'golay24-12',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H223AL1MParameters_crcLength'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= crc4bit ->
<<0:1,0:2>>;
ChoiceTag =:= crc12bit ->
<<0:1,1:2>>;
ChoiceTag =:= crc20bit ->
<<0:1,2:2>>;
ChoiceTag =:= crc28bit ->
<<0:1,3:2>>;
ChoiceTag =:= crc8bit ->
begin
Enc5@output = [],
Enc5@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc5@bin]
end;
ChoiceTag =:= crc16bit ->
begin
Enc6@output = [],
Enc6@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc6@bin]
end;
ChoiceTag =:= crc32bit ->
begin
Enc7@output = [],
Enc7@bin = <<0:8>>,
[<<1:1,2:7>>,
align,
1|Enc7@bin]
end;
ChoiceTag =:= crcNotUsed ->
begin
Enc8@output = [],
Enc8@bin = <<0:8>>,
[<<1:1,3:7>>,
align,
1|Enc8@bin]
end
end.

dec_H223AL1MParameters_crcLength(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{crc4bit,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{crc12bit,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{crc20bit,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{crc28bit,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{crc8bit,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{crc16bit,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{crc32bit,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{crcNotUsed,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H223AL1MParameters_arqType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= noArq ->
<<0:1,0:2>>;
ChoiceTag =:= typeIArq ->
[<<0:1,1:2>>|enc_H223AnnexCArqParameters(ChoiceVal)];
ChoiceTag =:= typeIIArq ->
[<<0:1,2:2>>|enc_H223AnnexCArqParameters(ChoiceVal)]
end.

dec_H223AL1MParameters_arqType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noArq,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_H223AnnexCArqParameters(Bytes2)
end,
{{typeIArq,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_H223AnnexCArqParameters(Bytes2)
end,
{{typeIIArq,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_H223AL1MParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_H223AL1MParameters_transferMode'(Bytes1),

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_H223AL1MParameters_headerFEC'(Bytes2),

%% attribute number 3 with type CHOICE
{Term3,Bytes4} = 'dec_H223AL1MParameters_crcLength'(Bytes3),

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
<<V2@V0:5/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes4,
V2@Add2 = V2@V0 + 8,
{V2@Add2,V2@Buf1}
end,

%% attribute number 5 with type CHOICE
{Term5,Bytes6} = 'dec_H223AL1MParameters_arqType'(Bytes5),

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes6,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes7,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V5@V0,V5@Buf1} = case Bytes8 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 8 with type INTEGER
{Term8,Bytes10} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes9) band 7,
{V6@V0,V6@Buf1} = case Bytes9 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx8,_} = begin
<<V7@V0:7/unsigned-unit:1,V7@Buf1/bitstring>> = V6@V0,
{V7@V0,V7@Buf1}
end,
{TmpValx8,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,
Bytes11= skipextensions(Bytes10, 2, Extensions),
{{'H223AL1MParameters',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes11}.

'enc_H223AL2MParameters'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_H223AL2MParameters_headerFEC(Enc2@element)
end|begin
Enc3@element = element(3, Val),
if Enc3@element =:= false ->
<<0:1>>;
Enc3@element =:= true ->
<<1:1>>
end
end].
'enc_H223AL2MParameters_headerFEC'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'sebch16-5' ->
<<0:1,0:1>>;
ChoiceTag =:= 'golay24-12' ->
<<0:1,1:1>>
end.

dec_H223AL2MParameters_headerFEC(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'sebch16-5',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'golay24-12',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_H223AL2MParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_H223AL2MParameters_headerFEC'(Bytes1),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'H223AL2MParameters',Term1,Term2},Bytes5}.

'enc_H223AL3MParameters'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 7, 8),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[if Extensions =:= [] ->
<<0:1>>;
true ->
<<1:1>>
end,
begin
Enc3@element = element(2, Val),
enc_H223AL3MParameters_headerFormat(Enc3@element)
end,
begin
Enc4@element = element(3, Val),
enc_H223AL3MParameters_crcLength(Enc4@element)
end,
begin
Enc5@element = element(4, Val),
Enc5@element@sub = Enc5@element - 8,
if 0 =< Enc5@element@sub, Enc5@element@sub < 25 ->
<<Enc5@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(5, Val),
enc_H223AL3MParameters_arqType(Enc7@element)
end,
begin
Enc8@element = element(6, Val),
if Enc8@element =:= false ->
<<0:1>>;
Enc8@element =:= true ->
<<1:1>>
end
end,
Extensions|begin
Enc10@element = element(7, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@output = if Enc10@element bsr 7 =:= 0 ->
<<Enc10@element:7,0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end,
Enc12@bin = Enc12@output,
[align,
1|Enc12@bin]
end
end
end].
'enc_H223AL3MParameters_headerFormat'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'sebch16-7' ->
<<0:1,0:1>>;
ChoiceTag =:= 'golay24-12' ->
<<0:1,1:1>>
end.

dec_H223AL3MParameters_headerFormat(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'sebch16-7',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'golay24-12',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H223AL3MParameters_crcLength'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= crc4bit ->
<<0:1,0:2>>;
ChoiceTag =:= crc12bit ->
<<0:1,1:2>>;
ChoiceTag =:= crc20bit ->
<<0:1,2:2>>;
ChoiceTag =:= crc28bit ->
<<0:1,3:2>>;
ChoiceTag =:= crc8bit ->
begin
Enc5@output = [],
Enc5@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc5@bin]
end;
ChoiceTag =:= crc16bit ->
begin
Enc6@output = [],
Enc6@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc6@bin]
end;
ChoiceTag =:= crc32bit ->
begin
Enc7@output = [],
Enc7@bin = <<0:8>>,
[<<1:1,2:7>>,
align,
1|Enc7@bin]
end;
ChoiceTag =:= crcNotUsed ->
begin
Enc8@output = [],
Enc8@bin = <<0:8>>,
[<<1:1,3:7>>,
align,
1|Enc8@bin]
end
end.

dec_H223AL3MParameters_crcLength(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{crc4bit,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{crc12bit,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{crc20bit,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{crc28bit,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{crc8bit,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{crc16bit,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{crc32bit,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{crcNotUsed,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H223AL3MParameters_arqType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= noArq ->
<<0:1,0:2>>;
ChoiceTag =:= typeIArq ->
[<<0:1,1:2>>|enc_H223AnnexCArqParameters(ChoiceVal)];
ChoiceTag =:= typeIIArq ->
[<<0:1,2:2>>|enc_H223AnnexCArqParameters(ChoiceVal)]
end.

dec_H223AL3MParameters_arqType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noArq,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_H223AnnexCArqParameters(Bytes2)
end,
{{typeIArq,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_H223AnnexCArqParameters(Bytes2)
end,
{{typeIIArq,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_H223AL3MParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_H223AL3MParameters_headerFormat'(Bytes1),

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_H223AL3MParameters_crcLength'(Bytes2),

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V2@V0:5/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes3,
V2@Add2 = V2@V0 + 8,
{V2@Add2,V2@Buf1}
end,

%% attribute number 4 with type CHOICE
{Term4,Bytes5} = 'dec_H223AL3MParameters_arqType'(Bytes4),

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes5,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes7) band 7,
{V5@V0,V5@Buf1} = case Bytes7 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx6,_} = begin
<<V6@V0:7/unsigned-unit:1,V6@Buf1/bitstring>> = V5@V0,
{V6@V0,V6@Buf1}
end,
{TmpValx6,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,
Bytes9= skipextensions(Bytes8, 2, Extensions),
{{'H223AL3MParameters',Term1,Term2,Term3,Term4,Term5,Term6},Bytes9}.

'enc_H223AnnexCArqParameters'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_H223AnnexCArqParameters_numberOfRetransmissions(Enc2@element)
end|begin
Enc3@element = element(3, Val),
if Enc3@element bsr 24 =:= 0 ->
begin
Enc3@element@bin = binary:encode_unsigned(Enc3@element),
Enc3@element@bin_size0 = byte_size(Enc3@element@bin),
Enc3@element@bin_size = Enc3@element@bin_size0 - 1,
[<<Enc3@element@bin_size:2>>,
align|Enc3@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end].
'enc_H223AnnexCArqParameters_numberOfRetransmissions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= finite ->
if 0 =< ChoiceVal, ChoiceVal < 17 ->
<<0:1,0:1,ChoiceVal:5>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= infinite ->
<<0:1,1:1>>
end.

dec_H223AnnexCArqParameters_numberOfRetransmissions(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:5/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V0,V2@Buf1}
end
end,
{{finite,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{infinite,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_H223AnnexCArqParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_H223AnnexCArqParameters_numberOfRetransmissions'(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V3,V2@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'H223AnnexCArqParameters',Term1,Term2},Bytes5}.

'enc_V76LogicalChannelParameters'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_V76HDLCParameters(Enc2@element)
end,
begin
Enc3@element = element(3, Val),
enc_V76LogicalChannelParameters_suspendResume(Enc3@element)
end,
begin
Enc4@element = element(4, Val),
if Enc4@element =:= false ->
<<0:1>>;
Enc4@element =:= true ->
<<1:1>>
end
end,
begin
Enc6@element = element(5, Val),
enc_V76LogicalChannelParameters_mode(Enc6@element)
end|begin
Enc7@element = element(6, Val),
enc_V75Parameters(Enc7@element)
end].
'enc_V76LogicalChannelParameters_suspendResume'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= noSuspendResume ->
<<0:1,0:2>>;
ChoiceTag =:= suspendResumewAddress ->
<<0:1,1:2>>;
ChoiceTag =:= suspendResumewoAddress ->
<<0:1,2:2>>
end.

dec_V76LogicalChannelParameters_suspendResume(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noSuspendResume,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{suspendResumewAddress,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{suspendResumewoAddress,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_V76LogicalChannelParameters_mode'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= eRM ->
[<<0:1,0:1>>|enc_V76LogicalChannelParameters_mode_eRM(ChoiceVal)];
ChoiceTag =:= uNERM ->
<<0:1,1:1>>
end.
'enc_V76LogicalChannelParameters_mode_eRM'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 127 ->
<<0:1,Enc2@element@sub:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_V76LogicalChannelParameters_mode_eRM_recovery(Enc4@element)
end].
'enc_V76LogicalChannelParameters_mode_eRM_recovery'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= rej ->
<<0:1,0:2>>;
ChoiceTag =:= sREJ ->
<<0:1,1:2>>;
ChoiceTag =:= mSREJ ->
<<0:1,2:2>>
end.

dec_V76LogicalChannelParameters_mode_eRM_recovery(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{rej,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{sREJ,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{mSREJ,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_V76LogicalChannelParameters_mode_eRM(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_V76LogicalChannelParameters_mode_eRM_recovery'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'V76LogicalChannelParameters_mode_eRM',Term1,Term2},Bytes5}.


dec_V76LogicalChannelParameters_mode(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_V76LogicalChannelParameters_mode_eRM'(Bytes2)
end,
{{eRM,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{uNERM,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_V76LogicalChannelParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type V76HDLCParameters
{Term1,Bytes2} = dec_V76HDLCParameters(Bytes1),

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_V76LogicalChannelParameters_suspendResume'(Bytes2),

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes3,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 4 with type CHOICE
{Term4,Bytes5} = 'dec_V76LogicalChannelParameters_mode'(Bytes4),

%% attribute number 5 with type V75Parameters
{Term5,Bytes6} = dec_V75Parameters(Bytes5),

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V3@V0,V3@Buf1} = case Bytes6 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'V76LogicalChannelParameters',Term1,Term2,Term3,Term4,Term5},Bytes8}.

'enc_V76HDLCParameters'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_CRCLength(Enc2@element)
end,
align,
begin
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - 1,
if 0 =< Enc3@element@sub, Enc3@element@sub < 4095 ->
<<Enc3@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end|begin
Enc5@element = element(4, Val),
if Enc5@element =:= false ->
<<0:1>>;
Enc5@element =:= true ->
<<1:1>>
end
end].


dec_V76HDLCParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CRCLength
{Term1,Bytes2} = dec_CRCLength(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes3,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:6,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:6,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'V76HDLCParameters',Term1,Term2,Term3},Bytes6}.

'enc_CRCLength'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= crc8bit ->
<<0:1,0:2>>;
ChoiceTag =:= crc16bit ->
<<0:1,1:2>>;
ChoiceTag =:= crc32bit ->
<<0:1,2:2>>
end.


dec_CRCLength(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{crc8bit,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{crc16bit,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{crc32bit,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H2250LogicalChannelParameters'(Val) ->
Enc11@bitmap = extension_bitmap(Val, 13, 16),
Extensions = if Enc11@bitmap =:= 0 ->
[];
true ->
<<2:7,Enc11@bitmap:3>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(4, Val),
Enc3@element = element(5, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(6, Val),
Enc5@element = element(7, Val),
if Enc4@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@element = element(8, Val),
Enc7@element = element(9, Val),
if Enc6@element =:= asn1_NOVALUE ->
if Enc7@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc7@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@element = element(10, Val),
Enc9@element = element(11, Val),
if Enc8@element =:= asn1_NOVALUE ->
if Enc9@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc9@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(12, Val),
if Enc10@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc13@element = element(2, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_H2250LogicalChannelParameters_nonStandard(Enc13@element)
end
end,
align,
begin
Enc15@element = element(3, Val),
if Enc15@element bsr 8 =:= 0 ->
Enc15@element;
true ->
exit({error,{asn1,{illegal_value,Enc15@element}}})
end
end,
begin
Enc17@element = element(4, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@element@sub = Enc17@element - 1,
if 0 =< Enc17@element@sub, Enc17@element@sub < 255 ->
Enc17@element@sub;
true ->
exit({error,{asn1,{illegal_value,Enc17@element}}})
end
end
end
end,
begin
Enc20@element = element(5, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc20@element)
end
end,
begin
Enc22@element = element(6, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
Enc22@element =:= false ->
<<0:1>>;
Enc22@element =:= true ->
<<1:1>>
end
end,
begin
Enc25@element = element(7, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc25@element)
end
end,
begin
Enc27@element = element(8, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
Enc27@element =:= false ->
<<0:1>>;
Enc27@element =:= true ->
<<1:1>>
end
end,
begin
Enc30@element = element(9, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
Enc30@element =:= false ->
<<0:1>>;
Enc30@element =:= true ->
<<1:1>>
end
end,
begin
Enc33@element = element(10, Val),
if Enc33@element =:= asn1_NOVALUE ->
[];
true ->
enc_TerminalLabel(Enc33@element)
end
end,
begin
Enc35@element = element(11, Val),
if Enc35@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc35@element@sub = Enc35@element - 96,
if Enc35@element@sub bsr 5 =:= 0 ->
<<Enc35@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc35@element}}})
end
end
end
end,
begin
Enc38@element = element(12, Val),
if Enc38@element =:= asn1_NOVALUE ->
[];
true ->
enc_H2250LogicalChannelParameters_mediaPacketization(Enc38@element)
end
end,
Extensions,
begin
Enc40@element = element(13, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc41@output = enc_TransportCapability(Enc40@element),
Enc41@bin = complete(Enc41@output),
Enc41@len = byte_size(Enc41@bin),
if Enc41@len < 128 ->
[align,
Enc41@len|Enc41@bin];
Enc41@len < 16384 ->
[align,
<<2:2,Enc41@len:14>>|Enc41@bin];
true ->
[align|encode_fragmented(Enc41@bin, 8)]
end
end
end
end,
begin
Enc43@element = element(14, Val),
if Enc43@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc44@output = enc_RedundancyEncoding(Enc43@element),
Enc44@bin = complete(Enc44@output),
Enc44@len = byte_size(Enc44@bin),
if Enc44@len < 128 ->
[align,
Enc44@len|Enc44@bin];
Enc44@len < 16384 ->
[align,
<<2:2,Enc44@len:14>>|Enc44@bin];
true ->
[align|encode_fragmented(Enc44@bin, 8)]
end
end
end
end|begin
Enc46@element = element(15, Val),
if Enc46@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc47@output = enc_TerminalLabel(Enc46@element),
Enc47@bin = complete(Enc47@output),
Enc47@len = byte_size(Enc47@bin),
if Enc47@len < 128 ->
[align,
Enc47@len|Enc47@bin];
Enc47@len < 16384 ->
[align,
<<2:2,Enc47@len:14>>|Enc47@bin];
true ->
[align|encode_fragmented(Enc47@bin, 8)]
end
end
end
end].
'enc_H2250LogicalChannelParameters_nonStandard'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_NonStandardParameter(Comp) || Comp <- Val]].


dec_H2250LogicalChannelParameters_nonStandard(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components37(V1@V0, V1@Buf1, []).

'enc_H2250LogicalChannelParameters_mediaPacketization'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= h261aVideoPacketization ->
<<0:1>>;
ChoiceTag =:= rtpPayloadType ->
begin
Enc2@output = enc_RTPPayloadType(ChoiceVal),
Enc2@bin = complete(Enc2@output),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 128 ->
[<<1:1,0:7>>,
align,
Enc2@len|Enc2@bin];
Enc2@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc2@len:14>>|Enc2@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc2@bin, 8)]
end
end
end.

dec_H2250LogicalChannelParameters_mediaPacketization(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{h261aVideoPacketization,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_RTPPayloadType(V2@V0),
{TmpVal,V2@Buf1}
end,
{{rtpPayloadType,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_H2250LogicalChannelParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:10,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes3} = case (Opt bsr 9) band 1 of
1 ->
'dec_H2250LogicalChannelParameters_nonStandard'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
V3@Pad2 = bit_size(Bytes3) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 8) band 1 of
1 ->
begin
<<V4@V0:8/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type TransportAddress
{Term4,Bytes6} = case (Opt bsr 7) band 1 of
1 ->
dec_TransportAddress(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes7} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes6,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type TransportAddress
{Term6,Bytes8} = case (Opt bsr 5) band 1 of
1 ->
dec_TransportAddress(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes9} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes8,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes10} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes9,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type TerminalLabel
{Term9,Bytes11} = case (Opt bsr 2) band 1 of
1 ->
dec_TerminalLabel(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type INTEGER
{Term10,Bytes12} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V8@V0:5/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes11,
V8@Add2 = V8@V0 + 96,
{V8@Add2,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 11 with type CHOICE
{Term11,Bytes13} = case Opt band 1 of
1 ->
'dec_H2250LogicalChannelParameters_mediaPacketization'(Bytes12);
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% Extensions
{Extensions,Bytes14} = case Ext of
0 -> {<<>>,Bytes13};
1 ->
{V9@V0,V9@Buf1} = case Bytes13 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
V9@Pad6 = bit_size(V9@Buf2) band 7,
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<_:V9@Pad6,0:1,V9@V8:7,V9@Buf9/bitstring>> when V9@V8 =/= 0 ->
{V9@V8,V9@Buf9};
<<_:V9@Pad6,1:1,0:1,V9@V9:14,V9@Buf10/bitstring>> when V9@V9 =/= 0 ->
{V9@V9,V9@Buf10}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V11:V9@V0/bitstring-unit:1,V9@Buf12/bitstring>> = V9@Buf1,
{V9@V11,V9@Buf12}
end,

%% attribute number 12 with type TransportCapability
{Term12,Bytes15} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes14) band 7,
{V10@V0,V10@Buf1} = case Bytes14 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx12,_} = dec_TransportCapability(V10@V0),
{TmpValx12,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type RedundancyEncoding
{Term13,Bytes16} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes15) band 7,
{V11@V0,V11@Buf1} = case Bytes15 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx13,_} = dec_RedundancyEncoding(V11@V0),
{TmpValx13,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type TerminalLabel
{Term14,Bytes17} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes16) band 7,
{V12@V0,V12@Buf1} = case Bytes16 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx14,_} = dec_TerminalLabel(V12@V0),
{TmpValx14,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,
Bytes18= skipextensions(Bytes17, 4, Extensions),
{{'H2250LogicalChannelParameters',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14},Bytes18}.

'enc_RTPPayloadType'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_RTPPayloadType_payloadDescriptor(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
Enc4@element bsr 7 =:= 0 ->
<<Enc4@element:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].
'enc_RTPPayloadType_payloadDescriptor'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandardIdentifier ->
[<<0:1,0:2>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= 'rfc-number' ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 15 =:= 0 ->
[<<0:1,1:2,0:1>>,
align|<<ChoiceVal@sub:16>>];
true ->
[<<0:1,1:2,1:1>>,
align|encode_unconstrained_number(ChoiceVal)]
end
end;
ChoiceTag =:= oid ->
begin
Enc5@bin = encode_oid(ChoiceVal),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[<<0:1,2:2>>,
align,
Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<0:1,2:2>>,
align,
<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
[<<0:1,2:2>>,
align|encode_fragmented(Enc5@bin, 8)]
end
end
end.

dec_RTPPayloadType_payloadDescriptor(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandardIdentifier,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@Buf2/bitstring>> ->
V2@Pad5 = bit_size(V2@Buf2) band 7,
<<_:V2@Pad5,V2@V3:2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf2,
V2@Add7 = V2@V3 + 1,
{V2@Add7,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
<<V2@V11:V2@V3/signed-unit:8,V2@Buf12/bitstring>> = V2@Buf4,
{V2@V11,V2@Buf12}
end,
{V2@V0,V2@Buf1}
end
end,
{{'rfc-number',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end
end,
{{oid,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_RTPPayloadType(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes3} = 'dec_RTPPayloadType_payloadDescriptor'(Bytes2),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V3@V0:7/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RTPPayloadType',Term1,Term2},Bytes6}.

'enc_RedundancyEncoding'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 4, 5),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
enc_RedundancyEncodingMethod(Enc4@element)
end,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_DataType(Enc5@element)
end
end,
Extensions|begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@output = enc_RedundancyEncoding_rtpRedundancyEncoding(Enc7@element),
Enc8@bin = complete(Enc8@output),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[align,
Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[align,
<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
[align|encode_fragmented(Enc8@bin, 8)]
end
end
end
end].
'enc_RedundancyEncoding_rtpRedundancyEncoding'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_RedundancyEncodingElement(Enc4@element)
end
end|begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_RedundancyEncoding_rtpRedundancyEncoding_secondary(Enc6@element)
end
end].
'enc_RedundancyEncoding_rtpRedundancyEncoding_secondary'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_RedundancyEncodingElement(Comp) || Comp <- Val]].


dec_RedundancyEncoding_rtpRedundancyEncoding_secondary(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components38(V1@V0, V1@Buf1, []).


dec_RedundancyEncoding_rtpRedundancyEncoding(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type RedundancyEncodingElement
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_RedundancyEncodingElement(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_RedundancyEncoding_rtpRedundancyEncoding_secondary'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RedundancyEncoding_rtpRedundancyEncoding',Term1,Term2},Bytes6}.



dec_RedundancyEncoding(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type RedundancyEncodingMethod
{Term1,Bytes3} = dec_RedundancyEncodingMethod(Bytes2),

%% attribute number 2 with type DataType
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_DataType(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 3 with type SEQUENCE
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes5) band 7,
{V4@V0,V4@Buf1} = case Bytes5 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx3,_} = 'dec_RedundancyEncoding_rtpRedundancyEncoding'(V4@V0),
{TmpValx3,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,
Bytes7= skipextensions(Bytes6, 2, Extensions),
{{'RedundancyEncoding',Term1,Term2,Term3},Bytes7}.

'enc_RedundancyEncodingElement'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_DataType(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
Enc4@element bsr 7 =:= 0 ->
<<Enc4@element:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].


dec_RedundancyEncodingElement(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type DataType
{Term1,Bytes3} = dec_DataType(Bytes2),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V3@V0:7/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RedundancyEncodingElement',Term1,Term2},Bytes6}.

'enc_MultiplePayloadStream'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MultiplePayloadStream_elements(Enc2@element)
end].
'enc_MultiplePayloadStream_elements'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_MultiplePayloadStreamElement(Comp) || Comp <- Val]].


dec_MultiplePayloadStream_elements(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components39(V1@V0, V1@Buf1, []).



dec_MultiplePayloadStream(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_MultiplePayloadStream_elements'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MultiplePayloadStream',Term1},Bytes4}.

'enc_MultiplePayloadStreamElement'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_DataType(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
Enc4@element bsr 7 =:= 0 ->
<<Enc4@element:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].


dec_MultiplePayloadStreamElement(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type DataType
{Term1,Bytes3} = dec_DataType(Bytes2),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V3@V0:7/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'MultiplePayloadStreamElement',Term1,Term2},Bytes6}.

'enc_FECData'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= rfc2733 ->
enc_FECData_rfc2733(ChoiceVal)
end.
'enc_FECData_rfc2733'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_FECData_rfc2733_mode(Enc2@element)
end].
'enc_FECData_rfc2733_mode'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= redundancyEncoding ->
<<0:1,0:1>>;
ChoiceTag =:= separateStream ->
[<<0:1,1:1>>|enc_FECData_rfc2733_mode_separateStream(ChoiceVal)]
end.
'enc_FECData_rfc2733_mode_separateStream'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= differentPort ->
[<<0:1,0:1>>|enc_FECData_rfc2733_mode_separateStream_differentPort(ChoiceVal)];
ChoiceTag =:= samePort ->
[<<0:1,1:1>>|enc_FECData_rfc2733_mode_separateStream_samePort(ChoiceVal)]
end.
'enc_FECData_rfc2733_mode_separateStream_differentPort'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
Enc3@element@sub = Enc3@element - 1,
if 0 =< Enc3@element@sub, Enc3@element@sub < 255 ->
Enc3@element@sub;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end|begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
Enc5@element bsr 7 =:= 0 ->
<<Enc5@element:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end].

dec_FECData_rfc2733_mode_separateStream_differentPort(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'FECData_rfc2733_mode_separateStream_differentPort',Term1,Term2},Bytes6}.

'enc_FECData_rfc2733_mode_separateStream_samePort'(Val) ->
Enc2@element = element(2, Val),
if Enc2@element bsr 7 =:= 0 ->
<<0:1,Enc2@element:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.

dec_FECData_rfc2733_mode_separateStream_samePort(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'FECData_rfc2733_mode_separateStream_samePort',Term1},Bytes4}.


dec_FECData_rfc2733_mode_separateStream(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_FECData_rfc2733_mode_separateStream_differentPort'(Bytes2)
end,
{{differentPort,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_FECData_rfc2733_mode_separateStream_samePort'(Bytes2)
end,
{{samePort,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_FECData_rfc2733_mode(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{redundancyEncoding,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_FECData_rfc2733_mode_separateStream'(Bytes2)
end,
{{separateStream,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_FECData_rfc2733(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_FECData_rfc2733_mode'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'FECData_rfc2733',Term1},Bytes4}.



dec_FECData(Bytes) ->
{Choice,Bytes1} = 
begin
ignore,
{0,Bytes}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_FECData_rfc2733'(Bytes1)
end,
{{rfc2733,Val},NewBytes}
end.
'enc_TransportAddress'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= unicastAddress ->
[<<0:1,0:1>>|enc_UnicastAddress(ChoiceVal)];
ChoiceTag =:= multicastAddress ->
[<<0:1,1:1>>|enc_MulticastAddress(ChoiceVal)]
end.


dec_TransportAddress(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_UnicastAddress(Bytes2)
end,
{{unicastAddress,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_MulticastAddress(Bytes2)
end,
{{multicastAddress,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_UnicastAddress'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= iPAddress ->
[<<0:1,0:3>>|enc_UnicastAddress_iPAddress(ChoiceVal)];
ChoiceTag =:= iPXAddress ->
[<<0:1,1:3>>|enc_UnicastAddress_iPXAddress(ChoiceVal)];
ChoiceTag =:= iP6Address ->
[<<0:1,2:3>>|enc_UnicastAddress_iP6Address(ChoiceVal)];
ChoiceTag =:= netBios ->
begin
Enc5@len = byte_size(ChoiceVal),
if Enc5@len =:= 16 ->
[<<0:1,3:3>>,
align|ChoiceVal]
end
end;
ChoiceTag =:= iPSourceRouteAddress ->
[<<0:1,4:3>>|enc_UnicastAddress_iPSourceRouteAddress(ChoiceVal)];
ChoiceTag =:= nsap ->
begin
Enc8@output = begin
Enc7@len = byte_size(ChoiceVal),
Enc7@len@sub = Enc7@len - 1,
if 0 =< Enc7@len@sub, Enc7@len@sub < 20 ->
[<<Enc7@len@sub:5,0:3>>|ChoiceVal]
end
end,
Enc8@bin = iolist_to_binary(Enc8@output),
Enc8@len = byte_size(Enc8@bin),
[<<1:1,0:7>>,
align,
Enc8@len|Enc8@bin]
end;
ChoiceTag =:= nonStandardAddress ->
begin
Enc9@output = enc_NonStandardParameter(ChoiceVal),
Enc9@bin = complete(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[<<1:1,1:7>>,
align,
Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc9@bin, 8)]
end
end
end.
'enc_UnicastAddress_iPAddress'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc3@len = byte_size(Enc2@element),
if Enc3@len =:= 4 ->
[<<0:1>>,
align|Enc2@element]
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element bsr 16 =:= 0 ->
<<Enc4@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].

dec_UnicastAddress_iPAddress(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:4/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv4 = binary:copy(V2@V0),
{V2@Conv4,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'UnicastAddress_iPAddress',Term1,Term2},Bytes5}.

'enc_UnicastAddress_iPXAddress'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc3@len = byte_size(Enc2@element),
if Enc3@len =:= 6 ->
[<<0:1>>,
align|Enc2@element]
end
end,
begin
Enc4@element = element(3, Val),
Enc5@len = byte_size(Enc4@element),
if Enc5@len =:= 4 ->
Enc4@element
end
end|begin
Enc6@element = element(4, Val),
Enc7@len = byte_size(Enc6@element),
if Enc7@len =:= 2 ->
Enc6@element
end
end].

dec_UnicastAddress_iPXAddress(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:6/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv4 = binary:copy(V2@V0),
{V2@Conv4,V2@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
<<V3@V0:4/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv2 = binary:copy(V3@V0),
{V3@Conv2,V3@Buf1}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes4} = begin
<<V4@V0:2/binary-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:7,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:7,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'UnicastAddress_iPXAddress',Term1,Term2,Term3},Bytes6}.

'enc_UnicastAddress_iP6Address'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc3@len = byte_size(Enc2@element),
if Enc3@len =:= 16 ->
[<<0:1>>,
align|Enc2@element]
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element bsr 16 =:= 0 ->
<<Enc4@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].

dec_UnicastAddress_iP6Address(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:16/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv4 = binary:copy(V2@V0),
{V2@Conv4,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'UnicastAddress_iP6Address',Term1,Term2},Bytes5}.

'enc_UnicastAddress_iPSourceRouteAddress'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_UnicastAddress_iPSourceRouteAddress_routing(Enc2@element)
end,
align,
begin
Enc3@element = element(3, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 4 ->
Enc3@element
end
end,
begin
Enc5@element = element(4, Val),
if Enc5@element bsr 16 =:= 0 ->
<<Enc5@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end|begin
Enc7@element = element(5, Val),
enc_UnicastAddress_iPSourceRouteAddress_route(Enc7@element)
end].
'enc_UnicastAddress_iPSourceRouteAddress_routing'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= strict ->
<<0:1>>;
ChoiceTag =:= loose ->
<<1:1>>
end.

dec_UnicastAddress_iPSourceRouteAddress_routing(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{strict,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{loose,Val},NewBytes}
end.
'enc_UnicastAddress_iPSourceRouteAddress_route'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len =:= 4 ->
Comp
end
end || Comp <- Val]].


dec_UnicastAddress_iPSourceRouteAddress_route(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components40(V1@V0, V1@Buf1, []).


dec_UnicastAddress_iPSourceRouteAddress(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_UnicastAddress_iPSourceRouteAddress_routing'(Bytes1),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:4/binary-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Conv4 = binary:copy(V2@V0),
{V2@Conv4,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes5} = 'dec_UnicastAddress_iPSourceRouteAddress_route'(Bytes4),

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'UnicastAddress_iPSourceRouteAddress',Term1,Term2,Term3,Term4},Bytes7}.



dec_UnicastAddress(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_UnicastAddress_iPAddress'(Bytes2)
end,
{{iPAddress,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_UnicastAddress_iPXAddress'(Bytes2)
end,
{{iPXAddress,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_UnicastAddress_iP6Address'(Bytes2)
end,
{{iP6Address,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:16/binary-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Conv4 = binary:copy(V2@V0),
{V2@Conv4,V2@Buf1}
end
end,
{{netBios,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
'dec_UnicastAddress_iPSourceRouteAddress'(Bytes2)
end,
{{iPSourceRouteAddress,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
<<V3@V0:5/unsigned-unit:1,V3@Buf1/bitstring>> = V2@V0,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Conv7 = binary:copy(V3@V3),
{V3@Conv7,V3@Buf4}
end,
{TmpVal,V2@Buf1}
end,
{{nsap,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_NonStandardParameter(V2@V0),
{TmpVal,V2@Buf1}
end,
{{nonStandardAddress,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_MulticastAddress'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= iPAddress ->
[<<0:1,0:1>>|enc_MulticastAddress_iPAddress(ChoiceVal)];
ChoiceTag =:= iP6Address ->
[<<0:1,1:1>>|enc_MulticastAddress_iP6Address(ChoiceVal)];
ChoiceTag =:= nsap ->
begin
Enc4@output = begin
Enc3@len = byte_size(ChoiceVal),
Enc3@len@sub = Enc3@len - 1,
if 0 =< Enc3@len@sub, Enc3@len@sub < 20 ->
[<<Enc3@len@sub:5,0:3>>|ChoiceVal]
end
end,
Enc4@bin = iolist_to_binary(Enc4@output),
Enc4@len = byte_size(Enc4@bin),
[<<1:1,0:7>>,
align,
Enc4@len|Enc4@bin]
end;
ChoiceTag =:= nonStandardAddress ->
begin
Enc5@output = enc_NonStandardParameter(ChoiceVal),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[<<1:1,1:7>>,
align,
Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc5@bin, 8)]
end
end
end.
'enc_MulticastAddress_iPAddress'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc3@len = byte_size(Enc2@element),
if Enc3@len =:= 4 ->
[<<0:1>>,
align|Enc2@element]
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element bsr 16 =:= 0 ->
<<Enc4@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].

dec_MulticastAddress_iPAddress(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:4/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv4 = binary:copy(V2@V0),
{V2@Conv4,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MulticastAddress_iPAddress',Term1,Term2},Bytes5}.

'enc_MulticastAddress_iP6Address'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc3@len = byte_size(Enc2@element),
if Enc3@len =:= 16 ->
[<<0:1>>,
align|Enc2@element]
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element bsr 16 =:= 0 ->
<<Enc4@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].

dec_MulticastAddress_iP6Address(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:16/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv4 = binary:copy(V2@V0),
{V2@Conv4,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MulticastAddress_iP6Address',Term1,Term2},Bytes5}.



dec_MulticastAddress(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_MulticastAddress_iPAddress'(Bytes2)
end,
{{iPAddress,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_MulticastAddress_iP6Address'(Bytes2)
end,
{{iP6Address,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
<<V3@V0:5/unsigned-unit:1,V3@Buf1/bitstring>> = V2@V0,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Conv7 = binary:copy(V3@V3),
{V3@Conv7,V3@Buf4}
end,
{TmpVal,V2@Buf1}
end,
{{nsap,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_NonStandardParameter(V2@V0),
{TmpVal,V2@Buf1}
end,
{{nonStandardAddress,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_EncryptionSync'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@element)
end
end,
align,
begin
Enc6@element = element(3, Val),
if Enc6@element bsr 8 =:= 0 ->
Enc6@element;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end,
begin
Enc8@element = element(4, Val),
Enc9@len = byte_size(Enc8@element),
Enc9@len@sub = Enc9@len - 1,
if 0 =< Enc9@len@sub, Enc9@len@sub < 65535 ->
[<<Enc9@len@sub:16>>|Enc8@element]
end
end|begin
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_EncryptionSync_escrowentry(Enc10@element)
end
end].
'enc_EncryptionSync_escrowentry'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_EscrowData(Comp) || Comp <- Val]]
end.


dec_EncryptionSync_escrowentry(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components41(V1@Add4, V1@Buf1, []).



dec_EncryptionSync(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
V3@Pad2 = bit_size(Bytes3) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
<<V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + 1,
<<V4@V3:V4@Add2/binary-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Conv5 = binary:copy(V4@V3),
{V4@Conv5,V4@Buf4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_EncryptionSync_escrowentry'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'EncryptionSync',Term1,Term2,Term3,Term4},Bytes8}.

'enc_EscrowData'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc3@bin = encode_oid(Enc2@element),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 128 ->
[<<0:1>>,
align,
Enc3@len|Enc3@bin];
Enc3@len < 16384 ->
[<<0:1>>,
align,
<<2:2,Enc3@len:14>>|Enc3@bin];
true ->
[<<0:1>>,
align|encode_fragmented(Enc3@bin, 8)]
end
end|begin
Enc4@element = element(3, Val),
Enc5@bits = bit_size(Enc4@element),
Enc5@bits@sub = Enc5@bits - 1,
if 0 =< Enc5@bits@sub, Enc5@bits@sub < 65535 ->
[<<Enc5@bits@sub:16>>|Enc4@element]
end
end].


dec_EscrowData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes2} = begin
V2@Pad3 = bit_size(Bytes1) band 7,
{V2@V0,V2@Buf1} = case Bytes1 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/binary-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
V2@Conv10 = binary_to_list(V2@V8),
{V2@V11,V2@Buf12}  = {decode_oid(V2@Conv10),V2@Buf9},
{V2@V11,V2@Buf12}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:1,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {list_to_bitstring([V3@V3]),V3@Buf4},
{V3@V5,V3@Buf6}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'EscrowData',Term1,Term2},Bytes5}.

'enc_OpenLogicalChannelAck'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 4, 7),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<2:7,Enc2@bitmap:3>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_OpenLogicalChannelAck_reverseLogicalChannelParameters(Enc6@element)
end
end,
Extensions,
begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@output = enc_NetworkAccessParameters(Enc8@element),
Enc9@bin = complete(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[align,
Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[align,
<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
[align|encode_fragmented(Enc9@bin, 8)]
end
end
end
end,
begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@output = enc_OpenLogicalChannelAck_forwardMultiplexAckParameters(Enc11@element),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[align|encode_fragmented(Enc12@bin, 8)]
end
end
end
end|begin
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@output = enc_EncryptionSync(Enc14@element),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[align|encode_fragmented(Enc15@bin, 8)]
end
end
end
end].
'enc_OpenLogicalChannelAck_reverseLogicalChannelParameters'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 5, 6),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(4, Val),
if Enc2@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc5@element = element(2, Val),
Enc5@element@sub = Enc5@element - 1,
if 0 =< Enc5@element@sub, Enc5@element@sub < 65535 ->
<<Enc5@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
Enc7@element bsr 16 =:= 0 ->
<<Enc7@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters(Enc10@element)
end
end,
Extensions|begin
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@output = begin
Enc12@element@sub = Enc12@element - 1,
if 0 =< Enc12@element@sub, Enc12@element@sub < 65535 ->
<<Enc12@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc12@element}}})
end
end,
Enc14@bin = Enc14@output,
[align,
2|Enc14@bin]
end
end
end].
'enc_OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= h222LogicalChannelParameters ->
[<<0:1>>|enc_H222LogicalChannelParameters(ChoiceVal)];
ChoiceTag =:= h2250LogicalChannelParameters ->
begin
Enc2@output = enc_H2250LogicalChannelParameters(ChoiceVal),
Enc2@bin = complete(Enc2@output),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 128 ->
[<<1:1,0:7>>,
align,
Enc2@len|Enc2@bin];
Enc2@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc2@len:14>>|Enc2@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc2@bin, 8)]
end
end
end.

dec_OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_H222LogicalChannelParameters(Bytes2)
end,
{{h222LogicalChannelParameters,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H2250LogicalChannelParameters(V2@V0),
{TmpVal,V2@Buf1}
end,
{{h2250LogicalChannelParameters,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_OpenLogicalChannelAck_reverseLogicalChannelParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type CHOICE
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes7} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes6) band 7,
{V6@V0,V6@Buf1} = case Bytes6 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx4,_} = begin
V7@Pad2 = bit_size(V6@V0) band 7,
<<_:V7@Pad2,V7@V0:2/unsigned-unit:8,V7@Buf1/bitstring>> = V6@V0,
V7@Add4 = V7@V0 + 1,
{V7@Add4,V7@Buf1}
end,
{TmpValx4,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,
Bytes8= skipextensions(Bytes7, 2, Extensions),
{{'OpenLogicalChannelAck_reverseLogicalChannelParameters',Term1,Term2,Term3,Term4},Bytes8}.

'enc_OpenLogicalChannelAck_forwardMultiplexAckParameters'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= h2250LogicalChannelAckParameters ->
[<<0:1>>|enc_H2250LogicalChannelAckParameters(ChoiceVal)]
end.

dec_OpenLogicalChannelAck_forwardMultiplexAckParameters(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_H2250LogicalChannelAckParameters(Bytes2)
end,
{{h2250LogicalChannelAckParameters,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_OpenLogicalChannelAck(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_OpenLogicalChannelAck_reverseLogicalChannelParameters'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 3 with type NetworkAccessParameters
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes5) band 7,
{V5@V0,V5@Buf1} = case Bytes5 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = dec_NetworkAccessParameters(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 4 with type CHOICE
{Term4,Bytes7} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes6) band 7,
{V6@V0,V6@Buf1} = case Bytes6 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx4,_} = 'dec_OpenLogicalChannelAck_forwardMultiplexAckParameters'(V6@V0),
{TmpValx4,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type EncryptionSync
{Term5,Bytes8} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes7) band 7,
{V7@V0,V7@Buf1} = case Bytes7 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx5,_} = dec_EncryptionSync(V7@V0),
{TmpValx5,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,
Bytes9= skipextensions(Bytes8, 4, Extensions),
{{'OpenLogicalChannelAck',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_OpenLogicalChannelReject'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_OpenLogicalChannelReject_cause(Enc4@element)
end].
'enc_OpenLogicalChannelReject_cause'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= unspecified ->
<<0:1,0:3>>;
ChoiceTag =:= unsuitableReverseParameters ->
<<0:1,1:3>>;
ChoiceTag =:= dataTypeNotSupported ->
<<0:1,2:3>>;
ChoiceTag =:= dataTypeNotAvailable ->
<<0:1,3:3>>;
ChoiceTag =:= unknownDataType ->
<<0:1,4:3>>;
ChoiceTag =:= dataTypeALCombinationNotSupported ->
<<0:1,5:3>>;
ChoiceTag =:= multicastChannelNotAllowed ->
begin
Enc7@output = [],
Enc7@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc7@bin]
end;
ChoiceTag =:= insufficientBandwidth ->
begin
Enc8@output = [],
Enc8@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc8@bin]
end;
ChoiceTag =:= separateStackEstablishmentFailed ->
begin
Enc9@output = [],
Enc9@bin = <<0:8>>,
[<<1:1,2:7>>,
align,
1|Enc9@bin]
end;
ChoiceTag =:= invalidSessionID ->
begin
Enc10@output = [],
Enc10@bin = <<0:8>>,
[<<1:1,3:7>>,
align,
1|Enc10@bin]
end;
ChoiceTag =:= masterSlaveConflict ->
begin
Enc11@output = [],
Enc11@bin = <<0:8>>,
[<<1:1,4:7>>,
align,
1|Enc11@bin]
end;
ChoiceTag =:= waitForCommunicationMode ->
begin
Enc12@output = [],
Enc12@bin = <<0:8>>,
[<<1:1,5:7>>,
align,
1|Enc12@bin]
end;
ChoiceTag =:= invalidDependentChannel ->
begin
Enc13@output = [],
Enc13@bin = <<0:8>>,
[<<1:1,6:7>>,
align,
1|Enc13@bin]
end;
ChoiceTag =:= replacementForRejected ->
begin
Enc14@output = [],
Enc14@bin = <<0:8>>,
[<<1:1,7:7>>,
align,
1|Enc14@bin]
end
end.

dec_OpenLogicalChannelReject_cause(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unspecified,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unsuitableReverseParameters,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{dataTypeNotSupported,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{dataTypeNotAvailable,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unknownDataType,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{dataTypeALCombinationNotSupported,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{multicastChannelNotAllowed,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{insufficientBandwidth,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{separateStackEstablishmentFailed,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{invalidSessionID,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{masterSlaveConflict,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{waitForCommunicationMode,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{invalidDependentChannel,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{replacementForRejected,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_OpenLogicalChannelReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_OpenLogicalChannelReject_cause'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'OpenLogicalChannelReject',Term1,Term2},Bytes5}.

'enc_OpenLogicalChannelConfirm'(Val) ->
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.


dec_OpenLogicalChannelConfirm(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'OpenLogicalChannelConfirm',Term1},Bytes4}.

'enc_H2250LogicalChannelAckParameters'(Val) ->
Enc6@bitmap = extension_bitmap(Val, 7, 9),
Extensions = if Enc6@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc6@bitmap:2>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(3, Val),
Enc3@element = element(4, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(5, Val),
Enc5@element = element(6, Val),
if Enc4@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@element = element(2, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
enc_H2250LogicalChannelAckParameters_nonStandard(Enc8@element)
end
end,
begin
Enc10@element = element(3, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@element@sub = Enc10@element - 1,
if 0 =< Enc10@element@sub, Enc10@element@sub < 255 ->
Enc10@element@sub;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end
end
end,
begin
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc13@element)
end
end,
begin
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc15@element)
end
end,
begin
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@element@sub = Enc17@element - 96,
if Enc17@element@sub bsr 5 =:= 0 ->
<<Enc17@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc17@element}}})
end
end
end
end,
Extensions,
begin
Enc20@element = element(7, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@output = if Enc20@element =:= false ->
<<0:1,0:7>>;
Enc20@element =:= true ->
<<1:1,0:7>>
end,
Enc22@bin = Enc22@output,
[align,
1|Enc22@bin]
end
end
end|begin
Enc24@element = element(8, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@output = if Enc24@element bsr 16 =:= 0 ->
<<Enc24@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc24@element}}})
end,
Enc26@bin = Enc26@output,
[align,
2|Enc26@bin]
end
end
end].
'enc_H2250LogicalChannelAckParameters_nonStandard'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_NonStandardParameter(Comp) || Comp <- Val]].


dec_H2250LogicalChannelAckParameters_nonStandard(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components42(V1@V0, V1@Buf1, []).



dec_H2250LogicalChannelAckParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes3} = case (Opt bsr 4) band 1 of
1 ->
'dec_H2250LogicalChannelAckParameters_nonStandard'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type TransportAddress
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
dec_TransportAddress(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type TransportAddress
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
dec_TransportAddress(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = case Opt band 1 of
1 ->
begin
<<V4@V0:5/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes6,
V4@Add2 = V4@V0 + 96,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes8) band 7,
{V6@V0,V6@Buf1} = case Bytes8 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx6,_} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = V6@V0,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,
{TmpValx6,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type INTEGER
{Term7,Bytes10} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = begin
V9@Pad2 = bit_size(V8@V0) band 7,
<<_:V9@Pad2,V9@V0:2/unsigned-unit:8,V9@Buf1/bitstring>> = V8@V0,
{V9@V0,V9@Buf1}
end,
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,
Bytes11= skipextensions(Bytes10, 3, Extensions),
{{'H2250LogicalChannelAckParameters',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_CloseLogicalChannel'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 4, 5),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[if Extensions =:= [] ->
<<0:1>>;
true ->
<<1:1>>
end,
align,
begin
Enc3@element = element(2, Val),
Enc3@element@sub = Enc3@element - 1,
if 0 =< Enc3@element@sub, Enc3@element@sub < 65535 ->
<<Enc3@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
begin
Enc5@element = element(3, Val),
enc_CloseLogicalChannel_source(Enc5@element)
end,
Extensions|begin
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@output = enc_CloseLogicalChannel_reason(Enc6@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[align|encode_fragmented(Enc7@bin, 8)]
end
end
end
end].
'enc_CloseLogicalChannel_source'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= user ->
<<0:1>>;
ChoiceTag =:= lcse ->
<<1:1>>
end.

dec_CloseLogicalChannel_source(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{user,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{lcse,Val},NewBytes}
end.
'enc_CloseLogicalChannel_reason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= unknown ->
<<0:1,0:2>>;
ChoiceTag =:= reopen ->
<<0:1,1:2>>;
ChoiceTag =:= reservationFailure ->
<<0:1,2:2>>
end.

dec_CloseLogicalChannel_reason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unknown,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{reopen,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{reservationFailure,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_CloseLogicalChannel(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_CloseLogicalChannel_source'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 3 with type CHOICE
{Term3,Bytes5} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx3,_} = 'dec_CloseLogicalChannel_reason'(V4@V0),
{TmpValx3,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,
Bytes6= skipextensions(Bytes5, 2, Extensions),
{{'CloseLogicalChannel',Term1,Term2,Term3},Bytes6}.

'enc_CloseLogicalChannelAck'(Val) ->
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.


dec_CloseLogicalChannelAck(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'CloseLogicalChannelAck',Term1},Bytes4}.

'enc_RequestChannelClose'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 3, 5),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc1@bitmap:2>>
end,
[if Extensions =:= [] ->
<<0:1>>;
true ->
<<1:1>>
end,
align,
begin
Enc3@element = element(2, Val),
Enc3@element@sub = Enc3@element - 1,
if 0 =< Enc3@element@sub, Enc3@element@sub < 65535 ->
<<Enc3@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
Extensions,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@output = enc_QOSCapability(Enc5@element),
Enc6@bin = complete(Enc6@output),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[align,
Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[align,
<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
[align|encode_fragmented(Enc6@bin, 8)]
end
end
end
end|begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@output = enc_RequestChannelClose_reason(Enc8@element),
Enc9@bin = complete(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[align,
Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[align,
<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
[align|encode_fragmented(Enc9@bin, 8)]
end
end
end
end].
'enc_RequestChannelClose_reason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= unknown ->
<<0:1,0:2>>;
ChoiceTag =:= normal ->
<<0:1,1:2>>;
ChoiceTag =:= reopen ->
<<0:1,2:2>>;
ChoiceTag =:= reservationFailure ->
<<0:1,3:2>>
end.

dec_RequestChannelClose_reason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unknown,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{normal,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{reopen,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{reservationFailure,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_RequestChannelClose(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,

%% attribute number 2 with type QOSCapability
{Term2,Bytes4} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes3) band 7,
{V4@V0,V4@Buf1} = case Bytes3 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = dec_QOSCapability(V4@V0),
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type CHOICE
{Term3,Bytes5} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes4) band 7,
{V5@V0,V5@Buf1} = case Bytes4 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = 'dec_RequestChannelClose_reason'(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,
Bytes6= skipextensions(Bytes5, 3, Extensions),
{{'RequestChannelClose',Term1,Term2,Term3},Bytes6}.

'enc_RequestChannelCloseAck'(Val) ->
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.


dec_RequestChannelCloseAck(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'RequestChannelCloseAck',Term1},Bytes4}.

'enc_RequestChannelCloseReject'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_RequestChannelCloseReject_cause(Enc4@element)
end].
'enc_RequestChannelCloseReject_cause'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= unspecified ->
<<0:1>>
end.

dec_RequestChannelCloseReject_cause(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unspecified,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_RequestChannelCloseReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_RequestChannelCloseReject_cause'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'RequestChannelCloseReject',Term1,Term2},Bytes5}.

'enc_RequestChannelCloseRelease'(Val) ->
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.


dec_RequestChannelCloseRelease(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'RequestChannelCloseRelease',Term1},Bytes4}.

'enc_MultiplexEntrySend'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_MultiplexEntrySend_multiplexEntryDescriptors(Enc4@element)
end].
'enc_MultiplexEntrySend_multiplexEntryDescriptors'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 15 ->
[<<Enc1@len@sub:4>>|[enc_MultiplexEntryDescriptor(Comp) || Comp <- Val]]
end.


dec_MultiplexEntrySend_multiplexEntryDescriptors(Bytes) ->
%% Length with constraint {1,15}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components43(V1@Add2, V1@Buf1, []).



dec_MultiplexEntrySend(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type SET OF
{Term2,Bytes3} = 'dec_MultiplexEntrySend_multiplexEntryDescriptors'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MultiplexEntrySend',Term1,Term2},Bytes5}.

'enc_MultiplexEntryDescriptor'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 15 ->
<<Enc2@element@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_MultiplexEntryDescriptor_elementList(Enc4@element)
end
end].
'enc_MultiplexEntryDescriptor_elementList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_MultiplexElement(Comp) || Comp <- Val]]
end.


dec_MultiplexEntryDescriptor_elementList(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components44(V1@Add4, V1@Buf1, []).



dec_MultiplexEntryDescriptor(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:4/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_MultiplexEntryDescriptor_elementList'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'MultiplexEntryDescriptor',Term1,Term2},Bytes3}.

'enc_MultiplexElement'(Val) ->
[begin
Enc1@element = element(2, Val),
enc_MultiplexElement_type(Enc1@element)
end|begin
Enc2@element = element(3, Val),
enc_MultiplexElement_repeatCount(Enc2@element)
end].
'enc_MultiplexElement_type'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= logicalChannelNumber ->
if ChoiceVal bsr 16 =:= 0 ->
[<<0:1>>,
align|<<ChoiceVal:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= subElementList ->
[<<1:1>>|enc_MultiplexElement_type_subElementList(ChoiceVal)]
end.
'enc_MultiplexElement_type_subElementList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 2,
if 0 =< Enc1@len@sub, Enc1@len@sub < 254 ->
[Enc1@len@sub|[enc_MultiplexElement(Comp) || Comp <- Val]]
end.


dec_MultiplexElement_type_subElementList(Bytes) ->
%% Length with constraint {2,255}
<<V1@V0:8/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 2,
dec_components45(V1@Add2, V1@Buf1, []).


dec_MultiplexElement_type(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{logicalChannelNumber,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_MultiplexElement_type_subElementList'(Bytes1)
end,
{{subElementList,Val},NewBytes}
end.
'enc_MultiplexElement_repeatCount'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= finite ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:1>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= untilClosingFlag ->
<<1:1>>
end.

dec_MultiplexElement_repeatCount(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end
end,
{{finite,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{untilClosingFlag,Val},NewBytes}
end.


dec_MultiplexElement(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_MultiplexElement_type'(Bytes),

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_MultiplexElement_repeatCount'(Bytes1),
{{'MultiplexElement',Term1,Term2},Bytes2}.

'enc_MultiplexTableEntryNumber'(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 15 ->
<<Val@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_MultiplexTableEntryNumber(Bytes) ->
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end.

'enc_MultiplexEntrySendAck'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_MultiplexEntrySendAck_multiplexTableEntryNumber(Enc4@element)
end].
'enc_MultiplexEntrySendAck_multiplexTableEntryNumber'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 15 ->
[<<Enc2@len@sub:4>>|[begin
Comp@sub = Comp - 1,
if 0 =< Comp@sub, Comp@sub < 15 ->
<<Comp@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.


dec_MultiplexEntrySendAck_multiplexTableEntryNumber(Bytes) ->
%% Length with constraint {1,15}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components46(V1@Add2, V1@Buf1, []).



dec_MultiplexEntrySendAck(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type SET OF
{Term2,Bytes3} = 'dec_MultiplexEntrySendAck_multiplexTableEntryNumber'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MultiplexEntrySendAck',Term1,Term2},Bytes5}.

'enc_MultiplexEntrySendReject'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_MultiplexEntrySendReject_rejectionDescriptions(Enc4@element)
end].
'enc_MultiplexEntrySendReject_rejectionDescriptions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 15 ->
[<<Enc1@len@sub:4>>|[enc_MultiplexEntryRejectionDescriptions(Comp) || Comp <- Val]]
end.


dec_MultiplexEntrySendReject_rejectionDescriptions(Bytes) ->
%% Length with constraint {1,15}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components47(V1@Add2, V1@Buf1, []).



dec_MultiplexEntrySendReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type SET OF
{Term2,Bytes3} = 'dec_MultiplexEntrySendReject_rejectionDescriptions'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MultiplexEntrySendReject',Term1,Term2},Bytes5}.

'enc_MultiplexEntryRejectionDescriptions'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 15 ->
<<0:1,Enc2@element@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_MultiplexEntryRejectionDescriptions_cause(Enc4@element)
end].
'enc_MultiplexEntryRejectionDescriptions_cause'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= unspecifiedCause ->
<<0:1,0:1>>;
ChoiceTag =:= descriptorTooComplex ->
<<0:1,1:1>>
end.

dec_MultiplexEntryRejectionDescriptions_cause(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unspecifiedCause,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{descriptorTooComplex,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_MultiplexEntryRejectionDescriptions(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:4/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_MultiplexEntryRejectionDescriptions_cause'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MultiplexEntryRejectionDescriptions',Term1,Term2},Bytes5}.

'enc_MultiplexEntrySendRelease'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MultiplexEntrySendRelease_multiplexTableEntryNumber(Enc2@element)
end].
'enc_MultiplexEntrySendRelease_multiplexTableEntryNumber'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 15 ->
[<<Enc2@len@sub:4>>|[begin
Comp@sub = Comp - 1,
if 0 =< Comp@sub, Comp@sub < 15 ->
<<Comp@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.


dec_MultiplexEntrySendRelease_multiplexTableEntryNumber(Bytes) ->
%% Length with constraint {1,15}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components48(V1@Add2, V1@Buf1, []).



dec_MultiplexEntrySendRelease(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SET OF
{Term1,Bytes2} = 'dec_MultiplexEntrySendRelease_multiplexTableEntryNumber'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MultiplexEntrySendRelease',Term1},Bytes4}.

'enc_RequestMultiplexEntry'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_RequestMultiplexEntry_entryNumbers(Enc2@element)
end].
'enc_RequestMultiplexEntry_entryNumbers'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 15 ->
[<<Enc2@len@sub:4>>|[begin
Comp@sub = Comp - 1,
if 0 =< Comp@sub, Comp@sub < 15 ->
<<Comp@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.


dec_RequestMultiplexEntry_entryNumbers(Bytes) ->
%% Length with constraint {1,15}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components49(V1@Add2, V1@Buf1, []).



dec_RequestMultiplexEntry(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SET OF
{Term1,Bytes2} = 'dec_RequestMultiplexEntry_entryNumbers'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'RequestMultiplexEntry',Term1},Bytes4}.

'enc_RequestMultiplexEntryAck'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_RequestMultiplexEntryAck_entryNumbers(Enc2@element)
end].
'enc_RequestMultiplexEntryAck_entryNumbers'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 15 ->
[<<Enc2@len@sub:4>>|[begin
Comp@sub = Comp - 1,
if 0 =< Comp@sub, Comp@sub < 15 ->
<<Comp@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.


dec_RequestMultiplexEntryAck_entryNumbers(Bytes) ->
%% Length with constraint {1,15}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components50(V1@Add2, V1@Buf1, []).



dec_RequestMultiplexEntryAck(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SET OF
{Term1,Bytes2} = 'dec_RequestMultiplexEntryAck_entryNumbers'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'RequestMultiplexEntryAck',Term1},Bytes4}.

'enc_RequestMultiplexEntryReject'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_RequestMultiplexEntryReject_entryNumbers(Enc2@element)
end|begin
Enc3@element = element(3, Val),
enc_RequestMultiplexEntryReject_rejectionDescriptions(Enc3@element)
end].
'enc_RequestMultiplexEntryReject_entryNumbers'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 15 ->
[<<Enc2@len@sub:4>>|[begin
Comp@sub = Comp - 1,
if 0 =< Comp@sub, Comp@sub < 15 ->
<<Comp@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.


dec_RequestMultiplexEntryReject_entryNumbers(Bytes) ->
%% Length with constraint {1,15}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components51(V1@Add2, V1@Buf1, []).

'enc_RequestMultiplexEntryReject_rejectionDescriptions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 15 ->
[<<Enc1@len@sub:4>>|[enc_RequestMultiplexEntryRejectionDescriptions(Comp) || Comp <- Val]]
end.


dec_RequestMultiplexEntryReject_rejectionDescriptions(Bytes) ->
%% Length with constraint {1,15}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components52(V1@Add2, V1@Buf1, []).



dec_RequestMultiplexEntryReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SET OF
{Term1,Bytes2} = 'dec_RequestMultiplexEntryReject_entryNumbers'(Bytes1),

%% attribute number 2 with type SET OF
{Term2,Bytes3} = 'dec_RequestMultiplexEntryReject_rejectionDescriptions'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V2@V0,V2@Buf1} = case Bytes3 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'RequestMultiplexEntryReject',Term1,Term2},Bytes5}.

'enc_RequestMultiplexEntryRejectionDescriptions'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 15 ->
<<0:1,Enc2@element@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_RequestMultiplexEntryRejectionDescriptions_cause(Enc4@element)
end].
'enc_RequestMultiplexEntryRejectionDescriptions_cause'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= unspecifiedCause ->
<<0:1>>
end.

dec_RequestMultiplexEntryRejectionDescriptions_cause(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unspecifiedCause,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_RequestMultiplexEntryRejectionDescriptions(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:4/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_RequestMultiplexEntryRejectionDescriptions_cause'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'RequestMultiplexEntryRejectionDescriptions',Term1,Term2},Bytes5}.

'enc_RequestMultiplexEntryRelease'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_RequestMultiplexEntryRelease_entryNumbers(Enc2@element)
end].
'enc_RequestMultiplexEntryRelease_entryNumbers'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 15 ->
[<<Enc2@len@sub:4>>|[begin
Comp@sub = Comp - 1,
if 0 =< Comp@sub, Comp@sub < 15 ->
<<Comp@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.


dec_RequestMultiplexEntryRelease_entryNumbers(Bytes) ->
%% Length with constraint {1,15}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components53(V1@Add2, V1@Buf1, []).



dec_RequestMultiplexEntryRelease(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SET OF
{Term1,Bytes2} = 'dec_RequestMultiplexEntryRelease_entryNumbers'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'RequestMultiplexEntryRelease',Term1},Bytes4}.

'enc_RequestMode'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_RequestMode_requestedModes(Enc4@element)
end].
'enc_RequestMode_requestedModes'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_ModeDescription(Comp) || Comp <- Val]]
end.


dec_RequestMode_requestedModes(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components54(V1@Add4, V1@Buf1, []).



dec_RequestMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes3} = 'dec_RequestMode_requestedModes'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'RequestMode',Term1,Term2},Bytes5}.

'enc_RequestModeAck'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_RequestModeAck_response(Enc4@element)
end].
'enc_RequestModeAck_response'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= willTransmitMostPreferredMode ->
<<0:1,0:1>>;
ChoiceTag =:= willTransmitLessPreferredMode ->
<<0:1,1:1>>
end.

dec_RequestModeAck_response(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{willTransmitMostPreferredMode,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{willTransmitLessPreferredMode,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_RequestModeAck(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_RequestModeAck_response'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'RequestModeAck',Term1,Term2},Bytes5}.

'enc_RequestModeReject'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_RequestModeReject_cause(Enc4@element)
end].
'enc_RequestModeReject_cause'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= modeUnavailable ->
<<0:1,0:2>>;
ChoiceTag =:= multipointConstraint ->
<<0:1,1:2>>;
ChoiceTag =:= requestDenied ->
<<0:1,2:2>>
end.

dec_RequestModeReject_cause(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{modeUnavailable,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{multipointConstraint,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{requestDenied,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_RequestModeReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_RequestModeReject_cause'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'RequestModeReject',Term1,Term2},Bytes5}.

'enc_RequestModeRelease'(Val) ->
<<0:1>>.


dec_RequestModeRelease(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% Extensions
{Extensions,Bytes2} = case Ext of
0 -> {<<>>,Bytes1};
1 ->
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes3= skipextensions(Bytes2, 1, Extensions),
{{'RequestModeRelease'},Bytes3}.

'enc_ModeDescription'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_ModeElement(Comp) || Comp <- Val]]
end.



dec_ModeDescription(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components55(V1@Add4, V1@Buf1, []).

'enc_ModeElementType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:3>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= videoMode ->
[<<0:1,1:3>>|enc_VideoMode(ChoiceVal)];
ChoiceTag =:= audioMode ->
[<<0:1,2:3>>|enc_AudioMode(ChoiceVal)];
ChoiceTag =:= dataMode ->
[<<0:1,3:3>>|enc_DataMode(ChoiceVal)];
ChoiceTag =:= encryptionMode ->
[<<0:1,4:3>>|enc_EncryptionMode(ChoiceVal)];
ChoiceTag =:= h235Mode ->
begin
Enc6@output = enc_H235Mode(ChoiceVal),
Enc6@bin = complete(Enc6@output),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[<<1:1,0:7>>,
align,
Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc6@bin, 8)]
end
end;
ChoiceTag =:= multiplexedStreamMode ->
begin
Enc7@output = enc_MultiplexedStreamParameter(ChoiceVal),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[<<1:1,1:7>>,
align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc7@bin, 8)]
end
end;
ChoiceTag =:= redundancyEncodingDTMode ->
begin
Enc8@output = enc_RedundancyEncodingDTMode(ChoiceVal),
Enc8@bin = complete(Enc8@output),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[<<1:1,2:7>>,
align,
Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc8@bin, 8)]
end
end;
ChoiceTag =:= multiplePayloadStreamMode ->
begin
Enc9@output = enc_MultiplePayloadStreamMode(ChoiceVal),
Enc9@bin = complete(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[<<1:1,3:7>>,
align,
Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc9@bin, 8)]
end
end;
ChoiceTag =:= fecMode ->
begin
Enc10@output = enc_FECMode(ChoiceVal),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[<<1:1,4:7>>,
align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc10@bin, 8)]
end
end
end.


dec_ModeElementType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_VideoMode(Bytes2)
end,
{{videoMode,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_AudioMode(Bytes2)
end,
{{audioMode,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_DataMode(Bytes2)
end,
{{dataMode,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_EncryptionMode(Bytes2)
end,
{{encryptionMode,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H235Mode(V2@V0),
{TmpVal,V2@Buf1}
end,
{{h235Mode,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MultiplexedStreamParameter(V2@V0),
{TmpVal,V2@Buf1}
end,
{{multiplexedStreamMode,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_RedundancyEncodingDTMode(V2@V0),
{TmpVal,V2@Buf1}
end,
{{redundancyEncodingDTMode,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MultiplePayloadStreamMode(V2@V0),
{TmpVal,V2@Buf1}
end,
{{multiplePayloadStreamMode,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_FECMode(V2@V0),
{TmpVal,V2@Buf1}
end,
{{fecMode,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ModeElement'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 4, 8),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<3:7,Enc2@bitmap:4>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
enc_ModeElementType(Enc4@element)
end,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_H223ModeParameters(Enc5@element)
end
end,
Extensions,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@output = enc_V76ModeParameters(Enc7@element),
Enc8@bin = complete(Enc8@output),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[align,
Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[align,
<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
[align|encode_fragmented(Enc8@bin, 8)]
end
end
end
end,
begin
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@output = enc_H2250ModeParameters(Enc10@element),
Enc11@bin = complete(Enc11@output),
Enc11@len = byte_size(Enc11@bin),
if Enc11@len < 128 ->
[align,
Enc11@len|Enc11@bin];
Enc11@len < 16384 ->
[align,
<<2:2,Enc11@len:14>>|Enc11@bin];
true ->
[align|encode_fragmented(Enc11@bin, 8)]
end
end
end
end,
begin
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@output = enc_GenericCapability(Enc13@element),
Enc14@bin = complete(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[align|encode_fragmented(Enc14@bin, 8)]
end
end
end
end|begin
Enc16@element = element(7, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@output = enc_MultiplexedStreamModeParameters(Enc16@element),
Enc17@bin = complete(Enc17@output),
Enc17@len = byte_size(Enc17@bin),
if Enc17@len < 128 ->
[align,
Enc17@len|Enc17@bin];
Enc17@len < 16384 ->
[align,
<<2:2,Enc17@len:14>>|Enc17@bin];
true ->
[align|encode_fragmented(Enc17@bin, 8)]
end
end
end
end].


dec_ModeElement(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ModeElementType
{Term1,Bytes3} = dec_ModeElementType(Bytes2),

%% attribute number 2 with type H223ModeParameters
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_H223ModeParameters(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 3 with type V76ModeParameters
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes5) band 7,
{V4@V0,V4@Buf1} = case Bytes5 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx3,_} = dec_V76ModeParameters(V4@V0),
{TmpValx3,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 4 with type H2250ModeParameters
{Term4,Bytes7} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes6) band 7,
{V5@V0,V5@Buf1} = case Bytes6 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx4,_} = dec_H2250ModeParameters(V5@V0),
{TmpValx4,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type GenericCapability
{Term5,Bytes8} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes7) band 7,
{V6@V0,V6@Buf1} = case Bytes7 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx5,_} = dec_GenericCapability(V6@V0),
{TmpValx5,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type MultiplexedStreamModeParameters
{Term6,Bytes9} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = dec_MultiplexedStreamModeParameters(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,
Bytes10= skipextensions(Bytes9, 5, Extensions),
{{'ModeElement',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_H235Mode'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_EncryptionAuthenticationAndIntegrity(Enc2@element)
end|begin
Enc3@element = element(3, Val),
enc_H235Mode_mediaMode(Enc3@element)
end].
'enc_H235Mode_mediaMode'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:2>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= videoMode ->
[<<0:1,1:2>>|enc_VideoMode(ChoiceVal)];
ChoiceTag =:= audioMode ->
[<<0:1,2:2>>|enc_AudioMode(ChoiceVal)];
ChoiceTag =:= dataMode ->
[<<0:1,3:2>>|enc_DataMode(ChoiceVal)]
end.

dec_H235Mode_mediaMode(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_VideoMode(Bytes2)
end,
{{videoMode,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_AudioMode(Bytes2)
end,
{{audioMode,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_DataMode(Bytes2)
end,
{{dataMode,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_H235Mode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type EncryptionAuthenticationAndIntegrity
{Term1,Bytes2} = dec_EncryptionAuthenticationAndIntegrity(Bytes1),

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_H235Mode_mediaMode'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V2@V0,V2@Buf1} = case Bytes3 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'H235Mode',Term1,Term2},Bytes5}.

'enc_MultiplexedStreamModeParameters'(Val) ->
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.


dec_MultiplexedStreamModeParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MultiplexedStreamModeParameters',Term1},Bytes4}.

'enc_RedundancyEncodingDTMode'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_RedundancyEncodingMethod(Enc2@element)
end,
begin
Enc3@element = element(3, Val),
enc_RedundancyEncodingDTModeElement(Enc3@element)
end|begin
Enc4@element = element(4, Val),
enc_RedundancyEncodingDTMode_secondary(Enc4@element)
end].
'enc_RedundancyEncodingDTMode_secondary'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_RedundancyEncodingDTModeElement(Comp) || Comp <- Val]].


dec_RedundancyEncodingDTMode_secondary(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components56(V1@V0, V1@Buf1, []).



dec_RedundancyEncodingDTMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type RedundancyEncodingMethod
{Term1,Bytes2} = dec_RedundancyEncodingMethod(Bytes1),

%% attribute number 2 with type RedundancyEncodingDTModeElement
{Term2,Bytes3} = dec_RedundancyEncodingDTModeElement(Bytes2),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes4} = 'dec_RedundancyEncodingDTMode_secondary'(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V2@V0,V2@Buf1} = case Bytes4 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RedundancyEncodingDTMode',Term1,Term2,Term3},Bytes6}.

'enc_RedundancyEncodingDTModeElement'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_RedundancyEncodingDTModeElement_type(Enc2@element)
end].
'enc_RedundancyEncodingDTModeElement_type'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:3>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= videoMode ->
[<<0:1,1:3>>|enc_VideoMode(ChoiceVal)];
ChoiceTag =:= audioMode ->
[<<0:1,2:3>>|enc_AudioMode(ChoiceVal)];
ChoiceTag =:= dataMode ->
[<<0:1,3:3>>|enc_DataMode(ChoiceVal)];
ChoiceTag =:= encryptionMode ->
[<<0:1,4:3>>|enc_EncryptionMode(ChoiceVal)];
ChoiceTag =:= h235Mode ->
[<<0:1,5:3>>|enc_H235Mode(ChoiceVal)]
end.

dec_RedundancyEncodingDTModeElement_type(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_VideoMode(Bytes2)
end,
{{videoMode,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_AudioMode(Bytes2)
end,
{{audioMode,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_DataMode(Bytes2)
end,
{{dataMode,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_EncryptionMode(Bytes2)
end,
{{encryptionMode,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_H235Mode(Bytes2)
end,
{{h235Mode,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_RedundancyEncodingDTModeElement(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_RedundancyEncodingDTModeElement_type'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'RedundancyEncodingDTModeElement',Term1},Bytes4}.

'enc_MultiplePayloadStreamMode'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MultiplePayloadStreamMode_elements(Enc2@element)
end].
'enc_MultiplePayloadStreamMode_elements'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_MultiplePayloadStreamElementMode(Comp) || Comp <- Val]].


dec_MultiplePayloadStreamMode_elements(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components57(V1@V0, V1@Buf1, []).



dec_MultiplePayloadStreamMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_MultiplePayloadStreamMode_elements'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MultiplePayloadStreamMode',Term1},Bytes4}.

'enc_MultiplePayloadStreamElementMode'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ModeElementType(Enc2@element)
end].


dec_MultiplePayloadStreamElementMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ModeElementType
{Term1,Bytes2} = dec_ModeElementType(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MultiplePayloadStreamElementMode',Term1},Bytes4}.

'enc_FECMode'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= rfc2733Mode ->
[<<0:1>>|enc_FECMode_rfc2733Mode(ChoiceVal)]
end.
'enc_FECMode_rfc2733Mode'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_FECMode_rfc2733Mode_mode(Enc2@element)
end].
'enc_FECMode_rfc2733Mode_mode'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= redundancyEncoding ->
<<0:1,0:1>>;
ChoiceTag =:= separateStream ->
[<<0:1,1:1>>|enc_FECMode_rfc2733Mode_mode_separateStream(ChoiceVal)]
end.
'enc_FECMode_rfc2733Mode_mode_separateStream'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= differentPort ->
[<<0:1,0:1>>|enc_FECMode_rfc2733Mode_mode_separateStream_differentPort(ChoiceVal)];
ChoiceTag =:= samePort ->
[<<0:1,1:1>>|enc_FECMode_rfc2733Mode_mode_separateStream_samePort(ChoiceVal)]
end.
'enc_FECMode_rfc2733Mode_mode_separateStream_differentPort'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
Enc3@element@sub = Enc3@element - 1,
if 0 =< Enc3@element@sub, Enc3@element@sub < 255 ->
Enc3@element@sub;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end|begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
Enc5@element bsr 7 =:= 0 ->
<<Enc5@element:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end].

dec_FECMode_rfc2733Mode_mode_separateStream_differentPort(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'FECMode_rfc2733Mode_mode_separateStream_differentPort',Term1,Term2},Bytes6}.

'enc_FECMode_rfc2733Mode_mode_separateStream_samePort'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ModeElementType(Enc2@element)
end].

dec_FECMode_rfc2733Mode_mode_separateStream_samePort(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ModeElementType
{Term1,Bytes2} = dec_ModeElementType(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'FECMode_rfc2733Mode_mode_separateStream_samePort',Term1},Bytes4}.


dec_FECMode_rfc2733Mode_mode_separateStream(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_FECMode_rfc2733Mode_mode_separateStream_differentPort'(Bytes2)
end,
{{differentPort,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_FECMode_rfc2733Mode_mode_separateStream_samePort'(Bytes2)
end,
{{samePort,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_FECMode_rfc2733Mode_mode(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{redundancyEncoding,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_FECMode_rfc2733Mode_mode_separateStream'(Bytes2)
end,
{{separateStream,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_FECMode_rfc2733Mode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_FECMode_rfc2733Mode_mode'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'FECMode_rfc2733Mode',Term1},Bytes4}.



dec_FECMode(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_FECMode_rfc2733Mode'(Bytes2)
end,
{{rfc2733Mode,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H223ModeParameters'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_H223ModeParameters_adaptationLayerType(Enc2@element)
end|begin
Enc3@element = element(3, Val),
if Enc3@element =:= false ->
<<0:1>>;
Enc3@element =:= true ->
<<1:1>>
end
end].
'enc_H223ModeParameters_adaptationLayerType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:3>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= al1Framed ->
<<0:1,1:3>>;
ChoiceTag =:= al1NotFramed ->
<<0:1,2:3>>;
ChoiceTag =:= al2WithoutSequenceNumbers ->
<<0:1,3:3>>;
ChoiceTag =:= al2WithSequenceNumbers ->
<<0:1,4:3>>;
ChoiceTag =:= al3 ->
[<<0:1,5:3>>|enc_H223ModeParameters_adaptationLayerType_al3(ChoiceVal)];
ChoiceTag =:= al1M ->
begin
Enc7@output = enc_H223AL1MParameters(ChoiceVal),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[<<1:1,0:7>>,
align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc7@bin, 8)]
end
end;
ChoiceTag =:= al2M ->
begin
Enc8@output = enc_H223AL2MParameters(ChoiceVal),
Enc8@bin = complete(Enc8@output),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[<<1:1,1:7>>,
align,
Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc8@bin, 8)]
end
end;
ChoiceTag =:= al3M ->
begin
Enc9@output = enc_H223AL3MParameters(ChoiceVal),
Enc9@bin = complete(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[<<1:1,2:7>>,
align,
Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc9@bin, 8)]
end
end
end.
'enc_H223ModeParameters_adaptationLayerType_al3'(Val) ->
[begin
Enc1@element = element(2, Val),
if 0 =< Enc1@element, Enc1@element < 3 ->
<<Enc1@element:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
if Enc3@element bsr 24 =:= 0 ->
begin
Enc3@element@bin = binary:encode_unsigned(Enc3@element),
Enc3@element@bin_size0 = byte_size(Enc3@element@bin),
Enc3@element@bin_size = Enc3@element@bin_size0 - 1,
[<<Enc3@element@bin_size:2>>,
align|Enc3@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end].

dec_H223ModeParameters_adaptationLayerType_al3(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V3,V2@Buf4}
end,
{{'H223ModeParameters_adaptationLayerType_al3',Term1,Term2},Bytes2}.


dec_H223ModeParameters_adaptationLayerType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{al1Framed,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{al1NotFramed,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{al2WithoutSequenceNumbers,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{al2WithSequenceNumbers,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
'dec_H223ModeParameters_adaptationLayerType_al3'(Bytes2)
end,
{{al3,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H223AL1MParameters(V2@V0),
{TmpVal,V2@Buf1}
end,
{{al1M,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H223AL2MParameters(V2@V0),
{TmpVal,V2@Buf1}
end,
{{al2M,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_H223AL3MParameters(V2@V0),
{TmpVal,V2@Buf1}
end,
{{al3M,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_H223ModeParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_H223ModeParameters_adaptationLayerType'(Bytes1),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'H223ModeParameters',Term1,Term2},Bytes5}.

'enc_V76ModeParameters'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= suspendResumewAddress ->
<<0:1,0:1>>;
ChoiceTag =:= suspendResumewoAddress ->
<<0:1,1:1>>
end.


dec_V76ModeParameters(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{suspendResumewAddress,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{suspendResumewoAddress,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H2250ModeParameters'(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end|begin
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
true ->
enc_RedundancyEncodingMode(Enc3@element)
end
end].


dec_H2250ModeParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type RedundancyEncodingMode
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_RedundancyEncodingMode(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'H2250ModeParameters',Term1},Bytes5}.

'enc_RedundancyEncodingMode'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_RedundancyEncodingMethod(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_RedundancyEncodingMode_secondaryEncoding(Enc4@element)
end
end].
'enc_RedundancyEncodingMode_secondaryEncoding'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:1>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= audioData ->
[<<0:1,1:1>>|enc_AudioMode(ChoiceVal)]
end.

dec_RedundancyEncodingMode_secondaryEncoding(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_AudioMode(Bytes2)
end,
{{audioData,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_RedundancyEncodingMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type RedundancyEncodingMethod
{Term1,Bytes3} = dec_RedundancyEncodingMethod(Bytes2),

%% attribute number 2 with type CHOICE
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_RedundancyEncodingMode_secondaryEncoding'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RedundancyEncodingMode',Term1,Term2},Bytes6}.

'enc_VideoMode'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:3>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= h261VideoMode ->
[<<0:1,1:3>>|enc_H261VideoMode(ChoiceVal)];
ChoiceTag =:= h262VideoMode ->
[<<0:1,2:3>>|enc_H262VideoMode(ChoiceVal)];
ChoiceTag =:= h263VideoMode ->
[<<0:1,3:3>>|enc_H263VideoMode(ChoiceVal)];
ChoiceTag =:= is11172VideoMode ->
[<<0:1,4:3>>|enc_IS11172VideoMode(ChoiceVal)];
ChoiceTag =:= genericVideoMode ->
begin
Enc6@output = enc_GenericCapability(ChoiceVal),
Enc6@bin = complete(Enc6@output),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[<<1:1,0:7>>,
align,
Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc6@bin, 8)]
end
end
end.


dec_VideoMode(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_H261VideoMode(Bytes2)
end,
{{h261VideoMode,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_H262VideoMode(Bytes2)
end,
{{h262VideoMode,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_H263VideoMode(Bytes2)
end,
{{h263VideoMode,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_IS11172VideoMode(Bytes2)
end,
{{is11172VideoMode,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_GenericCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{genericVideoMode,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H261VideoMode'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_H261VideoMode_resolution(Enc2@element)
end,
align,
begin
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - 1,
if 0 =< Enc3@element@sub, Enc3@element@sub < 19200 ->
<<Enc3@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end|begin
Enc5@element = element(4, Val),
if Enc5@element =:= false ->
<<0:1>>;
Enc5@element =:= true ->
<<1:1>>
end
end].
'enc_H261VideoMode_resolution'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= qcif ->
<<0:1>>;
ChoiceTag =:= cif ->
<<1:1>>
end.

dec_H261VideoMode_resolution(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{qcif,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{cif,Val},NewBytes}
end.


dec_H261VideoMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_H261VideoMode_resolution'(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes3,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:6,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:6,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'H261VideoMode',Term1,Term2,Term3},Bytes6}.

'enc_H262VideoMode'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
Enc6@element = element(8, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@element = element(2, Val),
enc_H262VideoMode_profileAndLevel(Enc8@element)
end,
begin
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element bsr 30 =:= 0 ->
begin
Enc9@element@bin = binary:encode_unsigned(Enc9@element),
Enc9@element@bin_size0 = byte_size(Enc9@element@bin),
Enc9@element@bin_size = Enc9@element@bin_size0 - 1,
[<<Enc9@element@bin_size:2>>,
align|Enc9@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc9@element}}})
end
end,
begin
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
Enc12@element bsr 18 =:= 0 ->
begin
Enc12@element@bin = binary:encode_unsigned(Enc12@element),
Enc12@element@bin_size0 = byte_size(Enc12@element@bin),
Enc12@element@bin_size = Enc12@element@bin_size0 - 1,
[<<Enc12@element@bin_size:2>>,
align|Enc12@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc12@element}}})
end
end,
begin
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
Enc15@element bsr 14 =:= 0 ->
[align|<<Enc15@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc15@element}}})
end
end,
begin
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element bsr 14 =:= 0 ->
[align|<<Enc18@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc18@element}}})
end
end,
begin
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
Enc21@element bsr 4 =:= 0 ->
<<Enc21@element:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc21@element}}})
end
end|begin
Enc24@element = element(8, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
Enc24@element bsr 32 =:= 0 ->
begin
Enc24@element@bin = binary:encode_unsigned(Enc24@element),
Enc24@element@bin_size0 = byte_size(Enc24@element@bin),
Enc24@element@bin_size = Enc24@element@bin_size0 - 1,
[<<Enc24@element@bin_size:2>>,
align|Enc24@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc24@element}}})
end
end].
'enc_H262VideoMode_profileAndLevel'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'profileAndLevel-SPatML' ->
<<0:1,0:4>>;
ChoiceTag =:= 'profileAndLevel-MPatLL' ->
<<0:1,1:4>>;
ChoiceTag =:= 'profileAndLevel-MPatML' ->
<<0:1,2:4>>;
ChoiceTag =:= 'profileAndLevel-MPatH-14' ->
<<0:1,3:4>>;
ChoiceTag =:= 'profileAndLevel-MPatHL' ->
<<0:1,4:4>>;
ChoiceTag =:= 'profileAndLevel-SNRatLL' ->
<<0:1,5:4>>;
ChoiceTag =:= 'profileAndLevel-SNRatML' ->
<<0:1,6:4>>;
ChoiceTag =:= 'profileAndLevel-SpatialatH-14' ->
<<0:1,7:4>>;
ChoiceTag =:= 'profileAndLevel-HPatML' ->
<<0:1,8:4>>;
ChoiceTag =:= 'profileAndLevel-HPatH-14' ->
<<0:1,9:4>>;
ChoiceTag =:= 'profileAndLevel-HPatHL' ->
<<0:1,10:4>>
end.

dec_H262VideoMode_profileAndLevel(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'profileAndLevel-SPatML',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'profileAndLevel-MPatLL',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'profileAndLevel-MPatML',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'profileAndLevel-MPatH-14',Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'profileAndLevel-MPatHL',Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'profileAndLevel-SNRatLL',Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'profileAndLevel-SNRatML',Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'profileAndLevel-SpatialatH-14',Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'profileAndLevel-HPatML',Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'profileAndLevel-HPatH-14',Val},NewBytes};
10 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'profileAndLevel-HPatHL',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_H262VideoMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes3} = 'dec_H262VideoMode_profileAndLevel'(Bytes2),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
begin
V5@Pad2 = bit_size(Bytes5) band 7,
<<_:V5@Pad2,V5@V0:2/unsigned-unit:8,V5@Buf1/bitstring>> = Bytes5,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
V6@Pad2 = bit_size(Bytes6) band 7,
<<_:V6@Pad2,V6@V0:2/unsigned-unit:8,V6@Buf1/bitstring>> = Bytes6,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V7@V0:4/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes7,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type INTEGER
{Term7,Bytes9} = case Opt band 1 of
1 ->
begin
<<V8@V0:2/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes8,
V8@Add2 = V8@V0 + 1,
V8@Pad5 = bit_size(V8@Buf1) band 7,
<<_:V8@Pad5,V8@V3:V8@Add2/unsigned-unit:8,V8@Buf4/bitstring>> = V8@Buf1,
{V8@V3,V8@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V9@V0,V9@Buf1} = case Bytes9 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
V9@Pad6 = bit_size(V9@Buf2) band 7,
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<_:V9@Pad6,0:1,V9@V8:7,V9@Buf9/bitstring>> when V9@V8 =/= 0 ->
{V9@V8,V9@Buf9};
<<_:V9@Pad6,1:1,0:1,V9@V9:14,V9@Buf10/bitstring>> when V9@V9 =/= 0 ->
{V9@V9,V9@Buf10}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V11:V9@V0/bitstring-unit:1,V9@Buf12/bitstring>> = V9@Buf1,
{V9@V11,V9@Buf12}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
{{'H262VideoMode',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_H263VideoMode'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 8, 11),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<2:7,Enc1@bitmap:3>>
end,
[if Extensions =:= [] ->
<<0:1>>;
true ->
<<1:1>>
end,
begin
Enc3@element = element(2, Val),
enc_H263VideoMode_resolution(Enc3@element)
end,
align,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 19200 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(4, Val),
Enc8@element = element(5, Val),
if Enc6@element =:= false ->
if Enc8@element =:= false ->
<<0:1,0:1>>;
Enc8@element =:= true ->
<<0:1,1:1>>
end;
Enc6@element =:= true ->
if Enc8@element =:= false ->
<<1:1,0:1>>;
Enc8@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(6, Val),
Enc12@element = element(7, Val),
if Enc10@element =:= false ->
if Enc12@element =:= false ->
<<0:1,0:1>>;
Enc12@element =:= true ->
<<0:1,1:1>>
end;
Enc10@element =:= true ->
if Enc12@element =:= false ->
<<1:1,0:1>>;
Enc12@element =:= true ->
<<1:1,1:1>>
end
end
end,
Extensions,
begin
Enc14@element = element(8, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = if Enc14@element =:= false ->
<<0:1,0:7>>;
Enc14@element =:= true ->
<<1:1,0:7>>
end,
Enc16@bin = Enc16@output,
[align,
1|Enc16@bin]
end
end
end,
begin
Enc18@element = element(9, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@output = enc_EnhancementLayerInfo(Enc18@element),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[align|encode_fragmented(Enc19@bin, 8)]
end
end
end
end|begin
Enc21@element = element(10, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@output = enc_H263Options(Enc21@element),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[align|encode_fragmented(Enc22@bin, 8)]
end
end
end
end].
'enc_H263VideoMode_resolution'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= sqcif ->
<<0:1,0:3>>;
ChoiceTag =:= qcif ->
<<0:1,1:3>>;
ChoiceTag =:= cif ->
<<0:1,2:3>>;
ChoiceTag =:= cif4 ->
<<0:1,3:3>>;
ChoiceTag =:= cif16 ->
<<0:1,4:3>>;
ChoiceTag =:= custom ->
begin
Enc6@output = [],
Enc6@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc6@bin]
end
end.

dec_H263VideoMode_resolution(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{sqcif,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{qcif,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{cif,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{cif4,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{cif16,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{custom,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_H263VideoMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_H263VideoMode_resolution'(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes3,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes4,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes5,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes6,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:3,0:1,V7@V7:7,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<_:3,1:1,0:1,V7@V8:14,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes8) band 7,
{V8@V0,V8@Buf1} = case Bytes8 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = V8@V0,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type EnhancementLayerInfo
{Term8,Bytes10} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes9) band 7,
{V10@V0,V10@Buf1} = case Bytes9 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx8,_} = dec_EnhancementLayerInfo(V10@V0),
{TmpValx8,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type H263Options
{Term9,Bytes11} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes10) band 7,
{V11@V0,V11@Buf1} = case Bytes10 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx9,_} = dec_H263Options(V11@V0),
{TmpValx9,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,
Bytes12= skipextensions(Bytes11, 4, Extensions),
{{'H263VideoMode',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},Bytes12}.

'enc_IS11172VideoMode'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
Enc6@element = element(8, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@element = element(2, Val),
if Enc8@element =:= false ->
<<0:1>>;
Enc8@element =:= true ->
<<1:1>>
end
end,
begin
Enc10@element = element(3, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
Enc10@element bsr 30 =:= 0 ->
begin
Enc10@element@bin = binary:encode_unsigned(Enc10@element),
Enc10@element@bin_size0 = byte_size(Enc10@element@bin),
Enc10@element@bin_size = Enc10@element@bin_size0 - 1,
[<<Enc10@element@bin_size:2>>,
align|Enc10@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end,
begin
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
Enc13@element bsr 18 =:= 0 ->
begin
Enc13@element@bin = binary:encode_unsigned(Enc13@element),
Enc13@element@bin_size0 = byte_size(Enc13@element@bin),
Enc13@element@bin_size = Enc13@element@bin_size0 - 1,
[<<Enc13@element@bin_size:2>>,
align|Enc13@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc13@element}}})
end
end,
begin
Enc16@element = element(5, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
Enc16@element bsr 14 =:= 0 ->
[align|<<Enc16@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc16@element}}})
end
end,
begin
Enc19@element = element(6, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
Enc19@element bsr 14 =:= 0 ->
[align|<<Enc19@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc19@element}}})
end
end,
begin
Enc22@element = element(7, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
Enc22@element bsr 4 =:= 0 ->
<<Enc22@element:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc22@element}}})
end
end|begin
Enc25@element = element(8, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
Enc25@element bsr 32 =:= 0 ->
begin
Enc25@element@bin = binary:encode_unsigned(Enc25@element),
Enc25@element@bin_size0 = byte_size(Enc25@element@bin),
Enc25@element@bin_size = Enc25@element@bin_size0 - 1,
[<<Enc25@element@bin_size:2>>,
align|Enc25@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc25@element}}})
end
end].


dec_IS11172VideoMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V5@V0:2/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/unsigned-unit:8,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V3,V5@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
begin
V6@Pad2 = bit_size(Bytes5) band 7,
<<_:V6@Pad2,V6@V0:2/unsigned-unit:8,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
V7@Pad2 = bit_size(Bytes6) band 7,
<<_:V7@Pad2,V7@V0:2/unsigned-unit:8,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V8@V0:4/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes7,
{V8@V0,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type INTEGER
{Term7,Bytes9} = case Opt band 1 of
1 ->
begin
<<V9@V0:2/unsigned-unit:1,V9@Buf1/bitstring>> = Bytes8,
V9@Add2 = V9@V0 + 1,
V9@Pad5 = bit_size(V9@Buf1) band 7,
<<_:V9@Pad5,V9@V3:V9@Add2/unsigned-unit:8,V9@Buf4/bitstring>> = V9@Buf1,
{V9@V3,V9@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V10@V0,V10@Buf1} = case Bytes9 of
<<0:1,V10@V3:6,V10@Buf4/bitstring>> ->
V10@Add5 = V10@V3 + 1,
{V10@Add5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
V10@Pad6 = bit_size(V10@Buf2) band 7,
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<_:V10@Pad6,0:1,V10@V8:7,V10@Buf9/bitstring>> when V10@V8 =/= 0 ->
{V10@V8,V10@Buf9};
<<_:V10@Pad6,1:1,0:1,V10@V9:14,V10@Buf10/bitstring>> when V10@V9 =/= 0 ->
{V10@V9,V10@Buf10}
end,
{V10@V3,V10@Buf4}
end,
<<V10@V11:V10@V0/bitstring-unit:1,V10@Buf12/bitstring>> = V10@Buf1,
{V10@V11,V10@Buf12}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
{{'IS11172VideoMode',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_AudioMode'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:4>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= g711Alaw64k ->
<<0:1,1:4>>;
ChoiceTag =:= g711Alaw56k ->
<<0:1,2:4>>;
ChoiceTag =:= g711Ulaw64k ->
<<0:1,3:4>>;
ChoiceTag =:= g711Ulaw56k ->
<<0:1,4:4>>;
ChoiceTag =:= 'g722-64k' ->
<<0:1,5:4>>;
ChoiceTag =:= 'g722-56k' ->
<<0:1,6:4>>;
ChoiceTag =:= 'g722-48k' ->
<<0:1,7:4>>;
ChoiceTag =:= g728 ->
<<0:1,8:4>>;
ChoiceTag =:= g729 ->
<<0:1,9:4>>;
ChoiceTag =:= g729AnnexA ->
<<0:1,10:4>>;
ChoiceTag =:= g7231 ->
[<<0:1,11:4>>|enc_AudioMode_g7231(ChoiceVal)];
ChoiceTag =:= is11172AudioMode ->
[<<0:1,12:4>>|enc_IS11172AudioMode(ChoiceVal)];
ChoiceTag =:= is13818AudioMode ->
[<<0:1,13:4>>|enc_IS13818AudioMode(ChoiceVal)];
ChoiceTag =:= g729wAnnexB ->
begin
Enc16@output = begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 8 =:= 0 ->
[ChoiceVal@sub];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end,
Enc16@bin = iolist_to_binary(Enc16@output),
[<<1:1,0:7>>,
align,
1|Enc16@bin]
end;
ChoiceTag =:= g729AnnexAwAnnexB ->
begin
Enc18@output = begin
ChoiceVal@sub = ChoiceVal - 1,
if ChoiceVal@sub bsr 8 =:= 0 ->
[ChoiceVal@sub];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end,
Enc18@bin = iolist_to_binary(Enc18@output),
[<<1:1,1:7>>,
align,
1|Enc18@bin]
end;
ChoiceTag =:= g7231AnnexCMode ->
begin
Enc19@output = enc_G7231AnnexCMode(ChoiceVal),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[<<1:1,2:7>>,
align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc19@bin, 8)]
end
end;
ChoiceTag =:= gsmFullRate ->
begin
Enc20@output = enc_GSMAudioCapability(ChoiceVal),
Enc20@bin = complete(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[<<1:1,3:7>>,
align,
Enc20@len|Enc20@bin];
Enc20@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc20@len:14>>|Enc20@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc20@bin, 8)]
end
end;
ChoiceTag =:= gsmHalfRate ->
begin
Enc21@output = enc_GSMAudioCapability(ChoiceVal),
Enc21@bin = complete(Enc21@output),
Enc21@len = byte_size(Enc21@bin),
if Enc21@len < 128 ->
[<<1:1,4:7>>,
align,
Enc21@len|Enc21@bin];
Enc21@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc21@len:14>>|Enc21@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc21@bin, 8)]
end
end;
ChoiceTag =:= gsmEnhancedFullRate ->
begin
Enc22@output = enc_GSMAudioCapability(ChoiceVal),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[<<1:1,5:7>>,
align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[<<1:1,5:7>>,
align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[<<1:1,5:7>>,
align|encode_fragmented(Enc22@bin, 8)]
end
end;
ChoiceTag =:= genericAudioMode ->
begin
Enc23@output = enc_GenericCapability(ChoiceVal),
Enc23@bin = complete(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[<<1:1,6:7>>,
align,
Enc23@len|Enc23@bin];
Enc23@len < 16384 ->
[<<1:1,6:7>>,
align,
<<2:2,Enc23@len:14>>|Enc23@bin];
true ->
[<<1:1,6:7>>,
align|encode_fragmented(Enc23@bin, 8)]
end
end;
ChoiceTag =:= g729Extensions ->
begin
Enc24@output = enc_G729Extensions(ChoiceVal),
Enc24@bin = complete(Enc24@output),
Enc24@len = byte_size(Enc24@bin),
if Enc24@len < 128 ->
[<<1:1,7:7>>,
align,
Enc24@len|Enc24@bin];
Enc24@len < 16384 ->
[<<1:1,7:7>>,
align,
<<2:2,Enc24@len:14>>|Enc24@bin];
true ->
[<<1:1,7:7>>,
align|encode_fragmented(Enc24@bin, 8)]
end
end;
ChoiceTag =:= vbd ->
begin
Enc25@output = enc_VBDMode(ChoiceVal),
Enc25@bin = complete(Enc25@output),
Enc25@len = byte_size(Enc25@bin),
if Enc25@len < 128 ->
[<<1:1,8:7>>,
align,
Enc25@len|Enc25@bin];
Enc25@len < 16384 ->
[<<1:1,8:7>>,
align,
<<2:2,Enc25@len:14>>|Enc25@bin];
true ->
[<<1:1,8:7>>,
align|encode_fragmented(Enc25@bin, 8)]
end
end
end.
'enc_AudioMode_g7231'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= noSilenceSuppressionLowRate ->
<<0:2>>;
ChoiceTag =:= noSilenceSuppressionHighRate ->
<<1:2>>;
ChoiceTag =:= silenceSuppressionLowRate ->
<<2:2>>;
ChoiceTag =:= silenceSuppressionHighRate ->
<<3:2>>
end.

dec_AudioMode_g7231(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{noSilenceSuppressionLowRate,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{noSilenceSuppressionHighRate,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{silenceSuppressionLowRate,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{silenceSuppressionHighRate,Val},NewBytes}
end.


dec_AudioMode(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{g711Alaw64k,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{g711Alaw56k,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{g711Ulaw64k,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{g711Ulaw56k,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'g722-64k',Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'g722-56k',Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'g722-48k',Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{g728,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{g729,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{g729AnnexA,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
'dec_AudioMode_g7231'(Bytes2)
end,
{{g7231,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
dec_IS11172AudioMode(Bytes2)
end,
{{is11172AudioMode,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
dec_IS13818AudioMode(Bytes2)
end,
{{is13818AudioMode,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
V3@Pad2 = bit_size(V2@V0) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = V2@V0,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,
{TmpVal,V2@Buf1}
end,
{{g729wAnnexB,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
V4@Pad2 = bit_size(V2@V0) band 7,
<<_:V4@Pad2,V4@V0:1/unsigned-unit:8,V4@Buf1/bitstring>> = V2@V0,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end,
{TmpVal,V2@Buf1}
end,
{{g729AnnexAwAnnexB,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_G7231AnnexCMode(V2@V0),
{TmpVal,V2@Buf1}
end,
{{g7231AnnexCMode,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_GSMAudioCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{gsmFullRate,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_GSMAudioCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{gsmHalfRate,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_GSMAudioCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{gsmEnhancedFullRate,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_GenericCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{genericAudioMode,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_G729Extensions(V2@V0),
{TmpVal,V2@Buf1}
end,
{{g729Extensions,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_VBDMode(V2@V0),
{TmpVal,V2@Buf1}
end,
{{vbd,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_IS11172AudioMode'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_IS11172AudioMode_audioLayer(Enc2@element)
end,
begin
Enc3@element = element(3, Val),
enc_IS11172AudioMode_audioSampling(Enc3@element)
end,
begin
Enc4@element = element(4, Val),
enc_IS11172AudioMode_multichannelType(Enc4@element)
end,
align|begin
Enc5@element = element(5, Val),
Enc5@element@sub = Enc5@element - 1,
if 0 =< Enc5@element@sub, Enc5@element@sub < 448 ->
<<Enc5@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end].
'enc_IS11172AudioMode_audioLayer'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= audioLayer1 ->
<<0:2>>;
ChoiceTag =:= audioLayer2 ->
<<1:2>>;
ChoiceTag =:= audioLayer3 ->
<<2:2>>
end.

dec_IS11172AudioMode_audioLayer(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioLayer1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioLayer2,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioLayer3,Val},NewBytes}
end.
'enc_IS11172AudioMode_audioSampling'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= audioSampling32k ->
<<0:2>>;
ChoiceTag =:= audioSampling44k1 ->
<<1:2>>;
ChoiceTag =:= audioSampling48k ->
<<2:2>>
end.

dec_IS11172AudioMode_audioSampling(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioSampling32k,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioSampling44k1,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioSampling48k,Val},NewBytes}
end.
'enc_IS11172AudioMode_multichannelType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= singleChannel ->
<<0:2>>;
ChoiceTag =:= twoChannelStereo ->
<<1:2>>;
ChoiceTag =:= twoChannelDual ->
<<2:2>>
end.

dec_IS11172AudioMode_multichannelType(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{singleChannel,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{twoChannelStereo,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{twoChannelDual,Val},NewBytes}
end.


dec_IS11172AudioMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_IS11172AudioMode_audioLayer'(Bytes1),

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_IS11172AudioMode_audioSampling'(Bytes2),

%% attribute number 3 with type CHOICE
{Term3,Bytes4} = 'dec_IS11172AudioMode_multichannelType'(Bytes3),

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
V2@Pad2 = bit_size(Bytes4) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes4,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'IS11172AudioMode',Term1,Term2,Term3,Term4},Bytes7}.

'enc_IS13818AudioMode'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_IS13818AudioMode_audioLayer(Enc2@element)
end,
begin
Enc3@element = element(3, Val),
enc_IS13818AudioMode_audioSampling(Enc3@element)
end,
begin
Enc4@element = element(4, Val),
enc_IS13818AudioMode_multichannelType(Enc4@element)
end,
begin
Enc5@element = element(5, Val),
Enc7@element = element(6, Val),
if Enc5@element =:= false ->
if Enc7@element =:= false ->
<<0:1,0:1>>;
Enc7@element =:= true ->
<<0:1,1:1>>
end;
Enc5@element =:= true ->
if Enc7@element =:= false ->
<<1:1,0:1>>;
Enc7@element =:= true ->
<<1:1,1:1>>
end
end
end,
align|begin
Enc9@element = element(7, Val),
Enc9@element@sub = Enc9@element - 1,
if 0 =< Enc9@element@sub, Enc9@element@sub < 1130 ->
<<Enc9@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@element}}})
end
end].
'enc_IS13818AudioMode_audioLayer'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= audioLayer1 ->
<<0:2>>;
ChoiceTag =:= audioLayer2 ->
<<1:2>>;
ChoiceTag =:= audioLayer3 ->
<<2:2>>
end.

dec_IS13818AudioMode_audioLayer(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioLayer1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioLayer2,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioLayer3,Val},NewBytes}
end.
'enc_IS13818AudioMode_audioSampling'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= audioSampling16k ->
<<0:3>>;
ChoiceTag =:= audioSampling22k05 ->
<<1:3>>;
ChoiceTag =:= audioSampling24k ->
<<2:3>>;
ChoiceTag =:= audioSampling32k ->
<<3:3>>;
ChoiceTag =:= audioSampling44k1 ->
<<4:3>>;
ChoiceTag =:= audioSampling48k ->
<<5:3>>
end.

dec_IS13818AudioMode_audioSampling(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioSampling16k,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioSampling22k05,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioSampling24k,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioSampling32k,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioSampling44k1,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{audioSampling48k,Val},NewBytes}
end.
'enc_IS13818AudioMode_multichannelType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= singleChannel ->
<<0:4>>;
ChoiceTag =:= twoChannelStereo ->
<<1:4>>;
ChoiceTag =:= twoChannelDual ->
<<2:4>>;
ChoiceTag =:= 'threeChannels2-1' ->
<<3:4>>;
ChoiceTag =:= 'threeChannels3-0' ->
<<4:4>>;
ChoiceTag =:= 'fourChannels2-0-2-0' ->
<<5:4>>;
ChoiceTag =:= 'fourChannels2-2' ->
<<6:4>>;
ChoiceTag =:= 'fourChannels3-1' ->
<<7:4>>;
ChoiceTag =:= 'fiveChannels3-0-2-0' ->
<<8:4>>;
ChoiceTag =:= 'fiveChannels3-2' ->
<<9:4>>
end.

dec_IS13818AudioMode_multichannelType(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{singleChannel,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{twoChannelStereo,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{twoChannelDual,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'threeChannels2-1',Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'threeChannels3-0',Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'fourChannels2-0-2-0',Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'fourChannels2-2',Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'fourChannels3-1',Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'fiveChannels3-0-2-0',Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{'fiveChannels3-2',Val},NewBytes}
end.


dec_IS13818AudioMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_IS13818AudioMode_audioLayer'(Bytes1),

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_IS13818AudioMode_audioSampling'(Bytes2),

%% attribute number 3 with type CHOICE
{Term3,Bytes4} = 'dec_IS13818AudioMode_multichannelType'(Bytes3),

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes4,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes5,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes7} = begin
V4@Pad2 = bit_size(Bytes6) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes6,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:7,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:7,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'IS13818AudioMode',Term1,Term2,Term3,Term4,Term5,Term6},Bytes9}.

'enc_G7231AnnexCMode'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if Enc2@element@sub bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= false ->
<<0:1>>;
Enc4@element =:= true ->
<<1:1>>
end
end|begin
Enc6@element = element(4, Val),
enc_G7231AnnexCMode_g723AnnexCAudioMode(Enc6@element)
end].
'enc_G7231AnnexCMode_g723AnnexCAudioMode'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 27,
if 0 =< Enc2@element@sub, Enc2@element@sub < 52 ->
<<0:1,Enc2@element@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 27,
if 0 =< Enc4@element@sub, Enc4@element@sub < 52 ->
<<Enc4@element@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(4, Val),
Enc6@element@sub = Enc6@element - 23,
if 0 =< Enc6@element@sub, Enc6@element@sub < 44 ->
<<Enc6@element@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end,
begin
Enc8@element = element(5, Val),
Enc8@element@sub = Enc8@element - 23,
if 0 =< Enc8@element@sub, Enc8@element@sub < 44 ->
<<Enc8@element@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@element}}})
end
end,
begin
Enc10@element = element(6, Val),
Enc10@element@sub = Enc10@element - 6,
if 0 =< Enc10@element@sub, Enc10@element@sub < 12 ->
<<Enc10@element@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end|begin
Enc12@element = element(7, Val),
Enc12@element@sub = Enc12@element - 6,
if 0 =< Enc12@element@sub, Enc12@element@sub < 12 ->
<<Enc12@element@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc12@element}}})
end
end].

dec_G7231AnnexCMode_g723AnnexCAudioMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:6/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 27,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:6/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 27,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:6/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 23,
{V4@Add2,V4@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
<<V5@V0:6/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 23,
{V5@Add2,V5@Buf1}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes6} = begin
<<V6@V0:4/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 6,
{V6@Add2,V6@Buf1}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes7} = begin
<<V7@V0:4/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes6,
V7@Add2 = V7@V0 + 6,
{V7@Add2,V7@Buf1}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V8@V0,V8@Buf1} = case Bytes7 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
V8@Pad6 = bit_size(V8@Buf2) band 7,
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<_:V8@Pad6,0:1,V8@V8:7,V8@Buf9/bitstring>> when V8@V8 =/= 0 ->
{V8@V8,V8@Buf9};
<<_:V8@Pad6,1:1,0:1,V8@V9:14,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V11:V8@V0/bitstring-unit:1,V8@Buf12/bitstring>> = V8@Buf1,
{V8@V11,V8@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'G7231AnnexCMode_g723AnnexCAudioMode',Term1,Term2,Term3,Term4,Term5,Term6},Bytes9}.



dec_G7231AnnexCMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type SEQUENCE
{Term3,Bytes4} = 'dec_G7231AnnexCMode_g723AnnexCAudioMode'(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'G7231AnnexCMode',Term1,Term2,Term3},Bytes6}.

'enc_VBDMode'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_AudioMode(Enc2@element)
end].


dec_VBDMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type AudioMode
{Term1,Bytes2} = dec_AudioMode(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'VBDMode',Term1},Bytes4}.

'enc_DataMode'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_DataMode_application(Enc2@element)
end|begin
Enc3@element = element(3, Val),
if Enc3@element bsr 32 =:= 0 ->
begin
Enc3@element@bin = binary:encode_unsigned(Enc3@element),
Enc3@element@bin_size0 = byte_size(Enc3@element@bin),
Enc3@element@bin_size = Enc3@element@bin_size0 - 1,
[<<Enc3@element@bin_size:2>>,
align|Enc3@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end].
'enc_DataMode_application'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:4>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= t120 ->
[<<0:1,1:4>>|enc_DataProtocolCapability(ChoiceVal)];
ChoiceTag =:= 'dsm-cc' ->
[<<0:1,2:4>>|enc_DataProtocolCapability(ChoiceVal)];
ChoiceTag =:= userData ->
[<<0:1,3:4>>|enc_DataProtocolCapability(ChoiceVal)];
ChoiceTag =:= t84 ->
[<<0:1,4:4>>|enc_DataProtocolCapability(ChoiceVal)];
ChoiceTag =:= t434 ->
[<<0:1,5:4>>|enc_DataProtocolCapability(ChoiceVal)];
ChoiceTag =:= h224 ->
[<<0:1,6:4>>|enc_DataProtocolCapability(ChoiceVal)];
ChoiceTag =:= nlpid ->
[<<0:1,7:4>>|enc_DataMode_application_nlpid(ChoiceVal)];
ChoiceTag =:= dsvdControl ->
<<0:1,8:4>>;
ChoiceTag =:= h222DataPartitioning ->
[<<0:1,9:4>>|enc_DataProtocolCapability(ChoiceVal)];
ChoiceTag =:= t30fax ->
begin
Enc11@output = enc_DataProtocolCapability(ChoiceVal),
Enc11@bin = complete(Enc11@output),
Enc11@len = byte_size(Enc11@bin),
if Enc11@len < 128 ->
[<<1:1,0:7>>,
align,
Enc11@len|Enc11@bin];
Enc11@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc11@len:14>>|Enc11@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc11@bin, 8)]
end
end;
ChoiceTag =:= t140 ->
begin
Enc12@output = enc_DataProtocolCapability(ChoiceVal),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[<<1:1,1:7>>,
align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc12@bin, 8)]
end
end;
ChoiceTag =:= t38fax ->
begin
Enc13@output = enc_DataMode_application_t38fax(ChoiceVal),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[<<1:1,2:7>>,
align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc13@bin, 8)]
end
end;
ChoiceTag =:= genericDataMode ->
begin
Enc14@output = enc_GenericCapability(ChoiceVal),
Enc14@bin = complete(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[<<1:1,3:7>>,
align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc14@bin, 8)]
end
end
end.
'enc_DataMode_application_nlpid'(Val) ->
[begin
Enc1@element = element(2, Val),
enc_DataProtocolCapability(Enc1@element)
end,
align|begin
Enc2@element = element(3, Val),
Enc3@len = byte_size(Enc2@element),
if Enc3@len < 128 ->
[Enc3@len|Enc2@element];
Enc3@len < 16384 ->
[<<2:2,Enc3@len:14>>|Enc2@element];
true ->
encode_fragmented(Enc2@element, 8)
end
end].

dec_DataMode_application_nlpid(Bytes) ->

%% attribute number 1 with type DataProtocolCapability
{Term1,Bytes1} = dec_DataProtocolCapability(Bytes),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} = begin
V1@Pad3 = bit_size(Bytes1) band 7,
{V1@V0,V1@Buf1} = case Bytes1 of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end,
{{'DataMode_application_nlpid',Term1,Term2},Bytes2}.

'enc_DataMode_application_t38fax'(Val) ->
[begin
Enc1@element = element(2, Val),
enc_DataProtocolCapability(Enc1@element)
end|begin
Enc2@element = element(3, Val),
enc_T38FaxProfile(Enc2@element)
end].

dec_DataMode_application_t38fax(Bytes) ->

%% attribute number 1 with type DataProtocolCapability
{Term1,Bytes1} = dec_DataProtocolCapability(Bytes),

%% attribute number 2 with type T38FaxProfile
{Term2,Bytes2} = dec_T38FaxProfile(Bytes1),
{{'DataMode_application_t38fax',Term1,Term2},Bytes2}.


dec_DataMode_application(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_DataProtocolCapability(Bytes2)
end,
{{t120,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_DataProtocolCapability(Bytes2)
end,
{{'dsm-cc',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_DataProtocolCapability(Bytes2)
end,
{{userData,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_DataProtocolCapability(Bytes2)
end,
{{t84,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_DataProtocolCapability(Bytes2)
end,
{{t434,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_DataProtocolCapability(Bytes2)
end,
{{h224,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
'dec_DataMode_application_nlpid'(Bytes2)
end,
{{nlpid,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{dsvdControl,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
dec_DataProtocolCapability(Bytes2)
end,
{{h222DataPartitioning,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_DataProtocolCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{t30fax,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_DataProtocolCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{t140,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_DataMode_application_t38fax'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{t38fax,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_GenericCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{genericDataMode,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_DataMode(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_DataMode_application'(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V3,V2@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'DataMode',Term1,Term2},Bytes5}.

'enc_EncryptionMode'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:1>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= h233Encryption ->
<<0:1,1:1>>
end.


dec_EncryptionMode(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{h233Encryption,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_RoundTripDelayRequest'(Val) ->
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.


dec_RoundTripDelayRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'RoundTripDelayRequest',Term1},Bytes4}.

'enc_RoundTripDelayResponse'(Val) ->
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.


dec_RoundTripDelayResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'RoundTripDelayResponse',Term1},Bytes4}.

'enc_MaintenanceLoopRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MaintenanceLoopRequest_type(Enc2@element)
end].
'enc_MaintenanceLoopRequest_type'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= systemLoop ->
<<0:1,0:2>>;
ChoiceTag =:= mediaLoop ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:1,1:2>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= logicalChannelLoop ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:1,2:2>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end
end.

dec_MaintenanceLoopRequest_type(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{systemLoop,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end
end,
{{mediaLoop,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
V4@Pad2 = bit_size(Bytes2) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes2,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end
end,
{{logicalChannelLoop,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_MaintenanceLoopRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_MaintenanceLoopRequest_type'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MaintenanceLoopRequest',Term1},Bytes4}.

'enc_MaintenanceLoopAck'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MaintenanceLoopAck_type(Enc2@element)
end].
'enc_MaintenanceLoopAck_type'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= systemLoop ->
<<0:1,0:2>>;
ChoiceTag =:= mediaLoop ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:1,1:2>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= logicalChannelLoop ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:1,2:2>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end
end.

dec_MaintenanceLoopAck_type(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{systemLoop,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end
end,
{{mediaLoop,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
V4@Pad2 = bit_size(Bytes2) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes2,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end
end,
{{logicalChannelLoop,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_MaintenanceLoopAck(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_MaintenanceLoopAck_type'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MaintenanceLoopAck',Term1},Bytes4}.

'enc_MaintenanceLoopReject'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_MaintenanceLoopReject_type(Enc2@element)
end|begin
Enc3@element = element(3, Val),
enc_MaintenanceLoopReject_cause(Enc3@element)
end].
'enc_MaintenanceLoopReject_type'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= systemLoop ->
<<0:1,0:2>>;
ChoiceTag =:= mediaLoop ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:1,1:2>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= logicalChannelLoop ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:1,2:2>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end
end.

dec_MaintenanceLoopReject_type(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{systemLoop,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end
end,
{{mediaLoop,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
V4@Pad2 = bit_size(Bytes2) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes2,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end
end,
{{logicalChannelLoop,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_MaintenanceLoopReject_cause'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= canNotPerformLoop ->
<<0:1>>
end.

dec_MaintenanceLoopReject_cause(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{canNotPerformLoop,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_MaintenanceLoopReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_MaintenanceLoopReject_type'(Bytes1),

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_MaintenanceLoopReject_cause'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V2@V0,V2@Buf1} = case Bytes3 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MaintenanceLoopReject',Term1,Term2},Bytes5}.

'enc_MaintenanceLoopOffCommand'(Val) ->
<<0:1>>.


dec_MaintenanceLoopOffCommand(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% Extensions
{Extensions,Bytes2} = case Ext of
0 -> {<<>>,Bytes1};
1 ->
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes3= skipextensions(Bytes2, 1, Extensions),
{{'MaintenanceLoopOffCommand'},Bytes3}.

'enc_CommunicationModeCommand'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_CommunicationModeCommand_communicationModeTable(Enc2@element)
end].
'enc_CommunicationModeCommand_communicationModeTable'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_CommunicationModeTableEntry(Comp) || Comp <- Val]]
end.


dec_CommunicationModeCommand_communicationModeTable(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components58(V1@Add4, V1@Buf1, []).



dec_CommunicationModeCommand(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SET OF
{Term1,Bytes2} = 'dec_CommunicationModeCommand_communicationModeTable'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'CommunicationModeCommand',Term1},Bytes4}.

'enc_CommunicationModeRequest'(Val) ->
<<0:1>>.


dec_CommunicationModeRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% Extensions
{Extensions,Bytes2} = case Ext of
0 -> {<<>>,Bytes1};
1 ->
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes3= skipextensions(Bytes2, 1, Extensions),
{{'CommunicationModeRequest'},Bytes3}.

'enc_CommunicationModeResponse'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= communicationModeTable ->
[<<0:1>>|enc_CommunicationModeResponse_communicationModeTable(ChoiceVal)]
end.
'enc_CommunicationModeResponse_communicationModeTable'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_CommunicationModeTableEntry(Comp) || Comp <- Val]]
end.


dec_CommunicationModeResponse_communicationModeTable(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components59(V1@Add4, V1@Buf1, []).



dec_CommunicationModeResponse(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_CommunicationModeResponse_communicationModeTable'(Bytes2)
end,
{{communicationModeTable,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_CommunicationModeTableEntry'(Val) ->
Enc8@bitmap = extension_bitmap(Val, 12, 15),
Extensions = if Enc8@bitmap =:= 0 ->
[];
true ->
<<2:7,Enc8@bitmap:3>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(4, Val),
Enc3@element = element(5, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(8, Val),
Enc5@element = element(9, Val),
if Enc4@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@element = element(10, Val),
Enc7@element = element(11, Val),
if Enc6@element =:= asn1_NOVALUE ->
if Enc7@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc7@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(2, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_CommunicationModeTableEntry_nonStandard(Enc10@element)
end
end,
begin
Enc12@element = element(3, Val),
Enc12@element@sub = Enc12@element - 1,
if 0 =< Enc12@element@sub, Enc12@element@sub < 255 ->
Enc12@element@sub;
true ->
exit({error,{asn1,{illegal_value,Enc12@element}}})
end
end,
begin
Enc14@element = element(4, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@element@sub = Enc14@element - 1,
if 0 =< Enc14@element@sub, Enc14@element@sub < 255 ->
Enc14@element@sub;
true ->
exit({error,{asn1,{illegal_value,Enc14@element}}})
end
end
end
end,
begin
Enc17@element = element(5, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_TerminalLabel(Enc17@element)
end
end,
begin
Enc19@element = element(6, Val),
Enc20@len = length(Enc19@element),
Enc20@bin = encode_chars_16bit(Enc19@element),
Enc20@len@sub = Enc20@len - 1,
if Enc20@len@sub bsr 7 =:= 0 ->
[<<Enc20@len@sub:7>>,
align|Enc20@bin]
end
end,
begin
Enc21@element = element(7, Val),
enc_CommunicationModeTableEntry_dataType(Enc21@element)
end,
begin
Enc22@element = element(8, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc22@element)
end
end,
begin
Enc24@element = element(9, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
Enc24@element =:= false ->
<<0:1>>;
Enc24@element =:= true ->
<<1:1>>
end
end,
begin
Enc27@element = element(10, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc27@element)
end
end,
begin
Enc29@element = element(11, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
Enc29@element =:= false ->
<<0:1>>;
Enc29@element =:= true ->
<<1:1>>
end
end,
Extensions,
begin
Enc32@element = element(12, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc33@output = enc_RedundancyEncoding(Enc32@element),
Enc33@bin = complete(Enc33@output),
Enc33@len = byte_size(Enc33@bin),
if Enc33@len < 128 ->
[align,
Enc33@len|Enc33@bin];
Enc33@len < 16384 ->
[align,
<<2:2,Enc33@len:14>>|Enc33@bin];
true ->
[align|encode_fragmented(Enc33@bin, 8)]
end
end
end
end,
begin
Enc35@element = element(13, Val),
if Enc35@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc37@output = begin
Enc35@element@sub = Enc35@element - 1,
if 0 =< Enc35@element@sub, Enc35@element@sub < 255 ->
[Enc35@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc35@element}}})
end
end,
Enc37@bin = iolist_to_binary(Enc37@output),
[align,
1|Enc37@bin]
end
end
end|begin
Enc39@element = element(14, Val),
if Enc39@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc40@output = enc_TerminalLabel(Enc39@element),
Enc40@bin = complete(Enc40@output),
Enc40@len = byte_size(Enc40@bin),
if Enc40@len < 128 ->
[align,
Enc40@len|Enc40@bin];
Enc40@len < 16384 ->
[align,
<<2:2,Enc40@len:14>>|Enc40@bin];
true ->
[align|encode_fragmented(Enc40@bin, 8)]
end
end
end
end].
'enc_CommunicationModeTableEntry_nonStandard'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_NonStandardParameter(Comp) || Comp <- Val]].


dec_CommunicationModeTableEntry_nonStandard(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components60(V1@V0, V1@Buf1, []).

'enc_CommunicationModeTableEntry_dataType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= videoData ->
[<<0:1,0:2>>|enc_VideoCapability(ChoiceVal)];
ChoiceTag =:= audioData ->
[<<0:1,1:2>>|enc_AudioCapability(ChoiceVal)];
ChoiceTag =:= data ->
[<<0:1,2:2>>|enc_DataApplicationCapability(ChoiceVal)]
end.

dec_CommunicationModeTableEntry_dataType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_VideoCapability(Bytes2)
end,
{{videoData,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_AudioCapability(Bytes2)
end,
{{audioData,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_DataApplicationCapability(Bytes2)
end,
{{data,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_CommunicationModeTableEntry(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes3} = case (Opt bsr 6) band 1 of
1 ->
'dec_CommunicationModeTableEntry_nonStandard'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V4@V0:8/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type TerminalLabel
{Term4,Bytes6} = case (Opt bsr 4) band 1 of
1 ->
dec_TerminalLabel(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type BMPString
{Term5,Bytes7} = begin
<<V5@V0:7/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes6,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/binary-unit:16,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V7,V5@Buf8}  = {decode_chars_16bit(V5@V3),V5@Buf4},
{V5@V7,V5@Buf8}
end,

%% attribute number 6 with type CHOICE
{Term6,Bytes8} = 'dec_CommunicationModeTableEntry_dataType'(Bytes7),

%% attribute number 7 with type TransportAddress
{Term7,Bytes9} = case (Opt bsr 3) band 1 of
1 ->
dec_TransportAddress(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes10} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes9,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type TransportAddress
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
dec_TransportAddress(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes12} = case Opt band 1 of
1 ->
begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes11,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V8@V0,V8@Buf1} = case Bytes12 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
V8@Pad6 = bit_size(V8@Buf2) band 7,
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<_:V8@Pad6,0:1,V8@V8:7,V8@Buf9/bitstring>> when V8@V8 =/= 0 ->
{V8@V8,V8@Buf9};
<<_:V8@Pad6,1:1,0:1,V8@V9:14,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V11:V8@V0/bitstring-unit:1,V8@Buf12/bitstring>> = V8@Buf1,
{V8@V11,V8@Buf12}
end,

%% attribute number 11 with type RedundancyEncoding
{Term11,Bytes14} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes13) band 7,
{V9@V0,V9@Buf1} = case Bytes13 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx11,_} = dec_RedundancyEncoding(V9@V0),
{TmpValx11,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type INTEGER
{Term12,Bytes15} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes14) band 7,
{V10@V0,V10@Buf1} = case Bytes14 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx12,_} = begin
<<V11@V0:8/unsigned-unit:1,V11@Buf1/bitstring>> = V10@V0,
V11@Add2 = V11@V0 + 1,
{V11@Add2,V11@Buf1}
end,
{TmpValx12,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type TerminalLabel
{Term13,Bytes16} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes15) band 7,
{V12@V0,V12@Buf1} = case Bytes15 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx13,_} = dec_TerminalLabel(V12@V0),
{TmpValx13,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,
Bytes17= skipextensions(Bytes16, 4, Extensions),
{{'CommunicationModeTableEntry',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13},Bytes17}.

'enc_ConferenceRequest'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= terminalListRequest ->
<<0:1,0:3>>;
ChoiceTag =:= makeMeChair ->
<<0:1,1:3>>;
ChoiceTag =:= cancelMakeMeChair ->
<<0:1,2:3>>;
ChoiceTag =:= dropTerminal ->
[<<0:1,3:3>>|enc_TerminalLabel(ChoiceVal)];
ChoiceTag =:= requestTerminalID ->
[<<0:1,4:3>>|enc_TerminalLabel(ChoiceVal)];
ChoiceTag =:= enterH243Password ->
<<0:1,5:3>>;
ChoiceTag =:= enterH243TerminalID ->
<<0:1,6:3>>;
ChoiceTag =:= enterH243ConferenceID ->
<<0:1,7:3>>;
ChoiceTag =:= enterExtensionAddress ->
begin
Enc9@output = [],
Enc9@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc9@bin]
end;
ChoiceTag =:= requestChairTokenOwner ->
begin
Enc10@output = [],
Enc10@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc10@bin]
end;
ChoiceTag =:= requestTerminalCertificate ->
begin
Enc11@output = enc_ConferenceRequest_requestTerminalCertificate(ChoiceVal),
Enc11@bin = complete(Enc11@output),
Enc11@len = byte_size(Enc11@bin),
if Enc11@len < 128 ->
[<<1:1,2:7>>,
align,
Enc11@len|Enc11@bin];
Enc11@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc11@len:14>>|Enc11@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc11@bin, 8)]
end
end;
ChoiceTag =:= broadcastMyLogicalChannel ->
begin
Enc13@output = begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
<<ChoiceVal@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end,
Enc13@bin = Enc13@output,
[<<1:1,3:7>>,
align,
2|Enc13@bin]
end;
ChoiceTag =:= makeTerminalBroadcaster ->
begin
Enc14@output = enc_TerminalLabel(ChoiceVal),
Enc14@bin = complete(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[<<1:1,4:7>>,
align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc14@bin, 8)]
end
end;
ChoiceTag =:= sendThisSource ->
begin
Enc15@output = enc_TerminalLabel(ChoiceVal),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[<<1:1,5:7>>,
align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[<<1:1,5:7>>,
align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[<<1:1,5:7>>,
align|encode_fragmented(Enc15@bin, 8)]
end
end;
ChoiceTag =:= requestAllTerminalIDs ->
begin
Enc16@output = [],
Enc16@bin = <<0:8>>,
[<<1:1,6:7>>,
align,
1|Enc16@bin]
end;
ChoiceTag =:= remoteMCRequest ->
begin
Enc17@output = enc_RemoteMCRequest(ChoiceVal),
Enc17@bin = complete(Enc17@output),
Enc17@len = byte_size(Enc17@bin),
if Enc17@len < 128 ->
[<<1:1,7:7>>,
align,
Enc17@len|Enc17@bin];
Enc17@len < 16384 ->
[<<1:1,7:7>>,
align,
<<2:2,Enc17@len:14>>|Enc17@bin];
true ->
[<<1:1,7:7>>,
align|encode_fragmented(Enc17@bin, 8)]
end
end
end.
'enc_ConferenceRequest_requestTerminalCertificate'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_TerminalLabel(Enc5@element)
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_CertSelectionCriteria(Enc7@element)
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@element@sub = Enc9@element - 1,
if 0 =< Enc9@element@sub, Enc9@element@sub < 4294967295 ->
begin
Enc9@element@sub@bin = binary:encode_unsigned(Enc9@element@sub),
Enc9@element@sub@bin_size0 = byte_size(Enc9@element@sub@bin),
Enc9@element@sub@bin_size = Enc9@element@sub@bin_size0 - 1,
[<<Enc9@element@sub@bin_size:2>>,
align|Enc9@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc9@element}}})
end
end
end
end].

dec_ConferenceRequest_requestTerminalCertificate(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type TerminalLabel
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
dec_TerminalLabel(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type CertSelectionCriteria
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_CertSelectionCriteria(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case Opt band 1 of
1 ->
begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes4,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Add7 = V3@V3 + 1,
{V3@Add7,V3@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ConferenceRequest_requestTerminalCertificate',Term1,Term2,Term3},Bytes7}.



dec_ConferenceRequest(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{terminalListRequest,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{makeMeChair,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{cancelMakeMeChair,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_TerminalLabel(Bytes2)
end,
{{dropTerminal,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_TerminalLabel(Bytes2)
end,
{{requestTerminalID,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{enterH243Password,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{enterH243TerminalID,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{enterH243ConferenceID,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{enterExtensionAddress,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{requestChairTokenOwner,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_ConferenceRequest_requestTerminalCertificate'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{requestTerminalCertificate,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
V5@Pad2 = bit_size(V2@V0) band 7,
<<_:V5@Pad2,V5@V0:2/unsigned-unit:8,V5@Buf1/bitstring>> = V2@V0,
V5@Add4 = V5@V0 + 1,
{V5@Add4,V5@Buf1}
end,
{TmpVal,V2@Buf1}
end,
{{broadcastMyLogicalChannel,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_TerminalLabel(V2@V0),
{TmpVal,V2@Buf1}
end,
{{makeTerminalBroadcaster,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_TerminalLabel(V2@V0),
{TmpVal,V2@Buf1}
end,
{{sendThisSource,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{requestAllTerminalIDs,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_RemoteMCRequest(V2@V0),
{TmpVal,V2@Buf1}
end,
{{remoteMCRequest,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_CertSelectionCriteria'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_Criteria(Comp) || Comp <- Val]]
end.



dec_CertSelectionCriteria(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components61(V1@Add2, V1@Buf1, []).

'enc_Criteria'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc3@bin = encode_oid(Enc2@element),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 128 ->
[<<0:1>>,
align,
Enc3@len|Enc3@bin];
Enc3@len < 16384 ->
[<<0:1>>,
align,
<<2:2,Enc3@len:14>>|Enc3@bin];
true ->
[<<0:1>>,
align|encode_fragmented(Enc3@bin, 8)]
end
end|begin
Enc4@element = element(3, Val),
Enc5@len = byte_size(Enc4@element),
Enc5@len@sub = Enc5@len - 1,
if 0 =< Enc5@len@sub, Enc5@len@sub < 65535 ->
[<<Enc5@len@sub:16>>|Enc4@element]
end
end].


dec_Criteria(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes2} = begin
V2@Pad3 = bit_size(Bytes1) band 7,
{V2@V0,V2@Buf1} = case Bytes1 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/binary-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
V2@Conv10 = binary_to_list(V2@V8),
{V2@V11,V2@Buf12}  = {decode_oid(V2@Conv10),V2@Buf9},
{V2@V11,V2@Buf12}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Conv5 = binary:copy(V3@V3),
{V3@Conv5,V3@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'Criteria',Term1,Term2},Bytes5}.

'enc_TerminalLabel'(Val) ->
[begin
Enc2@element = element(2, Val),
if 0 =< Enc2@element, Enc2@element < 193 ->
[<<0:1,Enc2@element:8>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if 0 =< Enc4@element, Enc4@element < 193 ->
[Enc4@element];
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].


dec_TerminalLabel(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:8/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'TerminalLabel',Term1,Term2},Bytes5}.

'enc_McuNumber'(Val) ->
if 0 =< Val, Val < 193 ->
[Val];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_McuNumber(Bytes) ->
begin
<<V1@V0:8/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_TerminalNumber'(Val) ->
if 0 =< Val, Val < 193 ->
[Val];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_TerminalNumber(Bytes) ->
begin
<<V1@V0:8/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_ConferenceResponse'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= mCTerminalIDResponse ->
[<<0:1,0:3>>|enc_ConferenceResponse_mCTerminalIDResponse(ChoiceVal)];
ChoiceTag =:= terminalIDResponse ->
[<<0:1,1:3>>|enc_ConferenceResponse_terminalIDResponse(ChoiceVal)];
ChoiceTag =:= conferenceIDResponse ->
[<<0:1,2:3>>|enc_ConferenceResponse_conferenceIDResponse(ChoiceVal)];
ChoiceTag =:= passwordResponse ->
[<<0:1,3:3>>|enc_ConferenceResponse_passwordResponse(ChoiceVal)];
ChoiceTag =:= terminalListResponse ->
[<<0:1,4:3>>|enc_ConferenceResponse_terminalListResponse(ChoiceVal)];
ChoiceTag =:= videoCommandReject ->
<<0:1,5:3>>;
ChoiceTag =:= terminalDropReject ->
<<0:1,6:3>>;
ChoiceTag =:= makeMeChairResponse ->
[<<0:1,7:3>>|enc_ConferenceResponse_makeMeChairResponse(ChoiceVal)];
ChoiceTag =:= extensionAddressResponse ->
begin
Enc9@output = enc_ConferenceResponse_extensionAddressResponse(ChoiceVal),
Enc9@bin = complete(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[<<1:1,0:7>>,
align,
Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc9@bin, 8)]
end
end;
ChoiceTag =:= chairTokenOwnerResponse ->
begin
Enc10@output = enc_ConferenceResponse_chairTokenOwnerResponse(ChoiceVal),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[<<1:1,1:7>>,
align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc10@bin, 8)]
end
end;
ChoiceTag =:= terminalCertificateResponse ->
begin
Enc11@output = enc_ConferenceResponse_terminalCertificateResponse(ChoiceVal),
Enc11@bin = complete(Enc11@output),
Enc11@len = byte_size(Enc11@bin),
if Enc11@len < 128 ->
[<<1:1,2:7>>,
align,
Enc11@len|Enc11@bin];
Enc11@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc11@len:14>>|Enc11@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc11@bin, 8)]
end
end;
ChoiceTag =:= broadcastMyLogicalChannelResponse ->
begin
Enc12@output = enc_ConferenceResponse_broadcastMyLogicalChannelResponse(ChoiceVal),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[<<1:1,3:7>>,
align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc12@bin, 8)]
end
end;
ChoiceTag =:= makeTerminalBroadcasterResponse ->
begin
Enc13@output = enc_ConferenceResponse_makeTerminalBroadcasterResponse(ChoiceVal),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[<<1:1,4:7>>,
align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc13@bin, 8)]
end
end;
ChoiceTag =:= sendThisSourceResponse ->
begin
Enc14@output = enc_ConferenceResponse_sendThisSourceResponse(ChoiceVal),
Enc14@bin = complete(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[<<1:1,5:7>>,
align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[<<1:1,5:7>>,
align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[<<1:1,5:7>>,
align|encode_fragmented(Enc14@bin, 8)]
end
end;
ChoiceTag =:= requestAllTerminalIDsResponse ->
begin
Enc15@output = enc_RequestAllTerminalIDsResponse(ChoiceVal),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[<<1:1,6:7>>,
align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[<<1:1,6:7>>,
align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[<<1:1,6:7>>,
align|encode_fragmented(Enc15@bin, 8)]
end
end;
ChoiceTag =:= remoteMCResponse ->
begin
Enc16@output = enc_RemoteMCResponse(ChoiceVal),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[<<1:1,7:7>>,
align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[<<1:1,7:7>>,
align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[<<1:1,7:7>>,
align|encode_fragmented(Enc16@bin, 8)]
end
end
end.
'enc_ConferenceResponse_mCTerminalIDResponse'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_TerminalLabel(Enc2@element)
end|begin
Enc3@element = element(3, Val),
Enc4@len = byte_size(Enc3@element),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 7 =:= 0 ->
[<<Enc4@len@sub:7>>,
align|Enc3@element]
end
end].

dec_ConferenceResponse_mCTerminalIDResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type TerminalLabel
{Term1,Bytes2} = dec_TerminalLabel(Bytes1),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Conv7 = binary:copy(V2@V3),
{V2@Conv7,V2@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ConferenceResponse_mCTerminalIDResponse',Term1,Term2},Bytes5}.

'enc_ConferenceResponse_terminalIDResponse'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_TerminalLabel(Enc2@element)
end|begin
Enc3@element = element(3, Val),
Enc4@len = byte_size(Enc3@element),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 7 =:= 0 ->
[<<Enc4@len@sub:7>>,
align|Enc3@element]
end
end].

dec_ConferenceResponse_terminalIDResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type TerminalLabel
{Term1,Bytes2} = dec_TerminalLabel(Bytes1),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Conv7 = binary:copy(V2@V3),
{V2@Conv7,V2@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ConferenceResponse_terminalIDResponse',Term1,Term2},Bytes5}.

'enc_ConferenceResponse_conferenceIDResponse'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_TerminalLabel(Enc2@element)
end|begin
Enc3@element = element(3, Val),
Enc4@len = byte_size(Enc3@element),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 5 =:= 0 ->
[<<Enc4@len@sub:5>>,
align|Enc3@element]
end
end].

dec_ConferenceResponse_conferenceIDResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type TerminalLabel
{Term1,Bytes2} = dec_TerminalLabel(Bytes1),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
<<V2@V0:5/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Conv7 = binary:copy(V2@V3),
{V2@Conv7,V2@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ConferenceResponse_conferenceIDResponse',Term1,Term2},Bytes5}.

'enc_ConferenceResponse_passwordResponse'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_TerminalLabel(Enc2@element)
end|begin
Enc3@element = element(3, Val),
Enc4@len = byte_size(Enc3@element),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 5 =:= 0 ->
[<<Enc4@len@sub:5>>,
align|Enc3@element]
end
end].

dec_ConferenceResponse_passwordResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type TerminalLabel
{Term1,Bytes2} = dec_TerminalLabel(Bytes1),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
<<V2@V0:5/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Conv7 = binary:copy(V2@V3),
{V2@Conv7,V2@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ConferenceResponse_passwordResponse',Term1,Term2},Bytes5}.

'enc_ConferenceResponse_terminalListResponse'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_TerminalLabel(Comp) || Comp <- Val]]
end.


dec_ConferenceResponse_terminalListResponse(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components62(V1@Add4, V1@Buf1, []).

'enc_ConferenceResponse_makeMeChairResponse'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= grantedChairToken ->
<<0:1,0:1>>;
ChoiceTag =:= deniedChairToken ->
<<0:1,1:1>>
end.

dec_ConferenceResponse_makeMeChairResponse(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{grantedChairToken,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{deniedChairToken,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ConferenceResponse_extensionAddressResponse'(Val) ->
Enc2@element = element(2, Val),
Enc3@len = byte_size(Enc2@element),
Enc3@len@sub = Enc3@len - 1,
if Enc3@len@sub bsr 7 =:= 0 ->
[<<0:1,Enc3@len@sub:7>>,
align|Enc2@element]
end.

dec_ConferenceResponse_extensionAddressResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes2} = begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Conv7 = binary:copy(V2@V3),
{V2@Conv7,V2@Buf4}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ConferenceResponse_extensionAddressResponse',Term1},Bytes4}.

'enc_ConferenceResponse_chairTokenOwnerResponse'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_TerminalLabel(Enc2@element)
end|begin
Enc3@element = element(3, Val),
Enc4@len = byte_size(Enc3@element),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 7 =:= 0 ->
[<<Enc4@len@sub:7>>,
align|Enc3@element]
end
end].

dec_ConferenceResponse_chairTokenOwnerResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type TerminalLabel
{Term1,Bytes2} = dec_TerminalLabel(Bytes1),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Conv7 = binary:copy(V2@V3),
{V2@Conv7,V2@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ConferenceResponse_chairTokenOwnerResponse',Term1,Term2},Bytes5}.

'enc_ConferenceResponse_terminalCertificateResponse'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_TerminalLabel(Enc4@element)
end
end|begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@len = byte_size(Enc6@element),
Enc7@len@sub = Enc7@len - 1,
if 0 =< Enc7@len@sub, Enc7@len@sub < 65535 ->
[align,
<<Enc7@len@sub:16>>|Enc6@element]
end
end
end
end].

dec_ConferenceResponse_terminalCertificateResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type TerminalLabel
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_TerminalLabel(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes3) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes3,
V3@Add4 = V3@V0 + 1,
<<V3@V5:V3@Add4/binary-unit:8,V3@Buf6/bitstring>> = V3@Buf1,
V3@Conv7 = binary:copy(V3@V5),
{V3@Conv7,V3@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'ConferenceResponse_terminalCertificateResponse',Term1,Term2},Bytes6}.

'enc_ConferenceResponse_broadcastMyLogicalChannelResponse'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= grantedBroadcastMyLogicalChannel ->
<<0:1,0:1>>;
ChoiceTag =:= deniedBroadcastMyLogicalChannel ->
<<0:1,1:1>>
end.

dec_ConferenceResponse_broadcastMyLogicalChannelResponse(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{grantedBroadcastMyLogicalChannel,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{deniedBroadcastMyLogicalChannel,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ConferenceResponse_makeTerminalBroadcasterResponse'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= grantedMakeTerminalBroadcaster ->
<<0:1,0:1>>;
ChoiceTag =:= deniedMakeTerminalBroadcaster ->
<<0:1,1:1>>
end.

dec_ConferenceResponse_makeTerminalBroadcasterResponse(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{grantedMakeTerminalBroadcaster,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{deniedMakeTerminalBroadcaster,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ConferenceResponse_sendThisSourceResponse'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= grantedSendThisSource ->
<<0:1,0:1>>;
ChoiceTag =:= deniedSendThisSource ->
<<0:1,1:1>>
end.

dec_ConferenceResponse_sendThisSourceResponse(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{grantedSendThisSource,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{deniedSendThisSource,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_ConferenceResponse(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_ConferenceResponse_mCTerminalIDResponse'(Bytes2)
end,
{{mCTerminalIDResponse,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_ConferenceResponse_terminalIDResponse'(Bytes2)
end,
{{terminalIDResponse,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_ConferenceResponse_conferenceIDResponse'(Bytes2)
end,
{{conferenceIDResponse,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
'dec_ConferenceResponse_passwordResponse'(Bytes2)
end,
{{passwordResponse,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
'dec_ConferenceResponse_terminalListResponse'(Bytes2)
end,
{{terminalListResponse,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{videoCommandReject,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{terminalDropReject,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
'dec_ConferenceResponse_makeMeChairResponse'(Bytes2)
end,
{{makeMeChairResponse,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_ConferenceResponse_extensionAddressResponse'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{extensionAddressResponse,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_ConferenceResponse_chairTokenOwnerResponse'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{chairTokenOwnerResponse,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_ConferenceResponse_terminalCertificateResponse'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{terminalCertificateResponse,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_ConferenceResponse_broadcastMyLogicalChannelResponse'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{broadcastMyLogicalChannelResponse,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_ConferenceResponse_makeTerminalBroadcasterResponse'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{makeTerminalBroadcasterResponse,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_ConferenceResponse_sendThisSourceResponse'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{sendThisSourceResponse,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_RequestAllTerminalIDsResponse(V2@V0),
{TmpVal,V2@Buf1}
end,
{{requestAllTerminalIDsResponse,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_RemoteMCResponse(V2@V0),
{TmpVal,V2@Buf1}
end,
{{remoteMCResponse,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_TerminalID'(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 7 =:= 0 ->
[<<Enc1@len@sub:7>>,
align|Val]
end.


dec_TerminalID(Bytes) ->
begin
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv7 = binary:copy(V1@V3),
{V1@Conv7,V1@Buf4}
end.

'enc_ConferenceID'(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>,
align|Val]
end.


dec_ConferenceID(Bytes) ->
begin
<<V1@V0:5/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv7 = binary:copy(V1@V3),
{V1@Conv7,V1@Buf4}
end.

'enc_Password'(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>,
align|Val]
end.


dec_Password(Bytes) ->
begin
<<V1@V0:5/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv7 = binary:copy(V1@V3),
{V1@Conv7,V1@Buf4}
end.

'enc_RequestAllTerminalIDsResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_RequestAllTerminalIDsResponse_terminalInformation(Enc2@element)
end].
'enc_RequestAllTerminalIDsResponse_terminalInformation'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_TerminalInformation(Comp) || Comp <- Val]].


dec_RequestAllTerminalIDsResponse_terminalInformation(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components63(V1@V0, V1@Buf1, []).



dec_RequestAllTerminalIDsResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_RequestAllTerminalIDsResponse_terminalInformation'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'RequestAllTerminalIDsResponse',Term1},Bytes4}.

'enc_TerminalInformation'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_TerminalLabel(Enc2@element)
end|begin
Enc3@element = element(3, Val),
Enc4@len = byte_size(Enc3@element),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 7 =:= 0 ->
[<<Enc4@len@sub:7>>,
align|Enc3@element]
end
end].


dec_TerminalInformation(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type TerminalLabel
{Term1,Bytes2} = dec_TerminalLabel(Bytes1),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Conv7 = binary:copy(V2@V3),
{V2@Conv7,V2@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'TerminalInformation',Term1,Term2},Bytes5}.

'enc_RemoteMCRequest'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= masterActivate ->
<<0:1,0:2>>;
ChoiceTag =:= slaveActivate ->
<<0:1,1:2>>;
ChoiceTag =:= deActivate ->
<<0:1,2:2>>
end.


dec_RemoteMCRequest(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{masterActivate,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{slaveActivate,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{deActivate,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_RemoteMCResponse'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= accept ->
<<0:1,0:1>>;
ChoiceTag =:= reject ->
[<<0:1,1:1>>|enc_RemoteMCResponse_reject(ChoiceVal)]
end.
'enc_RemoteMCResponse_reject'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= unspecified ->
<<0:1,0:1>>;
ChoiceTag =:= functionNotSupported ->
<<0:1,1:1>>
end.

dec_RemoteMCResponse_reject(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unspecified,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{functionNotSupported,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_RemoteMCResponse(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{accept,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RemoteMCResponse_reject'(Bytes2)
end,
{{reject,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_MultilinkRequest'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:3>>|enc_NonStandardMessage(ChoiceVal)];
ChoiceTag =:= callInformation ->
[<<0:1,1:3>>|enc_MultilinkRequest_callInformation(ChoiceVal)];
ChoiceTag =:= addConnection ->
[<<0:1,2:3>>|enc_MultilinkRequest_addConnection(ChoiceVal)];
ChoiceTag =:= removeConnection ->
[<<0:1,3:3>>|enc_MultilinkRequest_removeConnection(ChoiceVal)];
ChoiceTag =:= maximumHeaderInterval ->
[<<0:1,4:3>>|enc_MultilinkRequest_maximumHeaderInterval(ChoiceVal)]
end.
'enc_MultilinkRequest_callInformation'(Val) ->
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.

dec_MultilinkRequest_callInformation(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MultilinkRequest_callInformation',Term1},Bytes4}.

'enc_MultilinkRequest_addConnection'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_DialingInformation(Enc4@element)
end].

dec_MultilinkRequest_addConnection(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type DialingInformation
{Term2,Bytes3} = dec_DialingInformation(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MultilinkRequest_addConnection',Term1,Term2},Bytes5}.

'enc_MultilinkRequest_removeConnection'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ConnectionIdentifier(Enc2@element)
end].

dec_MultilinkRequest_removeConnection(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ConnectionIdentifier
{Term1,Bytes2} = dec_ConnectionIdentifier(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MultilinkRequest_removeConnection',Term1},Bytes4}.

'enc_MultilinkRequest_maximumHeaderInterval'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MultilinkRequest_maximumHeaderInterval_requestType(Enc2@element)
end].
'enc_MultilinkRequest_maximumHeaderInterval_requestType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= currentIntervalInformation ->
<<0:1,0:1>>;
ChoiceTag =:= requestedInterval ->
if ChoiceVal bsr 16 =:= 0 ->
[<<0:1,1:1>>,
align|<<ChoiceVal:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.

dec_MultilinkRequest_maximumHeaderInterval_requestType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{currentIntervalInformation,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end
end,
{{requestedInterval,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_MultilinkRequest_maximumHeaderInterval(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_MultilinkRequest_maximumHeaderInterval_requestType'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MultilinkRequest_maximumHeaderInterval',Term1},Bytes4}.



dec_MultilinkRequest(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardMessage(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_MultilinkRequest_callInformation'(Bytes2)
end,
{{callInformation,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_MultilinkRequest_addConnection'(Bytes2)
end,
{{addConnection,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
'dec_MultilinkRequest_removeConnection'(Bytes2)
end,
{{removeConnection,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
'dec_MultilinkRequest_maximumHeaderInterval'(Bytes2)
end,
{{maximumHeaderInterval,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_MultilinkResponse'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:3>>|enc_NonStandardMessage(ChoiceVal)];
ChoiceTag =:= callInformation ->
[<<0:1,1:3>>|enc_MultilinkResponse_callInformation(ChoiceVal)];
ChoiceTag =:= addConnection ->
[<<0:1,2:3>>|enc_MultilinkResponse_addConnection(ChoiceVal)];
ChoiceTag =:= removeConnection ->
[<<0:1,3:3>>|enc_MultilinkResponse_removeConnection(ChoiceVal)];
ChoiceTag =:= maximumHeaderInterval ->
[<<0:1,4:3>>|enc_MultilinkResponse_maximumHeaderInterval(ChoiceVal)]
end.
'enc_MultilinkResponse_callInformation'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_DialingInformation(Enc2@element)
end|begin
Enc3@element = element(3, Val),
if Enc3@element bsr 32 =:= 0 ->
begin
Enc3@element@bin = binary:encode_unsigned(Enc3@element),
Enc3@element@bin_size0 = byte_size(Enc3@element@bin),
Enc3@element@bin_size = Enc3@element@bin_size0 - 1,
[<<Enc3@element@bin_size:2>>,
align|Enc3@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end].

dec_MultilinkResponse_callInformation(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type DialingInformation
{Term1,Bytes2} = dec_DialingInformation(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V3,V2@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MultilinkResponse_callInformation',Term1,Term2},Bytes5}.

'enc_MultilinkResponse_addConnection'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_MultilinkResponse_addConnection_responseCode(Enc4@element)
end].
'enc_MultilinkResponse_addConnection_responseCode'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= accepted ->
<<0:1,0:1>>;
ChoiceTag =:= rejected ->
[<<0:1,1:1>>|enc_MultilinkResponse_addConnection_responseCode_rejected(ChoiceVal)]
end.
'enc_MultilinkResponse_addConnection_responseCode_rejected'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= connectionsNotAvailable ->
<<0:1,0:1>>;
ChoiceTag =:= userRejected ->
<<0:1,1:1>>
end.

dec_MultilinkResponse_addConnection_responseCode_rejected(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{connectionsNotAvailable,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{userRejected,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_MultilinkResponse_addConnection_responseCode(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{accepted,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_MultilinkResponse_addConnection_responseCode_rejected'(Bytes2)
end,
{{rejected,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_MultilinkResponse_addConnection(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_MultilinkResponse_addConnection_responseCode'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MultilinkResponse_addConnection',Term1,Term2},Bytes5}.

'enc_MultilinkResponse_removeConnection'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ConnectionIdentifier(Enc2@element)
end].

dec_MultilinkResponse_removeConnection(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ConnectionIdentifier
{Term1,Bytes2} = dec_ConnectionIdentifier(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MultilinkResponse_removeConnection',Term1},Bytes4}.

'enc_MultilinkResponse_maximumHeaderInterval'(Val) ->
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.

dec_MultilinkResponse_maximumHeaderInterval(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MultilinkResponse_maximumHeaderInterval',Term1},Bytes4}.



dec_MultilinkResponse(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardMessage(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_MultilinkResponse_callInformation'(Bytes2)
end,
{{callInformation,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_MultilinkResponse_addConnection'(Bytes2)
end,
{{addConnection,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
'dec_MultilinkResponse_removeConnection'(Bytes2)
end,
{{removeConnection,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
'dec_MultilinkResponse_maximumHeaderInterval'(Bytes2)
end,
{{maximumHeaderInterval,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_MultilinkIndication'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:2>>|enc_NonStandardMessage(ChoiceVal)];
ChoiceTag =:= crcDesired ->
[<<0:1,1:2>>|enc_MultilinkIndication_crcDesired(ChoiceVal)];
ChoiceTag =:= excessiveError ->
[<<0:1,2:2>>|enc_MultilinkIndication_excessiveError(ChoiceVal)]
end.
'enc_MultilinkIndication_crcDesired'(Val) ->
<<0:1>>.

dec_MultilinkIndication_crcDesired(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% Extensions
{Extensions,Bytes2} = case Ext of
0 -> {<<>>,Bytes1};
1 ->
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes3= skipextensions(Bytes2, 1, Extensions),
{{'MultilinkIndication_crcDesired'},Bytes3}.

'enc_MultilinkIndication_excessiveError'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ConnectionIdentifier(Enc2@element)
end].

dec_MultilinkIndication_excessiveError(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ConnectionIdentifier
{Term1,Bytes2} = dec_ConnectionIdentifier(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MultilinkIndication_excessiveError',Term1},Bytes4}.



dec_MultilinkIndication(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardMessage(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_MultilinkIndication_crcDesired'(Bytes2)
end,
{{crcDesired,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_MultilinkIndication_excessiveError'(Bytes2)
end,
{{excessiveError,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_DialingInformation'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:2>>|enc_NonStandardMessage(ChoiceVal)];
ChoiceTag =:= differential ->
[<<0:1,1:2>>|enc_DialingInformation_differential(ChoiceVal)];
ChoiceTag =:= infoNotAvailable ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:1,2:2>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end
end.
'enc_DialingInformation_differential'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|[enc_DialingInformationNumber(Comp) || Comp <- Val]]
end.


dec_DialingInformation_differential(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components64(V1@Add4, V1@Buf1, []).



dec_DialingInformation(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardMessage(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_DialingInformation_differential'(Bytes2)
end,
{{differential,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end
end,
{{infoNotAvailable,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_DialingInformationNumber'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
Enc4@len = length(Enc3@element),
Enc4@bin = encode_chars(Enc3@element, 4, {31,{0,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,1,2,3,4,5,6,7,8,9,10}}),
if Enc4@len < 41 ->
[<<Enc4@len:6>>,
align|Enc4@bin]
end
end,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@bin = list_to_binary(Enc5@element),
Enc6@len = byte_size(Enc6@bin),
Enc6@len@sub = Enc6@len - 1,
if 0 =< Enc6@len@sub, Enc6@len@sub < 40 ->
[<<Enc6@len@sub:6>>,
align|Enc6@bin]
end
end
end
end|begin
Enc8@element = element(4, Val),
enc_DialingInformationNumber_networkType(Enc8@element)
end].
'enc_DialingInformationNumber_networkType'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 255 ->
[Enc1@len@sub|[enc_DialingInformationNetworkType(Comp) || Comp <- Val]]
end.


dec_DialingInformationNumber_networkType(Bytes) ->
%% Length with constraint {1,255}
<<V1@V0:8/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components65(V1@Add2, V1@Buf1, []).



dec_DialingInformationNumber(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NumericString
{Term1,Bytes3} = begin
<<V3@V0:6/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Pad4 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad4,V3@V2:V3@V0/binary-unit:4,V3@Buf3/bitstring>> = V3@Buf1,
{V3@V6,V3@Buf7}  = {decode_chars(V3@V2, 4, {32,48,49,50,51,52,53,54,55,56,57}),V3@Buf3},
{V3@V6,V3@Buf7}
end,

%% attribute number 2 with type IA5String
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:6/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Conv7 = binary_to_list(V4@V3),
{V4@Conv7,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SET OF
{Term3,Bytes5} = 'dec_DialingInformationNumber_networkType'(Bytes4),

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'DialingInformationNumber',Term1,Term2,Term3},Bytes7}.

'enc_DialingInformationNetworkType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:2>>|enc_NonStandardMessage(ChoiceVal)];
ChoiceTag =:= 'n-isdn' ->
<<0:1,1:2>>;
ChoiceTag =:= gstn ->
<<0:1,2:2>>;
ChoiceTag =:= mobile ->
begin
Enc4@output = [],
Enc4@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc4@bin]
end
end.


dec_DialingInformationNetworkType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardMessage(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'n-isdn',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{gstn,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{mobile,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ConnectionIdentifier'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 32 =:= 0 ->
[<<0:1>>|begin
Enc2@element@bin = binary:encode_unsigned(Enc2@element),
Enc2@element@bin_size0 = byte_size(Enc2@element@bin),
Enc2@element@bin_size = Enc2@element@bin_size0 - 1,
[<<Enc2@element@bin_size:2>>,
align|Enc2@element@bin]
end];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element bsr 32 =:= 0 ->
begin
Enc4@element@bin = binary:encode_unsigned(Enc4@element),
Enc4@element@bin_size0 = byte_size(Enc4@element@bin),
Enc4@element@bin_size = Enc4@element@bin_size0 - 1,
[<<Enc4@element@bin_size:2,0:6>>|Enc4@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].


dec_ConnectionIdentifier(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V3,V2@Buf4}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<_:6,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'ConnectionIdentifier',Term1,Term2},Bytes5}.

'enc_MaximumBitRate'(Val) ->
if Val bsr 32 =:= 0 ->
begin
Val@bin = binary:encode_unsigned(Val),
Val@bin_size0 = byte_size(Val@bin),
Val@bin_size = Val@bin_size0 - 1,
[<<Val@bin_size:2>>,
align|Val@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_MaximumBitRate(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V3,V1@Buf4}
end.

'enc_LogicalChannelRateRequest'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
if Enc6@element bsr 32 =:= 0 ->
begin
Enc6@element@bin = binary:encode_unsigned(Enc6@element),
Enc6@element@bin_size0 = byte_size(Enc6@element@bin),
Enc6@element@bin_size = Enc6@element@bin_size0 - 1,
[<<Enc6@element@bin_size:2,0:6>>|Enc6@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end].


dec_LogicalChannelRateRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:6,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:7,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:7,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'LogicalChannelRateRequest',Term1,Term2,Term3},Bytes6}.

'enc_LogicalChannelRateAcknowledge'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
if Enc6@element bsr 32 =:= 0 ->
begin
Enc6@element@bin = binary:encode_unsigned(Enc6@element),
Enc6@element@bin_size0 = byte_size(Enc6@element@bin),
Enc6@element@bin_size = Enc6@element@bin_size0 - 1,
[<<Enc6@element@bin_size:2,0:6>>|Enc6@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end].


dec_LogicalChannelRateAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:6,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:7,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:7,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'LogicalChannelRateAcknowledge',Term1,Term2,Term3},Bytes6}.

'enc_LogicalChannelRateReject'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 8 =:= 0 ->
Enc3@element;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
begin
Enc5@element = element(3, Val),
Enc5@element@sub = Enc5@element - 1,
if 0 =< Enc5@element@sub, Enc5@element@sub < 65535 ->
<<Enc5@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(4, Val),
enc_LogicalChannelRateRejectReason(Enc7@element)
end|begin
Enc8@element = element(5, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
Enc8@element bsr 32 =:= 0 ->
begin
Enc8@element@bin = binary:encode_unsigned(Enc8@element),
Enc8@element@bin_size0 = byte_size(Enc8@element@bin),
Enc8@element@bin_size = Enc8@element@bin_size0 - 1,
[<<Enc8@element@bin_size:2>>,
align|Enc8@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc8@element}}})
end
end].


dec_LogicalChannelRateReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end,

%% attribute number 3 with type LogicalChannelRateRejectReason
{Term3,Bytes5} = dec_LogicalChannelRateRejectReason(Bytes4),

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V5@V0:2/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes5,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/unsigned-unit:8,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V3,V5@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'LogicalChannelRateReject',Term1,Term2,Term3,Term4},Bytes8}.

'enc_LogicalChannelRateRejectReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= undefinedReason ->
<<0:1,0:1>>;
ChoiceTag =:= insufficientResources ->
<<0:1,1:1>>
end.


dec_LogicalChannelRateRejectReason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefinedReason,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{insufficientResources,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_LogicalChannelRateRelease'(Val) ->
<<0:1>>.


dec_LogicalChannelRateRelease(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% Extensions
{Extensions,Bytes2} = case Ext of
0 -> {<<>>,Bytes1};
1 ->
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes3= skipextensions(Bytes2, 1, Extensions),
{{'LogicalChannelRateRelease'},Bytes3}.

'enc_SendTerminalCapabilitySet'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= specificRequest ->
[<<0:1,0:1>>|enc_SendTerminalCapabilitySet_specificRequest(ChoiceVal)];
ChoiceTag =:= genericRequest ->
<<0:1,1:1>>
end.
'enc_SendTerminalCapabilitySet_specificRequest'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= false ->
<<0:1>>;
Enc4@element =:= true ->
<<1:1>>
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_SendTerminalCapabilitySet_specificRequest_capabilityTableEntryNumbers(Enc6@element)
end
end|begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
enc_SendTerminalCapabilitySet_specificRequest_capabilityDescriptorNumbers(Enc8@element)
end
end].
'enc_SendTerminalCapabilitySet_specificRequest_capabilityTableEntryNumbers'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 65535 ->
[align,
<<Enc2@len@sub:16>>|[begin
Comp@sub = Comp - 1,
if 0 =< Comp@sub, Comp@sub < 65535 ->
<<Comp@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.


dec_SendTerminalCapabilitySet_specificRequest_capabilityTableEntryNumbers(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components66(V1@Add4, V1@Buf1, []).

'enc_SendTerminalCapabilitySet_specificRequest_capabilityDescriptorNumbers'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 8 =:= 0 ->
[align,
Enc2@len@sub|[if Comp bsr 8 =:= 0 ->
[Comp];
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.


dec_SendTerminalCapabilitySet_specificRequest_capabilityDescriptorNumbers(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components67(V1@Add4, V1@Buf1, []).


dec_SendTerminalCapabilitySet_specificRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type SET OF
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
'dec_SendTerminalCapabilitySet_specificRequest_capabilityTableEntryNumbers'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SET OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_SendTerminalCapabilitySet_specificRequest_capabilityDescriptorNumbers'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'SendTerminalCapabilitySet_specificRequest',Term1,Term2,Term3},Bytes7}.



dec_SendTerminalCapabilitySet(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_SendTerminalCapabilitySet_specificRequest'(Bytes2)
end,
{{specificRequest,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{genericRequest,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_EncryptionCommand'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= encryptionSE ->
begin
Enc2@len = byte_size(ChoiceVal),
if Enc2@len < 128 ->
[<<0:1,0:2>>,
align,
Enc2@len|ChoiceVal];
Enc2@len < 16384 ->
[<<0:1,0:2>>,
align,
<<2:2,Enc2@len:14>>|ChoiceVal];
true ->
[<<0:1,0:2>>,
align|encode_fragmented(ChoiceVal, 8)]
end
end;
ChoiceTag =:= encryptionIVRequest ->
<<0:1,1:2>>;
ChoiceTag =:= encryptionAlgorithmID ->
[<<0:1,2:2>>|enc_EncryptionCommand_encryptionAlgorithmID(ChoiceVal)]
end.
'enc_EncryptionCommand_encryptionAlgorithmID'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 8 =:= 0 ->
Enc1@element;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
enc_NonStandardParameter(Enc3@element)
end].

dec_EncryptionCommand_encryptionAlgorithmID(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type NonStandardParameter
{Term2,Bytes2} = dec_NonStandardParameter(Bytes1),
{{'EncryptionCommand_encryptionAlgorithmID',Term1,Term2},Bytes2}.



dec_EncryptionCommand(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end,
V2@Conv10 = binary:copy(V2@V0),
{V2@Conv10,V2@Buf1}
end
end,
{{encryptionSE,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{encryptionIVRequest,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_EncryptionCommand_encryptionAlgorithmID'(Bytes2)
end,
{{encryptionAlgorithmID,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_FlowControlCommand'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_FlowControlCommand_scope(Enc2@element)
end|begin
Enc3@element = element(3, Val),
enc_FlowControlCommand_restriction(Enc3@element)
end].
'enc_FlowControlCommand_scope'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= logicalChannelNumber ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:2>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= resourceID ->
if ChoiceVal bsr 16 =:= 0 ->
[<<1:2>>,
align|<<ChoiceVal:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= wholeMultiplex ->
<<2:2>>
end.

dec_FlowControlCommand_scope(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end
end,
{{logicalChannelNumber,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes1) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes1,
{V3@V0,V3@Buf1}
end
end,
{{resourceID,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{wholeMultiplex,Val},NewBytes}
end.
'enc_FlowControlCommand_restriction'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= maximumBitRate ->
if ChoiceVal bsr 24 =:= 0 ->
[<<0:1>>|begin
ChoiceVal@bin = binary:encode_unsigned(ChoiceVal),
ChoiceVal@bin_size0 = byte_size(ChoiceVal@bin),
ChoiceVal@bin_size = ChoiceVal@bin_size0 - 1,
[<<ChoiceVal@bin_size:2>>,
align|ChoiceVal@bin]
end];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= noRestriction ->
<<1:1>>
end.

dec_FlowControlCommand_restriction(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V3,V2@Buf4}
end
end,
{{maximumBitRate,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{noRestriction,Val},NewBytes}
end.


dec_FlowControlCommand(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_FlowControlCommand_scope'(Bytes1),

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_FlowControlCommand_restriction'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V2@V0,V2@Buf1} = case Bytes3 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'FlowControlCommand',Term1,Term2},Bytes5}.

'enc_EndSessionCommand'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:2>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= disconnect ->
<<0:1,1:2>>;
ChoiceTag =:= gstnOptions ->
[<<0:1,2:2>>|enc_EndSessionCommand_gstnOptions(ChoiceVal)];
ChoiceTag =:= isdnOptions ->
begin
Enc4@output = enc_EndSessionCommand_isdnOptions(ChoiceVal),
Enc4@bin = complete(Enc4@output),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[<<1:1,0:7>>,
align,
Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc4@bin, 8)]
end
end
end.
'enc_EndSessionCommand_gstnOptions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= telephonyMode ->
<<0:1,0:3>>;
ChoiceTag =:= v8bis ->
<<0:1,1:3>>;
ChoiceTag =:= v34DSVD ->
<<0:1,2:3>>;
ChoiceTag =:= v34DuplexFAX ->
<<0:1,3:3>>;
ChoiceTag =:= v34H324 ->
<<0:1,4:3>>
end.

dec_EndSessionCommand_gstnOptions(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{telephonyMode,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{v8bis,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{v34DSVD,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{v34DuplexFAX,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{v34H324,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_EndSessionCommand_isdnOptions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= telephonyMode ->
<<0:1,0:2>>;
ChoiceTag =:= v140 ->
<<0:1,1:2>>;
ChoiceTag =:= terminalOnHold ->
<<0:1,2:2>>
end.

dec_EndSessionCommand_isdnOptions(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{telephonyMode,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{v140,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{terminalOnHold,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_EndSessionCommand(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{disconnect,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_EndSessionCommand_gstnOptions'(Bytes2)
end,
{{gstnOptions,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_EndSessionCommand_isdnOptions'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{isdnOptions,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ConferenceCommand'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= broadcastMyLogicalChannel ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:1,0:3>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= cancelBroadcastMyLogicalChannel ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:1,1:3>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= makeTerminalBroadcaster ->
[<<0:1,2:3>>|enc_TerminalLabel(ChoiceVal)];
ChoiceTag =:= cancelMakeTerminalBroadcaster ->
<<0:1,3:3>>;
ChoiceTag =:= sendThisSource ->
[<<0:1,4:3>>|enc_TerminalLabel(ChoiceVal)];
ChoiceTag =:= cancelSendThisSource ->
<<0:1,5:3>>;
ChoiceTag =:= dropConference ->
<<0:1,6:3>>;
ChoiceTag =:= substituteConferenceIDCommand ->
begin
Enc10@output = enc_SubstituteConferenceIDCommand(ChoiceVal),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[<<1:1,0:7>>,
align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc10@bin, 8)]
end
end
end.


dec_ConferenceCommand(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end
end,
{{broadcastMyLogicalChannel,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end
end,
{{cancelBroadcastMyLogicalChannel,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_TerminalLabel(Bytes2)
end,
{{makeTerminalBroadcaster,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{cancelMakeTerminalBroadcaster,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_TerminalLabel(Bytes2)
end,
{{sendThisSource,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{cancelSendThisSource,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{dropConference,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_SubstituteConferenceIDCommand(V2@V0),
{TmpVal,V2@Buf1}
end,
{{substituteConferenceIDCommand,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_SubstituteConferenceIDCommand'(Val) ->
Enc2@element = element(2, Val),
Enc3@len = byte_size(Enc2@element),
if Enc3@len =:= 16 ->
[<<0:1>>,
align|Enc2@element]
end.


dec_SubstituteConferenceIDCommand(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:16/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv4 = binary:copy(V2@V0),
{V2@Conv4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'SubstituteConferenceIDCommand',Term1},Bytes4}.

'enc_MiscellaneousCommand'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_MiscellaneousCommand_type(Enc4@element)
end].
'enc_MiscellaneousCommand_type'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= equaliseDelay ->
<<0:1,0:4>>;
ChoiceTag =:= zeroDelay ->
<<0:1,1:4>>;
ChoiceTag =:= multipointModeCommand ->
<<0:1,2:4>>;
ChoiceTag =:= cancelMultipointModeCommand ->
<<0:1,3:4>>;
ChoiceTag =:= videoFreezePicture ->
<<0:1,4:4>>;
ChoiceTag =:= videoFastUpdatePicture ->
<<0:1,5:4>>;
ChoiceTag =:= videoFastUpdateGOB ->
[<<0:1,6:4>>|enc_MiscellaneousCommand_type_videoFastUpdateGOB(ChoiceVal)];
ChoiceTag =:= videoTemporalSpatialTradeOff ->
if ChoiceVal bsr 5 =:= 0 ->
<<0:1,7:4,ChoiceVal:5>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= videoSendSyncEveryGOB ->
<<0:1,8:4>>;
ChoiceTag =:= videoSendSyncEveryGOBCancel ->
<<0:1,9:4>>;
ChoiceTag =:= videoFastUpdateMB ->
begin
Enc12@output = enc_MiscellaneousCommand_type_videoFastUpdateMB(ChoiceVal),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[<<1:1,0:7>>,
align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc12@bin, 8)]
end
end;
ChoiceTag =:= maxH223MUXPDUsize ->
begin
Enc14@output = begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
<<ChoiceVal@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end,
Enc14@bin = Enc14@output,
[<<1:1,1:7>>,
align,
2|Enc14@bin]
end;
ChoiceTag =:= encryptionUpdate ->
begin
Enc15@output = enc_EncryptionSync(ChoiceVal),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[<<1:1,2:7>>,
align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc15@bin, 8)]
end
end;
ChoiceTag =:= encryptionUpdateRequest ->
begin
Enc16@output = enc_EncryptionUpdateRequest(ChoiceVal),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[<<1:1,3:7>>,
align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc16@bin, 8)]
end
end;
ChoiceTag =:= switchReceiveMediaOff ->
begin
Enc17@output = [],
Enc17@bin = <<0:8>>,
[<<1:1,4:7>>,
align,
1|Enc17@bin]
end;
ChoiceTag =:= switchReceiveMediaOn ->
begin
Enc18@output = [],
Enc18@bin = <<0:8>>,
[<<1:1,5:7>>,
align,
1|Enc18@bin]
end;
ChoiceTag =:= progressiveRefinementStart ->
begin
Enc19@output = enc_MiscellaneousCommand_type_progressiveRefinementStart(ChoiceVal),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[<<1:1,6:7>>,
align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[<<1:1,6:7>>,
align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[<<1:1,6:7>>,
align|encode_fragmented(Enc19@bin, 8)]
end
end;
ChoiceTag =:= progressiveRefinementAbortOne ->
begin
Enc20@output = [],
Enc20@bin = <<0:8>>,
[<<1:1,7:7>>,
align,
1|Enc20@bin]
end;
ChoiceTag =:= progressiveRefinementAbortContinuous ->
begin
Enc21@output = [],
Enc21@bin = <<0:8>>,
[<<1:1,8:7>>,
align,
1|Enc21@bin]
end;
ChoiceTag =:= videoBadMBs ->
begin
Enc22@output = enc_MiscellaneousCommand_type_videoBadMBs(ChoiceVal),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[<<1:1,9:7>>,
align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[<<1:1,9:7>>,
align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[<<1:1,9:7>>,
align|encode_fragmented(Enc22@bin, 8)]
end
end;
ChoiceTag =:= lostPicture ->
begin
Enc23@output = enc_MiscellaneousCommand_type_lostPicture(ChoiceVal),
Enc23@bin = complete(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[<<1:1,10:7>>,
align,
Enc23@len|Enc23@bin];
Enc23@len < 16384 ->
[<<1:1,10:7>>,
align,
<<2:2,Enc23@len:14>>|Enc23@bin];
true ->
[<<1:1,10:7>>,
align|encode_fragmented(Enc23@bin, 8)]
end
end;
ChoiceTag =:= lostPartialPicture ->
begin
Enc24@output = enc_MiscellaneousCommand_type_lostPartialPicture(ChoiceVal),
Enc24@bin = complete(Enc24@output),
Enc24@len = byte_size(Enc24@bin),
if Enc24@len < 128 ->
[<<1:1,11:7>>,
align,
Enc24@len|Enc24@bin];
Enc24@len < 16384 ->
[<<1:1,11:7>>,
align,
<<2:2,Enc24@len:14>>|Enc24@bin];
true ->
[<<1:1,11:7>>,
align|encode_fragmented(Enc24@bin, 8)]
end
end;
ChoiceTag =:= recoveryReferencePicture ->
begin
Enc25@output = enc_MiscellaneousCommand_type_recoveryReferencePicture(ChoiceVal),
Enc25@bin = complete(Enc25@output),
Enc25@len = byte_size(Enc25@bin),
if Enc25@len < 128 ->
[<<1:1,12:7>>,
align,
Enc25@len|Enc25@bin];
Enc25@len < 16384 ->
[<<1:1,12:7>>,
align,
<<2:2,Enc25@len:14>>|Enc25@bin];
true ->
[<<1:1,12:7>>,
align|encode_fragmented(Enc25@bin, 8)]
end
end
end.
'enc_MiscellaneousCommand_type_videoFastUpdateGOB'(Val) ->
[begin
Enc1@element = element(2, Val),
if 0 =< Enc1@element, Enc1@element < 18 ->
<<Enc1@element:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - 1,
if 0 =< Enc3@element@sub, Enc3@element@sub < 18 ->
<<Enc3@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end].

dec_MiscellaneousCommand_type_videoFastUpdateGOB(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:5/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:5/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,
{{'MiscellaneousCommand_type_videoFastUpdateGOB',Term1,Term2},Bytes2}.

'enc_MiscellaneousCommand_type_videoFastUpdateMB'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
Enc4@element bsr 8 =:= 0 ->
[align,
Enc4@element];
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@element@sub = Enc7@element - 1,
if Enc7@element@sub bsr 13 =:= 0 ->
[align|<<Enc7@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end
end
end,
align|begin
Enc10@element = element(4, Val),
Enc10@element@sub = Enc10@element - 1,
if Enc10@element@sub bsr 13 =:= 0 ->
<<Enc10@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end].

dec_MiscellaneousCommand_type_videoFastUpdateMB(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:2/unsigned-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Add4 = V5@V0 + 1,
{V5@Add4,V5@Buf1}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:7,0:1,V6@V7:7,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<_:7,1:1,0:1,V6@V8:14,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'MiscellaneousCommand_type_videoFastUpdateMB',Term1,Term2,Term3},Bytes7}.

'enc_MiscellaneousCommand_type_progressiveRefinementStart'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MiscellaneousCommand_type_progressiveRefinementStart_repeatCount(Enc2@element)
end].
'enc_MiscellaneousCommand_type_progressiveRefinementStart_repeatCount'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= doOneProgression ->
<<0:1,0:2>>;
ChoiceTag =:= doContinuousProgressions ->
<<0:1,1:2>>;
ChoiceTag =:= doOneIndependentProgression ->
<<0:1,2:2>>;
ChoiceTag =:= doContinuousIndependentProgressions ->
<<0:1,3:2>>
end.

dec_MiscellaneousCommand_type_progressiveRefinementStart_repeatCount(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{doOneProgression,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{doContinuousProgressions,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{doOneIndependentProgression,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{doContinuousIndependentProgressions,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_MiscellaneousCommand_type_progressiveRefinementStart(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_MiscellaneousCommand_type_progressiveRefinementStart_repeatCount'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MiscellaneousCommand_type_progressiveRefinementStart',Term1},Bytes4}.

'enc_MiscellaneousCommand_type_videoBadMBs'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 9216 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 9216 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
if Enc6@element bsr 10 =:= 0 ->
<<Enc6@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end].

dec_MiscellaneousCommand_type_videoBadMBs(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:7,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:7,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'MiscellaneousCommand_type_videoBadMBs',Term1,Term2,Term3},Bytes6}.

'enc_MiscellaneousCommand_type_lostPicture'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_PictureReference(Comp) || Comp <- Val]].


dec_MiscellaneousCommand_type_lostPicture(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components68(V1@V0, V1@Buf1, []).

'enc_MiscellaneousCommand_type_lostPartialPicture'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_PictureReference(Enc2@element)
end,
align,
begin
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - 1,
if 0 =< Enc3@element@sub, Enc3@element@sub < 9216 ->
<<Enc3@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end|begin
Enc5@element = element(4, Val),
Enc5@element@sub = Enc5@element - 1,
if 0 =< Enc5@element@sub, Enc5@element@sub < 9216 ->
<<Enc5@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end].

dec_MiscellaneousCommand_type_lostPartialPicture(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type PictureReference
{Term1,Bytes2} = dec_PictureReference(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'MiscellaneousCommand_type_lostPartialPicture',Term1,Term2,Term3},Bytes6}.

'enc_MiscellaneousCommand_type_recoveryReferencePicture'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_PictureReference(Comp) || Comp <- Val]].


dec_MiscellaneousCommand_type_recoveryReferencePicture(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components69(V1@V0, V1@Buf1, []).


dec_MiscellaneousCommand_type(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{equaliseDelay,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{zeroDelay,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{multipointModeCommand,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{cancelMultipointModeCommand,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{videoFreezePicture,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{videoFastUpdatePicture,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
'dec_MiscellaneousCommand_type_videoFastUpdateGOB'(Bytes2)
end,
{{videoFastUpdateGOB,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
<<V8@V0:5/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes2,
{V8@V0,V8@Buf1}
end
end,
{{videoTemporalSpatialTradeOff,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{videoSendSyncEveryGOB,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{videoSendSyncEveryGOBCancel,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_MiscellaneousCommand_type_videoFastUpdateMB'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{videoFastUpdateMB,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
V3@Pad2 = bit_size(V2@V0) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = V2@V0,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,
{TmpVal,V2@Buf1}
end,
{{maxH223MUXPDUsize,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_EncryptionSync(V2@V0),
{TmpVal,V2@Buf1}
end,
{{encryptionUpdate,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_EncryptionUpdateRequest(V2@V0),
{TmpVal,V2@Buf1}
end,
{{encryptionUpdateRequest,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{switchReceiveMediaOff,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{switchReceiveMediaOn,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_MiscellaneousCommand_type_progressiveRefinementStart'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{progressiveRefinementStart,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{progressiveRefinementAbortOne,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{progressiveRefinementAbortContinuous,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_MiscellaneousCommand_type_videoBadMBs'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{videoBadMBs,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_MiscellaneousCommand_type_lostPicture'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{lostPicture,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_MiscellaneousCommand_type_lostPartialPicture'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{lostPartialPicture,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_MiscellaneousCommand_type_recoveryReferencePicture'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{recoveryReferencePicture,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_MiscellaneousCommand(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_MiscellaneousCommand_type'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MiscellaneousCommand',Term1,Term2},Bytes5}.

'enc_KeyProtectionMethod'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc4@element = element(3, Val),
if Enc2@element =:= false ->
if Enc4@element =:= false ->
<<0:1,0:1,0:1>>;
Enc4@element =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@element =:= true ->
if Enc4@element =:= false ->
<<0:1,1:1,0:1>>;
Enc4@element =:= true ->
<<0:1,1:1,1:1>>
end
end
end|begin
Enc6@element = element(4, Val),
if Enc6@element =:= false ->
<<0:1>>;
Enc6@element =:= true ->
<<1:1>>
end
end].


dec_KeyProtectionMethod(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'KeyProtectionMethod',Term1,Term2,Term3},Bytes6}.

'enc_EncryptionUpdateRequest'(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end|begin
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
true ->
enc_KeyProtectionMethod(Enc3@element)
end
end].


dec_EncryptionUpdateRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type KeyProtectionMethod
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_KeyProtectionMethod(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'EncryptionUpdateRequest',Term1},Bytes5}.

'enc_PictureReference'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= pictureNumber ->
if ChoiceVal bsr 10 =:= 0 ->
[<<0:1,0:1>>,
align|<<ChoiceVal:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= longTermPictureIndex ->
if ChoiceVal bsr 8 =:= 0 ->
[<<0:1,1:1>>,
align,
ChoiceVal];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.


dec_PictureReference(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes2,
{V2@V0,V2@Buf1}
end
end,
{{pictureNumber,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end
end,
{{longTermPictureIndex,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H223MultiplexReconfiguration'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= h223ModeChange ->
[<<0:1,0:1>>|enc_H223MultiplexReconfiguration_h223ModeChange(ChoiceVal)];
ChoiceTag =:= h223AnnexADoubleFlag ->
[<<0:1,1:1>>|enc_H223MultiplexReconfiguration_h223AnnexADoubleFlag(ChoiceVal)]
end.
'enc_H223MultiplexReconfiguration_h223ModeChange'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= toLevel0 ->
<<0:1,0:2>>;
ChoiceTag =:= toLevel1 ->
<<0:1,1:2>>;
ChoiceTag =:= toLevel2 ->
<<0:1,2:2>>;
ChoiceTag =:= toLevel2withOptionalHeader ->
<<0:1,3:2>>
end.

dec_H223MultiplexReconfiguration_h223ModeChange(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{toLevel0,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{toLevel1,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{toLevel2,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{toLevel2withOptionalHeader,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H223MultiplexReconfiguration_h223AnnexADoubleFlag'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= start ->
<<0:1,0:1>>;
ChoiceTag =:= stop ->
<<0:1,1:1>>
end.

dec_H223MultiplexReconfiguration_h223AnnexADoubleFlag(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{start,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{stop,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_H223MultiplexReconfiguration(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_H223MultiplexReconfiguration_h223ModeChange'(Bytes2)
end,
{{h223ModeChange,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_H223MultiplexReconfiguration_h223AnnexADoubleFlag'(Bytes2)
end,
{{h223AnnexADoubleFlag,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_NewATMVCCommand'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(4, Val),
Enc8@element = element(5, Val),
if Enc6@element =:= false ->
if Enc8@element =:= false ->
<<0:1,0:1>>;
Enc8@element =:= true ->
<<0:1,1:1>>
end;
Enc6@element =:= true ->
if Enc8@element =:= false ->
<<1:1,0:1>>;
Enc8@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(6, Val),
enc_NewATMVCCommand_aal(Enc10@element)
end,
begin
Enc11@element = element(7, Val),
enc_NewATMVCCommand_multiplex(Enc11@element)
end|begin
Enc12@element = element(8, Val),
enc_NewATMVCCommand_reverseParameters(Enc12@element)
end].
'enc_NewATMVCCommand_aal'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= aal1 ->
[<<0:1,0:1>>|enc_NewATMVCCommand_aal_aal1(ChoiceVal)];
ChoiceTag =:= aal5 ->
[<<0:1,1:1>>|enc_NewATMVCCommand_aal_aal5(ChoiceVal)]
end.
'enc_NewATMVCCommand_aal_aal1'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_NewATMVCCommand_aal_aal1_clockRecovery(Enc2@element)
end,
begin
Enc3@element = element(3, Val),
enc_NewATMVCCommand_aal_aal1_errorCorrection(Enc3@element)
end|begin
Enc4@element = element(4, Val),
Enc6@element = element(5, Val),
if Enc4@element =:= false ->
if Enc6@element =:= false ->
<<0:1,0:1>>;
Enc6@element =:= true ->
<<0:1,1:1>>
end;
Enc4@element =:= true ->
if Enc6@element =:= false ->
<<1:1,0:1>>;
Enc6@element =:= true ->
<<1:1,1:1>>
end
end
end].
'enc_NewATMVCCommand_aal_aal1_clockRecovery'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nullClockRecovery ->
<<0:1,0:2>>;
ChoiceTag =:= srtsClockRecovery ->
<<0:1,1:2>>;
ChoiceTag =:= adaptiveClockRecovery ->
<<0:1,2:2>>
end.

dec_NewATMVCCommand_aal_aal1_clockRecovery(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{nullClockRecovery,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{srtsClockRecovery,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{adaptiveClockRecovery,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_NewATMVCCommand_aal_aal1_errorCorrection'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nullErrorCorrection ->
<<0:1,0:2>>;
ChoiceTag =:= longInterleaver ->
<<0:1,1:2>>;
ChoiceTag =:= shortInterleaver ->
<<0:1,2:2>>;
ChoiceTag =:= errorCorrectionOnly ->
<<0:1,3:2>>
end.

dec_NewATMVCCommand_aal_aal1_errorCorrection(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{nullErrorCorrection,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{longInterleaver,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{shortInterleaver,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{errorCorrectionOnly,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_NewATMVCCommand_aal_aal1(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_NewATMVCCommand_aal_aal1_clockRecovery'(Bytes1),

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_NewATMVCCommand_aal_aal1_errorCorrection'(Bytes2),

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes3,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes4,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'NewATMVCCommand_aal_aal1',Term1,Term2,Term3,Term4},Bytes7}.

'enc_NewATMVCCommand_aal_aal5'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element bsr 16 =:= 0 ->
<<Enc4@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].

dec_NewATMVCCommand_aal_aal5(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'NewATMVCCommand_aal_aal5',Term1,Term2},Bytes5}.


dec_NewATMVCCommand_aal(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_NewATMVCCommand_aal_aal1'(Bytes2)
end,
{{aal1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_NewATMVCCommand_aal_aal5'(Bytes2)
end,
{{aal5,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_NewATMVCCommand_multiplex'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= noMultiplex ->
<<0:1,0:2>>;
ChoiceTag =:= transportStream ->
<<0:1,1:2>>;
ChoiceTag =:= programStream ->
<<0:1,2:2>>
end.

dec_NewATMVCCommand_multiplex(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noMultiplex,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{transportStream,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{programStream,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_NewATMVCCommand_reverseParameters'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc6@element = element(4, Val),
if Enc4@element =:= false ->
if Enc6@element =:= false ->
<<0:1,0:1>>;
Enc6@element =:= true ->
<<0:1,1:1>>
end;
Enc4@element =:= true ->
if Enc6@element =:= false ->
<<1:1,0:1>>;
Enc6@element =:= true ->
<<1:1,1:1>>
end
end
end|begin
Enc8@element = element(5, Val),
enc_NewATMVCCommand_reverseParameters_multiplex(Enc8@element)
end].
'enc_NewATMVCCommand_reverseParameters_multiplex'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= noMultiplex ->
<<0:1,0:2>>;
ChoiceTag =:= transportStream ->
<<0:1,1:2>>;
ChoiceTag =:= programStream ->
<<0:1,2:2>>
end.

dec_NewATMVCCommand_reverseParameters_multiplex(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noMultiplex,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{transportStream,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{programStream,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_NewATMVCCommand_reverseParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type CHOICE
{Term4,Bytes5} = 'dec_NewATMVCCommand_reverseParameters_multiplex'(Bytes4),

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'NewATMVCCommand_reverseParameters',Term1,Term2,Term3,Term4},Bytes7}.



dec_NewATMVCCommand(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type CHOICE
{Term5,Bytes6} = 'dec_NewATMVCCommand_aal'(Bytes5),

%% attribute number 6 with type CHOICE
{Term6,Bytes7} = 'dec_NewATMVCCommand_multiplex'(Bytes6),

%% attribute number 7 with type SEQUENCE
{Term7,Bytes8} = 'dec_NewATMVCCommand_reverseParameters'(Bytes7),

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V6@V0,V6@Buf1} = case Bytes8 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'NewATMVCCommand',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes10}.

'enc_MobileMultilinkReconfigurationCommand'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 255 ->
[<<0:1,Enc2@element@sub:8>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 255 ->
Enc4@element@sub;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
enc_MobileMultilinkReconfigurationCommand_status(Enc6@element)
end].
'enc_MobileMultilinkReconfigurationCommand_status'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= synchronized ->
<<0:1,0:1>>;
ChoiceTag =:= reconfiguration ->
<<0:1,1:1>>
end.

dec_MobileMultilinkReconfigurationCommand_status(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{synchronized,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{reconfiguration,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_MobileMultilinkReconfigurationCommand(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:8/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type CHOICE
{Term3,Bytes4} = 'dec_MobileMultilinkReconfigurationCommand_status'(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'MobileMultilinkReconfigurationCommand',Term1,Term2,Term3},Bytes6}.

'enc_FunctionNotUnderstood'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= request ->
[<<0:2>>|enc_RequestMessage(ChoiceVal)];
ChoiceTag =:= response ->
[<<1:2>>|enc_ResponseMessage(ChoiceVal)];
ChoiceTag =:= command ->
[<<2:2>>|enc_CommandMessage(ChoiceVal)]
end.


dec_FunctionNotUnderstood(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_RequestMessage(Bytes1)
end,
{{request,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_ResponseMessage(Bytes1)
end,
{{response,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_CommandMessage(Bytes1)
end,
{{command,Val},NewBytes}
end.
'enc_FunctionNotSupported'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_FunctionNotSupported_cause(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@len = byte_size(Enc4@element),
if Enc5@len < 128 ->
[align,
Enc5@len|Enc4@element];
Enc5@len < 16384 ->
[align,
<<2:2,Enc5@len:14>>|Enc4@element];
true ->
[align|encode_fragmented(Enc4@element, 8)]
end
end
end
end].
'enc_FunctionNotSupported_cause'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= syntaxError ->
<<0:1,0:2>>;
ChoiceTag =:= semanticError ->
<<0:1,1:2>>;
ChoiceTag =:= unknownFunction ->
<<0:1,2:2>>
end.

dec_FunctionNotSupported_cause(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{syntaxError,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{semanticError,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unknownFunction,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_FunctionNotSupported(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes3} = 'dec_FunctionNotSupported_cause'(Bytes2),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
V3@Pad3 = bit_size(Bytes3) band 7,
{V3@V0,V3@Buf1} = case Bytes3 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'FunctionNotSupported',Term1,Term2},Bytes6}.

'enc_ConferenceIndication'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= sbeNumber ->
if 0 =< ChoiceVal, ChoiceVal < 10 ->
<<0:1,0:4,ChoiceVal:4>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= terminalNumberAssign ->
[<<0:1,1:4>>|enc_TerminalLabel(ChoiceVal)];
ChoiceTag =:= terminalJoinedConference ->
[<<0:1,2:4>>|enc_TerminalLabel(ChoiceVal)];
ChoiceTag =:= terminalLeftConference ->
[<<0:1,3:4>>|enc_TerminalLabel(ChoiceVal)];
ChoiceTag =:= seenByAtLeastOneOther ->
<<0:1,4:4>>;
ChoiceTag =:= cancelSeenByAtLeastOneOther ->
<<0:1,5:4>>;
ChoiceTag =:= seenByAll ->
<<0:1,6:4>>;
ChoiceTag =:= cancelSeenByAll ->
<<0:1,7:4>>;
ChoiceTag =:= terminalYouAreSeeing ->
[<<0:1,8:4>>|enc_TerminalLabel(ChoiceVal)];
ChoiceTag =:= requestForFloor ->
<<0:1,9:4>>;
ChoiceTag =:= withdrawChairToken ->
begin
Enc12@output = [],
Enc12@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc12@bin]
end;
ChoiceTag =:= floorRequested ->
begin
Enc13@output = enc_TerminalLabel(ChoiceVal),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[<<1:1,1:7>>,
align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc13@bin, 8)]
end
end;
ChoiceTag =:= terminalYouAreSeeingInSubPictureNumber ->
begin
Enc14@output = enc_TerminalYouAreSeeingInSubPictureNumber(ChoiceVal),
Enc14@bin = complete(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[<<1:1,2:7>>,
align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc14@bin, 8)]
end
end;
ChoiceTag =:= videoIndicateCompose ->
begin
Enc15@output = enc_VideoIndicateCompose(ChoiceVal),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[<<1:1,3:7>>,
align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc15@bin, 8)]
end
end
end.


dec_ConferenceIndication(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:4/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V0,V2@Buf1}
end
end,
{{sbeNumber,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_TerminalLabel(Bytes2)
end,
{{terminalNumberAssign,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_TerminalLabel(Bytes2)
end,
{{terminalJoinedConference,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_TerminalLabel(Bytes2)
end,
{{terminalLeftConference,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{seenByAtLeastOneOther,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{cancelSeenByAtLeastOneOther,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{seenByAll,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{cancelSeenByAll,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_TerminalLabel(Bytes2)
end,
{{terminalYouAreSeeing,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{requestForFloor,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{withdrawChairToken,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_TerminalLabel(V2@V0),
{TmpVal,V2@Buf1}
end,
{{floorRequested,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_TerminalYouAreSeeingInSubPictureNumber(V2@V0),
{TmpVal,V2@Buf1}
end,
{{terminalYouAreSeeingInSubPictureNumber,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_VideoIndicateCompose(V2@V0),
{TmpVal,V2@Buf1}
end,
{{videoIndicateCompose,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_TerminalYouAreSeeingInSubPictureNumber'(Val) ->
[begin
Enc2@element = element(2, Val),
if 0 =< Enc2@element, Enc2@element < 193 ->
[<<0:1,Enc2@element:8>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
align|begin
Enc4@element = element(3, Val),
if Enc4@element bsr 8 =:= 0 ->
[Enc4@element];
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].


dec_TerminalYouAreSeeingInSubPictureNumber(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:8/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'TerminalYouAreSeeingInSubPictureNumber',Term1,Term2},Bytes5}.

'enc_VideoIndicateCompose'(Val) ->
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.


dec_VideoIndicateCompose(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'VideoIndicateCompose',Term1},Bytes4}.

'enc_MiscellaneousIndication'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
enc_MiscellaneousIndication_type(Enc4@element)
end].
'enc_MiscellaneousIndication_type'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= logicalChannelActive ->
<<0:1,0:4>>;
ChoiceTag =:= logicalChannelInactive ->
<<0:1,1:4>>;
ChoiceTag =:= multipointConference ->
<<0:1,2:4>>;
ChoiceTag =:= cancelMultipointConference ->
<<0:1,3:4>>;
ChoiceTag =:= multipointZeroComm ->
<<0:1,4:4>>;
ChoiceTag =:= cancelMultipointZeroComm ->
<<0:1,5:4>>;
ChoiceTag =:= multipointSecondaryStatus ->
<<0:1,6:4>>;
ChoiceTag =:= cancelMultipointSecondaryStatus ->
<<0:1,7:4>>;
ChoiceTag =:= videoIndicateReadyToActivate ->
<<0:1,8:4>>;
ChoiceTag =:= videoTemporalSpatialTradeOff ->
if ChoiceVal bsr 5 =:= 0 ->
<<0:1,9:4,ChoiceVal:5>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= videoNotDecodedMBs ->
begin
Enc12@output = enc_MiscellaneousIndication_type_videoNotDecodedMBs(ChoiceVal),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[<<1:1,0:7>>,
align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc12@bin, 8)]
end
end;
ChoiceTag =:= transportCapability ->
begin
Enc13@output = enc_TransportCapability(ChoiceVal),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[<<1:1,1:7>>,
align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc13@bin, 8)]
end
end
end.
'enc_MiscellaneousIndication_type_videoNotDecodedMBs'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if Enc2@element@sub bsr 13 =:= 0 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if Enc4@element@sub bsr 13 =:= 0 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
if Enc6@element bsr 8 =:= 0 ->
[Enc6@element];
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end].

dec_MiscellaneousIndication_type_videoNotDecodedMBs(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:1/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:7,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:7,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'MiscellaneousIndication_type_videoNotDecodedMBs',Term1,Term2,Term3},Bytes6}.


dec_MiscellaneousIndication_type(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{logicalChannelActive,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{logicalChannelInactive,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{multipointConference,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{cancelMultipointConference,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{multipointZeroComm,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{cancelMultipointZeroComm,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{multipointSecondaryStatus,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{cancelMultipointSecondaryStatus,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{videoIndicateReadyToActivate,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
<<V11@V0:5/unsigned-unit:1,V11@Buf1/bitstring>> = Bytes2,
{V11@V0,V11@Buf1}
end
end,
{{videoTemporalSpatialTradeOff,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_MiscellaneousIndication_type_videoNotDecodedMBs'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{videoNotDecodedMBs,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_TransportCapability(V2@V0),
{TmpVal,V2@Buf1}
end,
{{transportCapability,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_MiscellaneousIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_MiscellaneousIndication_type'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MiscellaneousIndication',Term1,Term2},Bytes5}.

'enc_JitterIndication'(Val) ->
[begin
Enc1@element = element(5, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
enc_JitterIndication_scope(Enc4@element)
end,
begin
Enc5@element = element(3, Val),
if Enc5@element bsr 2 =:= 0 ->
<<Enc5@element:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(4, Val),
if Enc7@element bsr 3 =:= 0 ->
<<Enc7@element:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element bsr 4 =:= 0 ->
<<Enc9@element:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@element}}})
end
end|begin
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
Enc12@element bsr 18 =:= 0 ->
begin
Enc12@element@bin = binary:encode_unsigned(Enc12@element),
Enc12@element@bin_size0 = byte_size(Enc12@element@bin),
Enc12@element@bin_size = Enc12@element@bin_size0 - 1,
[<<Enc12@element@bin_size:2>>,
align|Enc12@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc12@element}}})
end
end].
'enc_JitterIndication_scope'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= logicalChannelNumber ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:2>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= resourceID ->
if ChoiceVal bsr 16 =:= 0 ->
[<<1:2>>,
align|<<ChoiceVal:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= wholeMultiplex ->
<<2:2>>
end.

dec_JitterIndication_scope(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end
end,
{{logicalChannelNumber,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes1) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes1,
{V3@V0,V3@Buf1}
end
end,
{{resourceID,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{wholeMultiplex,Val},NewBytes}
end.


dec_JitterIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes3} = 'dec_JitterIndication_scope'(Bytes2),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
<<V4@V0:3/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes4,
{V4@V0,V4@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:4/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes5,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = case Opt band 1 of
1 ->
begin
<<V6@V0:2/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes6,
V6@Add2 = V6@V0 + 1,
V6@Pad5 = bit_size(V6@Buf1) band 7,
<<_:V6@Pad5,V6@V3:V6@Add2/unsigned-unit:8,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V3,V6@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'JitterIndication',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_H223SkewIndication'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
if Enc6@element bsr 12 =:= 0 ->
<<Enc6@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end].


dec_H223SkewIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:7,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:7,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'H223SkewIndication',Term1,Term2,Term3},Bytes6}.

'enc_H2250MaximumSkewIndication'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
if Enc6@element bsr 12 =:= 0 ->
<<Enc6@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end].


dec_H2250MaximumSkewIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:7,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:7,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'H2250MaximumSkewIndication',Term1,Term2,Term3},Bytes6}.

'enc_MCLocationIndication'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_TransportAddress(Enc2@element)
end].


dec_MCLocationIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type TransportAddress
{Term1,Bytes2} = dec_TransportAddress(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MCLocationIndication',Term1},Bytes4}.

'enc_VendorIdentification'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
enc_NonStandardIdentifier(Enc4@element)
end,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@len = byte_size(Enc5@element),
Enc6@len@sub = Enc6@len - 1,
if Enc6@len@sub bsr 8 =:= 0 ->
[align,
Enc6@len@sub|Enc5@element]
end
end
end
end|begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@len = byte_size(Enc8@element),
Enc9@len@sub = Enc9@len - 1,
if Enc9@len@sub bsr 8 =:= 0 ->
[align,
Enc9@len@sub|Enc8@element]
end
end
end
end].


dec_VendorIdentification(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardIdentifier
{Term1,Bytes3} = dec_NonStandardIdentifier(Bytes2),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes3) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes3,
V3@Add4 = V3@V0 + 1,
<<V3@V5:V3@Add4/binary-unit:8,V3@Buf6/bitstring>> = V3@Buf1,
V3@Conv7 = binary:copy(V3@V5),
{V3@Conv7,V3@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = case Opt band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes4) band 7,
<<_:V4@Pad2,V4@V0:1/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes4,
V4@Add4 = V4@V0 + 1,
<<V4@V5:V4@Add4/binary-unit:8,V4@Buf6/bitstring>> = V4@Buf1,
V4@Conv7 = binary:copy(V4@V5),
{V4@Conv7,V4@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'VendorIdentification',Term1,Term2,Term3},Bytes7}.

'enc_NewATMVCIndication'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 8, 9),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[if Extensions =:= [] ->
<<0:1>>;
true ->
<<1:1>>
end,
align,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 16 =:= 0 ->
<<Enc3@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
begin
Enc5@element = element(3, Val),
Enc5@element@sub = Enc5@element - 1,
if 0 =< Enc5@element@sub, Enc5@element@sub < 65535 ->
<<Enc5@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(4, Val),
Enc9@element = element(5, Val),
if Enc7@element =:= false ->
if Enc9@element =:= false ->
<<0:1,0:1>>;
Enc9@element =:= true ->
<<0:1,1:1>>
end;
Enc7@element =:= true ->
if Enc9@element =:= false ->
<<1:1,0:1>>;
Enc9@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@element = element(6, Val),
enc_NewATMVCIndication_aal(Enc11@element)
end,
begin
Enc12@element = element(7, Val),
enc_NewATMVCIndication_multiplex(Enc12@element)
end,
Extensions|begin
Enc13@element = element(8, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@output = enc_NewATMVCIndication_reverseParameters(Enc13@element),
Enc14@bin = complete(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[align|encode_fragmented(Enc14@bin, 8)]
end
end
end
end].
'enc_NewATMVCIndication_aal'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= aal1 ->
[<<0:1,0:1>>|enc_NewATMVCIndication_aal_aal1(ChoiceVal)];
ChoiceTag =:= aal5 ->
[<<0:1,1:1>>|enc_NewATMVCIndication_aal_aal5(ChoiceVal)]
end.
'enc_NewATMVCIndication_aal_aal1'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_NewATMVCIndication_aal_aal1_clockRecovery(Enc2@element)
end,
begin
Enc3@element = element(3, Val),
enc_NewATMVCIndication_aal_aal1_errorCorrection(Enc3@element)
end|begin
Enc4@element = element(4, Val),
Enc6@element = element(5, Val),
if Enc4@element =:= false ->
if Enc6@element =:= false ->
<<0:1,0:1>>;
Enc6@element =:= true ->
<<0:1,1:1>>
end;
Enc4@element =:= true ->
if Enc6@element =:= false ->
<<1:1,0:1>>;
Enc6@element =:= true ->
<<1:1,1:1>>
end
end
end].
'enc_NewATMVCIndication_aal_aal1_clockRecovery'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nullClockRecovery ->
<<0:1,0:2>>;
ChoiceTag =:= srtsClockRecovery ->
<<0:1,1:2>>;
ChoiceTag =:= adaptiveClockRecovery ->
<<0:1,2:2>>
end.

dec_NewATMVCIndication_aal_aal1_clockRecovery(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{nullClockRecovery,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{srtsClockRecovery,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{adaptiveClockRecovery,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_NewATMVCIndication_aal_aal1_errorCorrection'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nullErrorCorrection ->
<<0:1,0:2>>;
ChoiceTag =:= longInterleaver ->
<<0:1,1:2>>;
ChoiceTag =:= shortInterleaver ->
<<0:1,2:2>>;
ChoiceTag =:= errorCorrectionOnly ->
<<0:1,3:2>>
end.

dec_NewATMVCIndication_aal_aal1_errorCorrection(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{nullErrorCorrection,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{longInterleaver,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{shortInterleaver,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{errorCorrectionOnly,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_NewATMVCIndication_aal_aal1(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_NewATMVCIndication_aal_aal1_clockRecovery'(Bytes1),

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_NewATMVCIndication_aal_aal1_errorCorrection'(Bytes2),

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes3,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes4,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'NewATMVCIndication_aal_aal1',Term1,Term2,Term3,Term4},Bytes7}.

'enc_NewATMVCIndication_aal_aal5'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
[<<0:1>>,
align|<<Enc2@element:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element bsr 16 =:= 0 ->
<<Enc4@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].

dec_NewATMVCIndication_aal_aal5(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'NewATMVCIndication_aal_aal5',Term1,Term2},Bytes5}.


dec_NewATMVCIndication_aal(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_NewATMVCIndication_aal_aal1'(Bytes2)
end,
{{aal1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_NewATMVCIndication_aal_aal5'(Bytes2)
end,
{{aal5,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_NewATMVCIndication_multiplex'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= noMultiplex ->
<<0:1,0:2>>;
ChoiceTag =:= transportStream ->
<<0:1,1:2>>;
ChoiceTag =:= programStream ->
<<0:1,2:2>>
end.

dec_NewATMVCIndication_multiplex(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noMultiplex,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{transportStream,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{programStream,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_NewATMVCIndication_reverseParameters'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc6@element = element(4, Val),
if Enc4@element =:= false ->
if Enc6@element =:= false ->
<<0:1,0:1>>;
Enc6@element =:= true ->
<<0:1,1:1>>
end;
Enc4@element =:= true ->
if Enc6@element =:= false ->
<<1:1,0:1>>;
Enc6@element =:= true ->
<<1:1,1:1>>
end
end
end|begin
Enc8@element = element(5, Val),
enc_NewATMVCIndication_reverseParameters_multiplex(Enc8@element)
end].
'enc_NewATMVCIndication_reverseParameters_multiplex'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= noMultiplex ->
<<0:1,0:2>>;
ChoiceTag =:= transportStream ->
<<0:1,1:2>>;
ChoiceTag =:= programStream ->
<<0:1,2:2>>
end.

dec_NewATMVCIndication_reverseParameters_multiplex(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noMultiplex,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{transportStream,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{programStream,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_NewATMVCIndication_reverseParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type CHOICE
{Term4,Bytes5} = 'dec_NewATMVCIndication_reverseParameters_multiplex'(Bytes4),

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'NewATMVCIndication_reverseParameters',Term1,Term2,Term3,Term4},Bytes7}.



dec_NewATMVCIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type CHOICE
{Term5,Bytes6} = 'dec_NewATMVCIndication_aal'(Bytes5),

%% attribute number 6 with type CHOICE
{Term6,Bytes7} = 'dec_NewATMVCIndication_multiplex'(Bytes6),

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,

%% attribute number 7 with type SEQUENCE
{Term7,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx7,_} = 'dec_NewATMVCIndication_reverseParameters'(V7@V0),
{TmpValx7,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,
Bytes10= skipextensions(Bytes9, 2, Extensions),
{{'NewATMVCIndication',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes10}.

'enc_UserInputIndication'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:1>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= alphanumeric ->
begin
Enc3@bin = iolist_to_binary(ChoiceVal),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 128 ->
[<<0:1,1:1>>,
align,
Enc3@len|Enc3@bin];
Enc3@len < 16384 ->
[<<0:1,1:1>>,
align,
<<2:2,Enc3@len:14>>|Enc3@bin];
true ->
[<<0:1,1:1>>,
align|encode_fragmented(Enc3@bin, 8)]
end
end;
ChoiceTag =:= userInputSupportIndication ->
begin
Enc4@output = enc_UserInputIndication_userInputSupportIndication(ChoiceVal),
Enc4@bin = complete(Enc4@output),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[<<1:1,0:7>>,
align,
Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc4@bin, 8)]
end
end;
ChoiceTag =:= signal ->
begin
Enc5@output = enc_UserInputIndication_signal(ChoiceVal),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[<<1:1,1:7>>,
align,
Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc5@bin, 8)]
end
end;
ChoiceTag =:= signalUpdate ->
begin
Enc6@output = enc_UserInputIndication_signalUpdate(ChoiceVal),
Enc6@bin = complete(Enc6@output),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[<<1:1,2:7>>,
align,
Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc6@bin, 8)]
end
end;
ChoiceTag =:= extendedAlphanumeric ->
begin
Enc7@output = enc_UserInputIndication_extendedAlphanumeric(ChoiceVal),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[<<1:1,3:7>>,
align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc7@bin, 8)]
end
end
end.
'enc_UserInputIndication_userInputSupportIndication'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:2>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= basicString ->
<<0:1,1:2>>;
ChoiceTag =:= iA5String ->
<<0:1,2:2>>;
ChoiceTag =:= generalString ->
<<0:1,3:2>>
end.

dec_UserInputIndication_userInputSupportIndication(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{basicString,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{iA5String,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{generalString,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_UserInputIndication_signal'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 5, 6),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(4, Val),
if Enc2@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
Enc6@bin = list_to_binary(Enc5@element),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len =:= 1 ->
Enc6@bin
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@element@sub = Enc7@element - 1,
if 0 =< Enc7@element@sub, Enc7@element@sub < 65535 ->
[align|<<Enc7@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end
end
end,
begin
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_UserInputIndication_signal_rtp(Enc10@element)
end
end,
Extensions|begin
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@output = [],
Enc13@bin = <<0:8>>,
[align,
1|Enc13@bin]
end
end
end].
'enc_UserInputIndication_signal_rtp'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
Enc4@element bsr 32 =:= 0 ->
begin
Enc4@element@bin = binary:encode_unsigned(Enc4@element),
Enc4@element@bin_size0 = byte_size(Enc4@element@bin),
Enc4@element@bin_size = Enc4@element@bin_size0 - 1,
[<<Enc4@element@bin_size:2>>,
align|Enc4@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
Enc7@element bsr 32 =:= 0 ->
begin
Enc7@element@bin = binary:encode_unsigned(Enc7@element),
Enc7@element@bin_size0 = byte_size(Enc7@element@bin),
Enc7@element@bin_size = Enc7@element@bin_size0 - 1,
[<<Enc7@element@bin_size:2>>,
align|Enc7@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
align|begin
Enc10@element = element(4, Val),
Enc10@element@sub = Enc10@element - 1,
if 0 =< Enc10@element@sub, Enc10@element@sub < 65535 ->
<<Enc10@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end].

dec_UserInputIndication_signal_rtp(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:2/unsigned-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Add4 = V5@V0 + 1,
{V5@Add4,V5@Buf1}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:7,0:1,V6@V7:7,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<_:7,1:1,0:1,V6@V8:14,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'UserInputIndication_signal_rtp',Term1,Term2,Term3},Bytes7}.


dec_UserInputIndication_signal(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type IA5String
{Term1,Bytes3} = begin
<<V3@V0:1/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv2 = binary_to_list(V3@V0),
{V3@Conv2,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_UserInputIndication_signal_rtp'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 4 with type NULL
{Term4,Bytes7} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes6) band 7,
{V6@V0,V6@Buf1} = case Bytes6 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx4,_} = begin
ignore,
{'NULL',V6@V0}
end,
{TmpValx4,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,
Bytes8= skipextensions(Bytes7, 2, Extensions),
{{'UserInputIndication_signal',Term1,Term2,Term3,Term4},Bytes8}.

'enc_UserInputIndication_signalUpdate'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc3@element@sub = Enc3@element - 1,
if 0 =< Enc3@element@sub, Enc3@element@sub < 65535 ->
<<Enc3@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end|begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_UserInputIndication_signalUpdate_rtp(Enc5@element)
end
end].
'enc_UserInputIndication_signalUpdate_rtp'(Val) ->
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
[<<0:1>>,
align|<<Enc2@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end.

dec_UserInputIndication_signalUpdate_rtp(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UserInputIndication_signalUpdate_rtp',Term1},Bytes4}.


dec_UserInputIndication_signalUpdate(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_UserInputIndication_signalUpdate_rtp'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'UserInputIndication_signalUpdate',Term1,Term2},Bytes6}.

'enc_UserInputIndication_extendedAlphanumeric'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc4@bin = iolist_to_binary(Enc3@element),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
encode_fragmented(Enc4@bin, 8)
end
end|begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
[]
end
end].

dec_UserInputIndication_extendedAlphanumeric(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type GeneralString
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@Conv10,V3@Buf9}
end,

%% attribute number 2 with type NULL
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
ignore,
{'NULL',Bytes3}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'UserInputIndication_extendedAlphanumeric',Term1,Term2},Bytes6}.



dec_UserInputIndication(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/binary-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
V2@Conv10 = binary_to_list(V2@V8),
{V2@Conv10,V2@Buf9}
end
end,
{{alphanumeric,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_UserInputIndication_userInputSupportIndication'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{userInputSupportIndication,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_UserInputIndication_signal'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{signal,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_UserInputIndication_signalUpdate'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{signalUpdate,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_UserInputIndication_extendedAlphanumeric'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{extendedAlphanumeric,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_FlowControlIndication'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_FlowControlIndication_scope(Enc2@element)
end|begin
Enc3@element = element(3, Val),
enc_FlowControlIndication_restriction(Enc3@element)
end].
'enc_FlowControlIndication_scope'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= logicalChannelNumber ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
[<<0:2>>,
align|<<ChoiceVal@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= resourceID ->
if ChoiceVal bsr 16 =:= 0 ->
[<<1:2>>,
align|<<ChoiceVal:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= wholeMultiplex ->
<<2:2>>
end.

dec_FlowControlIndication_scope(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end
end,
{{logicalChannelNumber,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes1) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes1,
{V3@V0,V3@Buf1}
end
end,
{{resourceID,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{wholeMultiplex,Val},NewBytes}
end.
'enc_FlowControlIndication_restriction'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= maximumBitRate ->
if ChoiceVal bsr 24 =:= 0 ->
[<<0:1>>|begin
ChoiceVal@bin = binary:encode_unsigned(ChoiceVal),
ChoiceVal@bin_size0 = byte_size(ChoiceVal@bin),
ChoiceVal@bin_size = ChoiceVal@bin_size0 - 1,
[<<ChoiceVal@bin_size:2>>,
align|ChoiceVal@bin]
end];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= noRestriction ->
<<1:1>>
end.

dec_FlowControlIndication_restriction(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V3,V2@Buf4}
end
end,
{{maximumBitRate,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{noRestriction,Val},NewBytes}
end.


dec_FlowControlIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_FlowControlIndication_scope'(Bytes1),

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_FlowControlIndication_restriction'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V2@V0,V2@Buf1} = case Bytes3 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'FlowControlIndication',Term1,Term2},Bytes5}.

'enc_MobileMultilinkReconfigurationIndication'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 255 ->
[<<0:1,Enc2@element@sub:8>>];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 255 ->
[Enc4@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].


dec_MobileMultilinkReconfigurationIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:8/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'MobileMultilinkReconfigurationIndication',Term1,Term2},Bytes5}.


%%%
%%% Run-time functions.
%%%

dec_components1(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components1(Num, Bytes, Acc) ->
{Term,Remain} = dec_CapabilityTableEntry(Bytes),
dec_components1(Num-1, Remain, [Term|Acc]).

dec_components10(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components10(Num, Bytes, Acc) ->
{Term,Remain} = dec_MediaChannelCapability(Bytes),
dec_components10(Num-1, Remain, [Term|Acc]).

dec_components11(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components11(Num, Bytes, Acc) ->
{Term,Remain} = begin
V5@Pad2 = bit_size(Bytes) band 7,
<<_:V5@Pad2,V5@V0:2/unsigned-unit:8,V5@Buf1/bitstring>> = Bytes,
V5@Add4 = V5@V0 + 1,
{V5@Add4,V5@Buf1}
end,
dec_components11(Num-1, Remain, [Term|Acc]).

dec_components12(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components12(Num, Bytes, Acc) ->
{Term,Remain} = dec_RTPH263VideoRedundancyFrameMapping(Bytes),
dec_components12(Num-1, Remain, [Term|Acc]).

dec_components13(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components13(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V6@V0:4/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes,
{V6@V0,V6@Buf1}
end,
dec_components13(Num-1, Remain, [Term|Acc]).

dec_components14(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components14(Num, Bytes, Acc) ->
{Term,Remain} = begin
V7@Pad2 = bit_size(Bytes) band 7,
<<_:V7@Pad2,V7@V0:1/unsigned-unit:8,V7@Buf1/bitstring>> = Bytes,
{V7@V0,V7@Buf1}
end,
dec_components14(Num-1, Remain, [Term|Acc]).

dec_components15(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components15(Num, Bytes, Acc) ->
{Term,Remain} = dec_MediaDistributionCapability(Bytes),
dec_components15(Num-1, Remain, [Term|Acc]).

dec_components16(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components16(Num, Bytes, Acc) ->
{Term,Remain} = dec_DataApplicationCapability(Bytes),
dec_components16(Num-1, Remain, [Term|Acc]).

dec_components17(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components17(Num, Bytes, Acc) ->
{Term,Remain} = dec_DataApplicationCapability(Bytes),
dec_components17(Num-1, Remain, [Term|Acc]).

dec_components18(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components18(Num, Bytes, Acc) ->
{Term,Remain} = dec_EnhancementOptions(Bytes),
dec_components18(Num-1, Remain, [Term|Acc]).

dec_components19(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components19(Num, Bytes, Acc) ->
{Term,Remain} = dec_EnhancementOptions(Bytes),
dec_components19(Num-1, Remain, [Term|Acc]).

dec_components2(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components2(Num, Bytes, Acc) ->
{Term,Remain} = dec_CapabilityDescriptor(Bytes),
dec_components2(Num-1, Remain, [Term|Acc]).

dec_components20(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components20(Num, Bytes, Acc) ->
{Term,Remain} = dec_BEnhancementParameters(Bytes),
dec_components20(Num-1, Remain, [Term|Acc]).

dec_components21(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components21(Num, Bytes, Acc) ->
{Term,Remain} = dec_CustomPictureClockFrequency(Bytes),
dec_components21(Num-1, Remain, [Term|Acc]).

dec_components22(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components22(Num, Bytes, Acc) ->
{Term,Remain} = dec_CustomPictureFormat(Bytes),
dec_components22(Num-1, Remain, [Term|Acc]).

dec_components23(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components23(Num, Bytes, Acc) ->
{Term,Remain} = dec_H263VideoModeCombos(Bytes),
dec_components23(Num-1, Remain, [Term|Acc]).

dec_components24(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components24(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CustomPictureFormat_mPI_customPCF_SETOF'(Bytes),
dec_components24(Num-1, Remain, [Term|Acc]).

dec_components25(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components25(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V8@V0:4/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes,
V8@Add2 = V8@V0 + 1,
{V8@Add2,V8@Buf1}
end,
dec_components25(Num-1, Remain, [Term|Acc]).

dec_components26(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components26(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CustomPictureFormat_pixelAspectInformation_extendedPAR_SETOF'(Bytes),
dec_components26(Num-1, Remain, [Term|Acc]).

dec_components27(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components27(Num, Bytes, Acc) ->
{Term,Remain} = dec_H263ModeComboFlags(Bytes),
dec_components27(Num-1, Remain, [Term|Acc]).

dec_components28(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components28(Num, Bytes, Acc) ->
{Term,Remain} = dec_MediaEncryptionAlgorithm(Bytes),
dec_components28(Num-1, Remain, [Term|Acc]).

dec_components29(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components29(Num, Bytes, Acc) ->
{Term,Remain} = dec_NonStandardParameter(Bytes),
dec_components29(Num-1, Remain, [Term|Acc]).

dec_components3(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components3(Num, Bytes, Acc) ->
{Term,Remain} = dec_AlternativeCapabilitySet(Bytes),
dec_components3(Num-1, Remain, [Term|Acc]).

dec_components30(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components30(Num, Bytes, Acc) ->
{Term,Remain} = dec_NonStandardParameter(Bytes),
dec_components30(Num-1, Remain, [Term|Acc]).

dec_components31(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components31(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericParameter(Bytes),
dec_components31(Num-1, Remain, [Term|Acc]).

dec_components32(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components32(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericParameter(Bytes),
dec_components32(Num-1, Remain, [Term|Acc]).

dec_components33(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components33(Num, Bytes, Acc) ->
{Term,Remain} = dec_ParameterIdentifier(Bytes),
dec_components33(Num-1, Remain, [Term|Acc]).

dec_components34(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components34(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericParameter(Bytes),
dec_components34(Num-1, Remain, [Term|Acc]).

dec_components35(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components35(Num, Bytes, Acc) ->
{Term,Remain} = dec_AlternativeCapabilitySet(Bytes),
dec_components35(Num-1, Remain, [Term|Acc]).

dec_components36(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components36(Num, Bytes, Acc) ->
{Term,Remain} = dec_AlternativeCapabilitySet(Bytes),
dec_components36(Num-1, Remain, [Term|Acc]).

dec_components37(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components37(Num, Bytes, Acc) ->
{Term,Remain} = dec_NonStandardParameter(Bytes),
dec_components37(Num-1, Remain, [Term|Acc]).

dec_components38(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components38(Num, Bytes, Acc) ->
{Term,Remain} = dec_RedundancyEncodingElement(Bytes),
dec_components38(Num-1, Remain, [Term|Acc]).

dec_components39(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components39(Num, Bytes, Acc) ->
{Term,Remain} = dec_MultiplePayloadStreamElement(Bytes),
dec_components39(Num-1, Remain, [Term|Acc]).

dec_components4(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components4(Num, Bytes, Acc) ->
{Term,Remain} = begin
V9@Pad2 = bit_size(Bytes) band 7,
<<_:V9@Pad2,V9@V0:2/unsigned-unit:8,V9@Buf1/bitstring>> = Bytes,
V9@Add4 = V9@V0 + 1,
{V9@Add4,V9@Buf1}
end,
dec_components4(Num-1, Remain, [Term|Acc]).

dec_components40(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components40(Num, Bytes, Acc) ->
{Term,Remain} = begin
V10@Pad2 = bit_size(Bytes) band 7,
<<_:V10@Pad2,V10@V0:4/binary-unit:8,V10@Buf1/bitstring>> = Bytes,
V10@Conv4 = binary:copy(V10@V0),
{V10@Conv4,V10@Buf1}
end,
dec_components40(Num-1, Remain, [Term|Acc]).

dec_components41(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components41(Num, Bytes, Acc) ->
{Term,Remain} = dec_EscrowData(Bytes),
dec_components41(Num-1, Remain, [Term|Acc]).

dec_components42(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components42(Num, Bytes, Acc) ->
{Term,Remain} = dec_NonStandardParameter(Bytes),
dec_components42(Num-1, Remain, [Term|Acc]).

dec_components43(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components43(Num, Bytes, Acc) ->
{Term,Remain} = dec_MultiplexEntryDescriptor(Bytes),
dec_components43(Num-1, Remain, [Term|Acc]).

dec_components44(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components44(Num, Bytes, Acc) ->
{Term,Remain} = dec_MultiplexElement(Bytes),
dec_components44(Num-1, Remain, [Term|Acc]).

dec_components45(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components45(Num, Bytes, Acc) ->
{Term,Remain} = dec_MultiplexElement(Bytes),
dec_components45(Num-1, Remain, [Term|Acc]).

dec_components46(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components46(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V11@V0:4/unsigned-unit:1,V11@Buf1/bitstring>> = Bytes,
V11@Add2 = V11@V0 + 1,
{V11@Add2,V11@Buf1}
end,
dec_components46(Num-1, Remain, [Term|Acc]).

dec_components47(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components47(Num, Bytes, Acc) ->
{Term,Remain} = dec_MultiplexEntryRejectionDescriptions(Bytes),
dec_components47(Num-1, Remain, [Term|Acc]).

dec_components48(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components48(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V12@V0:4/unsigned-unit:1,V12@Buf1/bitstring>> = Bytes,
V12@Add2 = V12@V0 + 1,
{V12@Add2,V12@Buf1}
end,
dec_components48(Num-1, Remain, [Term|Acc]).

dec_components49(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components49(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V13@V0:4/unsigned-unit:1,V13@Buf1/bitstring>> = Bytes,
V13@Add2 = V13@V0 + 1,
{V13@Add2,V13@Buf1}
end,
dec_components49(Num-1, Remain, [Term|Acc]).

dec_components5(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components5(Num, Bytes, Acc) ->
{Term,Remain} = dec_VCCapability(Bytes),
dec_components5(Num-1, Remain, [Term|Acc]).

dec_components50(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components50(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V14@V0:4/unsigned-unit:1,V14@Buf1/bitstring>> = Bytes,
V14@Add2 = V14@V0 + 1,
{V14@Add2,V14@Buf1}
end,
dec_components50(Num-1, Remain, [Term|Acc]).

dec_components51(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components51(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V15@V0:4/unsigned-unit:1,V15@Buf1/bitstring>> = Bytes,
V15@Add2 = V15@V0 + 1,
{V15@Add2,V15@Buf1}
end,
dec_components51(Num-1, Remain, [Term|Acc]).

dec_components52(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components52(Num, Bytes, Acc) ->
{Term,Remain} = dec_RequestMultiplexEntryRejectionDescriptions(Bytes),
dec_components52(Num-1, Remain, [Term|Acc]).

dec_components53(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components53(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V16@V0:4/unsigned-unit:1,V16@Buf1/bitstring>> = Bytes,
V16@Add2 = V16@V0 + 1,
{V16@Add2,V16@Buf1}
end,
dec_components53(Num-1, Remain, [Term|Acc]).

dec_components54(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components54(Num, Bytes, Acc) ->
{Term,Remain} = dec_ModeDescription(Bytes),
dec_components54(Num-1, Remain, [Term|Acc]).

dec_components55(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components55(Num, Bytes, Acc) ->
{Term,Remain} = dec_ModeElement(Bytes),
dec_components55(Num-1, Remain, [Term|Acc]).

dec_components56(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components56(Num, Bytes, Acc) ->
{Term,Remain} = dec_RedundancyEncodingDTModeElement(Bytes),
dec_components56(Num-1, Remain, [Term|Acc]).

dec_components57(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components57(Num, Bytes, Acc) ->
{Term,Remain} = dec_MultiplePayloadStreamElementMode(Bytes),
dec_components57(Num-1, Remain, [Term|Acc]).

dec_components58(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components58(Num, Bytes, Acc) ->
{Term,Remain} = dec_CommunicationModeTableEntry(Bytes),
dec_components58(Num-1, Remain, [Term|Acc]).

dec_components59(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components59(Num, Bytes, Acc) ->
{Term,Remain} = dec_CommunicationModeTableEntry(Bytes),
dec_components59(Num-1, Remain, [Term|Acc]).

dec_components6(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components6(Num, Bytes, Acc) ->
{Term,Remain} = dec_Q2931Address(Bytes),
dec_components6(Num-1, Remain, [Term|Acc]).

dec_components60(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components60(Num, Bytes, Acc) ->
{Term,Remain} = dec_NonStandardParameter(Bytes),
dec_components60(Num-1, Remain, [Term|Acc]).

dec_components61(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components61(Num, Bytes, Acc) ->
{Term,Remain} = dec_Criteria(Bytes),
dec_components61(Num-1, Remain, [Term|Acc]).

dec_components62(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components62(Num, Bytes, Acc) ->
{Term,Remain} = dec_TerminalLabel(Bytes),
dec_components62(Num-1, Remain, [Term|Acc]).

dec_components63(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components63(Num, Bytes, Acc) ->
{Term,Remain} = dec_TerminalInformation(Bytes),
dec_components63(Num-1, Remain, [Term|Acc]).

dec_components64(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components64(Num, Bytes, Acc) ->
{Term,Remain} = dec_DialingInformationNumber(Bytes),
dec_components64(Num-1, Remain, [Term|Acc]).

dec_components65(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components65(Num, Bytes, Acc) ->
{Term,Remain} = dec_DialingInformationNetworkType(Bytes),
dec_components65(Num-1, Remain, [Term|Acc]).

dec_components66(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components66(Num, Bytes, Acc) ->
{Term,Remain} = begin
V17@Pad2 = bit_size(Bytes) band 7,
<<_:V17@Pad2,V17@V0:2/unsigned-unit:8,V17@Buf1/bitstring>> = Bytes,
V17@Add4 = V17@V0 + 1,
{V17@Add4,V17@Buf1}
end,
dec_components66(Num-1, Remain, [Term|Acc]).

dec_components67(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components67(Num, Bytes, Acc) ->
{Term,Remain} = begin
V18@Pad2 = bit_size(Bytes) band 7,
<<_:V18@Pad2,V18@V0:1/unsigned-unit:8,V18@Buf1/bitstring>> = Bytes,
{V18@V0,V18@Buf1}
end,
dec_components67(Num-1, Remain, [Term|Acc]).

dec_components68(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components68(Num, Bytes, Acc) ->
{Term,Remain} = dec_PictureReference(Bytes),
dec_components68(Num-1, Remain, [Term|Acc]).

dec_components69(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components69(Num, Bytes, Acc) ->
{Term,Remain} = dec_PictureReference(Bytes),
dec_components69(Num-1, Remain, [Term|Acc]).

dec_components7(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components7(Num, Bytes, Acc) ->
{Term,Remain} = dec_RedundancyEncodingCapability(Bytes),
dec_components7(Num-1, Remain, [Term|Acc]).

dec_components8(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components8(Num, Bytes, Acc) ->
{Term,Remain} = dec_RTPPayloadType(Bytes),
dec_components8(Num-1, Remain, [Term|Acc]).

dec_components9(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components9(Num, Bytes, Acc) ->
{Term,Remain} = dec_QOSCapability(Bytes),
dec_components9(Num-1, Remain, [Term|Acc]).

align(Bin) when is_binary(Bin) ->
    Bin;
align(BitStr) when is_bitstring(BitStr) ->
    AlignBits = bit_size(BitStr) rem 8,
    <<_:AlignBits,Rest/binary>> = BitStr,
    Rest.

complete(L0) ->
    L = complete(L0, []),
    case list_to_bitstring(L) of
        <<>> ->
            <<0>>;
        Bin ->
            Bin
    end.

complete([], Bits, []) ->
    case Bits band 7 of
        0 ->
            [];
        N ->
            [<<0:(8 - N)>>]
    end;
complete([], Bits, [H|More]) ->
    complete(H, Bits, More);
complete([align|T], Bits, More) ->
    case Bits band 7 of
        0 ->
            complete(T, More);
        1 ->
            [<<0:7>>|complete(T, More)];
        2 ->
            [<<0:6>>|complete(T, More)];
        3 ->
            [<<0:5>>|complete(T, More)];
        4 ->
            [<<0:4>>|complete(T, More)];
        5 ->
            [<<0:3>>|complete(T, More)];
        6 ->
            [<<0:2>>|complete(T, More)];
        7 ->
            [<<0:1>>|complete(T, More)]
    end;
complete([[]|T], Bits, More) ->
    complete(T, Bits, More);
complete([[_|_] = H], Bits, More) ->
    complete(H, Bits, More);
complete([[_|_] = H|T], Bits, More) ->
    complete(H, Bits, [T|More]);
complete([H|T], Bits, More) when is_integer(H); is_binary(H) ->
    [H|complete(T, Bits, More)];
complete([H|T], Bits, More) ->
    [H|complete(T, Bits + bit_size(H), More)];
complete(Bin, Bits, More) when is_binary(Bin) ->
    [Bin|complete([], Bits, More)];
complete(Bin, Bits, More) ->
    [Bin|complete([], Bits + bit_size(Bin), More)].

complete([], []) ->
    [];
complete([], [H|More]) ->
    complete(H, More);
complete([align|T], More) ->
    complete(T, More);
complete([[]|T], More) ->
    complete(T, More);
complete([[_|_] = H], More) ->
    complete(H, More);
complete([[_|_] = H|T], More) ->
    complete(H, [T|More]);
complete([H|T], More) when is_integer(H); is_binary(H) ->
    [H|complete(T, More)];
complete([H|T], More) ->
    [H|complete(T, bit_size(H), More)];
complete(Bin, More) when is_binary(Bin) ->
    [Bin|complete([], More)];
complete(Bin, More) ->
    [Bin|complete([], bit_size(Bin), More)].

dec_subidentifiers([H|T], Av, Al) when H >= 128 ->
    dec_subidentifiers(T, Av bsl 7 bor H band 127, Al);
dec_subidentifiers([H|T], Av, Al) ->
    dec_subidentifiers(T, 0, [Av bsl 7 bor H|Al]);
dec_subidentifiers([], _Av, Al) ->
    lists:reverse(Al).

decode_chars(Val, N, Chars) ->
    [ 
     element(C + 1, Chars) ||
         <<C:N>> <= Val
    ].

decode_chars_16bit(Val) ->
    Cs =
        [ 
         C ||
             <<C:16>> <= Val
        ],
    decode_chars_16bit_1(Cs).

decode_chars_16bit_1([H|T]) when H < 256 ->
    [H|decode_chars_16bit_1(T)];
decode_chars_16bit_1([H|T]) ->
    [{0,0,H bsr 8,H band 255}|decode_chars_16bit_1(T)];
decode_chars_16bit_1([]) ->
    [].

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_length(Buffer) ->
    case align(Buffer) of
        <<0:1,Oct:7,Rest/binary>> ->
            {Oct,Rest};
        <<2:2,Val:14,Rest/binary>> ->
            {Val,Rest};
        <<3:2,_Val:14,_Rest/binary>> ->
            exit({error,{asn1,{decode_length,{nyi,above_16k}}}})
    end.

decode_oid(Octets) ->
    [First|Rest] = dec_subidentifiers(Octets, 0, []),
    Idlist =
        if
            First < 40 ->
                [0,First|Rest];
            First < 80 ->
                [1,First - 40|Rest];
            true ->
                [2,First - 80|Rest]
        end,
    list_to_tuple(Idlist).

e_o_e(Num) when Num < 128 ->
    Num bor 128;
e_o_e(Num) ->
    [e_o_e(Num bsr 7),Num band 127 bor 128].

e_object_element(Num) when Num < 128 ->
    [Num];
e_object_element(Num) ->
    [e_o_e(Num bsr 7),Num band 127].

e_object_elements([], Acc) ->
    lists:reverse(Acc);
e_object_elements([H|T], Acc) ->
    e_object_elements(T, [e_object_element(H)|Acc]).

e_object_identifier([E1,E2|Tail])
    when E1 >= 0, E1 < 2, E2 < 40; E1 =:= 2 ->
    Head = 40 * E1 + E2,
    e_object_elements([Head|Tail], []);
e_object_identifier([_,_|_Tail] = Oid) ->
    exit({error,{asn1,{illegal_value,Oid}}}).

enc_char(C0, Lb, Tab) ->
    try element(C0 - Lb, Tab) of
        ill ->
            illegal_char_error();
        C ->
            C
    catch
        error:badarg ->
            illegal_char_error()
    end.

encode_chars(Val, NumBits, {Lb,Tab}) ->
    << 
      <<(enc_char(C, Lb, Tab)):NumBits>> ||
          C <- Val
    >>.

encode_chars_16bit(Val) ->
    L = [ 
         case C of
             {0,0,A,B} ->
                 [A,B];
             C when is_integer(C) ->
                 [0,C]
         end ||
             C <- Val
        ],
    iolist_to_binary(L).

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>,B|encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len,Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>,Bin]
            end
    end.

encode_oid(Val) when is_tuple(Val) ->
    encode_oid(tuple_to_list(Val));
encode_oid(Val) ->
    iolist_to_binary(e_object_identifier(Val)).

encode_unconstrained_number(Val) when Val >= 0 ->
    if
        Val < 128 ->
            [1,Val];
        Val < 256 ->
            [<<2,0>>,Val];
        true ->
            case binary:encode_unsigned(Val) of
                <<0:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) of
                        Sz when Sz < 128 ->
                            [Sz,Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14>>,Bin]
                    end;
                <<1:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) + 1 of
                        Sz when Sz < 128 ->
                            [Sz,0,Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14,0:8>>,Bin]
                    end
            end
    end;
encode_unconstrained_number(Val) ->
    Oct = enint(Val, []),
    Len = length(Oct),
    if
        Len < 128 ->
            [Len|Oct];
        Len < 16384 ->
            [<<2:2,Len:14>>|Oct]
    end.

enint(- 1, [B1|T]) when B1 > 127 ->
    [B1|T];
enint(N, Acc) ->
    enint(N bsr 8, [N band 255|Acc]).

extension_bitmap(Val, Pos, Limit) ->
    extension_bitmap(Val, Pos, Limit, 0).

extension_bitmap(_Val, Pos, Limit, Acc) when Pos >= Limit ->
    Acc;
extension_bitmap(Val, Pos, Limit, Acc) ->
    Bit =
        case element(Pos, Val) of
            asn1_NOVALUE ->
                0;
            _ ->
                1
        end,
    extension_bitmap(Val, Pos + 1, Limit, Acc bsl 1 bor Bit).

illegal_char_error() ->
    error({error,{asn1,"value forbidden by FROM constraint"}}).

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len,Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
