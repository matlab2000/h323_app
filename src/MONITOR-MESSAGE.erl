%% Generated by the Erlang ASN.1 PER-compiler version, utilizing bit-syntax:3.0
%% Purpose: encoder and decoder to the types in mod MONITOR-MESSAGE

-module('MONITOR-MESSAGE').
-compile(nowarn_unused_vars).
-include("MONITOR-MESSAGE.hrl").
-asn1_info([{vsn,'3.0'},
            {module,'MONITOR-MESSAGE'},
            {options,[{i,"D:/GK_LINUX/test/erlang"},
 warnings,per,errors,
 {cwd,"D:/GK_LINUX/test/erlang"},
 {outdir,"D:/GK_LINUX/test/erlang"},
 {i,"."},
 {i,"d:/GK_LINUX/test/erlang"}]}]).

-export([encoding_rule/0,bit_string_format/0,         legacy_erlang_types/0]).
-export([
'enc_MonitorMessage'/1,
'enc_HangUpCallRequest'/1,
'enc_HangUpCallConfirm'/1,
'enc_HangUpCallReject'/1,
'enc_HangUpCallFailureReason'/1,
'enc_UnRegisterRequest'/1,
'enc_UnRegisterConfirm'/1,
'enc_UnRegisterReject'/1,
'enc_UnRegisterFailureReason'/1,
'enc_VersionRequest'/1,
'enc_VersionConfirm'/1,
'enc_VersionReject'/1,
'enc_VersionFailureReason'/1,
'enc_LogSetRequest'/1,
'enc_LogSetConfirm'/1,
'enc_LogInform'/1,
'enc_LoginRequire'/1,
'enc_LoginRequest'/1,
'enc_RequestIdentifier'/1,
'enc_LoginConfirm'/1,
'enc_LoginReject'/1,
'enc_LoginFailureReason'/1,
'enc_CloseRequest'/1,
'enc_CloseConfirm'/1,
'enc_CloseReject'/1,
'enc_CloseFailureReason'/1,
'enc_RestartRequest'/1,
'enc_RestartConfirm'/1,
'enc_RestartReject'/1,
'enc_RestartFailureReason'/1,
'enc_RegisterRequest'/1,
'enc_RegisterConfirm'/1,
'enc_RegisterReject'/1,
'enc_RegisterFailureReason'/1,
'enc_ConfigGetRequest'/1,
'enc_ConfigGetConfirm'/1,
'enc_ConfigGetReject'/1,
'enc_ConfigGetFailureReason'/1,
'enc_ConfigurationTable'/1,
'enc_AdmittedEndpoint'/1,
'enc_ConfigSetRequest'/1,
'enc_ConfigSetConfirm'/1,
'enc_ConfigSetReject'/1,
'enc_ConfigSetFailureReason'/1,
'enc_StatisticsRequest'/1,
'enc_StatisticsConfirm'/1,
'enc_StatisticsQueryRequest'/1,
'enc_StatisticsQueryConfirm'/1,
'enc_StatisticsQueryTable'/1,
'enc_BetweenZonesTable'/1,
'enc_StatisticsTable'/1,
'enc_StatisticsReject'/1,
'enc_StatisticsFailureReason'/1,
'enc_StatisticsQueryReject'/1,
'enc_EndpointRequest'/1,
'enc_EndpointConfirm'/1,
'enc_EndpointReject'/1,
'enc_EndpointFailureReason'/1,
'enc_CallRequest'/1,
'enc_CallConfirm'/1,
'enc_CallReject'/1,
'enc_CallFailureReason'/1,
'enc_UnknowMessage'/1,
'enc_EndpointEntry'/1,
'enc_CallEntry'/1,
'enc_CallNumber'/1
]).

-export([
'dec_MonitorMessage'/1,
'dec_HangUpCallRequest'/1,
'dec_HangUpCallConfirm'/1,
'dec_HangUpCallReject'/1,
'dec_HangUpCallFailureReason'/1,
'dec_UnRegisterRequest'/1,
'dec_UnRegisterConfirm'/1,
'dec_UnRegisterReject'/1,
'dec_UnRegisterFailureReason'/1,
'dec_VersionRequest'/1,
'dec_VersionConfirm'/1,
'dec_VersionReject'/1,
'dec_VersionFailureReason'/1,
'dec_LogSetRequest'/1,
'dec_LogSetConfirm'/1,
'dec_LogInform'/1,
'dec_LoginRequire'/1,
'dec_LoginRequest'/1,
'dec_RequestIdentifier'/1,
'dec_LoginConfirm'/1,
'dec_LoginReject'/1,
'dec_LoginFailureReason'/1,
'dec_CloseRequest'/1,
'dec_CloseConfirm'/1,
'dec_CloseReject'/1,
'dec_CloseFailureReason'/1,
'dec_RestartRequest'/1,
'dec_RestartConfirm'/1,
'dec_RestartReject'/1,
'dec_RestartFailureReason'/1,
'dec_RegisterRequest'/1,
'dec_RegisterConfirm'/1,
'dec_RegisterReject'/1,
'dec_RegisterFailureReason'/1,
'dec_ConfigGetRequest'/1,
'dec_ConfigGetConfirm'/1,
'dec_ConfigGetReject'/1,
'dec_ConfigGetFailureReason'/1,
'dec_ConfigurationTable'/1,
'dec_AdmittedEndpoint'/1,
'dec_ConfigSetRequest'/1,
'dec_ConfigSetConfirm'/1,
'dec_ConfigSetReject'/1,
'dec_ConfigSetFailureReason'/1,
'dec_StatisticsRequest'/1,
'dec_StatisticsConfirm'/1,
'dec_StatisticsQueryRequest'/1,
'dec_StatisticsQueryConfirm'/1,
'dec_StatisticsQueryTable'/1,
'dec_BetweenZonesTable'/1,
'dec_StatisticsTable'/1,
'dec_StatisticsReject'/1,
'dec_StatisticsFailureReason'/1,
'dec_StatisticsQueryReject'/1,
'dec_EndpointRequest'/1,
'dec_EndpointConfirm'/1,
'dec_EndpointReject'/1,
'dec_EndpointFailureReason'/1,
'dec_CallRequest'/1,
'dec_CallConfirm'/1,
'dec_CallReject'/1,
'dec_CallFailureReason'/1,
'dec_UnknowMessage'/1,
'dec_EndpointEntry'/1,
'dec_CallEntry'/1,
'dec_CallNumber'/1
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> per.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, Data) of
  {Result,Rest} ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('MonitorMessage',Data) -> 'enc_MonitorMessage'(Data);
encode_disp('HangUpCallRequest',Data) -> 'enc_HangUpCallRequest'(Data);
encode_disp('HangUpCallConfirm',Data) -> 'enc_HangUpCallConfirm'(Data);
encode_disp('HangUpCallReject',Data) -> 'enc_HangUpCallReject'(Data);
encode_disp('HangUpCallFailureReason',Data) -> 'enc_HangUpCallFailureReason'(Data);
encode_disp('UnRegisterRequest',Data) -> 'enc_UnRegisterRequest'(Data);
encode_disp('UnRegisterConfirm',Data) -> 'enc_UnRegisterConfirm'(Data);
encode_disp('UnRegisterReject',Data) -> 'enc_UnRegisterReject'(Data);
encode_disp('UnRegisterFailureReason',Data) -> 'enc_UnRegisterFailureReason'(Data);
encode_disp('VersionRequest',Data) -> 'enc_VersionRequest'(Data);
encode_disp('VersionConfirm',Data) -> 'enc_VersionConfirm'(Data);
encode_disp('VersionReject',Data) -> 'enc_VersionReject'(Data);
encode_disp('VersionFailureReason',Data) -> 'enc_VersionFailureReason'(Data);
encode_disp('LogSetRequest',Data) -> 'enc_LogSetRequest'(Data);
encode_disp('LogSetConfirm',Data) -> 'enc_LogSetConfirm'(Data);
encode_disp('LogInform',Data) -> 'enc_LogInform'(Data);
encode_disp('LoginRequire',Data) -> 'enc_LoginRequire'(Data);
encode_disp('LoginRequest',Data) -> 'enc_LoginRequest'(Data);
encode_disp('RequestIdentifier',Data) -> 'enc_RequestIdentifier'(Data);
encode_disp('LoginConfirm',Data) -> 'enc_LoginConfirm'(Data);
encode_disp('LoginReject',Data) -> 'enc_LoginReject'(Data);
encode_disp('LoginFailureReason',Data) -> 'enc_LoginFailureReason'(Data);
encode_disp('CloseRequest',Data) -> 'enc_CloseRequest'(Data);
encode_disp('CloseConfirm',Data) -> 'enc_CloseConfirm'(Data);
encode_disp('CloseReject',Data) -> 'enc_CloseReject'(Data);
encode_disp('CloseFailureReason',Data) -> 'enc_CloseFailureReason'(Data);
encode_disp('RestartRequest',Data) -> 'enc_RestartRequest'(Data);
encode_disp('RestartConfirm',Data) -> 'enc_RestartConfirm'(Data);
encode_disp('RestartReject',Data) -> 'enc_RestartReject'(Data);
encode_disp('RestartFailureReason',Data) -> 'enc_RestartFailureReason'(Data);
encode_disp('RegisterRequest',Data) -> 'enc_RegisterRequest'(Data);
encode_disp('RegisterConfirm',Data) -> 'enc_RegisterConfirm'(Data);
encode_disp('RegisterReject',Data) -> 'enc_RegisterReject'(Data);
encode_disp('RegisterFailureReason',Data) -> 'enc_RegisterFailureReason'(Data);
encode_disp('ConfigGetRequest',Data) -> 'enc_ConfigGetRequest'(Data);
encode_disp('ConfigGetConfirm',Data) -> 'enc_ConfigGetConfirm'(Data);
encode_disp('ConfigGetReject',Data) -> 'enc_ConfigGetReject'(Data);
encode_disp('ConfigGetFailureReason',Data) -> 'enc_ConfigGetFailureReason'(Data);
encode_disp('ConfigurationTable',Data) -> 'enc_ConfigurationTable'(Data);
encode_disp('AdmittedEndpoint',Data) -> 'enc_AdmittedEndpoint'(Data);
encode_disp('ConfigSetRequest',Data) -> 'enc_ConfigSetRequest'(Data);
encode_disp('ConfigSetConfirm',Data) -> 'enc_ConfigSetConfirm'(Data);
encode_disp('ConfigSetReject',Data) -> 'enc_ConfigSetReject'(Data);
encode_disp('ConfigSetFailureReason',Data) -> 'enc_ConfigSetFailureReason'(Data);
encode_disp('StatisticsRequest',Data) -> 'enc_StatisticsRequest'(Data);
encode_disp('StatisticsConfirm',Data) -> 'enc_StatisticsConfirm'(Data);
encode_disp('StatisticsQueryRequest',Data) -> 'enc_StatisticsQueryRequest'(Data);
encode_disp('StatisticsQueryConfirm',Data) -> 'enc_StatisticsQueryConfirm'(Data);
encode_disp('StatisticsQueryTable',Data) -> 'enc_StatisticsQueryTable'(Data);
encode_disp('BetweenZonesTable',Data) -> 'enc_BetweenZonesTable'(Data);
encode_disp('StatisticsTable',Data) -> 'enc_StatisticsTable'(Data);
encode_disp('StatisticsReject',Data) -> 'enc_StatisticsReject'(Data);
encode_disp('StatisticsFailureReason',Data) -> 'enc_StatisticsFailureReason'(Data);
encode_disp('StatisticsQueryReject',Data) -> 'enc_StatisticsQueryReject'(Data);
encode_disp('EndpointRequest',Data) -> 'enc_EndpointRequest'(Data);
encode_disp('EndpointConfirm',Data) -> 'enc_EndpointConfirm'(Data);
encode_disp('EndpointReject',Data) -> 'enc_EndpointReject'(Data);
encode_disp('EndpointFailureReason',Data) -> 'enc_EndpointFailureReason'(Data);
encode_disp('CallRequest',Data) -> 'enc_CallRequest'(Data);
encode_disp('CallConfirm',Data) -> 'enc_CallConfirm'(Data);
encode_disp('CallReject',Data) -> 'enc_CallReject'(Data);
encode_disp('CallFailureReason',Data) -> 'enc_CallFailureReason'(Data);
encode_disp('UnknowMessage',Data) -> 'enc_UnknowMessage'(Data);
encode_disp('EndpointEntry',Data) -> 'enc_EndpointEntry'(Data);
encode_disp('CallEntry',Data) -> 'enc_CallEntry'(Data);
encode_disp('CallNumber',Data) -> 'enc_CallNumber'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('MonitorMessage',Data) -> 'dec_MonitorMessage'(Data);
decode_disp('HangUpCallRequest',Data) -> 'dec_HangUpCallRequest'(Data);
decode_disp('HangUpCallConfirm',Data) -> 'dec_HangUpCallConfirm'(Data);
decode_disp('HangUpCallReject',Data) -> 'dec_HangUpCallReject'(Data);
decode_disp('HangUpCallFailureReason',Data) -> 'dec_HangUpCallFailureReason'(Data);
decode_disp('UnRegisterRequest',Data) -> 'dec_UnRegisterRequest'(Data);
decode_disp('UnRegisterConfirm',Data) -> 'dec_UnRegisterConfirm'(Data);
decode_disp('UnRegisterReject',Data) -> 'dec_UnRegisterReject'(Data);
decode_disp('UnRegisterFailureReason',Data) -> 'dec_UnRegisterFailureReason'(Data);
decode_disp('VersionRequest',Data) -> 'dec_VersionRequest'(Data);
decode_disp('VersionConfirm',Data) -> 'dec_VersionConfirm'(Data);
decode_disp('VersionReject',Data) -> 'dec_VersionReject'(Data);
decode_disp('VersionFailureReason',Data) -> 'dec_VersionFailureReason'(Data);
decode_disp('LogSetRequest',Data) -> 'dec_LogSetRequest'(Data);
decode_disp('LogSetConfirm',Data) -> 'dec_LogSetConfirm'(Data);
decode_disp('LogInform',Data) -> 'dec_LogInform'(Data);
decode_disp('LoginRequire',Data) -> 'dec_LoginRequire'(Data);
decode_disp('LoginRequest',Data) -> 'dec_LoginRequest'(Data);
decode_disp('RequestIdentifier',Data) -> 'dec_RequestIdentifier'(Data);
decode_disp('LoginConfirm',Data) -> 'dec_LoginConfirm'(Data);
decode_disp('LoginReject',Data) -> 'dec_LoginReject'(Data);
decode_disp('LoginFailureReason',Data) -> 'dec_LoginFailureReason'(Data);
decode_disp('CloseRequest',Data) -> 'dec_CloseRequest'(Data);
decode_disp('CloseConfirm',Data) -> 'dec_CloseConfirm'(Data);
decode_disp('CloseReject',Data) -> 'dec_CloseReject'(Data);
decode_disp('CloseFailureReason',Data) -> 'dec_CloseFailureReason'(Data);
decode_disp('RestartRequest',Data) -> 'dec_RestartRequest'(Data);
decode_disp('RestartConfirm',Data) -> 'dec_RestartConfirm'(Data);
decode_disp('RestartReject',Data) -> 'dec_RestartReject'(Data);
decode_disp('RestartFailureReason',Data) -> 'dec_RestartFailureReason'(Data);
decode_disp('RegisterRequest',Data) -> 'dec_RegisterRequest'(Data);
decode_disp('RegisterConfirm',Data) -> 'dec_RegisterConfirm'(Data);
decode_disp('RegisterReject',Data) -> 'dec_RegisterReject'(Data);
decode_disp('RegisterFailureReason',Data) -> 'dec_RegisterFailureReason'(Data);
decode_disp('ConfigGetRequest',Data) -> 'dec_ConfigGetRequest'(Data);
decode_disp('ConfigGetConfirm',Data) -> 'dec_ConfigGetConfirm'(Data);
decode_disp('ConfigGetReject',Data) -> 'dec_ConfigGetReject'(Data);
decode_disp('ConfigGetFailureReason',Data) -> 'dec_ConfigGetFailureReason'(Data);
decode_disp('ConfigurationTable',Data) -> 'dec_ConfigurationTable'(Data);
decode_disp('AdmittedEndpoint',Data) -> 'dec_AdmittedEndpoint'(Data);
decode_disp('ConfigSetRequest',Data) -> 'dec_ConfigSetRequest'(Data);
decode_disp('ConfigSetConfirm',Data) -> 'dec_ConfigSetConfirm'(Data);
decode_disp('ConfigSetReject',Data) -> 'dec_ConfigSetReject'(Data);
decode_disp('ConfigSetFailureReason',Data) -> 'dec_ConfigSetFailureReason'(Data);
decode_disp('StatisticsRequest',Data) -> 'dec_StatisticsRequest'(Data);
decode_disp('StatisticsConfirm',Data) -> 'dec_StatisticsConfirm'(Data);
decode_disp('StatisticsQueryRequest',Data) -> 'dec_StatisticsQueryRequest'(Data);
decode_disp('StatisticsQueryConfirm',Data) -> 'dec_StatisticsQueryConfirm'(Data);
decode_disp('StatisticsQueryTable',Data) -> 'dec_StatisticsQueryTable'(Data);
decode_disp('BetweenZonesTable',Data) -> 'dec_BetweenZonesTable'(Data);
decode_disp('StatisticsTable',Data) -> 'dec_StatisticsTable'(Data);
decode_disp('StatisticsReject',Data) -> 'dec_StatisticsReject'(Data);
decode_disp('StatisticsFailureReason',Data) -> 'dec_StatisticsFailureReason'(Data);
decode_disp('StatisticsQueryReject',Data) -> 'dec_StatisticsQueryReject'(Data);
decode_disp('EndpointRequest',Data) -> 'dec_EndpointRequest'(Data);
decode_disp('EndpointConfirm',Data) -> 'dec_EndpointConfirm'(Data);
decode_disp('EndpointReject',Data) -> 'dec_EndpointReject'(Data);
decode_disp('EndpointFailureReason',Data) -> 'dec_EndpointFailureReason'(Data);
decode_disp('CallRequest',Data) -> 'dec_CallRequest'(Data);
decode_disp('CallConfirm',Data) -> 'dec_CallConfirm'(Data);
decode_disp('CallReject',Data) -> 'dec_CallReject'(Data);
decode_disp('CallFailureReason',Data) -> 'dec_CallFailureReason'(Data);
decode_disp('UnknowMessage',Data) -> 'dec_UnknowMessage'(Data);
decode_disp('EndpointEntry',Data) -> 'dec_EndpointEntry'(Data);
decode_disp('CallEntry',Data) -> 'dec_CallEntry'(Data);
decode_disp('CallNumber',Data) -> 'dec_CallNumber'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
'enc_MonitorMessage'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= loginRequire ->
[<<0:6>>|enc_LoginRequire(ChoiceVal)];
ChoiceTag =:= loginRequest ->
[<<1:6>>|enc_LoginRequest(ChoiceVal)];
ChoiceTag =:= loginConfirm ->
[<<2:6>>|enc_LoginConfirm(ChoiceVal)];
ChoiceTag =:= loginReject ->
[<<3:6>>|enc_LoginReject(ChoiceVal)];
ChoiceTag =:= closeRequest ->
[<<4:6>>|enc_CloseRequest(ChoiceVal)];
ChoiceTag =:= closeConfirm ->
[<<5:6>>|enc_CloseConfirm(ChoiceVal)];
ChoiceTag =:= closeReject ->
[<<6:6>>|enc_CloseReject(ChoiceVal)];
ChoiceTag =:= restartRequest ->
[<<7:6>>|enc_RestartRequest(ChoiceVal)];
ChoiceTag =:= restartConfirm ->
[<<8:6>>|enc_RestartConfirm(ChoiceVal)];
ChoiceTag =:= restartReject ->
[<<9:6>>|enc_RestartReject(ChoiceVal)];
ChoiceTag =:= registerRequest ->
[<<10:6>>|enc_RegisterRequest(ChoiceVal)];
ChoiceTag =:= registerConfirm ->
[<<11:6>>|enc_RegisterConfirm(ChoiceVal)];
ChoiceTag =:= registerReject ->
[<<12:6>>|enc_RegisterReject(ChoiceVal)];
ChoiceTag =:= configGetRequest ->
[<<13:6>>|enc_ConfigGetRequest(ChoiceVal)];
ChoiceTag =:= configGetConfirm ->
[<<14:6>>|enc_ConfigGetConfirm(ChoiceVal)];
ChoiceTag =:= configGetReject ->
[<<15:6>>|enc_ConfigGetReject(ChoiceVal)];
ChoiceTag =:= configSetRequest ->
[<<16:6>>|enc_ConfigSetRequest(ChoiceVal)];
ChoiceTag =:= configSetConfirm ->
[<<17:6>>|enc_ConfigSetConfirm(ChoiceVal)];
ChoiceTag =:= configSetReject ->
[<<18:6>>|enc_ConfigSetReject(ChoiceVal)];
ChoiceTag =:= statisticsRequest ->
[<<19:6>>|enc_StatisticsRequest(ChoiceVal)];
ChoiceTag =:= statisticsConfirm ->
[<<20:6>>|enc_StatisticsConfirm(ChoiceVal)];
ChoiceTag =:= statisticsReject ->
[<<21:6>>|enc_StatisticsReject(ChoiceVal)];
ChoiceTag =:= endpointRequest ->
[<<22:6>>|enc_EndpointRequest(ChoiceVal)];
ChoiceTag =:= endpointConfirm ->
[<<23:6>>|enc_EndpointConfirm(ChoiceVal)];
ChoiceTag =:= endpointReject ->
[<<24:6>>|enc_EndpointReject(ChoiceVal)];
ChoiceTag =:= callRequest ->
[<<25:6>>|enc_CallRequest(ChoiceVal)];
ChoiceTag =:= callConfirm ->
[<<26:6>>|enc_CallConfirm(ChoiceVal)];
ChoiceTag =:= callReject ->
[<<27:6>>|enc_CallReject(ChoiceVal)];
ChoiceTag =:= logSetRequest ->
[<<28:6>>|enc_LogSetRequest(ChoiceVal)];
ChoiceTag =:= logSetConfirm ->
[<<29:6>>|enc_LogSetConfirm(ChoiceVal)];
ChoiceTag =:= logInform ->
[<<30:6>>|enc_LogInform(ChoiceVal)];
ChoiceTag =:= versionRequest ->
[<<31:6>>|enc_VersionRequest(ChoiceVal)];
ChoiceTag =:= versionConfirm ->
[<<32:6>>|enc_VersionConfirm(ChoiceVal)];
ChoiceTag =:= versionReject ->
[<<33:6>>|enc_VersionReject(ChoiceVal)];
ChoiceTag =:= unRegisterRequest ->
[<<34:6>>|enc_UnRegisterRequest(ChoiceVal)];
ChoiceTag =:= unRegisterConfirm ->
[<<35:6>>|enc_UnRegisterConfirm(ChoiceVal)];
ChoiceTag =:= unRegisterReject ->
[<<36:6>>|enc_UnRegisterReject(ChoiceVal)];
ChoiceTag =:= hangUpCallRequest ->
[<<37:6>>|enc_HangUpCallRequest(ChoiceVal)];
ChoiceTag =:= hangUpCallConfirm ->
[<<38:6>>|enc_HangUpCallConfirm(ChoiceVal)];
ChoiceTag =:= hangUpCallReject ->
[<<39:6>>|enc_HangUpCallReject(ChoiceVal)];
ChoiceTag =:= statisticsQueryRequest ->
[<<40:6>>|enc_StatisticsQueryRequest(ChoiceVal)];
ChoiceTag =:= statisticsQueryConfirm ->
[<<41:6>>|enc_StatisticsQueryConfirm(ChoiceVal)];
ChoiceTag =:= statisticsQueryReject ->
[<<42:6>>|enc_StatisticsQueryReject(ChoiceVal)];
ChoiceTag =:= unknowMessage ->
[<<43:6>>|enc_UnknowMessage(ChoiceVal)]
end.


dec_MonitorMessage(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:6/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_LoginRequire(Bytes1)
end,
{{loginRequire,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_LoginRequest(Bytes1)
end,
{{loginRequest,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_LoginConfirm(Bytes1)
end,
{{loginConfirm,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_LoginReject(Bytes1)
end,
{{loginReject,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_CloseRequest(Bytes1)
end,
{{closeRequest,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_CloseConfirm(Bytes1)
end,
{{closeConfirm,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_CloseReject(Bytes1)
end,
{{closeReject,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_RestartRequest(Bytes1)
end,
{{restartRequest,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_RestartConfirm(Bytes1)
end,
{{restartConfirm,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
dec_RestartReject(Bytes1)
end,
{{restartReject,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
dec_RegisterRequest(Bytes1)
end,
{{registerRequest,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
dec_RegisterConfirm(Bytes1)
end,
{{registerConfirm,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
dec_RegisterReject(Bytes1)
end,
{{registerReject,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
dec_ConfigGetRequest(Bytes1)
end,
{{configGetRequest,Val},NewBytes};
14 ->
{Val,NewBytes} = begin
dec_ConfigGetConfirm(Bytes1)
end,
{{configGetConfirm,Val},NewBytes};
15 ->
{Val,NewBytes} = begin
dec_ConfigGetReject(Bytes1)
end,
{{configGetReject,Val},NewBytes};
16 ->
{Val,NewBytes} = begin
dec_ConfigSetRequest(Bytes1)
end,
{{configSetRequest,Val},NewBytes};
17 ->
{Val,NewBytes} = begin
dec_ConfigSetConfirm(Bytes1)
end,
{{configSetConfirm,Val},NewBytes};
18 ->
{Val,NewBytes} = begin
dec_ConfigSetReject(Bytes1)
end,
{{configSetReject,Val},NewBytes};
19 ->
{Val,NewBytes} = begin
dec_StatisticsRequest(Bytes1)
end,
{{statisticsRequest,Val},NewBytes};
20 ->
{Val,NewBytes} = begin
dec_StatisticsConfirm(Bytes1)
end,
{{statisticsConfirm,Val},NewBytes};
21 ->
{Val,NewBytes} = begin
dec_StatisticsReject(Bytes1)
end,
{{statisticsReject,Val},NewBytes};
22 ->
{Val,NewBytes} = begin
dec_EndpointRequest(Bytes1)
end,
{{endpointRequest,Val},NewBytes};
23 ->
{Val,NewBytes} = begin
dec_EndpointConfirm(Bytes1)
end,
{{endpointConfirm,Val},NewBytes};
24 ->
{Val,NewBytes} = begin
dec_EndpointReject(Bytes1)
end,
{{endpointReject,Val},NewBytes};
25 ->
{Val,NewBytes} = begin
dec_CallRequest(Bytes1)
end,
{{callRequest,Val},NewBytes};
26 ->
{Val,NewBytes} = begin
dec_CallConfirm(Bytes1)
end,
{{callConfirm,Val},NewBytes};
27 ->
{Val,NewBytes} = begin
dec_CallReject(Bytes1)
end,
{{callReject,Val},NewBytes};
28 ->
{Val,NewBytes} = begin
dec_LogSetRequest(Bytes1)
end,
{{logSetRequest,Val},NewBytes};
29 ->
{Val,NewBytes} = begin
dec_LogSetConfirm(Bytes1)
end,
{{logSetConfirm,Val},NewBytes};
30 ->
{Val,NewBytes} = begin
dec_LogInform(Bytes1)
end,
{{logInform,Val},NewBytes};
31 ->
{Val,NewBytes} = begin
dec_VersionRequest(Bytes1)
end,
{{versionRequest,Val},NewBytes};
32 ->
{Val,NewBytes} = begin
dec_VersionConfirm(Bytes1)
end,
{{versionConfirm,Val},NewBytes};
33 ->
{Val,NewBytes} = begin
dec_VersionReject(Bytes1)
end,
{{versionReject,Val},NewBytes};
34 ->
{Val,NewBytes} = begin
dec_UnRegisterRequest(Bytes1)
end,
{{unRegisterRequest,Val},NewBytes};
35 ->
{Val,NewBytes} = begin
dec_UnRegisterConfirm(Bytes1)
end,
{{unRegisterConfirm,Val},NewBytes};
36 ->
{Val,NewBytes} = begin
dec_UnRegisterReject(Bytes1)
end,
{{unRegisterReject,Val},NewBytes};
37 ->
{Val,NewBytes} = begin
dec_HangUpCallRequest(Bytes1)
end,
{{hangUpCallRequest,Val},NewBytes};
38 ->
{Val,NewBytes} = begin
dec_HangUpCallConfirm(Bytes1)
end,
{{hangUpCallConfirm,Val},NewBytes};
39 ->
{Val,NewBytes} = begin
dec_HangUpCallReject(Bytes1)
end,
{{hangUpCallReject,Val},NewBytes};
40 ->
{Val,NewBytes} = begin
dec_StatisticsQueryRequest(Bytes1)
end,
{{statisticsQueryRequest,Val},NewBytes};
41 ->
{Val,NewBytes} = begin
dec_StatisticsQueryConfirm(Bytes1)
end,
{{statisticsQueryConfirm,Val},NewBytes};
42 ->
{Val,NewBytes} = begin
dec_StatisticsQueryReject(Bytes1)
end,
{{statisticsQueryReject,Val},NewBytes};
43 ->
{Val,NewBytes} = begin
dec_UnknowMessage(Bytes1)
end,
{{unknowMessage,Val},NewBytes}
end.
'enc_HangUpCallRequest'(Val) ->
[begin
Enc1@element = element(7, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc5@len = length(Enc4@element),
Enc5@bin = encode_chars_16bit(Enc4@element),
Enc5@len@sub = Enc5@len - 1,
if Enc5@len@sub bsr 7 =:= 0 ->
[<<Enc5@len@sub:7,0:1>>|Enc5@bin]
end
end,
begin
Enc6@element = element(4, Val),
'H323-MESSAGES':enc_CallIdentifier(Enc6@element)
end,
begin
Enc7@element = element(5, Val),
if Enc7@element bsr 32 =:= 0 ->
begin
Enc7@element@bin = binary:encode_unsigned(Enc7@element),
Enc7@element@bin_size0 = byte_size(Enc7@element@bin),
Enc7@element@bin_size = Enc7@element@bin_size0 - 1,
[<<Enc7@element@bin_size:2>>,
align|Enc7@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc9@element = element(6, Val),
if Enc9@element =:= false ->
<<0:1>>;
Enc9@element =:= true ->
<<1:1>>
end
end|begin
Enc11@element = element(7, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@len = byte_size(Enc11@element),
if Enc12@len < 128 ->
[<<Enc12@len:15>>|Enc11@element];
Enc12@len < 16384 ->
[<<2:9,Enc12@len:14>>|Enc11@element];
true ->
[<<0:7>>|encode_fragmented(Enc11@element, 8)]
end
end
end
end].


dec_HangUpCallRequest(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type BMPString
{Term2,Bytes3} = begin
<<V3@V0:7/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<_:1,V3@V3:V3@Add2/binary-unit:16,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V6,V3@Buf7}  = {decode_chars_16bit(V3@V3),V3@Buf4},
{V3@V6,V3@Buf7}
end,

%% attribute number 3 with type CallIdentifier
{Term3,Bytes4} = 'H323-MESSAGES':dec_CallIdentifier(Bytes3),

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes5,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 6 with type OCTET STRING
{Term6,Bytes7} = case Opt band 1 of
1 ->
begin
V6@Pad3 = bit_size(Bytes6) band 7,
{V6@V0,V6@Buf1} = case Bytes6 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
V6@Conv10 = binary:copy(V6@V0),
{V6@Conv10,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,
{{'HangUpCallRequest',Term1,Term2,Term3,Term4,Term5,Term6},Bytes7}.

'enc_HangUpCallConfirm'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end,
begin
Enc3@element = element(3, Val),
Enc4@len = length(Enc3@element),
Enc4@bin = encode_chars_16bit(Enc3@element),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 7 =:= 0 ->
[<<Enc4@len@sub:7,0:1>>|Enc4@bin]
end
end,
begin
Enc5@element = element(4, Val),
'H323-MESSAGES':enc_CallIdentifier(Enc5@element)
end|begin
Enc6@element = element(5, Val),
if Enc6@element bsr 32 =:= 0 ->
begin
Enc6@element@bin = binary:encode_unsigned(Enc6@element),
Enc6@element@bin_size0 = byte_size(Enc6@element@bin),
Enc6@element@bin_size = Enc6@element@bin_size0 - 1,
[<<Enc6@element@bin_size:2>>,
align|Enc6@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end].


dec_HangUpCallConfirm(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type BMPString
{Term2,Bytes2} = begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
<<_:1,V2@V3:V2@Add2/binary-unit:16,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V6,V2@Buf7}  = {decode_chars_16bit(V2@V3),V2@Buf4},
{V2@V6,V2@Buf7}
end,

%% attribute number 3 with type CallIdentifier
{Term3,Bytes3} = 'H323-MESSAGES':dec_CallIdentifier(Bytes2),

%% attribute number 4 with type INTEGER
{Term4,Bytes4} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,
{{'HangUpCallConfirm',Term1,Term2,Term3,Term4},Bytes4}.

'enc_HangUpCallReject'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end,
begin
Enc3@element = element(3, Val),
Enc4@len = length(Enc3@element),
Enc4@bin = encode_chars_16bit(Enc3@element),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 7 =:= 0 ->
[<<Enc4@len@sub:7,0:1>>|Enc4@bin]
end
end,
begin
Enc5@element = element(4, Val),
'H323-MESSAGES':enc_CallIdentifier(Enc5@element)
end,
begin
Enc6@element = element(5, Val),
if Enc6@element bsr 32 =:= 0 ->
begin
Enc6@element@bin = binary:encode_unsigned(Enc6@element),
Enc6@element@bin_size0 = byte_size(Enc6@element@bin),
Enc6@element@bin_size = Enc6@element@bin_size0 - 1,
[<<Enc6@element@bin_size:2>>,
align|Enc6@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end|begin
Enc8@element = element(6, Val),
enc_HangUpCallFailureReason(Enc8@element)
end].


dec_HangUpCallReject(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type BMPString
{Term2,Bytes2} = begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
<<_:1,V2@V3:V2@Add2/binary-unit:16,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V6,V2@Buf7}  = {decode_chars_16bit(V2@V3),V2@Buf4},
{V2@V6,V2@Buf7}
end,

%% attribute number 3 with type CallIdentifier
{Term3,Bytes3} = 'H323-MESSAGES':dec_CallIdentifier(Bytes2),

%% attribute number 4 with type INTEGER
{Term4,Bytes4} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% attribute number 5 with type HangUpCallFailureReason
{Term5,Bytes5} = dec_HangUpCallFailureReason(Bytes4),
{{'HangUpCallReject',Term1,Term2,Term3,Term4,Term5},Bytes5}.

'enc_HangUpCallFailureReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= securityDenial ->
<<0:2>>;
ChoiceTag =:= notFound ->
<<1:2>>;
ChoiceTag =:= undefinedReason ->
<<2:2>>
end.


dec_HangUpCallFailureReason(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{securityDenial,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{notFound,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{undefinedReason,Val},NewBytes}
end.
'enc_UnRegisterRequest'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
if Enc3@element bsr 32 =:= 0 ->
begin
Enc3@element@bin = binary:encode_unsigned(Enc3@element),
Enc3@element@bin_size0 = byte_size(Enc3@element@bin),
Enc3@element@bin_size = Enc3@element@bin_size0 - 1,
[<<Enc3@element@bin_size:2,0:6>>|Enc3@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end].


dec_UnRegisterRequest(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
<<_:6,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V3,V2@Buf4}
end,
{{'UnRegisterRequest',Term1,Term2},Bytes2}.

'enc_UnRegisterConfirm'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
if Enc3@element bsr 32 =:= 0 ->
begin
Enc3@element@bin = binary:encode_unsigned(Enc3@element),
Enc3@element@bin_size0 = byte_size(Enc3@element@bin),
Enc3@element@bin_size = Enc3@element@bin_size0 - 1,
[<<Enc3@element@bin_size:2,0:6>>|Enc3@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end].


dec_UnRegisterConfirm(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
<<_:6,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V3,V2@Buf4}
end,
{{'UnRegisterConfirm',Term1,Term2},Bytes2}.

'enc_UnRegisterReject'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
enc_UnRegisterFailureReason(Enc3@element)
end].


dec_UnRegisterReject(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type UnRegisterFailureReason
{Term2,Bytes2} = dec_UnRegisterFailureReason(Bytes1),
{{'UnRegisterReject',Term1,Term2},Bytes2}.

'enc_UnRegisterFailureReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= systemOverload ->
<<0:2>>;
ChoiceTag =:= notFound ->
<<1:2>>;
ChoiceTag =:= undefinedReason ->
<<2:2>>
end.


dec_UnRegisterFailureReason(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{systemOverload,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{notFound,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{undefinedReason,Val},NewBytes}
end.
'enc_VersionRequest'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@len = byte_size(Enc4@element),
if Enc5@len < 128 ->
[Enc5@len|Enc4@element];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc4@element];
true ->
encode_fragmented(Enc4@element, 8)
end
end
end
end].


dec_VersionRequest(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'VersionRequest',Term1,Term2},Bytes3}.

'enc_VersionConfirm'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@len = byte_size(Enc4@element),
if Enc5@len < 128 ->
[Enc5@len|Enc4@element];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc4@element];
true ->
encode_fragmented(Enc4@element, 8)
end
end
end
end].


dec_VersionConfirm(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'VersionConfirm',Term1,Term2},Bytes3}.

'enc_VersionReject'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
enc_VersionFailureReason(Enc3@element)
end].


dec_VersionReject(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type VersionFailureReason
{Term2,Bytes2} = dec_VersionFailureReason(Bytes1),
{{'VersionReject',Term1,Term2},Bytes2}.

'enc_VersionFailureReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= securityDenial ->
<<0:2>>;
ChoiceTag =:= notFound ->
<<1:2>>;
ChoiceTag =:= undefinedReason ->
<<2:2>>
end.


dec_VersionFailureReason(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{securityDenial,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{notFound,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{undefinedReason,Val},NewBytes}
end.
'enc_LogSetRequest'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
Enc4@element bsr 8 =:= 0 ->
[Enc4@element];
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].


dec_LogSetRequest(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'LogSetRequest',Term1,Term2},Bytes3}.

'enc_LogSetConfirm'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
Enc4@element bsr 8 =:= 0 ->
[Enc4@element];
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].


dec_LogSetConfirm(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'LogSetConfirm',Term1,Term2},Bytes3}.

'enc_LogInform'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc5@element = element(2, Val),
if Enc5@element bsr 16 =:= 0 ->
<<Enc5@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
Enc7@element bsr 8 =:= 0 ->
Enc7@element;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
0 =< Enc10@element, Enc10@element < 6 ->
<<Enc10@element:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end,
begin
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@len = byte_size(Enc13@element),
if Enc14@len < 128 ->
[align,
Enc14@len|Enc13@element];
Enc14@len < 16384 ->
[align,
<<2:2,Enc14@len:14>>|Enc13@element];
true ->
[align|encode_fragmented(Enc13@element, 8)]
end
end
end
end|begin
Enc16@element = element(6, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
Enc16@element bsr 32 =:= 0 ->
begin
Enc16@element@bin = binary:encode_unsigned(Enc16@element),
Enc16@element@bin_size0 = byte_size(Enc16@element@bin),
Enc16@element@bin_size = Enc16@element@bin_size0 - 1,
[<<Enc16@element@bin_size:2>>,
align|Enc16@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc16@element}}})
end
end].


dec_LogInform(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:3/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type OCTET STRING
{Term4,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
V5@Pad3 = bit_size(Bytes4) band 7,
{V5@V0,V5@Buf1} = case Bytes4 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
V5@Conv10 = binary:copy(V5@V0),
{V5@Conv10,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes6} = case Opt band 1 of
1 ->
begin
<<V6@V0:2/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 1,
V6@Pad5 = bit_size(V6@Buf1) band 7,
<<_:V6@Pad5,V6@V3:V6@Add2/unsigned-unit:8,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V3,V6@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,
{{'LogInform',Term1,Term2,Term3,Term4,Term5},Bytes6}.

'enc_LoginRequire'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
0 =< Enc4@element, Enc4@element < 11 ->
<<Enc4@element:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].


dec_LoginRequire(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:4/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'LoginRequire',Term1,Term2},Bytes3}.

'enc_LoginRequest'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 16 =:= 0 ->
<<Enc3@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
0 =< Enc5@element, Enc5@element < 11 ->
<<Enc5@element:4,0:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc8@element = element(4, Val),
Enc9@len = byte_size(Enc8@element),
if Enc9@len < 128 ->
[Enc9@len|Enc8@element];
Enc9@len < 16384 ->
[<<2:2,Enc9@len:14>>|Enc8@element];
true ->
encode_fragmented(Enc8@element, 8)
end
end,
begin
Enc10@element = element(5, Val),
Enc11@len = byte_size(Enc10@element),
if Enc11@len < 128 ->
[Enc11@len|Enc10@element];
Enc11@len < 16384 ->
[<<2:2,Enc11@len:14>>|Enc10@element];
true ->
encode_fragmented(Enc10@element, 8)
end
end|begin
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@len = byte_size(Enc12@element),
if Enc13@len < 128 ->
[Enc13@len|Enc12@element];
Enc13@len < 16384 ->
[<<2:2,Enc13@len:14>>|Enc12@element];
true ->
encode_fragmented(Enc12@element, 8)
end
end
end
end].


dec_LoginRequest(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:4/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes4} = begin
V4@Pad3 = bit_size(Bytes3) band 7,
{V4@V0,V4@Buf1} = case Bytes3 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
V4@Conv10 = binary:copy(V4@V0),
{V4@Conv10,V4@Buf1}
end,

%% attribute number 4 with type OCTET STRING
{Term4,Bytes5} = begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:7,V5@V5:V5@V3/binary-unit:8,V5@Buf6/bitstring>> ->
{V5@V5,V5@Buf6};
<<1:1,0:1,V5@V4:14,V5@V6:V5@V4/binary-unit:8,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,1:1,V5@V4:6,V5@Buf5/bitstring>> ->
{V5@V6,V5@Buf7}  = decode_fragmented(V5@V4, V5@Buf5, 8),
{V5@V6,V5@Buf7}
end,
V5@Conv8 = binary:copy(V5@V0),
{V5@Conv8,V5@Buf1}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes6} = case Opt band 1 of
1 ->
begin
V6@Pad3 = bit_size(Bytes5) band 7,
{V6@V0,V6@Buf1} = case Bytes5 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
V6@Conv10 = binary:copy(V6@V0),
{V6@Conv10,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,
{{'LoginRequest',Term1,Term2,Term3,Term4,Term5},Bytes6}.

'enc_RequestIdentifier'(Val) ->
if Val bsr 16 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_RequestIdentifier(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_LoginConfirm'(Val) ->
[align|begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end].


dec_LoginConfirm(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{{'LoginConfirm',Term1},Bytes1}.

'enc_LoginReject'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
enc_LoginFailureReason(Enc3@element)
end].


dec_LoginReject(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type LoginFailureReason
{Term2,Bytes2} = dec_LoginFailureReason(Bytes1),
{{'LoginReject',Term1,Term2},Bytes2}.

'enc_LoginFailureReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= securityDenial ->
<<0:2>>;
ChoiceTag =:= passwordMismatch ->
<<1:2>>;
ChoiceTag =:= nonExistUser ->
<<2:2>>;
ChoiceTag =:= undefinedReason ->
<<3:2>>
end.


dec_LoginFailureReason(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{securityDenial,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{passwordMismatch,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{nonExistUser,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{undefinedReason,Val},NewBytes}
end.
'enc_CloseRequest'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@len = byte_size(Enc4@element),
if Enc5@len < 128 ->
[Enc5@len|Enc4@element];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc4@element];
true ->
encode_fragmented(Enc4@element, 8)
end
end
end
end].


dec_CloseRequest(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'CloseRequest',Term1,Term2},Bytes3}.

'enc_CloseConfirm'(Val) ->
[align|begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end].


dec_CloseConfirm(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{{'CloseConfirm',Term1},Bytes1}.

'enc_CloseReject'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
enc_CloseFailureReason(Enc3@element)
end].


dec_CloseReject(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CloseFailureReason
{Term2,Bytes2} = dec_CloseFailureReason(Bytes1),
{{'CloseReject',Term1,Term2},Bytes2}.

'enc_CloseFailureReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= securityDenial ->
<<0:1>>;
ChoiceTag =:= undefinedReason ->
<<1:1>>
end.


dec_CloseFailureReason(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{securityDenial,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{undefinedReason,Val},NewBytes}
end.
'enc_RestartRequest'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@len = byte_size(Enc4@element),
if Enc5@len < 128 ->
[Enc5@len|Enc4@element];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc4@element];
true ->
encode_fragmented(Enc4@element, 8)
end
end
end
end].


dec_RestartRequest(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'RestartRequest',Term1,Term2},Bytes3}.

'enc_RestartConfirm'(Val) ->
[align|begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end].


dec_RestartConfirm(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{{'RestartConfirm',Term1},Bytes1}.

'enc_RestartReject'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
enc_RestartFailureReason(Enc3@element)
end].


dec_RestartReject(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type RestartFailureReason
{Term2,Bytes2} = dec_RestartFailureReason(Bytes1),
{{'RestartReject',Term1,Term2},Bytes2}.

'enc_RestartFailureReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= securityDenial ->
<<0:1>>;
ChoiceTag =:= undefinedReason ->
<<1:1>>
end.


dec_RestartFailureReason(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{securityDenial,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{undefinedReason,Val},NewBytes}
end.
'enc_RegisterRequest'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
'H323-MESSAGES':enc_TransportAddress(Enc4@element)
end|begin
Enc5@element = element(4, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@len = byte_size(Enc5@element),
if Enc6@len < 128 ->
[align,
Enc6@len|Enc5@element];
Enc6@len < 16384 ->
[align,
<<2:2,Enc6@len:14>>|Enc5@element];
true ->
[align|encode_fragmented(Enc5@element, 8)]
end
end
end
end].


dec_RegisterRequest(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type TransportAddress
{Term2,Bytes3} = 'H323-MESSAGES':dec_TransportAddress(Bytes2),

%% attribute number 3 with type OCTET STRING
{Term3,Bytes4} = case Opt band 1 of
1 ->
begin
V3@Pad3 = bit_size(Bytes3) band 7,
{V3@V0,V3@Buf1} = case Bytes3 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,
{{'RegisterRequest',Term1,Term2,Term3},Bytes4}.

'enc_RegisterConfirm'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
'H323-MESSAGES':enc_TransportAddress(Enc3@element)
end].


dec_RegisterConfirm(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type TransportAddress
{Term2,Bytes2} = 'H323-MESSAGES':dec_TransportAddress(Bytes1),
{{'RegisterConfirm',Term1,Term2},Bytes2}.

'enc_RegisterReject'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
enc_RegisterFailureReason(Enc3@element)
end].


dec_RegisterReject(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type RegisterFailureReason
{Term2,Bytes2} = dec_RegisterFailureReason(Bytes1),
{{'RegisterReject',Term1,Term2},Bytes2}.

'enc_RegisterFailureReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= securityDenial ->
<<0:2>>;
ChoiceTag =:= systemOverload ->
<<1:2>>;
ChoiceTag =:= undefinedReason ->
<<2:2>>
end.


dec_RegisterFailureReason(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{securityDenial,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{systemOverload,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{undefinedReason,Val},NewBytes}
end.
'enc_ConfigGetRequest'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@len = byte_size(Enc4@element),
if Enc5@len < 128 ->
[Enc5@len|Enc4@element];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc4@element];
true ->
encode_fragmented(Enc4@element, 8)
end
end
end
end].


dec_ConfigGetRequest(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'ConfigGetRequest',Term1,Term2},Bytes3}.

'enc_ConfigGetConfirm'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
enc_ConfigurationTable(Enc3@element)
end].


dec_ConfigGetConfirm(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ConfigurationTable
{Term2,Bytes2} = dec_ConfigurationTable(Bytes1),
{{'ConfigGetConfirm',Term1,Term2},Bytes2}.

'enc_ConfigGetReject'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
enc_ConfigGetFailureReason(Enc3@element)
end].


dec_ConfigGetReject(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ConfigGetFailureReason
{Term2,Bytes2} = dec_ConfigGetFailureReason(Bytes1),
{{'ConfigGetReject',Term1,Term2},Bytes2}.

'enc_ConfigGetFailureReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= securityDenial ->
<<0:1>>;
ChoiceTag =:= undefinedReason ->
<<1:1>>
end.


dec_ConfigGetFailureReason(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{securityDenial,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{undefinedReason,Val},NewBytes}
end.
'enc_ConfigurationTable'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(2, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_AliasAddress(Enc7@element)
end
end,
begin
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_TransportAddress(Enc9@element)
end
end,
begin
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_TransportAddress(Enc11@element)
end
end,
begin
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
Enc13@element bsr 8 =:= 0 ->
[align,
Enc13@element];
true ->
exit({error,{asn1,{illegal_value,Enc13@element}}})
end
end,
begin
Enc16@element = element(6, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@len = byte_size(Enc16@element),
if Enc17@len < 128 ->
[align,
Enc17@len|Enc16@element];
Enc17@len < 16384 ->
[align,
<<2:2,Enc17@len:14>>|Enc16@element];
true ->
[align|encode_fragmented(Enc16@element, 8)]
end
end
end
end|begin
Enc19@element = element(7, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
enc_ConfigurationTable_admittedEndpoints(Enc19@element)
end
end].
'enc_ConfigurationTable_admittedEndpoints'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AdmittedEndpoint(Comp) || Comp <- Val]].


dec_ConfigurationTable_admittedEndpoints(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components1(V1@V0, V1@Buf1, []).



dec_ConfigurationTable(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type AliasAddress
{Term1,Bytes2} = case (Opt bsr 5) band 1 of
1 ->
'H323-MESSAGES':dec_AliasAddress(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type TransportAddress
{Term2,Bytes3} = case (Opt bsr 4) band 1 of
1 ->
'H323-MESSAGES':dec_TransportAddress(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type TransportAddress
{Term3,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
'H323-MESSAGES':dec_TransportAddress(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
V2@Pad2 = bit_size(Bytes4) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes4,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
V3@Pad3 = bit_size(Bytes5) band 7,
{V3@V0,V3@Buf1} = case Bytes5 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes7} = case Opt band 1 of
1 ->
'dec_ConfigurationTable_admittedEndpoints'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,
{{'ConfigurationTable',Term1,Term2,Term3,Term4,Term5,Term6},Bytes7}.

'enc_AdmittedEndpoint'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc4@element = element(2, Val),
'H323-MESSAGES':enc_TransportAddress(Enc4@element)
end,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_AdmittedEndpoint_terminalAliases(Enc5@element)
end
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
Enc7@element bsr 32 =:= 0 ->
begin
Enc7@element@bin = binary:encode_unsigned(Enc7@element),
Enc7@element@bin_size0 = byte_size(Enc7@element@bin),
Enc7@element@bin_size = Enc7@element@bin_size0 - 1,
[<<Enc7@element@bin_size:2>>,
align|Enc7@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end|begin
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
Enc10@element bsr 32 =:= 0 ->
begin
Enc10@element@bin = binary:encode_unsigned(Enc10@element),
Enc10@element@bin_size0 = byte_size(Enc10@element@bin),
Enc10@element@bin_size = Enc10@element@bin_size0 - 1,
[<<Enc10@element@bin_size:2>>,
align|Enc10@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end].
'enc_AdmittedEndpoint_terminalAliases'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H323-MESSAGES':enc_AliasAddress(Comp) || Comp <- Val]].


dec_AdmittedEndpoint_terminalAliases(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components2(V1@V0, V1@Buf1, []).



dec_AdmittedEndpoint(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type TransportAddress
{Term1,Bytes2} = 'H323-MESSAGES':dec_TransportAddress(Bytes1),

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
'dec_AdmittedEndpoint_terminalAliases'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes3,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V3,V2@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = case Opt band 1 of
1 ->
begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes4,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,
{{'AdmittedEndpoint',Term1,Term2,Term3,Term4},Bytes5}.

'enc_ConfigSetRequest'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
enc_ConfigurationTable(Enc4@element)
end|begin
Enc5@element = element(4, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@len = byte_size(Enc5@element),
if Enc6@len < 128 ->
[align,
Enc6@len|Enc5@element];
Enc6@len < 16384 ->
[align,
<<2:2,Enc6@len:14>>|Enc5@element];
true ->
[align|encode_fragmented(Enc5@element, 8)]
end
end
end
end].


dec_ConfigSetRequest(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type ConfigurationTable
{Term2,Bytes3} = dec_ConfigurationTable(Bytes2),

%% attribute number 3 with type OCTET STRING
{Term3,Bytes4} = case Opt band 1 of
1 ->
begin
V3@Pad3 = bit_size(Bytes3) band 7,
{V3@V0,V3@Buf1} = case Bytes3 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,
{{'ConfigSetRequest',Term1,Term2,Term3},Bytes4}.

'enc_ConfigSetConfirm'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
Enc4@element =:= false ->
<<0:1>>;
Enc4@element =:= true ->
<<1:1>>
end
end].


dec_ConfigSetConfirm(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'ConfigSetConfirm',Term1,Term2},Bytes3}.

'enc_ConfigSetReject'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_ConfigSetFailureReason(Enc4@element)
end
end].


dec_ConfigSetReject(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type ConfigSetFailureReason
{Term2,Bytes3} = case Opt band 1 of
1 ->
dec_ConfigSetFailureReason(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'ConfigSetReject',Term1,Term2},Bytes3}.

'enc_ConfigSetFailureReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= securityDenial ->
<<0:1>>;
ChoiceTag =:= undefinedReason ->
<<1:1>>
end.


dec_ConfigSetFailureReason(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{securityDenial,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{undefinedReason,Val},NewBytes}
end.
'enc_StatisticsRequest'(Val) ->
[align|begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end].


dec_StatisticsRequest(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{{'StatisticsRequest',Term1},Bytes1}.

'enc_StatisticsConfirm'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
enc_StatisticsTable(Enc3@element)
end].


dec_StatisticsConfirm(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type StatisticsTable
{Term2,Bytes2} = dec_StatisticsTable(Bytes1),
{{'StatisticsConfirm',Term1,Term2},Bytes2}.

'enc_StatisticsQueryRequest'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end,
begin
Enc3@element = element(3, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len < 128 ->
[Enc4@len|Enc3@element];
Enc4@len < 16384 ->
[<<2:2,Enc4@len:14>>|Enc3@element];
true ->
encode_fragmented(Enc3@element, 8)
end
end|begin
Enc5@element = element(4, Val),
Enc6@len = byte_size(Enc5@element),
if Enc6@len < 128 ->
[Enc6@len|Enc5@element];
Enc6@len < 16384 ->
[<<2:2,Enc6@len:14>>|Enc5@element];
true ->
encode_fragmented(Enc5@element, 8)
end
end].


dec_StatisticsQueryRequest(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
V2@Conv8 = binary:copy(V2@V0),
{V2@Conv8,V2@Buf1}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:7,V3@V5:V3@V3/binary-unit:8,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<1:1,0:1,V3@V4:14,V3@V6:V3@V4/binary-unit:8,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,1:1,V3@V4:6,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7}  = decode_fragmented(V3@V4, V3@Buf5, 8),
{V3@V6,V3@Buf7}
end,
V3@Conv8 = binary:copy(V3@V0),
{V3@Conv8,V3@Buf1}
end,
{{'StatisticsQueryRequest',Term1,Term2,Term3},Bytes3}.

'enc_StatisticsQueryConfirm'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
enc_StatisticsQueryTable(Enc3@element)
end].


dec_StatisticsQueryConfirm(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type StatisticsQueryTable
{Term2,Bytes2} = dec_StatisticsQueryTable(Bytes1),
{{'StatisticsQueryConfirm',Term1,Term2},Bytes2}.

'enc_StatisticsQueryTable'(Val) ->
Enc1@element = element(2, Val),
enc_BetweenZonesTable(Enc1@element).


dec_StatisticsQueryTable(Bytes) ->

%% attribute number 1 with type BetweenZonesTable
{Term1,Bytes1} = dec_BetweenZonesTable(Bytes),
{{'StatisticsQueryTable',Term1},Bytes1}.

'enc_BetweenZonesTable'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
Enc2@len = byte_size(Enc1@element),
if Enc2@len < 128 ->
[Enc2@len|Enc1@element];
Enc2@len < 16384 ->
[<<2:2,Enc2@len:14>>|Enc1@element];
true ->
encode_fragmented(Enc1@element, 8)
end
end,
begin
Enc3@element = element(3, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len < 128 ->
[Enc4@len|Enc3@element];
Enc4@len < 16384 ->
[<<2:2,Enc4@len:14>>|Enc3@element];
true ->
encode_fragmented(Enc3@element, 8)
end
end|begin
Enc5@element = element(4, Val),
if Enc5@element bsr 32 =:= 0 ->
begin
Enc5@element@bin = binary:encode_unsigned(Enc5@element),
Enc5@element@bin_size0 = byte_size(Enc5@element@bin),
Enc5@element@bin_size = Enc5@element@bin_size0 - 1,
[<<Enc5@element@bin_size:2,0:6>>|Enc5@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end].


dec_BetweenZonesTable(Bytes) ->

%% attribute number 1 with type OCTET STRING
{Term1,Bytes1} = begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
V2@Conv8 = binary:copy(V2@V0),
{V2@Conv8,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<_:6,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,
{{'BetweenZonesTable',Term1,Term2,Term3},Bytes3}.

'enc_StatisticsTable'(Val) ->
[begin
Enc1@element = element(50, Val),
Enc2@element = element(51, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(52, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element bsr 32 =:= 0 ->
begin
Enc4@element@bin = binary:encode_unsigned(Enc4@element),
Enc4@element@bin_size0 = byte_size(Enc4@element@bin),
Enc4@element@bin_size = Enc4@element@bin_size0 - 1,
[<<Enc4@element@bin_size:2>>,
align|Enc4@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element bsr 32 =:= 0 ->
begin
Enc6@element@bin = binary:encode_unsigned(Enc6@element),
Enc6@element@bin_size0 = byte_size(Enc6@element@bin),
Enc6@element@bin_size = Enc6@element@bin_size0 - 1,
[<<Enc6@element@bin_size:2,0:6>>|Enc6@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end,
begin
Enc8@element = element(4, Val),
if Enc8@element bsr 32 =:= 0 ->
begin
Enc8@element@bin = binary:encode_unsigned(Enc8@element),
Enc8@element@bin_size0 = byte_size(Enc8@element@bin),
Enc8@element@bin_size = Enc8@element@bin_size0 - 1,
[<<Enc8@element@bin_size:2,0:6>>|Enc8@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc8@element}}})
end
end,
begin
Enc10@element = element(5, Val),
if Enc10@element bsr 32 =:= 0 ->
begin
Enc10@element@bin = binary:encode_unsigned(Enc10@element),
Enc10@element@bin_size0 = byte_size(Enc10@element@bin),
Enc10@element@bin_size = Enc10@element@bin_size0 - 1,
[<<Enc10@element@bin_size:2,0:6>>|Enc10@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end,
begin
Enc12@element = element(6, Val),
if Enc12@element bsr 32 =:= 0 ->
begin
Enc12@element@bin = binary:encode_unsigned(Enc12@element),
Enc12@element@bin_size0 = byte_size(Enc12@element@bin),
Enc12@element@bin_size = Enc12@element@bin_size0 - 1,
[<<Enc12@element@bin_size:2,0:6>>|Enc12@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc12@element}}})
end
end,
begin
Enc14@element = element(7, Val),
if Enc14@element bsr 32 =:= 0 ->
begin
Enc14@element@bin = binary:encode_unsigned(Enc14@element),
Enc14@element@bin_size0 = byte_size(Enc14@element@bin),
Enc14@element@bin_size = Enc14@element@bin_size0 - 1,
[<<Enc14@element@bin_size:2,0:6>>|Enc14@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc14@element}}})
end
end,
begin
Enc16@element = element(8, Val),
if Enc16@element bsr 32 =:= 0 ->
begin
Enc16@element@bin = binary:encode_unsigned(Enc16@element),
Enc16@element@bin_size0 = byte_size(Enc16@element@bin),
Enc16@element@bin_size = Enc16@element@bin_size0 - 1,
[<<Enc16@element@bin_size:2,0:6>>|Enc16@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc16@element}}})
end
end,
begin
Enc18@element = element(9, Val),
if Enc18@element bsr 32 =:= 0 ->
begin
Enc18@element@bin = binary:encode_unsigned(Enc18@element),
Enc18@element@bin_size0 = byte_size(Enc18@element@bin),
Enc18@element@bin_size = Enc18@element@bin_size0 - 1,
[<<Enc18@element@bin_size:2,0:6>>|Enc18@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc18@element}}})
end
end,
begin
Enc20@element = element(10, Val),
if Enc20@element bsr 32 =:= 0 ->
begin
Enc20@element@bin = binary:encode_unsigned(Enc20@element),
Enc20@element@bin_size0 = byte_size(Enc20@element@bin),
Enc20@element@bin_size = Enc20@element@bin_size0 - 1,
[<<Enc20@element@bin_size:2,0:6>>|Enc20@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc20@element}}})
end
end,
begin
Enc22@element = element(11, Val),
if Enc22@element bsr 32 =:= 0 ->
begin
Enc22@element@bin = binary:encode_unsigned(Enc22@element),
Enc22@element@bin_size0 = byte_size(Enc22@element@bin),
Enc22@element@bin_size = Enc22@element@bin_size0 - 1,
[<<Enc22@element@bin_size:2,0:6>>|Enc22@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc22@element}}})
end
end,
begin
Enc24@element = element(12, Val),
if Enc24@element bsr 32 =:= 0 ->
begin
Enc24@element@bin = binary:encode_unsigned(Enc24@element),
Enc24@element@bin_size0 = byte_size(Enc24@element@bin),
Enc24@element@bin_size = Enc24@element@bin_size0 - 1,
[<<Enc24@element@bin_size:2,0:6>>|Enc24@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc24@element}}})
end
end,
begin
Enc26@element = element(13, Val),
if Enc26@element bsr 32 =:= 0 ->
begin
Enc26@element@bin = binary:encode_unsigned(Enc26@element),
Enc26@element@bin_size0 = byte_size(Enc26@element@bin),
Enc26@element@bin_size = Enc26@element@bin_size0 - 1,
[<<Enc26@element@bin_size:2,0:6>>|Enc26@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc26@element}}})
end
end,
begin
Enc28@element = element(14, Val),
if Enc28@element bsr 32 =:= 0 ->
begin
Enc28@element@bin = binary:encode_unsigned(Enc28@element),
Enc28@element@bin_size0 = byte_size(Enc28@element@bin),
Enc28@element@bin_size = Enc28@element@bin_size0 - 1,
[<<Enc28@element@bin_size:2,0:6>>|Enc28@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc28@element}}})
end
end,
begin
Enc30@element = element(15, Val),
if Enc30@element bsr 32 =:= 0 ->
begin
Enc30@element@bin = binary:encode_unsigned(Enc30@element),
Enc30@element@bin_size0 = byte_size(Enc30@element@bin),
Enc30@element@bin_size = Enc30@element@bin_size0 - 1,
[<<Enc30@element@bin_size:2,0:6>>|Enc30@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc30@element}}})
end
end,
begin
Enc32@element = element(16, Val),
if Enc32@element bsr 32 =:= 0 ->
begin
Enc32@element@bin = binary:encode_unsigned(Enc32@element),
Enc32@element@bin_size0 = byte_size(Enc32@element@bin),
Enc32@element@bin_size = Enc32@element@bin_size0 - 1,
[<<Enc32@element@bin_size:2,0:6>>|Enc32@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc32@element}}})
end
end,
begin
Enc34@element = element(17, Val),
if Enc34@element bsr 32 =:= 0 ->
begin
Enc34@element@bin = binary:encode_unsigned(Enc34@element),
Enc34@element@bin_size0 = byte_size(Enc34@element@bin),
Enc34@element@bin_size = Enc34@element@bin_size0 - 1,
[<<Enc34@element@bin_size:2,0:6>>|Enc34@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc34@element}}})
end
end,
begin
Enc36@element = element(18, Val),
if Enc36@element bsr 32 =:= 0 ->
begin
Enc36@element@bin = binary:encode_unsigned(Enc36@element),
Enc36@element@bin_size0 = byte_size(Enc36@element@bin),
Enc36@element@bin_size = Enc36@element@bin_size0 - 1,
[<<Enc36@element@bin_size:2,0:6>>|Enc36@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc36@element}}})
end
end,
begin
Enc38@element = element(19, Val),
if Enc38@element bsr 32 =:= 0 ->
begin
Enc38@element@bin = binary:encode_unsigned(Enc38@element),
Enc38@element@bin_size0 = byte_size(Enc38@element@bin),
Enc38@element@bin_size = Enc38@element@bin_size0 - 1,
[<<Enc38@element@bin_size:2,0:6>>|Enc38@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc38@element}}})
end
end,
begin
Enc40@element = element(20, Val),
if Enc40@element bsr 32 =:= 0 ->
begin
Enc40@element@bin = binary:encode_unsigned(Enc40@element),
Enc40@element@bin_size0 = byte_size(Enc40@element@bin),
Enc40@element@bin_size = Enc40@element@bin_size0 - 1,
[<<Enc40@element@bin_size:2,0:6>>|Enc40@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc40@element}}})
end
end,
begin
Enc42@element = element(21, Val),
if Enc42@element bsr 32 =:= 0 ->
begin
Enc42@element@bin = binary:encode_unsigned(Enc42@element),
Enc42@element@bin_size0 = byte_size(Enc42@element@bin),
Enc42@element@bin_size = Enc42@element@bin_size0 - 1,
[<<Enc42@element@bin_size:2,0:6>>|Enc42@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc42@element}}})
end
end,
begin
Enc44@element = element(22, Val),
if Enc44@element bsr 32 =:= 0 ->
begin
Enc44@element@bin = binary:encode_unsigned(Enc44@element),
Enc44@element@bin_size0 = byte_size(Enc44@element@bin),
Enc44@element@bin_size = Enc44@element@bin_size0 - 1,
[<<Enc44@element@bin_size:2,0:6>>|Enc44@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc44@element}}})
end
end,
begin
Enc46@element = element(23, Val),
if Enc46@element bsr 32 =:= 0 ->
begin
Enc46@element@bin = binary:encode_unsigned(Enc46@element),
Enc46@element@bin_size0 = byte_size(Enc46@element@bin),
Enc46@element@bin_size = Enc46@element@bin_size0 - 1,
[<<Enc46@element@bin_size:2,0:6>>|Enc46@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc46@element}}})
end
end,
begin
Enc48@element = element(24, Val),
if Enc48@element bsr 32 =:= 0 ->
begin
Enc48@element@bin = binary:encode_unsigned(Enc48@element),
Enc48@element@bin_size0 = byte_size(Enc48@element@bin),
Enc48@element@bin_size = Enc48@element@bin_size0 - 1,
[<<Enc48@element@bin_size:2,0:6>>|Enc48@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc48@element}}})
end
end,
begin
Enc50@element = element(25, Val),
if Enc50@element bsr 32 =:= 0 ->
begin
Enc50@element@bin = binary:encode_unsigned(Enc50@element),
Enc50@element@bin_size0 = byte_size(Enc50@element@bin),
Enc50@element@bin_size = Enc50@element@bin_size0 - 1,
[<<Enc50@element@bin_size:2,0:6>>|Enc50@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc50@element}}})
end
end,
begin
Enc52@element = element(26, Val),
if Enc52@element bsr 32 =:= 0 ->
begin
Enc52@element@bin = binary:encode_unsigned(Enc52@element),
Enc52@element@bin_size0 = byte_size(Enc52@element@bin),
Enc52@element@bin_size = Enc52@element@bin_size0 - 1,
[<<Enc52@element@bin_size:2,0:6>>|Enc52@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc52@element}}})
end
end,
begin
Enc54@element = element(27, Val),
if Enc54@element bsr 32 =:= 0 ->
begin
Enc54@element@bin = binary:encode_unsigned(Enc54@element),
Enc54@element@bin_size0 = byte_size(Enc54@element@bin),
Enc54@element@bin_size = Enc54@element@bin_size0 - 1,
[<<Enc54@element@bin_size:2,0:6>>|Enc54@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc54@element}}})
end
end,
begin
Enc56@element = element(28, Val),
if Enc56@element bsr 32 =:= 0 ->
begin
Enc56@element@bin = binary:encode_unsigned(Enc56@element),
Enc56@element@bin_size0 = byte_size(Enc56@element@bin),
Enc56@element@bin_size = Enc56@element@bin_size0 - 1,
[<<Enc56@element@bin_size:2,0:6>>|Enc56@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc56@element}}})
end
end,
begin
Enc58@element = element(29, Val),
if Enc58@element bsr 32 =:= 0 ->
begin
Enc58@element@bin = binary:encode_unsigned(Enc58@element),
Enc58@element@bin_size0 = byte_size(Enc58@element@bin),
Enc58@element@bin_size = Enc58@element@bin_size0 - 1,
[<<Enc58@element@bin_size:2,0:6>>|Enc58@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc58@element}}})
end
end,
begin
Enc60@element = element(30, Val),
if Enc60@element bsr 32 =:= 0 ->
begin
Enc60@element@bin = binary:encode_unsigned(Enc60@element),
Enc60@element@bin_size0 = byte_size(Enc60@element@bin),
Enc60@element@bin_size = Enc60@element@bin_size0 - 1,
[<<Enc60@element@bin_size:2,0:6>>|Enc60@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc60@element}}})
end
end,
begin
Enc62@element = element(31, Val),
if Enc62@element bsr 32 =:= 0 ->
begin
Enc62@element@bin = binary:encode_unsigned(Enc62@element),
Enc62@element@bin_size0 = byte_size(Enc62@element@bin),
Enc62@element@bin_size = Enc62@element@bin_size0 - 1,
[<<Enc62@element@bin_size:2,0:6>>|Enc62@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc62@element}}})
end
end,
begin
Enc64@element = element(32, Val),
if Enc64@element bsr 32 =:= 0 ->
begin
Enc64@element@bin = binary:encode_unsigned(Enc64@element),
Enc64@element@bin_size0 = byte_size(Enc64@element@bin),
Enc64@element@bin_size = Enc64@element@bin_size0 - 1,
[<<Enc64@element@bin_size:2,0:6>>|Enc64@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc64@element}}})
end
end,
begin
Enc66@element = element(33, Val),
if Enc66@element bsr 32 =:= 0 ->
begin
Enc66@element@bin = binary:encode_unsigned(Enc66@element),
Enc66@element@bin_size0 = byte_size(Enc66@element@bin),
Enc66@element@bin_size = Enc66@element@bin_size0 - 1,
[<<Enc66@element@bin_size:2,0:6>>|Enc66@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc66@element}}})
end
end,
begin
Enc68@element = element(34, Val),
if Enc68@element bsr 32 =:= 0 ->
begin
Enc68@element@bin = binary:encode_unsigned(Enc68@element),
Enc68@element@bin_size0 = byte_size(Enc68@element@bin),
Enc68@element@bin_size = Enc68@element@bin_size0 - 1,
[<<Enc68@element@bin_size:2,0:6>>|Enc68@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc68@element}}})
end
end,
begin
Enc70@element = element(35, Val),
if Enc70@element bsr 32 =:= 0 ->
begin
Enc70@element@bin = binary:encode_unsigned(Enc70@element),
Enc70@element@bin_size0 = byte_size(Enc70@element@bin),
Enc70@element@bin_size = Enc70@element@bin_size0 - 1,
[<<Enc70@element@bin_size:2,0:6>>|Enc70@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc70@element}}})
end
end,
begin
Enc72@element = element(36, Val),
if Enc72@element bsr 32 =:= 0 ->
begin
Enc72@element@bin = binary:encode_unsigned(Enc72@element),
Enc72@element@bin_size0 = byte_size(Enc72@element@bin),
Enc72@element@bin_size = Enc72@element@bin_size0 - 1,
[<<Enc72@element@bin_size:2,0:6>>|Enc72@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc72@element}}})
end
end,
begin
Enc74@element = element(37, Val),
if Enc74@element bsr 32 =:= 0 ->
begin
Enc74@element@bin = binary:encode_unsigned(Enc74@element),
Enc74@element@bin_size0 = byte_size(Enc74@element@bin),
Enc74@element@bin_size = Enc74@element@bin_size0 - 1,
[<<Enc74@element@bin_size:2,0:6>>|Enc74@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc74@element}}})
end
end,
begin
Enc76@element = element(38, Val),
if Enc76@element bsr 32 =:= 0 ->
begin
Enc76@element@bin = binary:encode_unsigned(Enc76@element),
Enc76@element@bin_size0 = byte_size(Enc76@element@bin),
Enc76@element@bin_size = Enc76@element@bin_size0 - 1,
[<<Enc76@element@bin_size:2,0:6>>|Enc76@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc76@element}}})
end
end,
begin
Enc78@element = element(39, Val),
if Enc78@element bsr 32 =:= 0 ->
begin
Enc78@element@bin = binary:encode_unsigned(Enc78@element),
Enc78@element@bin_size0 = byte_size(Enc78@element@bin),
Enc78@element@bin_size = Enc78@element@bin_size0 - 1,
[<<Enc78@element@bin_size:2,0:6>>|Enc78@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc78@element}}})
end
end,
begin
Enc80@element = element(40, Val),
if Enc80@element bsr 32 =:= 0 ->
begin
Enc80@element@bin = binary:encode_unsigned(Enc80@element),
Enc80@element@bin_size0 = byte_size(Enc80@element@bin),
Enc80@element@bin_size = Enc80@element@bin_size0 - 1,
[<<Enc80@element@bin_size:2,0:6>>|Enc80@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc80@element}}})
end
end,
begin
Enc82@element = element(41, Val),
if Enc82@element bsr 32 =:= 0 ->
begin
Enc82@element@bin = binary:encode_unsigned(Enc82@element),
Enc82@element@bin_size0 = byte_size(Enc82@element@bin),
Enc82@element@bin_size = Enc82@element@bin_size0 - 1,
[<<Enc82@element@bin_size:2,0:6>>|Enc82@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc82@element}}})
end
end,
begin
Enc84@element = element(42, Val),
'H323-MESSAGES':enc_TransportAddress(Enc84@element)
end,
begin
Enc85@element = element(43, Val),
if Enc85@element bsr 32 =:= 0 ->
begin
Enc85@element@bin = binary:encode_unsigned(Enc85@element),
Enc85@element@bin_size0 = byte_size(Enc85@element@bin),
Enc85@element@bin_size = Enc85@element@bin_size0 - 1,
[<<Enc85@element@bin_size:2>>,
align|Enc85@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc85@element}}})
end
end,
begin
Enc87@element = element(44, Val),
if Enc87@element bsr 32 =:= 0 ->
begin
Enc87@element@bin = binary:encode_unsigned(Enc87@element),
Enc87@element@bin_size0 = byte_size(Enc87@element@bin),
Enc87@element@bin_size = Enc87@element@bin_size0 - 1,
[<<Enc87@element@bin_size:2,0:6>>|Enc87@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc87@element}}})
end
end,
begin
Enc89@element = element(45, Val),
if Enc89@element bsr 32 =:= 0 ->
begin
Enc89@element@bin = binary:encode_unsigned(Enc89@element),
Enc89@element@bin_size0 = byte_size(Enc89@element@bin),
Enc89@element@bin_size = Enc89@element@bin_size0 - 1,
[<<Enc89@element@bin_size:2,0:6>>|Enc89@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc89@element}}})
end
end,
begin
Enc91@element = element(46, Val),
if Enc91@element bsr 32 =:= 0 ->
begin
Enc91@element@bin = binary:encode_unsigned(Enc91@element),
Enc91@element@bin_size0 = byte_size(Enc91@element@bin),
Enc91@element@bin_size = Enc91@element@bin_size0 - 1,
[<<Enc91@element@bin_size:2,0:6>>|Enc91@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc91@element}}})
end
end,
begin
Enc93@element = element(47, Val),
Enc94@len = byte_size(Enc93@element),
if Enc94@len < 128 ->
[Enc94@len|Enc93@element];
Enc94@len < 16384 ->
[<<2:2,Enc94@len:14>>|Enc93@element];
true ->
encode_fragmented(Enc93@element, 8)
end
end,
begin
Enc95@element = element(48, Val),
if Enc95@element bsr 32 =:= 0 ->
begin
Enc95@element@bin = binary:encode_unsigned(Enc95@element),
Enc95@element@bin_size0 = byte_size(Enc95@element@bin),
Enc95@element@bin_size = Enc95@element@bin_size0 - 1,
[<<Enc95@element@bin_size:2,0:6>>|Enc95@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc95@element}}})
end
end,
begin
Enc97@element = element(49, Val),
if Enc97@element bsr 32 =:= 0 ->
begin
Enc97@element@bin = binary:encode_unsigned(Enc97@element),
Enc97@element@bin_size0 = byte_size(Enc97@element@bin),
Enc97@element@bin_size = Enc97@element@bin_size0 - 1,
[<<Enc97@element@bin_size:2,0:6>>|Enc97@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc97@element}}})
end
end,
begin
Enc99@element = element(50, Val),
if Enc99@element =:= asn1_NOVALUE ->
[];
Enc99@element bsr 32 =:= 0 ->
begin
Enc99@element@bin = binary:encode_unsigned(Enc99@element),
Enc99@element@bin_size0 = byte_size(Enc99@element@bin),
Enc99@element@bin_size = Enc99@element@bin_size0 - 1,
[<<Enc99@element@bin_size:2,0:6>>|Enc99@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc99@element}}})
end
end,
begin
Enc102@element = element(51, Val),
if Enc102@element =:= asn1_NOVALUE ->
[];
Enc102@element bsr 32 =:= 0 ->
begin
Enc102@element@bin = binary:encode_unsigned(Enc102@element),
Enc102@element@bin_size0 = byte_size(Enc102@element@bin),
Enc102@element@bin_size = Enc102@element@bin_size0 - 1,
[<<Enc102@element@bin_size:2,0:6>>|Enc102@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc102@element}}})
end
end,
begin
Enc105@element = element(52, Val),
if Enc105@element =:= asn1_NOVALUE ->
[];
Enc105@element bsr 32 =:= 0 ->
begin
Enc105@element@bin = binary:encode_unsigned(Enc105@element),
Enc105@element@bin_size0 = byte_size(Enc105@element@bin),
Enc105@element@bin_size = Enc105@element@bin_size0 - 1,
[<<Enc105@element@bin_size:2,0:6>>|Enc105@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc105@element}}})
end
end,
begin
Enc108@element = element(53, Val),
if Enc108@element bsr 32 =:= 0 ->
begin
Enc108@element@bin = binary:encode_unsigned(Enc108@element),
Enc108@element@bin_size0 = byte_size(Enc108@element@bin),
Enc108@element@bin_size = Enc108@element@bin_size0 - 1,
[<<Enc108@element@bin_size:2,0:6>>|Enc108@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc108@element}}})
end
end,
begin
Enc110@element = element(54, Val),
if Enc110@element bsr 32 =:= 0 ->
begin
Enc110@element@bin = binary:encode_unsigned(Enc110@element),
Enc110@element@bin_size0 = byte_size(Enc110@element@bin),
Enc110@element@bin_size = Enc110@element@bin_size0 - 1,
[<<Enc110@element@bin_size:2,0:6>>|Enc110@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc110@element}}})
end
end,
begin
Enc112@element = element(55, Val),
if Enc112@element bsr 32 =:= 0 ->
begin
Enc112@element@bin = binary:encode_unsigned(Enc112@element),
Enc112@element@bin_size0 = byte_size(Enc112@element@bin),
Enc112@element@bin_size = Enc112@element@bin_size0 - 1,
[<<Enc112@element@bin_size:2,0:6>>|Enc112@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc112@element}}})
end
end,
begin
Enc114@element = element(56, Val),
if Enc114@element bsr 32 =:= 0 ->
begin
Enc114@element@bin = binary:encode_unsigned(Enc114@element),
Enc114@element@bin_size0 = byte_size(Enc114@element@bin),
Enc114@element@bin_size = Enc114@element@bin_size0 - 1,
[<<Enc114@element@bin_size:2,0:6>>|Enc114@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc114@element}}})
end
end,
begin
Enc116@element = element(57, Val),
if Enc116@element bsr 32 =:= 0 ->
begin
Enc116@element@bin = binary:encode_unsigned(Enc116@element),
Enc116@element@bin_size0 = byte_size(Enc116@element@bin),
Enc116@element@bin_size = Enc116@element@bin_size0 - 1,
[<<Enc116@element@bin_size:2,0:6>>|Enc116@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc116@element}}})
end
end,
begin
Enc118@element = element(58, Val),
if Enc118@element bsr 32 =:= 0 ->
begin
Enc118@element@bin = binary:encode_unsigned(Enc118@element),
Enc118@element@bin_size0 = byte_size(Enc118@element@bin),
Enc118@element@bin_size = Enc118@element@bin_size0 - 1,
[<<Enc118@element@bin_size:2,0:6>>|Enc118@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc118@element}}})
end
end,
begin
Enc120@element = element(59, Val),
if Enc120@element bsr 32 =:= 0 ->
begin
Enc120@element@bin = binary:encode_unsigned(Enc120@element),
Enc120@element@bin_size0 = byte_size(Enc120@element@bin),
Enc120@element@bin_size = Enc120@element@bin_size0 - 1,
[<<Enc120@element@bin_size:2,0:6>>|Enc120@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc120@element}}})
end
end,
begin
Enc122@element = element(60, Val),
if Enc122@element bsr 32 =:= 0 ->
begin
Enc122@element@bin = binary:encode_unsigned(Enc122@element),
Enc122@element@bin_size0 = byte_size(Enc122@element@bin),
Enc122@element@bin_size = Enc122@element@bin_size0 - 1,
[<<Enc122@element@bin_size:2,0:6>>|Enc122@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc122@element}}})
end
end,
begin
Enc124@element = element(61, Val),
if Enc124@element bsr 32 =:= 0 ->
begin
Enc124@element@bin = binary:encode_unsigned(Enc124@element),
Enc124@element@bin_size0 = byte_size(Enc124@element@bin),
Enc124@element@bin_size = Enc124@element@bin_size0 - 1,
[<<Enc124@element@bin_size:2,0:6>>|Enc124@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc124@element}}})
end
end,
begin
Enc126@element = element(62, Val),
if Enc126@element bsr 32 =:= 0 ->
begin
Enc126@element@bin = binary:encode_unsigned(Enc126@element),
Enc126@element@bin_size0 = byte_size(Enc126@element@bin),
Enc126@element@bin_size = Enc126@element@bin_size0 - 1,
[<<Enc126@element@bin_size:2,0:6>>|Enc126@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc126@element}}})
end
end,
begin
Enc128@element = element(63, Val),
if Enc128@element bsr 32 =:= 0 ->
begin
Enc128@element@bin = binary:encode_unsigned(Enc128@element),
Enc128@element@bin_size0 = byte_size(Enc128@element@bin),
Enc128@element@bin_size = Enc128@element@bin_size0 - 1,
[<<Enc128@element@bin_size:2,0:6>>|Enc128@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc128@element}}})
end
end,
begin
Enc130@element = element(64, Val),
if Enc130@element bsr 32 =:= 0 ->
begin
Enc130@element@bin = binary:encode_unsigned(Enc130@element),
Enc130@element@bin_size0 = byte_size(Enc130@element@bin),
Enc130@element@bin_size = Enc130@element@bin_size0 - 1,
[<<Enc130@element@bin_size:2,0:6>>|Enc130@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc130@element}}})
end
end,
begin
Enc132@element = element(65, Val),
if Enc132@element bsr 32 =:= 0 ->
begin
Enc132@element@bin = binary:encode_unsigned(Enc132@element),
Enc132@element@bin_size0 = byte_size(Enc132@element@bin),
Enc132@element@bin_size = Enc132@element@bin_size0 - 1,
[<<Enc132@element@bin_size:2,0:6>>|Enc132@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc132@element}}})
end
end,
begin
Enc134@element = element(66, Val),
if Enc134@element bsr 32 =:= 0 ->
begin
Enc134@element@bin = binary:encode_unsigned(Enc134@element),
Enc134@element@bin_size0 = byte_size(Enc134@element@bin),
Enc134@element@bin_size = Enc134@element@bin_size0 - 1,
[<<Enc134@element@bin_size:2,0:6>>|Enc134@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc134@element}}})
end
end,
begin
Enc136@element = element(67, Val),
if Enc136@element bsr 32 =:= 0 ->
begin
Enc136@element@bin = binary:encode_unsigned(Enc136@element),
Enc136@element@bin_size0 = byte_size(Enc136@element@bin),
Enc136@element@bin_size = Enc136@element@bin_size0 - 1,
[<<Enc136@element@bin_size:2,0:6>>|Enc136@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc136@element}}})
end
end,
begin
Enc138@element = element(68, Val),
if Enc138@element bsr 32 =:= 0 ->
begin
Enc138@element@bin = binary:encode_unsigned(Enc138@element),
Enc138@element@bin_size0 = byte_size(Enc138@element@bin),
Enc138@element@bin_size = Enc138@element@bin_size0 - 1,
[<<Enc138@element@bin_size:2,0:6>>|Enc138@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc138@element}}})
end
end,
begin
Enc140@element = element(69, Val),
if Enc140@element bsr 32 =:= 0 ->
begin
Enc140@element@bin = binary:encode_unsigned(Enc140@element),
Enc140@element@bin_size0 = byte_size(Enc140@element@bin),
Enc140@element@bin_size = Enc140@element@bin_size0 - 1,
[<<Enc140@element@bin_size:2,0:6>>|Enc140@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc140@element}}})
end
end,
begin
Enc142@element = element(70, Val),
if Enc142@element bsr 32 =:= 0 ->
begin
Enc142@element@bin = binary:encode_unsigned(Enc142@element),
Enc142@element@bin_size0 = byte_size(Enc142@element@bin),
Enc142@element@bin_size = Enc142@element@bin_size0 - 1,
[<<Enc142@element@bin_size:2,0:6>>|Enc142@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc142@element}}})
end
end,
begin
Enc144@element = element(71, Val),
if Enc144@element bsr 32 =:= 0 ->
begin
Enc144@element@bin = binary:encode_unsigned(Enc144@element),
Enc144@element@bin_size0 = byte_size(Enc144@element@bin),
Enc144@element@bin_size = Enc144@element@bin_size0 - 1,
[<<Enc144@element@bin_size:2,0:6>>|Enc144@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc144@element}}})
end
end,
begin
Enc146@element = element(72, Val),
if Enc146@element bsr 32 =:= 0 ->
begin
Enc146@element@bin = binary:encode_unsigned(Enc146@element),
Enc146@element@bin_size0 = byte_size(Enc146@element@bin),
Enc146@element@bin_size = Enc146@element@bin_size0 - 1,
[<<Enc146@element@bin_size:2,0:6>>|Enc146@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc146@element}}})
end
end|begin
Enc148@element = element(73, Val),
if Enc148@element bsr 32 =:= 0 ->
begin
Enc148@element@bin = binary:encode_unsigned(Enc148@element),
Enc148@element@bin_size0 = byte_size(Enc148@element@bin),
Enc148@element@bin_size = Enc148@element@bin_size0 - 1,
[<<Enc148@element@bin_size:2,0:6>>|Enc148@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc148@element}}})
end
end].


dec_StatisticsTable(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V3,V2@Buf4}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<_:6,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:6,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
<<V5@V0:2/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
<<_:6,V5@V3:V5@Add2/unsigned-unit:8,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V3,V5@Buf4}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes6} = begin
<<V6@V0:2/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 1,
<<_:6,V6@V3:V6@Add2/unsigned-unit:8,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V3,V6@Buf4}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes7} = begin
<<V7@V0:2/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes6,
V7@Add2 = V7@V0 + 1,
<<_:6,V7@V3:V7@Add2/unsigned-unit:8,V7@Buf4/bitstring>> = V7@Buf1,
{V7@V3,V7@Buf4}
end,

%% attribute number 7 with type INTEGER
{Term7,Bytes8} = begin
<<V8@V0:2/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes7,
V8@Add2 = V8@V0 + 1,
<<_:6,V8@V3:V8@Add2/unsigned-unit:8,V8@Buf4/bitstring>> = V8@Buf1,
{V8@V3,V8@Buf4}
end,

%% attribute number 8 with type INTEGER
{Term8,Bytes9} = begin
<<V9@V0:2/unsigned-unit:1,V9@Buf1/bitstring>> = Bytes8,
V9@Add2 = V9@V0 + 1,
<<_:6,V9@V3:V9@Add2/unsigned-unit:8,V9@Buf4/bitstring>> = V9@Buf1,
{V9@V3,V9@Buf4}
end,

%% attribute number 9 with type INTEGER
{Term9,Bytes10} = begin
<<V10@V0:2/unsigned-unit:1,V10@Buf1/bitstring>> = Bytes9,
V10@Add2 = V10@V0 + 1,
<<_:6,V10@V3:V10@Add2/unsigned-unit:8,V10@Buf4/bitstring>> = V10@Buf1,
{V10@V3,V10@Buf4}
end,

%% attribute number 10 with type INTEGER
{Term10,Bytes11} = begin
<<V11@V0:2/unsigned-unit:1,V11@Buf1/bitstring>> = Bytes10,
V11@Add2 = V11@V0 + 1,
<<_:6,V11@V3:V11@Add2/unsigned-unit:8,V11@Buf4/bitstring>> = V11@Buf1,
{V11@V3,V11@Buf4}
end,

%% attribute number 11 with type INTEGER
{Term11,Bytes12} = begin
<<V12@V0:2/unsigned-unit:1,V12@Buf1/bitstring>> = Bytes11,
V12@Add2 = V12@V0 + 1,
<<_:6,V12@V3:V12@Add2/unsigned-unit:8,V12@Buf4/bitstring>> = V12@Buf1,
{V12@V3,V12@Buf4}
end,

%% attribute number 12 with type INTEGER
{Term12,Bytes13} = begin
<<V13@V0:2/unsigned-unit:1,V13@Buf1/bitstring>> = Bytes12,
V13@Add2 = V13@V0 + 1,
<<_:6,V13@V3:V13@Add2/unsigned-unit:8,V13@Buf4/bitstring>> = V13@Buf1,
{V13@V3,V13@Buf4}
end,

%% attribute number 13 with type INTEGER
{Term13,Bytes14} = begin
<<V14@V0:2/unsigned-unit:1,V14@Buf1/bitstring>> = Bytes13,
V14@Add2 = V14@V0 + 1,
<<_:6,V14@V3:V14@Add2/unsigned-unit:8,V14@Buf4/bitstring>> = V14@Buf1,
{V14@V3,V14@Buf4}
end,

%% attribute number 14 with type INTEGER
{Term14,Bytes15} = begin
<<V15@V0:2/unsigned-unit:1,V15@Buf1/bitstring>> = Bytes14,
V15@Add2 = V15@V0 + 1,
<<_:6,V15@V3:V15@Add2/unsigned-unit:8,V15@Buf4/bitstring>> = V15@Buf1,
{V15@V3,V15@Buf4}
end,

%% attribute number 15 with type INTEGER
{Term15,Bytes16} = begin
<<V16@V0:2/unsigned-unit:1,V16@Buf1/bitstring>> = Bytes15,
V16@Add2 = V16@V0 + 1,
<<_:6,V16@V3:V16@Add2/unsigned-unit:8,V16@Buf4/bitstring>> = V16@Buf1,
{V16@V3,V16@Buf4}
end,

%% attribute number 16 with type INTEGER
{Term16,Bytes17} = begin
<<V17@V0:2/unsigned-unit:1,V17@Buf1/bitstring>> = Bytes16,
V17@Add2 = V17@V0 + 1,
<<_:6,V17@V3:V17@Add2/unsigned-unit:8,V17@Buf4/bitstring>> = V17@Buf1,
{V17@V3,V17@Buf4}
end,

%% attribute number 17 with type INTEGER
{Term17,Bytes18} = begin
<<V18@V0:2/unsigned-unit:1,V18@Buf1/bitstring>> = Bytes17,
V18@Add2 = V18@V0 + 1,
<<_:6,V18@V3:V18@Add2/unsigned-unit:8,V18@Buf4/bitstring>> = V18@Buf1,
{V18@V3,V18@Buf4}
end,

%% attribute number 18 with type INTEGER
{Term18,Bytes19} = begin
<<V19@V0:2/unsigned-unit:1,V19@Buf1/bitstring>> = Bytes18,
V19@Add2 = V19@V0 + 1,
<<_:6,V19@V3:V19@Add2/unsigned-unit:8,V19@Buf4/bitstring>> = V19@Buf1,
{V19@V3,V19@Buf4}
end,

%% attribute number 19 with type INTEGER
{Term19,Bytes20} = begin
<<V20@V0:2/unsigned-unit:1,V20@Buf1/bitstring>> = Bytes19,
V20@Add2 = V20@V0 + 1,
<<_:6,V20@V3:V20@Add2/unsigned-unit:8,V20@Buf4/bitstring>> = V20@Buf1,
{V20@V3,V20@Buf4}
end,

%% attribute number 20 with type INTEGER
{Term20,Bytes21} = begin
<<V21@V0:2/unsigned-unit:1,V21@Buf1/bitstring>> = Bytes20,
V21@Add2 = V21@V0 + 1,
<<_:6,V21@V3:V21@Add2/unsigned-unit:8,V21@Buf4/bitstring>> = V21@Buf1,
{V21@V3,V21@Buf4}
end,

%% attribute number 21 with type INTEGER
{Term21,Bytes22} = begin
<<V22@V0:2/unsigned-unit:1,V22@Buf1/bitstring>> = Bytes21,
V22@Add2 = V22@V0 + 1,
<<_:6,V22@V3:V22@Add2/unsigned-unit:8,V22@Buf4/bitstring>> = V22@Buf1,
{V22@V3,V22@Buf4}
end,

%% attribute number 22 with type INTEGER
{Term22,Bytes23} = begin
<<V23@V0:2/unsigned-unit:1,V23@Buf1/bitstring>> = Bytes22,
V23@Add2 = V23@V0 + 1,
<<_:6,V23@V3:V23@Add2/unsigned-unit:8,V23@Buf4/bitstring>> = V23@Buf1,
{V23@V3,V23@Buf4}
end,

%% attribute number 23 with type INTEGER
{Term23,Bytes24} = begin
<<V24@V0:2/unsigned-unit:1,V24@Buf1/bitstring>> = Bytes23,
V24@Add2 = V24@V0 + 1,
<<_:6,V24@V3:V24@Add2/unsigned-unit:8,V24@Buf4/bitstring>> = V24@Buf1,
{V24@V3,V24@Buf4}
end,

%% attribute number 24 with type INTEGER
{Term24,Bytes25} = begin
<<V25@V0:2/unsigned-unit:1,V25@Buf1/bitstring>> = Bytes24,
V25@Add2 = V25@V0 + 1,
<<_:6,V25@V3:V25@Add2/unsigned-unit:8,V25@Buf4/bitstring>> = V25@Buf1,
{V25@V3,V25@Buf4}
end,

%% attribute number 25 with type INTEGER
{Term25,Bytes26} = begin
<<V26@V0:2/unsigned-unit:1,V26@Buf1/bitstring>> = Bytes25,
V26@Add2 = V26@V0 + 1,
<<_:6,V26@V3:V26@Add2/unsigned-unit:8,V26@Buf4/bitstring>> = V26@Buf1,
{V26@V3,V26@Buf4}
end,

%% attribute number 26 with type INTEGER
{Term26,Bytes27} = begin
<<V27@V0:2/unsigned-unit:1,V27@Buf1/bitstring>> = Bytes26,
V27@Add2 = V27@V0 + 1,
<<_:6,V27@V3:V27@Add2/unsigned-unit:8,V27@Buf4/bitstring>> = V27@Buf1,
{V27@V3,V27@Buf4}
end,

%% attribute number 27 with type INTEGER
{Term27,Bytes28} = begin
<<V28@V0:2/unsigned-unit:1,V28@Buf1/bitstring>> = Bytes27,
V28@Add2 = V28@V0 + 1,
<<_:6,V28@V3:V28@Add2/unsigned-unit:8,V28@Buf4/bitstring>> = V28@Buf1,
{V28@V3,V28@Buf4}
end,

%% attribute number 28 with type INTEGER
{Term28,Bytes29} = begin
<<V29@V0:2/unsigned-unit:1,V29@Buf1/bitstring>> = Bytes28,
V29@Add2 = V29@V0 + 1,
<<_:6,V29@V3:V29@Add2/unsigned-unit:8,V29@Buf4/bitstring>> = V29@Buf1,
{V29@V3,V29@Buf4}
end,

%% attribute number 29 with type INTEGER
{Term29,Bytes30} = begin
<<V30@V0:2/unsigned-unit:1,V30@Buf1/bitstring>> = Bytes29,
V30@Add2 = V30@V0 + 1,
<<_:6,V30@V3:V30@Add2/unsigned-unit:8,V30@Buf4/bitstring>> = V30@Buf1,
{V30@V3,V30@Buf4}
end,

%% attribute number 30 with type INTEGER
{Term30,Bytes31} = begin
<<V31@V0:2/unsigned-unit:1,V31@Buf1/bitstring>> = Bytes30,
V31@Add2 = V31@V0 + 1,
<<_:6,V31@V3:V31@Add2/unsigned-unit:8,V31@Buf4/bitstring>> = V31@Buf1,
{V31@V3,V31@Buf4}
end,

%% attribute number 31 with type INTEGER
{Term31,Bytes32} = begin
<<V32@V0:2/unsigned-unit:1,V32@Buf1/bitstring>> = Bytes31,
V32@Add2 = V32@V0 + 1,
<<_:6,V32@V3:V32@Add2/unsigned-unit:8,V32@Buf4/bitstring>> = V32@Buf1,
{V32@V3,V32@Buf4}
end,

%% attribute number 32 with type INTEGER
{Term32,Bytes33} = begin
<<V33@V0:2/unsigned-unit:1,V33@Buf1/bitstring>> = Bytes32,
V33@Add2 = V33@V0 + 1,
<<_:6,V33@V3:V33@Add2/unsigned-unit:8,V33@Buf4/bitstring>> = V33@Buf1,
{V33@V3,V33@Buf4}
end,

%% attribute number 33 with type INTEGER
{Term33,Bytes34} = begin
<<V34@V0:2/unsigned-unit:1,V34@Buf1/bitstring>> = Bytes33,
V34@Add2 = V34@V0 + 1,
<<_:6,V34@V3:V34@Add2/unsigned-unit:8,V34@Buf4/bitstring>> = V34@Buf1,
{V34@V3,V34@Buf4}
end,

%% attribute number 34 with type INTEGER
{Term34,Bytes35} = begin
<<V35@V0:2/unsigned-unit:1,V35@Buf1/bitstring>> = Bytes34,
V35@Add2 = V35@V0 + 1,
<<_:6,V35@V3:V35@Add2/unsigned-unit:8,V35@Buf4/bitstring>> = V35@Buf1,
{V35@V3,V35@Buf4}
end,

%% attribute number 35 with type INTEGER
{Term35,Bytes36} = begin
<<V36@V0:2/unsigned-unit:1,V36@Buf1/bitstring>> = Bytes35,
V36@Add2 = V36@V0 + 1,
<<_:6,V36@V3:V36@Add2/unsigned-unit:8,V36@Buf4/bitstring>> = V36@Buf1,
{V36@V3,V36@Buf4}
end,

%% attribute number 36 with type INTEGER
{Term36,Bytes37} = begin
<<V37@V0:2/unsigned-unit:1,V37@Buf1/bitstring>> = Bytes36,
V37@Add2 = V37@V0 + 1,
<<_:6,V37@V3:V37@Add2/unsigned-unit:8,V37@Buf4/bitstring>> = V37@Buf1,
{V37@V3,V37@Buf4}
end,

%% attribute number 37 with type INTEGER
{Term37,Bytes38} = begin
<<V38@V0:2/unsigned-unit:1,V38@Buf1/bitstring>> = Bytes37,
V38@Add2 = V38@V0 + 1,
<<_:6,V38@V3:V38@Add2/unsigned-unit:8,V38@Buf4/bitstring>> = V38@Buf1,
{V38@V3,V38@Buf4}
end,

%% attribute number 38 with type INTEGER
{Term38,Bytes39} = begin
<<V39@V0:2/unsigned-unit:1,V39@Buf1/bitstring>> = Bytes38,
V39@Add2 = V39@V0 + 1,
<<_:6,V39@V3:V39@Add2/unsigned-unit:8,V39@Buf4/bitstring>> = V39@Buf1,
{V39@V3,V39@Buf4}
end,

%% attribute number 39 with type INTEGER
{Term39,Bytes40} = begin
<<V40@V0:2/unsigned-unit:1,V40@Buf1/bitstring>> = Bytes39,
V40@Add2 = V40@V0 + 1,
<<_:6,V40@V3:V40@Add2/unsigned-unit:8,V40@Buf4/bitstring>> = V40@Buf1,
{V40@V3,V40@Buf4}
end,

%% attribute number 40 with type INTEGER
{Term40,Bytes41} = begin
<<V41@V0:2/unsigned-unit:1,V41@Buf1/bitstring>> = Bytes40,
V41@Add2 = V41@V0 + 1,
<<_:6,V41@V3:V41@Add2/unsigned-unit:8,V41@Buf4/bitstring>> = V41@Buf1,
{V41@V3,V41@Buf4}
end,

%% attribute number 41 with type TransportAddress
{Term41,Bytes42} = 'H323-MESSAGES':dec_TransportAddress(Bytes41),

%% attribute number 42 with type INTEGER
{Term42,Bytes43} = begin
<<V42@V0:2/unsigned-unit:1,V42@Buf1/bitstring>> = Bytes42,
V42@Add2 = V42@V0 + 1,
V42@Pad5 = bit_size(V42@Buf1) band 7,
<<_:V42@Pad5,V42@V3:V42@Add2/unsigned-unit:8,V42@Buf4/bitstring>> = V42@Buf1,
{V42@V3,V42@Buf4}
end,

%% attribute number 43 with type INTEGER
{Term43,Bytes44} = begin
<<V43@V0:2/unsigned-unit:1,V43@Buf1/bitstring>> = Bytes43,
V43@Add2 = V43@V0 + 1,
<<_:6,V43@V3:V43@Add2/unsigned-unit:8,V43@Buf4/bitstring>> = V43@Buf1,
{V43@V3,V43@Buf4}
end,

%% attribute number 44 with type INTEGER
{Term44,Bytes45} = begin
<<V44@V0:2/unsigned-unit:1,V44@Buf1/bitstring>> = Bytes44,
V44@Add2 = V44@V0 + 1,
<<_:6,V44@V3:V44@Add2/unsigned-unit:8,V44@Buf4/bitstring>> = V44@Buf1,
{V44@V3,V44@Buf4}
end,

%% attribute number 45 with type INTEGER
{Term45,Bytes46} = begin
<<V45@V0:2/unsigned-unit:1,V45@Buf1/bitstring>> = Bytes45,
V45@Add2 = V45@V0 + 1,
<<_:6,V45@V3:V45@Add2/unsigned-unit:8,V45@Buf4/bitstring>> = V45@Buf1,
{V45@V3,V45@Buf4}
end,

%% attribute number 46 with type OCTET STRING
{Term46,Bytes47} = begin
{V46@V0,V46@Buf1} = case Bytes46 of
<<0:1,V46@V3:7,V46@V5:V46@V3/binary-unit:8,V46@Buf6/bitstring>> ->
{V46@V5,V46@Buf6};
<<1:1,0:1,V46@V4:14,V46@V6:V46@V4/binary-unit:8,V46@Buf7/bitstring>> ->
{V46@V6,V46@Buf7};
<<1:1,1:1,V46@V4:6,V46@Buf5/bitstring>> ->
{V46@V6,V46@Buf7}  = decode_fragmented(V46@V4, V46@Buf5, 8),
{V46@V6,V46@Buf7}
end,
V46@Conv8 = binary:copy(V46@V0),
{V46@Conv8,V46@Buf1}
end,

%% attribute number 47 with type INTEGER
{Term47,Bytes48} = begin
<<V47@V0:2/unsigned-unit:1,V47@Buf1/bitstring>> = Bytes47,
V47@Add2 = V47@V0 + 1,
<<_:6,V47@V3:V47@Add2/unsigned-unit:8,V47@Buf4/bitstring>> = V47@Buf1,
{V47@V3,V47@Buf4}
end,

%% attribute number 48 with type INTEGER
{Term48,Bytes49} = begin
<<V48@V0:2/unsigned-unit:1,V48@Buf1/bitstring>> = Bytes48,
V48@Add2 = V48@V0 + 1,
<<_:6,V48@V3:V48@Add2/unsigned-unit:8,V48@Buf4/bitstring>> = V48@Buf1,
{V48@V3,V48@Buf4}
end,

%% attribute number 49 with type INTEGER
{Term49,Bytes50} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V49@V0:2/unsigned-unit:1,V49@Buf1/bitstring>> = Bytes49,
V49@Add2 = V49@V0 + 1,
V49@Pad5 = bit_size(V49@Buf1) band 7,
<<_:V49@Pad5,V49@V3:V49@Add2/unsigned-unit:8,V49@Buf4/bitstring>> = V49@Buf1,
{V49@V3,V49@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes49}
end,

%% attribute number 50 with type INTEGER
{Term50,Bytes51} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V50@V0:2/unsigned-unit:1,V50@Buf1/bitstring>> = Bytes50,
V50@Add2 = V50@V0 + 1,
V50@Pad5 = bit_size(V50@Buf1) band 7,
<<_:V50@Pad5,V50@V3:V50@Add2/unsigned-unit:8,V50@Buf4/bitstring>> = V50@Buf1,
{V50@V3,V50@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes50}
end,

%% attribute number 51 with type INTEGER
{Term51,Bytes52} = case Opt band 1 of
1 ->
begin
<<V51@V0:2/unsigned-unit:1,V51@Buf1/bitstring>> = Bytes51,
V51@Add2 = V51@V0 + 1,
V51@Pad5 = bit_size(V51@Buf1) band 7,
<<_:V51@Pad5,V51@V3:V51@Add2/unsigned-unit:8,V51@Buf4/bitstring>> = V51@Buf1,
{V51@V3,V51@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes51}
end,

%% attribute number 52 with type INTEGER
{Term52,Bytes53} = begin
<<V52@V0:2/unsigned-unit:1,V52@Buf1/bitstring>> = Bytes52,
V52@Add2 = V52@V0 + 1,
V52@Pad5 = bit_size(V52@Buf1) band 7,
<<_:V52@Pad5,V52@V3:V52@Add2/unsigned-unit:8,V52@Buf4/bitstring>> = V52@Buf1,
{V52@V3,V52@Buf4}
end,

%% attribute number 53 with type INTEGER
{Term53,Bytes54} = begin
<<V53@V0:2/unsigned-unit:1,V53@Buf1/bitstring>> = Bytes53,
V53@Add2 = V53@V0 + 1,
<<_:6,V53@V3:V53@Add2/unsigned-unit:8,V53@Buf4/bitstring>> = V53@Buf1,
{V53@V3,V53@Buf4}
end,

%% attribute number 54 with type INTEGER
{Term54,Bytes55} = begin
<<V54@V0:2/unsigned-unit:1,V54@Buf1/bitstring>> = Bytes54,
V54@Add2 = V54@V0 + 1,
<<_:6,V54@V3:V54@Add2/unsigned-unit:8,V54@Buf4/bitstring>> = V54@Buf1,
{V54@V3,V54@Buf4}
end,

%% attribute number 55 with type INTEGER
{Term55,Bytes56} = begin
<<V55@V0:2/unsigned-unit:1,V55@Buf1/bitstring>> = Bytes55,
V55@Add2 = V55@V0 + 1,
<<_:6,V55@V3:V55@Add2/unsigned-unit:8,V55@Buf4/bitstring>> = V55@Buf1,
{V55@V3,V55@Buf4}
end,

%% attribute number 56 with type INTEGER
{Term56,Bytes57} = begin
<<V56@V0:2/unsigned-unit:1,V56@Buf1/bitstring>> = Bytes56,
V56@Add2 = V56@V0 + 1,
<<_:6,V56@V3:V56@Add2/unsigned-unit:8,V56@Buf4/bitstring>> = V56@Buf1,
{V56@V3,V56@Buf4}
end,

%% attribute number 57 with type INTEGER
{Term57,Bytes58} = begin
<<V57@V0:2/unsigned-unit:1,V57@Buf1/bitstring>> = Bytes57,
V57@Add2 = V57@V0 + 1,
<<_:6,V57@V3:V57@Add2/unsigned-unit:8,V57@Buf4/bitstring>> = V57@Buf1,
{V57@V3,V57@Buf4}
end,

%% attribute number 58 with type INTEGER
{Term58,Bytes59} = begin
<<V58@V0:2/unsigned-unit:1,V58@Buf1/bitstring>> = Bytes58,
V58@Add2 = V58@V0 + 1,
<<_:6,V58@V3:V58@Add2/unsigned-unit:8,V58@Buf4/bitstring>> = V58@Buf1,
{V58@V3,V58@Buf4}
end,

%% attribute number 59 with type INTEGER
{Term59,Bytes60} = begin
<<V59@V0:2/unsigned-unit:1,V59@Buf1/bitstring>> = Bytes59,
V59@Add2 = V59@V0 + 1,
<<_:6,V59@V3:V59@Add2/unsigned-unit:8,V59@Buf4/bitstring>> = V59@Buf1,
{V59@V3,V59@Buf4}
end,

%% attribute number 60 with type INTEGER
{Term60,Bytes61} = begin
<<V60@V0:2/unsigned-unit:1,V60@Buf1/bitstring>> = Bytes60,
V60@Add2 = V60@V0 + 1,
<<_:6,V60@V3:V60@Add2/unsigned-unit:8,V60@Buf4/bitstring>> = V60@Buf1,
{V60@V3,V60@Buf4}
end,

%% attribute number 61 with type INTEGER
{Term61,Bytes62} = begin
<<V61@V0:2/unsigned-unit:1,V61@Buf1/bitstring>> = Bytes61,
V61@Add2 = V61@V0 + 1,
<<_:6,V61@V3:V61@Add2/unsigned-unit:8,V61@Buf4/bitstring>> = V61@Buf1,
{V61@V3,V61@Buf4}
end,

%% attribute number 62 with type INTEGER
{Term62,Bytes63} = begin
<<V62@V0:2/unsigned-unit:1,V62@Buf1/bitstring>> = Bytes62,
V62@Add2 = V62@V0 + 1,
<<_:6,V62@V3:V62@Add2/unsigned-unit:8,V62@Buf4/bitstring>> = V62@Buf1,
{V62@V3,V62@Buf4}
end,

%% attribute number 63 with type INTEGER
{Term63,Bytes64} = begin
<<V63@V0:2/unsigned-unit:1,V63@Buf1/bitstring>> = Bytes63,
V63@Add2 = V63@V0 + 1,
<<_:6,V63@V3:V63@Add2/unsigned-unit:8,V63@Buf4/bitstring>> = V63@Buf1,
{V63@V3,V63@Buf4}
end,

%% attribute number 64 with type INTEGER
{Term64,Bytes65} = begin
<<V64@V0:2/unsigned-unit:1,V64@Buf1/bitstring>> = Bytes64,
V64@Add2 = V64@V0 + 1,
<<_:6,V64@V3:V64@Add2/unsigned-unit:8,V64@Buf4/bitstring>> = V64@Buf1,
{V64@V3,V64@Buf4}
end,

%% attribute number 65 with type INTEGER
{Term65,Bytes66} = begin
<<V65@V0:2/unsigned-unit:1,V65@Buf1/bitstring>> = Bytes65,
V65@Add2 = V65@V0 + 1,
<<_:6,V65@V3:V65@Add2/unsigned-unit:8,V65@Buf4/bitstring>> = V65@Buf1,
{V65@V3,V65@Buf4}
end,

%% attribute number 66 with type INTEGER
{Term66,Bytes67} = begin
<<V66@V0:2/unsigned-unit:1,V66@Buf1/bitstring>> = Bytes66,
V66@Add2 = V66@V0 + 1,
<<_:6,V66@V3:V66@Add2/unsigned-unit:8,V66@Buf4/bitstring>> = V66@Buf1,
{V66@V3,V66@Buf4}
end,

%% attribute number 67 with type INTEGER
{Term67,Bytes68} = begin
<<V67@V0:2/unsigned-unit:1,V67@Buf1/bitstring>> = Bytes67,
V67@Add2 = V67@V0 + 1,
<<_:6,V67@V3:V67@Add2/unsigned-unit:8,V67@Buf4/bitstring>> = V67@Buf1,
{V67@V3,V67@Buf4}
end,

%% attribute number 68 with type INTEGER
{Term68,Bytes69} = begin
<<V68@V0:2/unsigned-unit:1,V68@Buf1/bitstring>> = Bytes68,
V68@Add2 = V68@V0 + 1,
<<_:6,V68@V3:V68@Add2/unsigned-unit:8,V68@Buf4/bitstring>> = V68@Buf1,
{V68@V3,V68@Buf4}
end,

%% attribute number 69 with type INTEGER
{Term69,Bytes70} = begin
<<V69@V0:2/unsigned-unit:1,V69@Buf1/bitstring>> = Bytes69,
V69@Add2 = V69@V0 + 1,
<<_:6,V69@V3:V69@Add2/unsigned-unit:8,V69@Buf4/bitstring>> = V69@Buf1,
{V69@V3,V69@Buf4}
end,

%% attribute number 70 with type INTEGER
{Term70,Bytes71} = begin
<<V70@V0:2/unsigned-unit:1,V70@Buf1/bitstring>> = Bytes70,
V70@Add2 = V70@V0 + 1,
<<_:6,V70@V3:V70@Add2/unsigned-unit:8,V70@Buf4/bitstring>> = V70@Buf1,
{V70@V3,V70@Buf4}
end,

%% attribute number 71 with type INTEGER
{Term71,Bytes72} = begin
<<V71@V0:2/unsigned-unit:1,V71@Buf1/bitstring>> = Bytes71,
V71@Add2 = V71@V0 + 1,
<<_:6,V71@V3:V71@Add2/unsigned-unit:8,V71@Buf4/bitstring>> = V71@Buf1,
{V71@V3,V71@Buf4}
end,

%% attribute number 72 with type INTEGER
{Term72,Bytes73} = begin
<<V72@V0:2/unsigned-unit:1,V72@Buf1/bitstring>> = Bytes72,
V72@Add2 = V72@V0 + 1,
<<_:6,V72@V3:V72@Add2/unsigned-unit:8,V72@Buf4/bitstring>> = V72@Buf1,
{V72@V3,V72@Buf4}
end,
{{'StatisticsTable',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21,Term22,Term23,Term24,Term25,Term26,Term27,Term28,Term29,Term30,Term31,Term32,Term33,Term34,Term35,Term36,Term37,Term38,Term39,Term40,Term41,Term42,Term43,Term44,Term45,Term46,Term47,Term48,Term49,Term50,Term51,Term52,Term53,Term54,Term55,Term56,Term57,Term58,Term59,Term60,Term61,Term62,Term63,Term64,Term65,Term66,Term67,Term68,Term69,Term70,Term71,Term72},Bytes73}.

'enc_StatisticsReject'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
enc_StatisticsFailureReason(Enc3@element)
end].


dec_StatisticsReject(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type StatisticsFailureReason
{Term2,Bytes2} = dec_StatisticsFailureReason(Bytes1),
{{'StatisticsReject',Term1,Term2},Bytes2}.

'enc_StatisticsFailureReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= systemOverload ->
<<0:1>>;
ChoiceTag =:= undefinedReason ->
<<1:1>>
end.


dec_StatisticsFailureReason(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{systemOverload,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{undefinedReason,Val},NewBytes}
end.
'enc_StatisticsQueryReject'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
enc_StatisticsFailureReason(Enc3@element)
end].


dec_StatisticsQueryReject(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type StatisticsFailureReason
{Term2,Bytes2} = dec_StatisticsFailureReason(Bytes1),
{{'StatisticsQueryReject',Term1,Term2},Bytes2}.

'enc_EndpointRequest'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc6@element = element(2, Val),
if Enc6@element bsr 16 =:= 0 ->
<<Enc6@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end,
begin
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_AliasAddress(Enc8@element)
end
end,
begin
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_TransportAddress(Enc10@element)
end
end,
begin
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@len = length(Enc12@element),
Enc13@bin = encode_chars_16bit(Enc12@element),
Enc13@len@sub = Enc13@len - 1,
if Enc13@len@sub bsr 7 =:= 0 ->
[<<Enc13@len@sub:7>>,
align|Enc13@bin]
end
end
end
end,
begin
Enc15@element = element(6, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@len = byte_size(Enc15@element),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc15@element];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc15@element];
true ->
[align|encode_fragmented(Enc15@element, 8)]
end
end
end
end|begin
Enc18@element = element(7, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
0 =< Enc18@element, Enc18@element < 11 ->
<<Enc18@element:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc18@element}}})
end
end].


dec_EndpointRequest(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type AliasAddress
{Term2,Bytes3} = case (Opt bsr 4) band 1 of
1 ->
'H323-MESSAGES':dec_AliasAddress(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type TransportAddress
{Term3,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
'H323-MESSAGES':dec_TransportAddress(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type BMPString
{Term4,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:7/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes4,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:16,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars_16bit(V3@V3),V3@Buf4},
{V3@V7,V3@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
V4@Pad3 = bit_size(Bytes5) band 7,
{V4@V0,V4@Buf1} = case Bytes5 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
V4@Conv10 = binary:copy(V4@V0),
{V4@Conv10,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes7} = case Opt band 1 of
1 ->
begin
<<V5@V0:4/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes6,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,
{{'EndpointRequest',Term1,Term2,Term3,Term4,Term5,Term6},Bytes7}.

'enc_EndpointConfirm'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
Enc4@element =:= false ->
<<0:1>>;
Enc4@element =:= true ->
<<1:1>>
end
end,
begin
Enc7@element = element(4, Val),
enc_EndpointConfirm_endpoints(Enc7@element)
end|begin
Enc8@element = element(5, Val),
if Enc8@element bsr 32 =:= 0 ->
begin
Enc8@element@bin = binary:encode_unsigned(Enc8@element),
Enc8@element@bin_size0 = byte_size(Enc8@element@bin),
Enc8@element@bin_size = Enc8@element@bin_size0 - 1,
[<<Enc8@element@bin_size:2>>,
align|Enc8@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc8@element}}})
end
end].
'enc_EndpointConfirm_endpoints'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_EndpointEntry(Comp) || Comp <- Val]].


dec_EndpointConfirm_endpoints(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components3(V1@V0, V1@Buf1, []).



dec_EndpointConfirm(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes4} = 'dec_EndpointConfirm_endpoints'(Bytes3),

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,
{{'EndpointConfirm',Term1,Term2,Term3,Term4},Bytes5}.

'enc_EndpointReject'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end|begin
Enc3@element = element(3, Val),
enc_EndpointFailureReason(Enc3@element)
end].


dec_EndpointReject(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type EndpointFailureReason
{Term2,Bytes2} = dec_EndpointFailureReason(Bytes1),
{{'EndpointReject',Term1,Term2},Bytes2}.

'enc_EndpointFailureReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= systemOverload ->
<<0:2>>;
ChoiceTag =:= notFound ->
<<1:2>>;
ChoiceTag =:= undefinedReason ->
<<2:2>>
end.


dec_EndpointFailureReason(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{systemOverload,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{notFound,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{undefinedReason,Val},NewBytes}
end.
'enc_CallRequest'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 16 =:= 0 ->
<<Enc3@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@len = byte_size(Enc5@element),
if Enc6@len < 128 ->
[Enc6@len|Enc5@element];
Enc6@len < 16384 ->
[<<2:2,Enc6@len:14>>|Enc5@element];
true ->
encode_fragmented(Enc5@element, 8)
end
end
end
end,
begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@len = byte_size(Enc8@element),
if Enc9@len < 128 ->
[Enc9@len|Enc8@element];
Enc9@len < 16384 ->
[<<2:2,Enc9@len:14>>|Enc8@element];
true ->
encode_fragmented(Enc8@element, 8)
end
end
end
end|begin
Enc11@element = element(5, Val),
Enc12@len = length(Enc11@element),
Enc12@bin = encode_chars_16bit(Enc11@element),
Enc12@len@sub = Enc12@len - 1,
if Enc12@len@sub bsr 7 =:= 0 ->
[<<Enc12@len@sub:7,0:1>>|Enc12@bin]
end
end].


dec_CallRequest(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes4} = case Opt band 1 of
1 ->
begin
V4@Pad3 = bit_size(Bytes3) band 7,
{V4@V0,V4@Buf1} = case Bytes3 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
V4@Conv10 = binary:copy(V4@V0),
{V4@Conv10,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type BMPString
{Term4,Bytes5} = begin
<<V5@V0:7/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/binary-unit:16,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V7,V5@Buf8}  = {decode_chars_16bit(V5@V3),V5@Buf4},
{V5@V7,V5@Buf8}
end,
{{'CallRequest',Term1,Term2,Term3,Term4},Bytes5}.

'enc_CallConfirm'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc2@element = element(2, Val),
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
Enc5@len = length(Enc4@element),
Enc5@bin = encode_chars_16bit(Enc4@element),
Enc5@len@sub = Enc5@len - 1,
if Enc5@len@sub bsr 7 =:= 0 ->
[<<Enc5@len@sub:7,0:1>>|Enc5@bin]
end
end,
begin
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
Enc6@element =:= false ->
<<0:1>>;
Enc6@element =:= true ->
<<1:1>>
end
end|begin
Enc9@element = element(5, Val),
enc_CallConfirm_calls(Enc9@element)
end].
'enc_CallConfirm_calls'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CallEntry(Comp) || Comp <- Val]].


dec_CallConfirm_calls(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components4(V1@V0, V1@Buf1, []).



dec_CallConfirm(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type BMPString
{Term2,Bytes3} = begin
<<V3@V0:7/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<_:1,V3@V3:V3@Add2/binary-unit:16,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V6,V3@Buf7}  = {decode_chars_16bit(V3@V3),V3@Buf4},
{V3@V6,V3@Buf7}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes5} = 'dec_CallConfirm_calls'(Bytes4),
{{'CallConfirm',Term1,Term2,Term3,Term4},Bytes5}.

'enc_CallReject'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end,
begin
Enc3@element = element(3, Val),
Enc4@len = length(Enc3@element),
Enc4@bin = encode_chars_16bit(Enc3@element),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 7 =:= 0 ->
[<<Enc4@len@sub:7,0:1>>|Enc4@bin]
end
end|begin
Enc5@element = element(4, Val),
enc_CallFailureReason(Enc5@element)
end].


dec_CallReject(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type BMPString
{Term2,Bytes2} = begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
<<_:1,V2@V3:V2@Add2/binary-unit:16,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V6,V2@Buf7}  = {decode_chars_16bit(V2@V3),V2@Buf4},
{V2@V6,V2@Buf7}
end,

%% attribute number 3 with type CallFailureReason
{Term3,Bytes3} = dec_CallFailureReason(Bytes2),
{{'CallReject',Term1,Term2,Term3},Bytes3}.

'enc_CallFailureReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= systemOverload ->
<<0:2>>;
ChoiceTag =:= notFound ->
<<1:2>>;
ChoiceTag =:= undefinedReason ->
<<2:2>>
end.


dec_CallFailureReason(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{systemOverload,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{notFound,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{undefinedReason,Val},NewBytes}
end.
'enc_UnknowMessage'(Val) ->
[align|begin
Enc1@element = element(2, Val),
if Enc1@element bsr 16 =:= 0 ->
<<Enc1@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end
end].


dec_UnknowMessage(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{{'UnknowMessage',Term1},Bytes1}.

'enc_EndpointEntry'(Val) ->
[begin
Enc1@element = element(7, Val),
Enc2@element = element(8, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(9, Val),
Enc4@element = element(10, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(11, Val),
Enc6@element = element(12, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(2, Val),
Enc8@len = length(Enc7@element),
Enc8@bin = encode_chars_16bit(Enc7@element),
Enc8@len@sub = Enc8@len - 1,
if Enc8@len@sub bsr 7 =:= 0 ->
[<<Enc8@len@sub:7>>,
align|Enc8@bin]
end
end,
begin
Enc9@element = element(3, Val),
'H323-MESSAGES':enc_EndpointType(Enc9@element)
end,
begin
Enc10@element = element(4, Val),
if Enc10@element bsr 32 =:= 0 ->
begin
Enc10@element@bin = binary:encode_unsigned(Enc10@element),
Enc10@element@bin_size0 = byte_size(Enc10@element@bin),
Enc10@element@bin_size = Enc10@element@bin_size0 - 1,
[<<Enc10@element@bin_size:2>>,
align|Enc10@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end,
begin
Enc12@element = element(5, Val),
enc_EndpointEntry_callSignalAddresses(Enc12@element)
end,
begin
Enc13@element = element(6, Val),
enc_EndpointEntry_rasAddresses(Enc13@element)
end,
begin
Enc14@element = element(7, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_EndpointEntry_aliasAddresses(Enc14@element)
end
end,
begin
Enc16@element = element(8, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
Enc16@element bsr 32 =:= 0 ->
begin
Enc16@element@bin = binary:encode_unsigned(Enc16@element),
Enc16@element@bin_size0 = byte_size(Enc16@element@bin),
Enc16@element@bin_size = Enc16@element@bin_size0 - 1,
[<<Enc16@element@bin_size:2>>,
align|Enc16@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc16@element}}})
end
end,
begin
Enc19@element = element(9, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
Enc19@element bsr 32 =:= 0 ->
begin
Enc19@element@bin = binary:encode_unsigned(Enc19@element),
Enc19@element@bin_size0 = byte_size(Enc19@element@bin),
Enc19@element@bin_size = Enc19@element@bin_size0 - 1,
[<<Enc19@element@bin_size:2>>,
align|Enc19@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc19@element}}})
end
end,
begin
Enc22@element = element(10, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
Enc22@element bsr 32 =:= 0 ->
begin
Enc22@element@bin = binary:encode_unsigned(Enc22@element),
Enc22@element@bin_size0 = byte_size(Enc22@element@bin),
Enc22@element@bin_size = Enc22@element@bin_size0 - 1,
[<<Enc22@element@bin_size:2>>,
align|Enc22@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc22@element}}})
end
end,
begin
Enc25@element = element(11, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
Enc25@element bsr 32 =:= 0 ->
begin
Enc25@element@bin = binary:encode_unsigned(Enc25@element),
Enc25@element@bin_size0 = byte_size(Enc25@element@bin),
Enc25@element@bin_size = Enc25@element@bin_size0 - 1,
[<<Enc25@element@bin_size:2>>,
align|Enc25@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc25@element}}})
end
end|begin
Enc28@element = element(12, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_VendorIdentifier(Enc28@element)
end
end].
'enc_EndpointEntry_callSignalAddresses'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H323-MESSAGES':enc_TransportAddress(Comp) || Comp <- Val]].


dec_EndpointEntry_callSignalAddresses(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components5(V1@V0, V1@Buf1, []).

'enc_EndpointEntry_rasAddresses'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H323-MESSAGES':enc_TransportAddress(Comp) || Comp <- Val]].


dec_EndpointEntry_rasAddresses(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components6(V1@V0, V1@Buf1, []).

'enc_EndpointEntry_aliasAddresses'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H323-MESSAGES':enc_AliasAddress(Comp) || Comp <- Val]].


dec_EndpointEntry_aliasAddresses(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components7(V1@V0, V1@Buf1, []).



dec_EndpointEntry(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BMPString
{Term1,Bytes2} = begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:16,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V7,V2@Buf8}  = {decode_chars_16bit(V2@V3),V2@Buf4},
{V2@V7,V2@Buf8}
end,

%% attribute number 2 with type EndpointType
{Term2,Bytes3} = 'H323-MESSAGES':dec_EndpointType(Bytes2),

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes5} = 'dec_EndpointEntry_callSignalAddresses'(Bytes4),

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes6} = 'dec_EndpointEntry_rasAddresses'(Bytes5),

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes7} = case (Opt bsr 5) band 1 of
1 ->
'dec_EndpointEntry_aliasAddresses'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 7 with type INTEGER
{Term7,Bytes8} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes7,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 8 with type INTEGER
{Term8,Bytes9} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:2/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes8,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/unsigned-unit:8,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V3,V5@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 9 with type INTEGER
{Term9,Bytes10} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V6@V0:2/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes9,
V6@Add2 = V6@V0 + 1,
V6@Pad5 = bit_size(V6@Buf1) band 7,
<<_:V6@Pad5,V6@V3:V6@Add2/unsigned-unit:8,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V3,V6@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 10 with type INTEGER
{Term10,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V7@V0:2/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes10,
V7@Add2 = V7@V0 + 1,
V7@Pad5 = bit_size(V7@Buf1) band 7,
<<_:V7@Pad5,V7@V3:V7@Add2/unsigned-unit:8,V7@Buf4/bitstring>> = V7@Buf1,
{V7@V3,V7@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 11 with type VendorIdentifier
{Term11,Bytes12} = case Opt band 1 of
1 ->
'H323-MESSAGES':dec_VendorIdentifier(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,
{{'EndpointEntry',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},Bytes12}.

'enc_CallEntry'(Val) ->
[begin
Enc1@element = element(10, Val),
Enc2@element = element(11, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(12, Val),
Enc4@element = element(13, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(14, Val),
Enc6@element = element(15, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(16, Val),
if Enc7@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc8@element = element(2, Val),
'H323-MESSAGES':enc_CallIdentifier(Enc8@element)
end,
align,
begin
Enc9@element = element(3, Val),
Enc10@len = byte_size(Enc9@element),
if Enc10@len =:= 16 ->
Enc9@element
end
end,
begin
Enc11@element = element(4, Val),
'H323-MESSAGES':enc_CallType(Enc11@element)
end,
begin
Enc12@element = element(5, Val),
'H323-MESSAGES':enc_CallModel(Enc12@element)
end,
begin
Enc13@element = element(6, Val),
if Enc13@element bsr 32 =:= 0 ->
begin
Enc13@element@bin = binary:encode_unsigned(Enc13@element),
Enc13@element@bin_size0 = byte_size(Enc13@element@bin),
Enc13@element@bin_size = Enc13@element@bin_size0 - 1,
[<<Enc13@element@bin_size:2>>,
align|Enc13@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc13@element}}})
end
end,
begin
Enc15@element = element(7, Val),
if Enc15@element bsr 16 =:= 0 ->
<<Enc15@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc15@element}}})
end
end,
begin
Enc17@element = element(8, Val),
if Enc17@element bsr 32 =:= 0 ->
begin
Enc17@element@bin = binary:encode_unsigned(Enc17@element),
Enc17@element@bin_size0 = byte_size(Enc17@element@bin),
Enc17@element@bin_size = Enc17@element@bin_size0 - 1,
[<<Enc17@element@bin_size:2,0:6>>|Enc17@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc17@element}}})
end
end,
begin
Enc19@element = element(9, Val),
if Enc19@element =:= false ->
<<0:1>>;
Enc19@element =:= true ->
<<1:1>>
end
end,
begin
Enc21@element = element(10, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_EndpointType(Enc21@element)
end
end,
begin
Enc23@element = element(11, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc24@len = length(Enc23@element),
Enc24@bin = encode_chars_16bit(Enc23@element),
Enc24@len@sub = Enc24@len - 1,
if Enc24@len@sub bsr 7 =:= 0 ->
[<<Enc24@len@sub:7>>,
align|Enc24@bin]
end
end
end
end,
begin
Enc26@element = element(12, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallEntry_destinationInfo(Enc26@element)
end
end,
begin
Enc28@element = element(13, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallEntry_destExtraCallInfo(Enc28@element)
end
end,
begin
Enc30@element = element(14, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallEntry_srcInfo(Enc30@element)
end
end,
begin
Enc32@element = element(15, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_TransportAddress(Enc32@element)
end
end|begin
Enc34@element = element(16, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_TransportAddress(Enc34@element)
end
end].
'enc_CallEntry_destinationInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H323-MESSAGES':enc_AliasAddress(Comp) || Comp <- Val]].


dec_CallEntry_destinationInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components8(V1@V0, V1@Buf1, []).

'enc_CallEntry_destExtraCallInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H323-MESSAGES':enc_AliasAddress(Comp) || Comp <- Val]].


dec_CallEntry_destExtraCallInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components9(V1@V0, V1@Buf1, []).

'enc_CallEntry_srcInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H323-MESSAGES':enc_AliasAddress(Comp) || Comp <- Val]].


dec_CallEntry_srcInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components10(V1@V0, V1@Buf1, []).



dec_CallEntry(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CallIdentifier
{Term1,Bytes2} = 'H323-MESSAGES':dec_CallIdentifier(Bytes1),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:16/binary-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Conv4 = binary:copy(V2@V0),
{V2@Conv4,V2@Buf1}
end,

%% attribute number 3 with type CallType
{Term3,Bytes4} = 'H323-MESSAGES':dec_CallType(Bytes3),

%% attribute number 4 with type CallModel
{Term4,Bytes5} = 'H323-MESSAGES':dec_CallModel(Bytes4),

%% attribute number 5 with type INTEGER
{Term5,Bytes6} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes5,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes7} = begin
<<V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes6,
{V4@V0,V4@Buf1}
end,

%% attribute number 7 with type INTEGER
{Term7,Bytes8} = begin
<<V5@V0:2/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes7,
V5@Add2 = V5@V0 + 1,
<<_:6,V5@V3:V5@Add2/unsigned-unit:8,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V3,V5@Buf4}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes9} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes8,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 9 with type EndpointType
{Term9,Bytes10} = case (Opt bsr 6) band 1 of
1 ->
'H323-MESSAGES':dec_EndpointType(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 10 with type BMPString
{Term10,Bytes11} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V7@V0:7/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes10,
V7@Add2 = V7@V0 + 1,
V7@Pad5 = bit_size(V7@Buf1) band 7,
<<_:V7@Pad5,V7@V3:V7@Add2/binary-unit:16,V7@Buf4/bitstring>> = V7@Buf1,
{V7@V7,V7@Buf8}  = {decode_chars_16bit(V7@V3),V7@Buf4},
{V7@V7,V7@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes12} = case (Opt bsr 4) band 1 of
1 ->
'dec_CallEntry_destinationInfo'(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 12 with type SEQUENCE OF
{Term12,Bytes13} = case (Opt bsr 3) band 1 of
1 ->
'dec_CallEntry_destExtraCallInfo'(Bytes12);
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 13 with type SEQUENCE OF
{Term13,Bytes14} = case (Opt bsr 2) band 1 of
1 ->
'dec_CallEntry_srcInfo'(Bytes13);
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 14 with type TransportAddress
{Term14,Bytes15} = case (Opt bsr 1) band 1 of
1 ->
'H323-MESSAGES':dec_TransportAddress(Bytes14);
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 15 with type TransportAddress
{Term15,Bytes16} = case Opt band 1 of
1 ->
'H323-MESSAGES':dec_TransportAddress(Bytes15);
0 ->
{asn1_NOVALUE,Bytes15}
end,
{{'CallEntry',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15},Bytes16}.

'enc_CallNumber'(Val) ->
if Val bsr 32 =:= 0 ->
begin
Val@bin = binary:encode_unsigned(Val),
Val@bin_size0 = byte_size(Val@bin),
Val@bin_size = Val@bin_size0 - 1,
[<<Val@bin_size:2>>,
align|Val@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CallNumber(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V3,V1@Buf4}
end.


%%%
%%% Run-time functions.
%%%

dec_components1(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components1(Num, Bytes, Acc) ->
{Term,Remain} = dec_AdmittedEndpoint(Bytes),
dec_components1(Num-1, Remain, [Term|Acc]).

dec_components10(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components10(Num, Bytes, Acc) ->
{Term,Remain} = 'H323-MESSAGES':dec_AliasAddress(Bytes),
dec_components10(Num-1, Remain, [Term|Acc]).

dec_components2(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components2(Num, Bytes, Acc) ->
{Term,Remain} = 'H323-MESSAGES':dec_AliasAddress(Bytes),
dec_components2(Num-1, Remain, [Term|Acc]).

dec_components3(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components3(Num, Bytes, Acc) ->
{Term,Remain} = dec_EndpointEntry(Bytes),
dec_components3(Num-1, Remain, [Term|Acc]).

dec_components4(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components4(Num, Bytes, Acc) ->
{Term,Remain} = dec_CallEntry(Bytes),
dec_components4(Num-1, Remain, [Term|Acc]).

dec_components5(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components5(Num, Bytes, Acc) ->
{Term,Remain} = 'H323-MESSAGES':dec_TransportAddress(Bytes),
dec_components5(Num-1, Remain, [Term|Acc]).

dec_components6(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components6(Num, Bytes, Acc) ->
{Term,Remain} = 'H323-MESSAGES':dec_TransportAddress(Bytes),
dec_components6(Num-1, Remain, [Term|Acc]).

dec_components7(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components7(Num, Bytes, Acc) ->
{Term,Remain} = 'H323-MESSAGES':dec_AliasAddress(Bytes),
dec_components7(Num-1, Remain, [Term|Acc]).

dec_components8(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components8(Num, Bytes, Acc) ->
{Term,Remain} = 'H323-MESSAGES':dec_AliasAddress(Bytes),
dec_components8(Num-1, Remain, [Term|Acc]).

dec_components9(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components9(Num, Bytes, Acc) ->
{Term,Remain} = 'H323-MESSAGES':dec_AliasAddress(Bytes),
dec_components9(Num-1, Remain, [Term|Acc]).

complete(L0) ->
    L = complete(L0, []),
    case list_to_bitstring(L) of
        <<>> ->
            <<0>>;
        Bin ->
            Bin
    end.

complete([], Bits, []) ->
    case Bits band 7 of
        0 ->
            [];
        N ->
            [<<0:(8 - N)>>]
    end;
complete([], Bits, [H|More]) ->
    complete(H, Bits, More);
complete([align|T], Bits, More) ->
    case Bits band 7 of
        0 ->
            complete(T, More);
        1 ->
            [<<0:7>>|complete(T, More)];
        2 ->
            [<<0:6>>|complete(T, More)];
        3 ->
            [<<0:5>>|complete(T, More)];
        4 ->
            [<<0:4>>|complete(T, More)];
        5 ->
            [<<0:3>>|complete(T, More)];
        6 ->
            [<<0:2>>|complete(T, More)];
        7 ->
            [<<0:1>>|complete(T, More)]
    end;
complete([[]|T], Bits, More) ->
    complete(T, Bits, More);
complete([[_|_] = H], Bits, More) ->
    complete(H, Bits, More);
complete([[_|_] = H|T], Bits, More) ->
    complete(H, Bits, [T|More]);
complete([H|T], Bits, More) when is_integer(H); is_binary(H) ->
    [H|complete(T, Bits, More)];
complete([H|T], Bits, More) ->
    [H|complete(T, Bits + bit_size(H), More)];
complete(Bin, Bits, More) when is_binary(Bin) ->
    [Bin|complete([], Bits, More)];
complete(Bin, Bits, More) ->
    [Bin|complete([], Bits + bit_size(Bin), More)].

complete([], []) ->
    [];
complete([], [H|More]) ->
    complete(H, More);
complete([align|T], More) ->
    complete(T, More);
complete([[]|T], More) ->
    complete(T, More);
complete([[_|_] = H], More) ->
    complete(H, More);
complete([[_|_] = H|T], More) ->
    complete(H, [T|More]);
complete([H|T], More) when is_integer(H); is_binary(H) ->
    [H|complete(T, More)];
complete([H|T], More) ->
    [H|complete(T, bit_size(H), More)];
complete(Bin, More) when is_binary(Bin) ->
    [Bin|complete([], More)];
complete(Bin, More) ->
    [Bin|complete([], bit_size(Bin), More)].

decode_chars_16bit(Val) ->
    Cs =
        [ 
         C ||
             <<C:16>> <= Val
        ],
    decode_chars_16bit_1(Cs).

decode_chars_16bit_1([H|T]) when H < 256 ->
    [H|decode_chars_16bit_1(T)];
decode_chars_16bit_1([H|T]) ->
    [{0,0,H bsr 8,H band 255}|decode_chars_16bit_1(T)];
decode_chars_16bit_1([]) ->
    [].

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

encode_chars_16bit(Val) ->
    L = [ 
         case C of
             {0,0,A,B} ->
                 [A,B];
             C when is_integer(C) ->
                 [0,C]
         end ||
             C <- Val
        ],
    iolist_to_binary(L).

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>,B|encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len,Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>,Bin]
            end
    end.
