%% Generated by the Erlang ASN.1 PER-compiler version, utilizing bit-syntax:3.0
%% Purpose: encoder and decoder to the types in mod ConferenceBooking-MESSAGE

-module('ConferenceBooking-MESSAGE').
-compile(nowarn_unused_vars).
-include("ConferenceBooking-MESSAGE.hrl").
-asn1_info([{vsn,'3.0'},
            {module,'ConferenceBooking-MESSAGE'},
            {options,[{i,"D:/GK_LINUX/test/erlang"},
 warnings,per,errors,
 {cwd,"D:/GK_LINUX/test/erlang"},
 {outdir,"D:/GK_LINUX/test/erlang"},
 {i,"."},
 {i,"d:/GK_LINUX/test/erlang"}]}]).

-export([encoding_rule/0,bit_string_format/0,         legacy_erlang_types/0]).
-export([
'enc_ARQsNonStandardData'/1,
'enc_BookingTerminalInfo'/1,
'enc_TerminalPortType'/1,
'enc_ARQCommandType'/1,
'enc_PayMethod'/1,
'enc_ACFsNonStandardData'/1,
'enc_ARJsNonStandardData'/1,
'enc_ARJsErrorReason'/1,
'enc_DRQsNonStandardData'/1,
'enc_DRQsServiceType'/1,
'enc_DRQsTerminationCause'/1
]).

-export([
'dec_ARQsNonStandardData'/1,
'dec_BookingTerminalInfo'/1,
'dec_TerminalPortType'/1,
'dec_ARQCommandType'/1,
'dec_PayMethod'/1,
'dec_ACFsNonStandardData'/1,
'dec_ARJsNonStandardData'/1,
'dec_ARJsErrorReason'/1,
'dec_DRQsNonStandardData'/1,
'dec_DRQsServiceType'/1,
'dec_DRQsTerminationCause'/1
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> per.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, Data) of
  {Result,Rest} ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('ARQsNonStandardData',Data) -> 'enc_ARQsNonStandardData'(Data);
encode_disp('BookingTerminalInfo',Data) -> 'enc_BookingTerminalInfo'(Data);
encode_disp('TerminalPortType',Data) -> 'enc_TerminalPortType'(Data);
encode_disp('ARQCommandType',Data) -> 'enc_ARQCommandType'(Data);
encode_disp('PayMethod',Data) -> 'enc_PayMethod'(Data);
encode_disp('ACFsNonStandardData',Data) -> 'enc_ACFsNonStandardData'(Data);
encode_disp('ARJsNonStandardData',Data) -> 'enc_ARJsNonStandardData'(Data);
encode_disp('ARJsErrorReason',Data) -> 'enc_ARJsErrorReason'(Data);
encode_disp('DRQsNonStandardData',Data) -> 'enc_DRQsNonStandardData'(Data);
encode_disp('DRQsServiceType',Data) -> 'enc_DRQsServiceType'(Data);
encode_disp('DRQsTerminationCause',Data) -> 'enc_DRQsTerminationCause'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('ARQsNonStandardData',Data) -> 'dec_ARQsNonStandardData'(Data);
decode_disp('BookingTerminalInfo',Data) -> 'dec_BookingTerminalInfo'(Data);
decode_disp('TerminalPortType',Data) -> 'dec_TerminalPortType'(Data);
decode_disp('ARQCommandType',Data) -> 'dec_ARQCommandType'(Data);
decode_disp('PayMethod',Data) -> 'dec_PayMethod'(Data);
decode_disp('ACFsNonStandardData',Data) -> 'dec_ACFsNonStandardData'(Data);
decode_disp('ARJsNonStandardData',Data) -> 'dec_ARJsNonStandardData'(Data);
decode_disp('ARJsErrorReason',Data) -> 'dec_ARJsErrorReason'(Data);
decode_disp('DRQsNonStandardData',Data) -> 'dec_DRQsNonStandardData'(Data);
decode_disp('DRQsServiceType',Data) -> 'dec_DRQsServiceType'(Data);
decode_disp('DRQsTerminationCause',Data) -> 'dec_DRQsTerminationCause'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
'enc_ARQsNonStandardData'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
Enc6@element = element(8, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(9, Val),
Enc8@element = element(10, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(11, Val),
Enc10@element = element(12, Val),
if Enc9@element =:= asn1_NOVALUE ->
if Enc10@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@element = element(13, Val),
Enc12@element = element(14, Val),
if Enc11@element =:= asn1_NOVALUE ->
if Enc12@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc12@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@element = element(15, Val),
Enc14@element = element(16, Val),
if Enc13@element =:= asn1_NOVALUE ->
if Enc14@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc14@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc15@element = element(17, Val),
Enc16@element = element(18, Val),
if Enc15@element =:= asn1_NOVALUE ->
if Enc16@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc16@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc18@element = element(2, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element bsr 32 =:= 0 ->
begin
Enc18@element@bin = binary:encode_unsigned(Enc18@element),
Enc18@element@bin_size0 = byte_size(Enc18@element@bin),
Enc18@element@bin_size = Enc18@element@bin_size0 - 1,
[<<Enc18@element@bin_size:2>>,
align|Enc18@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc18@element}}})
end
end,
begin
Enc21@element = element(3, Val),
enc_ARQCommandType(Enc21@element)
end,
begin
Enc22@element = element(4, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@len = byte_size(Enc22@element),
Enc23@len@sub = Enc23@len - 1,
if Enc23@len@sub bsr 7 =:= 0 ->
[<<Enc23@len@sub:7>>,
align|Enc22@element]
end
end
end
end,
begin
Enc25@element = element(5, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@len = byte_size(Enc25@element),
Enc26@len@sub = Enc26@len - 1,
if Enc26@len@sub bsr 7 =:= 0 ->
[<<Enc26@len@sub:7>>,
align|Enc25@element]
end
end
end
end,
begin
Enc28@element = element(6, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc29@len = byte_size(Enc28@element),
Enc29@len@sub = Enc29@len - 1,
if Enc29@len@sub bsr 5 =:= 0 ->
[<<Enc29@len@sub:5>>,
align|Enc28@element]
end
end
end
end,
begin
Enc31@element = element(7, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc32@len = byte_size(Enc31@element),
Enc32@len@sub = Enc32@len - 1,
if Enc32@len@sub bsr 5 =:= 0 ->
[<<Enc32@len@sub:5>>,
align|Enc31@element]
end
end
end
end,
begin
Enc34@element = element(8, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
enc_PayMethod(Enc34@element)
end
end,
begin
Enc36@element = element(9, Val),
if Enc36@element =:= asn1_NOVALUE ->
[];
Enc36@element bsr 32 =:= 0 ->
begin
Enc36@element@bin = binary:encode_unsigned(Enc36@element),
Enc36@element@bin_size0 = byte_size(Enc36@element@bin),
Enc36@element@bin_size = Enc36@element@bin_size0 - 1,
[<<Enc36@element@bin_size:2>>,
align|Enc36@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc36@element}}})
end
end,
begin
Enc39@element = element(10, Val),
if Enc39@element =:= asn1_NOVALUE ->
[];
Enc39@element bsr 32 =:= 0 ->
begin
Enc39@element@bin = binary:encode_unsigned(Enc39@element),
Enc39@element@bin_size0 = byte_size(Enc39@element@bin),
Enc39@element@bin_size = Enc39@element@bin_size0 - 1,
[<<Enc39@element@bin_size:2>>,
align|Enc39@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc39@element}}})
end
end,
begin
Enc42@element = element(11, Val),
if Enc42@element =:= asn1_NOVALUE ->
[];
Enc42@element bsr 32 =:= 0 ->
begin
Enc42@element@bin = binary:encode_unsigned(Enc42@element),
Enc42@element@bin_size0 = byte_size(Enc42@element@bin),
Enc42@element@bin_size = Enc42@element@bin_size0 - 1,
[<<Enc42@element@bin_size:2>>,
align|Enc42@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc42@element}}})
end
end,
begin
Enc45@element = element(12, Val),
if Enc45@element =:= asn1_NOVALUE ->
[];
Enc45@element =:= false ->
<<0:1>>;
Enc45@element =:= true ->
<<1:1>>
end
end,
begin
Enc48@element = element(13, Val),
if Enc48@element =:= asn1_NOVALUE ->
[];
Enc48@element =:= false ->
<<0:1>>;
Enc48@element =:= true ->
<<1:1>>
end
end,
begin
Enc51@element = element(14, Val),
if Enc51@element =:= asn1_NOVALUE ->
[];
true ->
enc_ARQsNonStandardData_terminal(Enc51@element)
end
end,
begin
Enc53@element = element(15, Val),
if Enc53@element =:= asn1_NOVALUE ->
[];
Enc53@element bsr 32 =:= 0 ->
begin
Enc53@element@bin = binary:encode_unsigned(Enc53@element),
Enc53@element@bin_size0 = byte_size(Enc53@element@bin),
Enc53@element@bin_size = Enc53@element@bin_size0 - 1,
[<<Enc53@element@bin_size:2>>,
align|Enc53@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc53@element}}})
end
end,
begin
Enc56@element = element(16, Val),
if Enc56@element =:= asn1_NOVALUE ->
[];
Enc56@element bsr 32 =:= 0 ->
begin
Enc56@element@bin = binary:encode_unsigned(Enc56@element),
Enc56@element@bin_size0 = byte_size(Enc56@element@bin),
Enc56@element@bin_size = Enc56@element@bin_size0 - 1,
[<<Enc56@element@bin_size:2>>,
align|Enc56@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc56@element}}})
end
end,
begin
Enc59@element = element(17, Val),
if Enc59@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc60@len = byte_size(Enc59@element),
Enc60@len@sub = Enc60@len - 1,
if Enc60@len@sub bsr 7 =:= 0 ->
[<<Enc60@len@sub:7>>,
align|Enc59@element]
end
end
end
end|begin
Enc62@element = element(18, Val),
if Enc62@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc63@len = byte_size(Enc62@element),
Enc63@len@sub = Enc63@len - 1,
if Enc63@len@sub bsr 5 =:= 0 ->
[<<Enc63@len@sub:5>>,
align|Enc62@element]
end
end
end
end].
'enc_ARQsNonStandardData_terminal'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_BookingTerminalInfo(Comp) || Comp <- Val]].


dec_ARQsNonStandardData_terminal(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components1(V1@V0, V1@Buf1, []).



dec_ARQsNonStandardData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 15) band 1 of
1 ->
begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type ARQCommandType
{Term2,Bytes4} = dec_ARQCommandType(Bytes3),

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = case (Opt bsr 14) band 1 of
1 ->
begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Conv7 = binary:copy(V4@V3),
{V4@Conv7,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type OCTET STRING
{Term4,Bytes6} = case (Opt bsr 13) band 1 of
1 ->
begin
<<V5@V0:7/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes5,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/binary-unit:8,V5@Buf4/bitstring>> = V5@Buf1,
V5@Conv7 = binary:copy(V5@V3),
{V5@Conv7,V5@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes7} = case (Opt bsr 12) band 1 of
1 ->
begin
<<V6@V0:5/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes6,
V6@Add2 = V6@V0 + 1,
V6@Pad5 = bit_size(V6@Buf1) band 7,
<<_:V6@Pad5,V6@V3:V6@Add2/binary-unit:8,V6@Buf4/bitstring>> = V6@Buf1,
V6@Conv7 = binary:copy(V6@V3),
{V6@Conv7,V6@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type OCTET STRING
{Term6,Bytes8} = case (Opt bsr 11) band 1 of
1 ->
begin
<<V7@V0:5/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes7,
V7@Add2 = V7@V0 + 1,
V7@Pad5 = bit_size(V7@Buf1) band 7,
<<_:V7@Pad5,V7@V3:V7@Add2/binary-unit:8,V7@Buf4/bitstring>> = V7@Buf1,
V7@Conv7 = binary:copy(V7@V3),
{V7@Conv7,V7@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type PayMethod
{Term7,Bytes9} = case (Opt bsr 10) band 1 of
1 ->
dec_PayMethod(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type INTEGER
{Term8,Bytes10} = case (Opt bsr 9) band 1 of
1 ->
begin
<<V8@V0:2/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes9,
V8@Add2 = V8@V0 + 1,
V8@Pad5 = bit_size(V8@Buf1) band 7,
<<_:V8@Pad5,V8@V3:V8@Add2/unsigned-unit:8,V8@Buf4/bitstring>> = V8@Buf1,
{V8@V3,V8@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type INTEGER
{Term9,Bytes11} = case (Opt bsr 8) band 1 of
1 ->
begin
<<V9@V0:2/unsigned-unit:1,V9@Buf1/bitstring>> = Bytes10,
V9@Add2 = V9@V0 + 1,
V9@Pad5 = bit_size(V9@Buf1) band 7,
<<_:V9@Pad5,V9@V3:V9@Add2/unsigned-unit:8,V9@Buf4/bitstring>> = V9@Buf1,
{V9@V3,V9@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type INTEGER
{Term10,Bytes12} = case (Opt bsr 7) band 1 of
1 ->
begin
<<V10@V0:2/unsigned-unit:1,V10@Buf1/bitstring>> = Bytes11,
V10@Add2 = V10@V0 + 1,
V10@Pad5 = bit_size(V10@Buf1) band 7,
<<_:V10@Pad5,V10@V3:V10@Add2/unsigned-unit:8,V10@Buf4/bitstring>> = V10@Buf1,
{V10@V3,V10@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 11 with type BOOLEAN
{Term11,Bytes13} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V11@V0:1,V11@Buf1/bitstring>> = Bytes12,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 12 with type BOOLEAN
{Term12,Bytes14} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V12@V0:1,V12@Buf1/bitstring>> = Bytes13,
V12@Int2 = case V12@V0 of
0 -> false;
1 -> true
end,
{V12@Int2,V12@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 13 with type SEQUENCE OF
{Term13,Bytes15} = case (Opt bsr 4) band 1 of
1 ->
'dec_ARQsNonStandardData_terminal'(Bytes14);
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 14 with type INTEGER
{Term14,Bytes16} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V13@V0:2/unsigned-unit:1,V13@Buf1/bitstring>> = Bytes15,
V13@Add2 = V13@V0 + 1,
V13@Pad5 = bit_size(V13@Buf1) band 7,
<<_:V13@Pad5,V13@V3:V13@Add2/unsigned-unit:8,V13@Buf4/bitstring>> = V13@Buf1,
{V13@V3,V13@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 15 with type INTEGER
{Term15,Bytes17} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V14@V0:2/unsigned-unit:1,V14@Buf1/bitstring>> = Bytes16,
V14@Add2 = V14@V0 + 1,
V14@Pad5 = bit_size(V14@Buf1) band 7,
<<_:V14@Pad5,V14@V3:V14@Add2/unsigned-unit:8,V14@Buf4/bitstring>> = V14@Buf1,
{V14@V3,V14@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 16 with type OCTET STRING
{Term16,Bytes18} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V15@V0:7/unsigned-unit:1,V15@Buf1/bitstring>> = Bytes17,
V15@Add2 = V15@V0 + 1,
V15@Pad5 = bit_size(V15@Buf1) band 7,
<<_:V15@Pad5,V15@V3:V15@Add2/binary-unit:8,V15@Buf4/bitstring>> = V15@Buf1,
V15@Conv7 = binary:copy(V15@V3),
{V15@Conv7,V15@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 17 with type OCTET STRING
{Term17,Bytes19} = case Opt band 1 of
1 ->
begin
<<V16@V0:5/unsigned-unit:1,V16@Buf1/bitstring>> = Bytes18,
V16@Add2 = V16@V0 + 1,
V16@Pad5 = bit_size(V16@Buf1) band 7,
<<_:V16@Pad5,V16@V3:V16@Add2/binary-unit:8,V16@Buf4/bitstring>> = V16@Buf1,
V16@Conv7 = binary:copy(V16@V3),
{V16@Conv7,V16@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes18}
end,

%% Extensions
{Extensions,Bytes20} = case Ext of
0 -> {<<>>,Bytes19};
1 ->
{V17@V0,V17@Buf1} = case Bytes19 of
<<0:1,V17@V3:6,V17@Buf4/bitstring>> ->
V17@Add5 = V17@V3 + 1,
{V17@Add5,V17@Buf4};
<<1:1,V17@Buf2/bitstring>> ->
V17@Pad6 = bit_size(V17@Buf2) band 7,
{V17@V3,V17@Buf4} = case V17@Buf2 of
<<_:V17@Pad6,0:1,V17@V8:7,V17@Buf9/bitstring>> when V17@V8 =/= 0 ->
{V17@V8,V17@Buf9};
<<_:V17@Pad6,1:1,0:1,V17@V9:14,V17@Buf10/bitstring>> when V17@V9 =/= 0 ->
{V17@V9,V17@Buf10}
end,
{V17@V3,V17@Buf4}
end,
<<V17@V11:V17@V0/bitstring-unit:1,V17@Buf12/bitstring>> = V17@Buf1,
{V17@V11,V17@Buf12}
end,
Bytes21= skipextensions(Bytes20, 1, Extensions),
{{'ARQsNonStandardData',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17},Bytes21}.

'enc_BookingTerminalInfo'(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
'H323-MESSAGES':enc_AliasAddress(Enc4@element)
end,
begin
Enc5@element = element(3, Val),
if Enc5@element bsr 32 =:= 0 ->
begin
Enc5@element@bin = binary:encode_unsigned(Enc5@element),
Enc5@element@bin_size0 = byte_size(Enc5@element@bin),
Enc5@element@bin_size = Enc5@element@bin_size0 - 1,
[<<Enc5@element@bin_size:2>>,
align|Enc5@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_PayMethod(Enc7@element)
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_TerminalPortType(Enc9@element)
end
end].


dec_BookingTerminalInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type AliasAddress
{Term1,Bytes3} = 'H323-MESSAGES':dec_AliasAddress(Bytes2),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% attribute number 3 with type PayMethod
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
dec_PayMethod(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type TerminalPortType
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_TerminalPortType(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'BookingTerminalInfo',Term1,Term2,Term3,Term4},Bytes8}.

'enc_TerminalPortType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= ip ->
<<0:1,0:2>>;
ChoiceTag =:= e1 ->
<<0:1,1:2>>;
ChoiceTag =:= v35 ->
<<0:1,2:2>>;
ChoiceTag =:= isdn ->
<<0:1,3:2>>
end.


dec_TerminalPortType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{ip,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{e1,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{v35,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{isdn,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ARQCommandType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= booking ->
<<0:1,0:3>>;
ChoiceTag =:= bookingQuery ->
<<0:1,1:3>>;
ChoiceTag =:= bookingChange ->
<<0:1,2:3>>;
ChoiceTag =:= bookingCancal ->
<<0:1,3:3>>;
ChoiceTag =:= immediateBegin ->
<<0:1,4:3>>;
ChoiceTag =:= cardAuth ->
<<0:1,5:3>>;
ChoiceTag =:= confPasswordAuth ->
<<0:1,6:3>>
end.


dec_ARQCommandType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{booking,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{bookingQuery,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{bookingChange,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{bookingCancal,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{immediateBegin,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{cardAuth,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{confPasswordAuth,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_PayMethod'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= organigerPay ->
<<0:1,0:1>>;
ChoiceTag =:= terminalPay ->
<<0:1,1:1>>
end.


dec_PayMethod(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{organigerPay,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{terminalPay,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ACFsNonStandardData'(Val) ->
Enc1@element = element(2, Val),
if Enc1@element bsr 32 =:= 0 ->
begin
Enc1@element@bin = binary:encode_unsigned(Enc1@element),
Enc1@element@bin_size0 = byte_size(Enc1@element@bin),
Enc1@element@bin_size = Enc1@element@bin_size0 - 1,
[<<Enc1@element@bin_size:2>>,
align|Enc1@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc1@element}}})
end.


dec_ACFsNonStandardData(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V3,V1@Buf4}
end,
{{'ACFsNonStandardData',Term1},Bytes1}.

'enc_ARJsNonStandardData'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 32 =:= 0 ->
begin
Enc3@element@bin = binary:encode_unsigned(Enc3@element),
Enc3@element@bin_size0 = byte_size(Enc3@element@bin),
Enc3@element@bin_size = Enc3@element@bin_size0 - 1,
[<<Enc3@element@bin_size:2>>,
align|Enc3@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end|begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_ARJsErrorReason(Enc5@element)
end
end].


dec_ARJsNonStandardData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% attribute number 2 with type ARJsErrorReason
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_ARJsErrorReason(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'ARJsNonStandardData',Term1,Term2},Bytes6}.

'enc_ARJsErrorReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= invalidUser ->
<<0:1,0:4>>;
ChoiceTag =:= noexistUser ->
<<0:1,1:4>>;
ChoiceTag =:= passwordError ->
<<0:1,2:4>>;
ChoiceTag =:= systemError ->
<<0:1,3:4>>;
ChoiceTag =:= cardOnline ->
<<0:1,4:4>>;
ChoiceTag =:= userForbiddened ->
<<0:1,5:4>>;
ChoiceTag =:= reserved ->
<<0:1,6:4>>;
ChoiceTag =:= passwordChangeInvalid ->
<<0:1,7:4>>;
ChoiceTag =:= outOfMoney ->
<<0:1,8:4>>;
ChoiceTag =:= networkError ->
<<0:1,9:4>>;
ChoiceTag =:= deficientConfInfo ->
<<0:1,10:4>>
end.


dec_ARJsErrorReason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invalidUser,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noexistUser,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{passwordError,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{systemError,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{cardOnline,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{userForbiddened,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{reserved,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{passwordChangeInvalid,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{outOfMoney,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{networkError,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{deficientConfInfo,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_DRQsNonStandardData'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
Enc6@element = element(8, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(9, Val),
Enc8@element = element(10, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(11, Val),
Enc10@element = element(12, Val),
if Enc9@element =:= asn1_NOVALUE ->
if Enc10@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@element = element(14, Val),
Enc12@element = element(15, Val),
if Enc11@element =:= asn1_NOVALUE ->
if Enc12@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc12@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@element = element(16, Val),
Enc14@element = element(17, Val),
if Enc13@element =:= asn1_NOVALUE ->
if Enc14@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc14@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc15@element = element(18, Val),
Enc16@element = element(20, Val),
if Enc15@element =:= asn1_NOVALUE ->
if Enc16@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc16@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc18@element = element(2, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element bsr 32 =:= 0 ->
begin
Enc18@element@bin = binary:encode_unsigned(Enc18@element),
Enc18@element@bin_size0 = byte_size(Enc18@element@bin),
Enc18@element@bin_size = Enc18@element@bin_size0 - 1,
[<<Enc18@element@bin_size:2>>,
align|Enc18@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc18@element}}})
end
end,
begin
Enc21@element = element(3, Val),
'H323-MESSAGES':enc_AliasAddress(Enc21@element)
end,
begin
Enc22@element = element(4, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_AliasAddress(Enc22@element)
end
end,
begin
Enc24@element = element(5, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_TransportAddress(Enc24@element)
end
end,
begin
Enc26@element = element(6, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_TransportAddress(Enc26@element)
end
end,
begin
Enc28@element = element(7, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_EndpointType(Enc28@element)
end
end,
begin
Enc30@element = element(8, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_EndpointType(Enc30@element)
end
end,
begin
Enc32@element = element(9, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
'H323-MESSAGES':enc_TransportAddress(Enc32@element)
end
end,
begin
Enc34@element = element(10, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc35@len = byte_size(Enc34@element),
Enc35@len@sub = Enc35@len - 1,
if Enc35@len@sub bsr 7 =:= 0 ->
[<<Enc35@len@sub:7>>,
align|Enc34@element]
end
end
end
end,
begin
Enc37@element = element(11, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc38@len = byte_size(Enc37@element),
Enc38@len@sub = Enc38@len - 1,
if Enc38@len@sub bsr 7 =:= 0 ->
[<<Enc38@len@sub:7>>,
align|Enc37@element]
end
end
end
end,
begin
Enc40@element = element(12, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
Enc40@element bsr 32 =:= 0 ->
begin
Enc40@element@bin = binary:encode_unsigned(Enc40@element),
Enc40@element@bin_size0 = byte_size(Enc40@element@bin),
Enc40@element@bin_size = Enc40@element@bin_size0 - 1,
[<<Enc40@element@bin_size:2>>,
align|Enc40@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc40@element}}})
end
end,
begin
Enc43@element = element(13, Val),
if Enc43@element bsr 32 =:= 0 ->
begin
Enc43@element@bin = binary:encode_unsigned(Enc43@element),
Enc43@element@bin_size0 = byte_size(Enc43@element@bin),
Enc43@element@bin_size = Enc43@element@bin_size0 - 1,
[<<Enc43@element@bin_size:2>>,
align|Enc43@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc43@element}}})
end
end,
begin
Enc45@element = element(14, Val),
if Enc45@element =:= asn1_NOVALUE ->
[];
Enc45@element bsr 32 =:= 0 ->
begin
Enc45@element@bin = binary:encode_unsigned(Enc45@element),
Enc45@element@bin_size0 = byte_size(Enc45@element@bin),
Enc45@element@bin_size = Enc45@element@bin_size0 - 1,
[<<Enc45@element@bin_size:2,0:6>>|Enc45@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc45@element}}})
end
end,
begin
Enc48@element = element(15, Val),
if Enc48@element =:= asn1_NOVALUE ->
[];
Enc48@element bsr 32 =:= 0 ->
begin
Enc48@element@bin = binary:encode_unsigned(Enc48@element),
Enc48@element@bin_size0 = byte_size(Enc48@element@bin),
Enc48@element@bin_size = Enc48@element@bin_size0 - 1,
[<<Enc48@element@bin_size:2,0:6>>|Enc48@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc48@element}}})
end
end,
begin
Enc51@element = element(16, Val),
if Enc51@element =:= asn1_NOVALUE ->
[];
true ->
'MULTIMEDIA-SYSTEM-CONTROL':enc_AudioCapability(Enc51@element)
end
end,
begin
Enc53@element = element(17, Val),
if Enc53@element =:= asn1_NOVALUE ->
[];
true ->
'MULTIMEDIA-SYSTEM-CONTROL':enc_VideoCapability(Enc53@element)
end
end,
begin
Enc55@element = element(18, Val),
if Enc55@element =:= asn1_NOVALUE ->
[];
true ->
'MULTIMEDIA-SYSTEM-CONTROL':enc_DataProtocolCapability(Enc55@element)
end
end,
begin
Enc57@element = element(19, Val),
enc_DRQsTerminationCause(Enc57@element)
end|begin
Enc58@element = element(20, Val),
if Enc58@element =:= asn1_NOVALUE ->
[];
true ->
enc_DRQsServiceType(Enc58@element)
end
end].


dec_DRQsNonStandardData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 15) band 1 of
1 ->
begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type AliasAddress
{Term2,Bytes4} = 'H323-MESSAGES':dec_AliasAddress(Bytes3),

%% attribute number 3 with type AliasAddress
{Term3,Bytes5} = case (Opt bsr 14) band 1 of
1 ->
'H323-MESSAGES':dec_AliasAddress(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type TransportAddress
{Term4,Bytes6} = case (Opt bsr 13) band 1 of
1 ->
'H323-MESSAGES':dec_TransportAddress(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type TransportAddress
{Term5,Bytes7} = case (Opt bsr 12) band 1 of
1 ->
'H323-MESSAGES':dec_TransportAddress(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type EndpointType
{Term6,Bytes8} = case (Opt bsr 11) band 1 of
1 ->
'H323-MESSAGES':dec_EndpointType(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type EndpointType
{Term7,Bytes9} = case (Opt bsr 10) band 1 of
1 ->
'H323-MESSAGES':dec_EndpointType(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type TransportAddress
{Term8,Bytes10} = case (Opt bsr 9) band 1 of
1 ->
'H323-MESSAGES':dec_TransportAddress(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type OCTET STRING
{Term9,Bytes11} = case (Opt bsr 8) band 1 of
1 ->
begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes10,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Conv7 = binary:copy(V4@V3),
{V4@Conv7,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type OCTET STRING
{Term10,Bytes12} = case (Opt bsr 7) band 1 of
1 ->
begin
<<V5@V0:7/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes11,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/binary-unit:8,V5@Buf4/bitstring>> = V5@Buf1,
V5@Conv7 = binary:copy(V5@V3),
{V5@Conv7,V5@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 11 with type INTEGER
{Term11,Bytes13} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V6@V0:2/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes12,
V6@Add2 = V6@V0 + 1,
V6@Pad5 = bit_size(V6@Buf1) band 7,
<<_:V6@Pad5,V6@V3:V6@Add2/unsigned-unit:8,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V3,V6@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 12 with type INTEGER
{Term12,Bytes14} = begin
<<V7@V0:2/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes13,
V7@Add2 = V7@V0 + 1,
V7@Pad5 = bit_size(V7@Buf1) band 7,
<<_:V7@Pad5,V7@V3:V7@Add2/unsigned-unit:8,V7@Buf4/bitstring>> = V7@Buf1,
{V7@V3,V7@Buf4}
end,

%% attribute number 13 with type INTEGER
{Term13,Bytes15} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V8@V0:2/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes14,
V8@Add2 = V8@V0 + 1,
V8@Pad5 = bit_size(V8@Buf1) band 7,
<<_:V8@Pad5,V8@V3:V8@Add2/unsigned-unit:8,V8@Buf4/bitstring>> = V8@Buf1,
{V8@V3,V8@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 14 with type INTEGER
{Term14,Bytes16} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V9@V0:2/unsigned-unit:1,V9@Buf1/bitstring>> = Bytes15,
V9@Add2 = V9@V0 + 1,
V9@Pad5 = bit_size(V9@Buf1) band 7,
<<_:V9@Pad5,V9@V3:V9@Add2/unsigned-unit:8,V9@Buf4/bitstring>> = V9@Buf1,
{V9@V3,V9@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 15 with type AudioCapability
{Term15,Bytes17} = case (Opt bsr 3) band 1 of
1 ->
'MULTIMEDIA-SYSTEM-CONTROL':dec_AudioCapability(Bytes16);
0 ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 16 with type VideoCapability
{Term16,Bytes18} = case (Opt bsr 2) band 1 of
1 ->
'MULTIMEDIA-SYSTEM-CONTROL':dec_VideoCapability(Bytes17);
0 ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 17 with type DataProtocolCapability
{Term17,Bytes19} = case (Opt bsr 1) band 1 of
1 ->
'MULTIMEDIA-SYSTEM-CONTROL':dec_DataProtocolCapability(Bytes18);
0 ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 18 with type DRQsTerminationCause
{Term18,Bytes20} = dec_DRQsTerminationCause(Bytes19),

%% attribute number 19 with type DRQsServiceType
{Term19,Bytes21} = case Opt band 1 of
1 ->
dec_DRQsServiceType(Bytes20);
0 ->
{asn1_NOVALUE,Bytes20}
end,

%% Extensions
{Extensions,Bytes22} = case Ext of
0 -> {<<>>,Bytes21};
1 ->
{V10@V0,V10@Buf1} = case Bytes21 of
<<0:1,V10@V3:6,V10@Buf4/bitstring>> ->
V10@Add5 = V10@V3 + 1,
{V10@Add5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
V10@Pad6 = bit_size(V10@Buf2) band 7,
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<_:V10@Pad6,0:1,V10@V8:7,V10@Buf9/bitstring>> when V10@V8 =/= 0 ->
{V10@V8,V10@Buf9};
<<_:V10@Pad6,1:1,0:1,V10@V9:14,V10@Buf10/bitstring>> when V10@V9 =/= 0 ->
{V10@V9,V10@Buf10}
end,
{V10@V3,V10@Buf4}
end,
<<V10@V11:V10@V0/bitstring-unit:1,V10@Buf12/bitstring>> = V10@Buf1,
{V10@V11,V10@Buf12}
end,
Bytes23= skipextensions(Bytes22, 1, Extensions),
{{'DRQsNonStandardData',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19},Bytes23}.

'enc_DRQsServiceType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= videoConference ->
<<0:1,0:2>>;
ChoiceTag =:= mediaStream ->
<<0:1,1:2>>;
ChoiceTag =:= point2point ->
<<0:1,2:2>>
end.


dec_DRQsServiceType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{videoConference,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{mediaStream,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{point2point,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_DRQsTerminationCause'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= callerHookOn ->
<<0:1,0:2>>;
ChoiceTag =:= calledHookOn ->
<<0:1,1:2>>;
ChoiceTag =:= networkError ->
<<0:1,2:2>>;
ChoiceTag =:= establishedFailed ->
<<0:1,3:2>>
end.


dec_DRQsTerminationCause(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{callerHookOn,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{calledHookOn,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{networkError,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{establishedFailed,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

%%%
%%% Run-time functions.
%%%

dec_components1(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components1(Num, Bytes, Acc) ->
{Term,Remain} = dec_BookingTerminalInfo(Bytes),
dec_components1(Num-1, Remain, [Term|Acc]).

align(Bin) when is_binary(Bin) ->
    Bin;
align(BitStr) when is_bitstring(BitStr) ->
    AlignBits = bit_size(BitStr) rem 8,
    <<_:AlignBits,Rest/binary>> = BitStr,
    Rest.

complete(L0) ->
    L = complete(L0, []),
    case list_to_bitstring(L) of
        <<>> ->
            <<0>>;
        Bin ->
            Bin
    end.

complete([], Bits, []) ->
    case Bits band 7 of
        0 ->
            [];
        N ->
            [<<0:(8 - N)>>]
    end;
complete([], Bits, [H|More]) ->
    complete(H, Bits, More);
complete([align|T], Bits, More) ->
    case Bits band 7 of
        0 ->
            complete(T, More);
        1 ->
            [<<0:7>>|complete(T, More)];
        2 ->
            [<<0:6>>|complete(T, More)];
        3 ->
            [<<0:5>>|complete(T, More)];
        4 ->
            [<<0:4>>|complete(T, More)];
        5 ->
            [<<0:3>>|complete(T, More)];
        6 ->
            [<<0:2>>|complete(T, More)];
        7 ->
            [<<0:1>>|complete(T, More)]
    end;
complete([[]|T], Bits, More) ->
    complete(T, Bits, More);
complete([[_|_] = H], Bits, More) ->
    complete(H, Bits, More);
complete([[_|_] = H|T], Bits, More) ->
    complete(H, Bits, [T|More]);
complete([H|T], Bits, More) when is_integer(H); is_binary(H) ->
    [H|complete(T, Bits, More)];
complete([H|T], Bits, More) ->
    [H|complete(T, Bits + bit_size(H), More)];
complete(Bin, Bits, More) when is_binary(Bin) ->
    [Bin|complete([], Bits, More)];
complete(Bin, Bits, More) ->
    [Bin|complete([], Bits + bit_size(Bin), More)].

complete([], []) ->
    [];
complete([], [H|More]) ->
    complete(H, More);
complete([align|T], More) ->
    complete(T, More);
complete([[]|T], More) ->
    complete(T, More);
complete([[_|_] = H], More) ->
    complete(H, More);
complete([[_|_] = H|T], More) ->
    complete(H, [T|More]);
complete([H|T], More) when is_integer(H); is_binary(H) ->
    [H|complete(T, More)];
complete([H|T], More) ->
    [H|complete(T, bit_size(H), More)];
complete(Bin, More) when is_binary(Bin) ->
    [Bin|complete([], More)];
complete(Bin, More) ->
    [Bin|complete([], bit_size(Bin), More)].

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_length(Buffer) ->
    case align(Buffer) of
        <<0:1,Oct:7,Rest/binary>> ->
            {Oct,Rest};
        <<2:2,Val:14,Rest/binary>> ->
            {Val,Rest};
        <<3:2,_Val:14,_Rest/binary>> ->
            exit({error,{asn1,{decode_length,{nyi,above_16k}}}})
    end.

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len,Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
