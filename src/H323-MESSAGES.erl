%% Generated by the Erlang ASN.1 PER-compiler version, utilizing bit-syntax:3.0
%% Purpose: encoder and decoder to the types in mod H323-MESSAGES

-module('H323-MESSAGES').
-compile(nowarn_unused_vars).
-include("H323-MESSAGES.hrl").
-asn1_info([{vsn,'3.0'},
            {module,'H323-MESSAGES'},
            {options,[{i,"D:/GK_LINUX/test/erlang"},
 warnings,per,errors,
 {cwd,"D:/GK_LINUX/test/erlang"},
 {outdir,"D:/GK_LINUX/test/erlang"},
 {i,"."},
 {i,"d:/GK_LINUX/test/erlang"}]}]).

-export([encoding_rule/0,bit_string_format/0,         legacy_erlang_types/0]).
-export([
'enc_H323-UserInformation'/1,
'enc_H323-UU-PDU'/1,
'enc_StimulusControl'/1,
'enc_Alerting-UUIE'/1,
'enc_CallProceeding-UUIE'/1,
'enc_Connect-UUIE'/1,
'enc_Information-UUIE'/1,
'enc_ReleaseComplete-UUIE'/1,
'enc_ReleaseCompleteReason'/1,
'enc_Setup-UUIE'/1,
'enc_ScnConnectionType'/1,
'enc_ScnConnectionAggregation'/1,
'enc_PresentationIndicator'/1,
'enc_ScreeningIndicator'/1,
'enc_Facility-UUIE'/1,
'enc_ConferenceList'/1,
'enc_FacilityReason'/1,
'enc_Progress-UUIE'/1,
'enc_TransportAddress'/1,
'enc_Status-UUIE'/1,
'enc_StatusInquiry-UUIE'/1,
'enc_SetupAcknowledge-UUIE'/1,
'enc_Notify-UUIE'/1,
'enc_EndpointType'/1,
'enc_GatewayInfo'/1,
'enc_SupportedProtocols'/1,
'enc_H310Caps'/1,
'enc_H320Caps'/1,
'enc_H321Caps'/1,
'enc_H322Caps'/1,
'enc_H323Caps'/1,
'enc_H324Caps'/1,
'enc_VoiceCaps'/1,
'enc_T120OnlyCaps'/1,
'enc_NonStandardProtocol'/1,
'enc_T38FaxAnnexbOnlyCaps'/1,
'enc_SIPCaps'/1,
'enc_McuInfo'/1,
'enc_TerminalInfo'/1,
'enc_GatekeeperInfo'/1,
'enc_VendorIdentifier'/1,
'enc_H221NonStandard'/1,
'enc_TunnelledProtocol'/1,
'enc_TunnelledProtocolAlternateIdentifier'/1,
'enc_NonStandardParameter'/1,
'enc_NonStandardIdentifier'/1,
'enc_AliasAddress'/1,
'enc_AddressPattern'/1,
'enc_PartyNumber'/1,
'enc_PublicPartyNumber'/1,
'enc_PrivatePartyNumber'/1,
'enc_NumberDigits'/1,
'enc_PublicTypeOfNumber'/1,
'enc_PrivateTypeOfNumber'/1,
'enc_MobileUIM'/1,
'enc_TBCD-STRING'/1,
'enc_ANSI-41-UIM'/1,
'enc_GSM-UIM'/1,
'enc_ExtendedAliasAddress'/1,
'enc_Endpoint'/1,
'enc_AlternateTransportAddresses'/1,
'enc_UseSpecifiedTransport'/1,
'enc_AlternateGK'/1,
'enc_AltGKInfo'/1,
'enc_SecurityServiceMode'/1,
'enc_SecurityCapabilities'/1,
'enc_SecurityErrors'/1,
'enc_SecurityErrors2'/1,
'enc_H245Security'/1,
'enc_QseriesOptions'/1,
'enc_Q954Details'/1,
'enc_GloballyUniqueID'/1,
'enc_ConferenceIdentifier'/1,
'enc_RequestSeqNum'/1,
'enc_GatekeeperIdentifier'/1,
'enc_BandWidth'/1,
'enc_CallReferenceValue'/1,
'enc_EndpointIdentifier'/1,
'enc_ProtocolIdentifier'/1,
'enc_TimeToLive'/1,
'enc_H248PackagesDescriptor'/1,
'enc_H248SignalsDescriptor'/1,
'enc_FeatureDescriptor'/1,
'enc_CallIdentifier'/1,
'enc_EncryptIntAlg'/1,
'enc_NonIsoIntegrityMechanism'/1,
'enc_IntegrityMechanism'/1,
'enc_ICV'/1,
'enc_FastStartToken'/1,
'enc_EncodedFastStartToken'/1,
'enc_CryptoH323Token'/1,
'enc_DataRate'/1,
'enc_CallLinkage'/1,
'enc_SupportedPrefix'/1,
'enc_CapacityReportingCapability'/1,
'enc_CapacityReportingSpecification'/1,
'enc_CallCapacity'/1,
'enc_CallCapacityInfo'/1,
'enc_CallsAvailable'/1,
'enc_CircuitInfo'/1,
'enc_CircuitIdentifier'/1,
'enc_CicInfo'/1,
'enc_GroupID'/1,
'enc_CarrierInfo'/1,
'enc_ServiceControlDescriptor'/1,
'enc_ServiceControlSession'/1,
'enc_RasUsageInfoTypes'/1,
'enc_RasUsageSpecification'/1,
'enc_RasUsageInformation'/1,
'enc_CallTerminationCause'/1,
'enc_BandwidthDetails'/1,
'enc_CallCreditCapability'/1,
'enc_CallCreditServiceControl'/1,
'enc_GenericData'/1,
'enc_GenericIdentifier'/1,
'enc_EnumeratedParameter'/1,
'enc_Content'/1,
'enc_FeatureSet'/1,
'enc_TransportChannelInfo'/1,
'enc_RTPSession'/1,
'enc_RasMessage'/1,
'enc_GatekeeperRequest'/1,
'enc_GatekeeperConfirm'/1,
'enc_GatekeeperReject'/1,
'enc_GatekeeperRejectReason'/1,
'enc_RegistrationRequest'/1,
'enc_RegistrationConfirm'/1,
'enc_RegistrationReject'/1,
'enc_RegistrationRejectReason'/1,
'enc_UnregistrationRequest'/1,
'enc_UnregRequestReason'/1,
'enc_UnregistrationConfirm'/1,
'enc_UnregistrationReject'/1,
'enc_UnregRejectReason'/1,
'enc_AdmissionRequest'/1,
'enc_CallType'/1,
'enc_CallModel'/1,
'enc_TransportQOS'/1,
'enc_AdmissionConfirm'/1,
'enc_UUIEsRequested'/1,
'enc_AdmissionReject'/1,
'enc_AdmissionRejectReason'/1,
'enc_BandwidthRequest'/1,
'enc_BandwidthConfirm'/1,
'enc_BandwidthReject'/1,
'enc_BandRejectReason'/1,
'enc_LocationRequest'/1,
'enc_LocationConfirm'/1,
'enc_LocationReject'/1,
'enc_LocationRejectReason'/1,
'enc_DisengageRequest'/1,
'enc_DisengageReason'/1,
'enc_DisengageConfirm'/1,
'enc_DisengageReject'/1,
'enc_DisengageRejectReason'/1,
'enc_InfoRequest'/1,
'enc_InfoRequestResponse'/1,
'enc_InfoRequestResponseStatus'/1,
'enc_InfoRequestAck'/1,
'enc_InfoRequestNak'/1,
'enc_InfoRequestNakReason'/1,
'enc_NonStandardMessage'/1,
'enc_UnknownMessageResponse'/1,
'enc_RequestInProgress'/1,
'enc_ResourcesAvailableIndicate'/1,
'enc_ResourcesAvailableConfirm'/1,
'enc_ServiceControlIndication'/1,
'enc_ServiceControlResponse'/1
]).

-export([
'dec_H323-UserInformation'/1,
'dec_H323-UU-PDU'/1,
'dec_StimulusControl'/1,
'dec_Alerting-UUIE'/1,
'dec_CallProceeding-UUIE'/1,
'dec_Connect-UUIE'/1,
'dec_Information-UUIE'/1,
'dec_ReleaseComplete-UUIE'/1,
'dec_ReleaseCompleteReason'/1,
'dec_Setup-UUIE'/1,
'dec_ScnConnectionType'/1,
'dec_ScnConnectionAggregation'/1,
'dec_PresentationIndicator'/1,
'dec_ScreeningIndicator'/1,
'dec_Facility-UUIE'/1,
'dec_ConferenceList'/1,
'dec_FacilityReason'/1,
'dec_Progress-UUIE'/1,
'dec_TransportAddress'/1,
'dec_Status-UUIE'/1,
'dec_StatusInquiry-UUIE'/1,
'dec_SetupAcknowledge-UUIE'/1,
'dec_Notify-UUIE'/1,
'dec_EndpointType'/1,
'dec_GatewayInfo'/1,
'dec_SupportedProtocols'/1,
'dec_H310Caps'/1,
'dec_H320Caps'/1,
'dec_H321Caps'/1,
'dec_H322Caps'/1,
'dec_H323Caps'/1,
'dec_H324Caps'/1,
'dec_VoiceCaps'/1,
'dec_T120OnlyCaps'/1,
'dec_NonStandardProtocol'/1,
'dec_T38FaxAnnexbOnlyCaps'/1,
'dec_SIPCaps'/1,
'dec_McuInfo'/1,
'dec_TerminalInfo'/1,
'dec_GatekeeperInfo'/1,
'dec_VendorIdentifier'/1,
'dec_H221NonStandard'/1,
'dec_TunnelledProtocol'/1,
'dec_TunnelledProtocolAlternateIdentifier'/1,
'dec_NonStandardParameter'/1,
'dec_NonStandardIdentifier'/1,
'dec_AliasAddress'/1,
'dec_AddressPattern'/1,
'dec_PartyNumber'/1,
'dec_PublicPartyNumber'/1,
'dec_PrivatePartyNumber'/1,
'dec_NumberDigits'/1,
'dec_PublicTypeOfNumber'/1,
'dec_PrivateTypeOfNumber'/1,
'dec_MobileUIM'/1,
'dec_TBCD-STRING'/1,
'dec_ANSI-41-UIM'/1,
'dec_GSM-UIM'/1,
'dec_ExtendedAliasAddress'/1,
'dec_Endpoint'/1,
'dec_AlternateTransportAddresses'/1,
'dec_UseSpecifiedTransport'/1,
'dec_AlternateGK'/1,
'dec_AltGKInfo'/1,
'dec_SecurityServiceMode'/1,
'dec_SecurityCapabilities'/1,
'dec_SecurityErrors'/1,
'dec_SecurityErrors2'/1,
'dec_H245Security'/1,
'dec_QseriesOptions'/1,
'dec_Q954Details'/1,
'dec_GloballyUniqueID'/1,
'dec_ConferenceIdentifier'/1,
'dec_RequestSeqNum'/1,
'dec_GatekeeperIdentifier'/1,
'dec_BandWidth'/1,
'dec_CallReferenceValue'/1,
'dec_EndpointIdentifier'/1,
'dec_ProtocolIdentifier'/1,
'dec_TimeToLive'/1,
'dec_H248PackagesDescriptor'/1,
'dec_H248SignalsDescriptor'/1,
'dec_FeatureDescriptor'/1,
'dec_CallIdentifier'/1,
'dec_EncryptIntAlg'/1,
'dec_NonIsoIntegrityMechanism'/1,
'dec_IntegrityMechanism'/1,
'dec_ICV'/1,
'dec_FastStartToken'/1,
'dec_EncodedFastStartToken'/1,
'dec_CryptoH323Token'/1,
'dec_DataRate'/1,
'dec_CallLinkage'/1,
'dec_SupportedPrefix'/1,
'dec_CapacityReportingCapability'/1,
'dec_CapacityReportingSpecification'/1,
'dec_CallCapacity'/1,
'dec_CallCapacityInfo'/1,
'dec_CallsAvailable'/1,
'dec_CircuitInfo'/1,
'dec_CircuitIdentifier'/1,
'dec_CicInfo'/1,
'dec_GroupID'/1,
'dec_CarrierInfo'/1,
'dec_ServiceControlDescriptor'/1,
'dec_ServiceControlSession'/1,
'dec_RasUsageInfoTypes'/1,
'dec_RasUsageSpecification'/1,
'dec_RasUsageInformation'/1,
'dec_CallTerminationCause'/1,
'dec_BandwidthDetails'/1,
'dec_CallCreditCapability'/1,
'dec_CallCreditServiceControl'/1,
'dec_GenericData'/1,
'dec_GenericIdentifier'/1,
'dec_EnumeratedParameter'/1,
'dec_Content'/1,
'dec_FeatureSet'/1,
'dec_TransportChannelInfo'/1,
'dec_RTPSession'/1,
'dec_RasMessage'/1,
'dec_GatekeeperRequest'/1,
'dec_GatekeeperConfirm'/1,
'dec_GatekeeperReject'/1,
'dec_GatekeeperRejectReason'/1,
'dec_RegistrationRequest'/1,
'dec_RegistrationConfirm'/1,
'dec_RegistrationReject'/1,
'dec_RegistrationRejectReason'/1,
'dec_UnregistrationRequest'/1,
'dec_UnregRequestReason'/1,
'dec_UnregistrationConfirm'/1,
'dec_UnregistrationReject'/1,
'dec_UnregRejectReason'/1,
'dec_AdmissionRequest'/1,
'dec_CallType'/1,
'dec_CallModel'/1,
'dec_TransportQOS'/1,
'dec_AdmissionConfirm'/1,
'dec_UUIEsRequested'/1,
'dec_AdmissionReject'/1,
'dec_AdmissionRejectReason'/1,
'dec_BandwidthRequest'/1,
'dec_BandwidthConfirm'/1,
'dec_BandwidthReject'/1,
'dec_BandRejectReason'/1,
'dec_LocationRequest'/1,
'dec_LocationConfirm'/1,
'dec_LocationReject'/1,
'dec_LocationRejectReason'/1,
'dec_DisengageRequest'/1,
'dec_DisengageReason'/1,
'dec_DisengageConfirm'/1,
'dec_DisengageReject'/1,
'dec_DisengageRejectReason'/1,
'dec_InfoRequest'/1,
'dec_InfoRequestResponse'/1,
'dec_InfoRequestResponseStatus'/1,
'dec_InfoRequestAck'/1,
'dec_InfoRequestNak'/1,
'dec_InfoRequestNakReason'/1,
'dec_NonStandardMessage'/1,
'dec_UnknownMessageResponse'/1,
'dec_RequestInProgress'/1,
'dec_ResourcesAvailableIndicate'/1,
'dec_ResourcesAvailableConfirm'/1,
'dec_ServiceControlIndication'/1,
'dec_ServiceControlResponse'/1
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> per.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, Data) of
  {Result,Rest} ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('H323-UserInformation',Data) -> 'enc_H323-UserInformation'(Data);
encode_disp('H323-UU-PDU',Data) -> 'enc_H323-UU-PDU'(Data);
encode_disp('StimulusControl',Data) -> 'enc_StimulusControl'(Data);
encode_disp('Alerting-UUIE',Data) -> 'enc_Alerting-UUIE'(Data);
encode_disp('CallProceeding-UUIE',Data) -> 'enc_CallProceeding-UUIE'(Data);
encode_disp('Connect-UUIE',Data) -> 'enc_Connect-UUIE'(Data);
encode_disp('Information-UUIE',Data) -> 'enc_Information-UUIE'(Data);
encode_disp('ReleaseComplete-UUIE',Data) -> 'enc_ReleaseComplete-UUIE'(Data);
encode_disp('ReleaseCompleteReason',Data) -> 'enc_ReleaseCompleteReason'(Data);
encode_disp('Setup-UUIE',Data) -> 'enc_Setup-UUIE'(Data);
encode_disp('ScnConnectionType',Data) -> 'enc_ScnConnectionType'(Data);
encode_disp('ScnConnectionAggregation',Data) -> 'enc_ScnConnectionAggregation'(Data);
encode_disp('PresentationIndicator',Data) -> 'enc_PresentationIndicator'(Data);
encode_disp('ScreeningIndicator',Data) -> 'enc_ScreeningIndicator'(Data);
encode_disp('Facility-UUIE',Data) -> 'enc_Facility-UUIE'(Data);
encode_disp('ConferenceList',Data) -> 'enc_ConferenceList'(Data);
encode_disp('FacilityReason',Data) -> 'enc_FacilityReason'(Data);
encode_disp('Progress-UUIE',Data) -> 'enc_Progress-UUIE'(Data);
encode_disp('TransportAddress',Data) -> 'enc_TransportAddress'(Data);
encode_disp('Status-UUIE',Data) -> 'enc_Status-UUIE'(Data);
encode_disp('StatusInquiry-UUIE',Data) -> 'enc_StatusInquiry-UUIE'(Data);
encode_disp('SetupAcknowledge-UUIE',Data) -> 'enc_SetupAcknowledge-UUIE'(Data);
encode_disp('Notify-UUIE',Data) -> 'enc_Notify-UUIE'(Data);
encode_disp('EndpointType',Data) -> 'enc_EndpointType'(Data);
encode_disp('GatewayInfo',Data) -> 'enc_GatewayInfo'(Data);
encode_disp('SupportedProtocols',Data) -> 'enc_SupportedProtocols'(Data);
encode_disp('H310Caps',Data) -> 'enc_H310Caps'(Data);
encode_disp('H320Caps',Data) -> 'enc_H320Caps'(Data);
encode_disp('H321Caps',Data) -> 'enc_H321Caps'(Data);
encode_disp('H322Caps',Data) -> 'enc_H322Caps'(Data);
encode_disp('H323Caps',Data) -> 'enc_H323Caps'(Data);
encode_disp('H324Caps',Data) -> 'enc_H324Caps'(Data);
encode_disp('VoiceCaps',Data) -> 'enc_VoiceCaps'(Data);
encode_disp('T120OnlyCaps',Data) -> 'enc_T120OnlyCaps'(Data);
encode_disp('NonStandardProtocol',Data) -> 'enc_NonStandardProtocol'(Data);
encode_disp('T38FaxAnnexbOnlyCaps',Data) -> 'enc_T38FaxAnnexbOnlyCaps'(Data);
encode_disp('SIPCaps',Data) -> 'enc_SIPCaps'(Data);
encode_disp('McuInfo',Data) -> 'enc_McuInfo'(Data);
encode_disp('TerminalInfo',Data) -> 'enc_TerminalInfo'(Data);
encode_disp('GatekeeperInfo',Data) -> 'enc_GatekeeperInfo'(Data);
encode_disp('VendorIdentifier',Data) -> 'enc_VendorIdentifier'(Data);
encode_disp('H221NonStandard',Data) -> 'enc_H221NonStandard'(Data);
encode_disp('TunnelledProtocol',Data) -> 'enc_TunnelledProtocol'(Data);
encode_disp('TunnelledProtocolAlternateIdentifier',Data) -> 'enc_TunnelledProtocolAlternateIdentifier'(Data);
encode_disp('NonStandardParameter',Data) -> 'enc_NonStandardParameter'(Data);
encode_disp('NonStandardIdentifier',Data) -> 'enc_NonStandardIdentifier'(Data);
encode_disp('AliasAddress',Data) -> 'enc_AliasAddress'(Data);
encode_disp('AddressPattern',Data) -> 'enc_AddressPattern'(Data);
encode_disp('PartyNumber',Data) -> 'enc_PartyNumber'(Data);
encode_disp('PublicPartyNumber',Data) -> 'enc_PublicPartyNumber'(Data);
encode_disp('PrivatePartyNumber',Data) -> 'enc_PrivatePartyNumber'(Data);
encode_disp('NumberDigits',Data) -> 'enc_NumberDigits'(Data);
encode_disp('PublicTypeOfNumber',Data) -> 'enc_PublicTypeOfNumber'(Data);
encode_disp('PrivateTypeOfNumber',Data) -> 'enc_PrivateTypeOfNumber'(Data);
encode_disp('MobileUIM',Data) -> 'enc_MobileUIM'(Data);
encode_disp('TBCD-STRING',Data) -> 'enc_TBCD-STRING'(Data);
encode_disp('ANSI-41-UIM',Data) -> 'enc_ANSI-41-UIM'(Data);
encode_disp('GSM-UIM',Data) -> 'enc_GSM-UIM'(Data);
encode_disp('ExtendedAliasAddress',Data) -> 'enc_ExtendedAliasAddress'(Data);
encode_disp('Endpoint',Data) -> 'enc_Endpoint'(Data);
encode_disp('AlternateTransportAddresses',Data) -> 'enc_AlternateTransportAddresses'(Data);
encode_disp('UseSpecifiedTransport',Data) -> 'enc_UseSpecifiedTransport'(Data);
encode_disp('AlternateGK',Data) -> 'enc_AlternateGK'(Data);
encode_disp('AltGKInfo',Data) -> 'enc_AltGKInfo'(Data);
encode_disp('SecurityServiceMode',Data) -> 'enc_SecurityServiceMode'(Data);
encode_disp('SecurityCapabilities',Data) -> 'enc_SecurityCapabilities'(Data);
encode_disp('SecurityErrors',Data) -> 'enc_SecurityErrors'(Data);
encode_disp('SecurityErrors2',Data) -> 'enc_SecurityErrors2'(Data);
encode_disp('H245Security',Data) -> 'enc_H245Security'(Data);
encode_disp('QseriesOptions',Data) -> 'enc_QseriesOptions'(Data);
encode_disp('Q954Details',Data) -> 'enc_Q954Details'(Data);
encode_disp('GloballyUniqueID',Data) -> 'enc_GloballyUniqueID'(Data);
encode_disp('ConferenceIdentifier',Data) -> 'enc_ConferenceIdentifier'(Data);
encode_disp('RequestSeqNum',Data) -> 'enc_RequestSeqNum'(Data);
encode_disp('GatekeeperIdentifier',Data) -> 'enc_GatekeeperIdentifier'(Data);
encode_disp('BandWidth',Data) -> 'enc_BandWidth'(Data);
encode_disp('CallReferenceValue',Data) -> 'enc_CallReferenceValue'(Data);
encode_disp('EndpointIdentifier',Data) -> 'enc_EndpointIdentifier'(Data);
encode_disp('ProtocolIdentifier',Data) -> 'enc_ProtocolIdentifier'(Data);
encode_disp('TimeToLive',Data) -> 'enc_TimeToLive'(Data);
encode_disp('H248PackagesDescriptor',Data) -> 'enc_H248PackagesDescriptor'(Data);
encode_disp('H248SignalsDescriptor',Data) -> 'enc_H248SignalsDescriptor'(Data);
encode_disp('FeatureDescriptor',Data) -> 'enc_FeatureDescriptor'(Data);
encode_disp('CallIdentifier',Data) -> 'enc_CallIdentifier'(Data);
encode_disp('EncryptIntAlg',Data) -> 'enc_EncryptIntAlg'(Data);
encode_disp('NonIsoIntegrityMechanism',Data) -> 'enc_NonIsoIntegrityMechanism'(Data);
encode_disp('IntegrityMechanism',Data) -> 'enc_IntegrityMechanism'(Data);
encode_disp('ICV',Data) -> 'enc_ICV'(Data);
encode_disp('FastStartToken',Data) -> 'enc_FastStartToken'(Data);
encode_disp('EncodedFastStartToken',Data) -> 'enc_EncodedFastStartToken'(Data);
encode_disp('CryptoH323Token',Data) -> 'enc_CryptoH323Token'(Data);
encode_disp('DataRate',Data) -> 'enc_DataRate'(Data);
encode_disp('CallLinkage',Data) -> 'enc_CallLinkage'(Data);
encode_disp('SupportedPrefix',Data) -> 'enc_SupportedPrefix'(Data);
encode_disp('CapacityReportingCapability',Data) -> 'enc_CapacityReportingCapability'(Data);
encode_disp('CapacityReportingSpecification',Data) -> 'enc_CapacityReportingSpecification'(Data);
encode_disp('CallCapacity',Data) -> 'enc_CallCapacity'(Data);
encode_disp('CallCapacityInfo',Data) -> 'enc_CallCapacityInfo'(Data);
encode_disp('CallsAvailable',Data) -> 'enc_CallsAvailable'(Data);
encode_disp('CircuitInfo',Data) -> 'enc_CircuitInfo'(Data);
encode_disp('CircuitIdentifier',Data) -> 'enc_CircuitIdentifier'(Data);
encode_disp('CicInfo',Data) -> 'enc_CicInfo'(Data);
encode_disp('GroupID',Data) -> 'enc_GroupID'(Data);
encode_disp('CarrierInfo',Data) -> 'enc_CarrierInfo'(Data);
encode_disp('ServiceControlDescriptor',Data) -> 'enc_ServiceControlDescriptor'(Data);
encode_disp('ServiceControlSession',Data) -> 'enc_ServiceControlSession'(Data);
encode_disp('RasUsageInfoTypes',Data) -> 'enc_RasUsageInfoTypes'(Data);
encode_disp('RasUsageSpecification',Data) -> 'enc_RasUsageSpecification'(Data);
encode_disp('RasUsageInformation',Data) -> 'enc_RasUsageInformation'(Data);
encode_disp('CallTerminationCause',Data) -> 'enc_CallTerminationCause'(Data);
encode_disp('BandwidthDetails',Data) -> 'enc_BandwidthDetails'(Data);
encode_disp('CallCreditCapability',Data) -> 'enc_CallCreditCapability'(Data);
encode_disp('CallCreditServiceControl',Data) -> 'enc_CallCreditServiceControl'(Data);
encode_disp('GenericData',Data) -> 'enc_GenericData'(Data);
encode_disp('GenericIdentifier',Data) -> 'enc_GenericIdentifier'(Data);
encode_disp('EnumeratedParameter',Data) -> 'enc_EnumeratedParameter'(Data);
encode_disp('Content',Data) -> 'enc_Content'(Data);
encode_disp('FeatureSet',Data) -> 'enc_FeatureSet'(Data);
encode_disp('TransportChannelInfo',Data) -> 'enc_TransportChannelInfo'(Data);
encode_disp('RTPSession',Data) -> 'enc_RTPSession'(Data);
encode_disp('RasMessage',Data) -> 'enc_RasMessage'(Data);
encode_disp('GatekeeperRequest',Data) -> 'enc_GatekeeperRequest'(Data);
encode_disp('GatekeeperConfirm',Data) -> 'enc_GatekeeperConfirm'(Data);
encode_disp('GatekeeperReject',Data) -> 'enc_GatekeeperReject'(Data);
encode_disp('GatekeeperRejectReason',Data) -> 'enc_GatekeeperRejectReason'(Data);
encode_disp('RegistrationRequest',Data) -> 'enc_RegistrationRequest'(Data);
encode_disp('RegistrationConfirm',Data) -> 'enc_RegistrationConfirm'(Data);
encode_disp('RegistrationReject',Data) -> 'enc_RegistrationReject'(Data);
encode_disp('RegistrationRejectReason',Data) -> 'enc_RegistrationRejectReason'(Data);
encode_disp('UnregistrationRequest',Data) -> 'enc_UnregistrationRequest'(Data);
encode_disp('UnregRequestReason',Data) -> 'enc_UnregRequestReason'(Data);
encode_disp('UnregistrationConfirm',Data) -> 'enc_UnregistrationConfirm'(Data);
encode_disp('UnregistrationReject',Data) -> 'enc_UnregistrationReject'(Data);
encode_disp('UnregRejectReason',Data) -> 'enc_UnregRejectReason'(Data);
encode_disp('AdmissionRequest',Data) -> 'enc_AdmissionRequest'(Data);
encode_disp('CallType',Data) -> 'enc_CallType'(Data);
encode_disp('CallModel',Data) -> 'enc_CallModel'(Data);
encode_disp('TransportQOS',Data) -> 'enc_TransportQOS'(Data);
encode_disp('AdmissionConfirm',Data) -> 'enc_AdmissionConfirm'(Data);
encode_disp('UUIEsRequested',Data) -> 'enc_UUIEsRequested'(Data);
encode_disp('AdmissionReject',Data) -> 'enc_AdmissionReject'(Data);
encode_disp('AdmissionRejectReason',Data) -> 'enc_AdmissionRejectReason'(Data);
encode_disp('BandwidthRequest',Data) -> 'enc_BandwidthRequest'(Data);
encode_disp('BandwidthConfirm',Data) -> 'enc_BandwidthConfirm'(Data);
encode_disp('BandwidthReject',Data) -> 'enc_BandwidthReject'(Data);
encode_disp('BandRejectReason',Data) -> 'enc_BandRejectReason'(Data);
encode_disp('LocationRequest',Data) -> 'enc_LocationRequest'(Data);
encode_disp('LocationConfirm',Data) -> 'enc_LocationConfirm'(Data);
encode_disp('LocationReject',Data) -> 'enc_LocationReject'(Data);
encode_disp('LocationRejectReason',Data) -> 'enc_LocationRejectReason'(Data);
encode_disp('DisengageRequest',Data) -> 'enc_DisengageRequest'(Data);
encode_disp('DisengageReason',Data) -> 'enc_DisengageReason'(Data);
encode_disp('DisengageConfirm',Data) -> 'enc_DisengageConfirm'(Data);
encode_disp('DisengageReject',Data) -> 'enc_DisengageReject'(Data);
encode_disp('DisengageRejectReason',Data) -> 'enc_DisengageRejectReason'(Data);
encode_disp('InfoRequest',Data) -> 'enc_InfoRequest'(Data);
encode_disp('InfoRequestResponse',Data) -> 'enc_InfoRequestResponse'(Data);
encode_disp('InfoRequestResponseStatus',Data) -> 'enc_InfoRequestResponseStatus'(Data);
encode_disp('InfoRequestAck',Data) -> 'enc_InfoRequestAck'(Data);
encode_disp('InfoRequestNak',Data) -> 'enc_InfoRequestNak'(Data);
encode_disp('InfoRequestNakReason',Data) -> 'enc_InfoRequestNakReason'(Data);
encode_disp('NonStandardMessage',Data) -> 'enc_NonStandardMessage'(Data);
encode_disp('UnknownMessageResponse',Data) -> 'enc_UnknownMessageResponse'(Data);
encode_disp('RequestInProgress',Data) -> 'enc_RequestInProgress'(Data);
encode_disp('ResourcesAvailableIndicate',Data) -> 'enc_ResourcesAvailableIndicate'(Data);
encode_disp('ResourcesAvailableConfirm',Data) -> 'enc_ResourcesAvailableConfirm'(Data);
encode_disp('ServiceControlIndication',Data) -> 'enc_ServiceControlIndication'(Data);
encode_disp('ServiceControlResponse',Data) -> 'enc_ServiceControlResponse'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('H323-UserInformation',Data) -> 'dec_H323-UserInformation'(Data);
decode_disp('H323-UU-PDU',Data) -> 'dec_H323-UU-PDU'(Data);
decode_disp('StimulusControl',Data) -> 'dec_StimulusControl'(Data);
decode_disp('Alerting-UUIE',Data) -> 'dec_Alerting-UUIE'(Data);
decode_disp('CallProceeding-UUIE',Data) -> 'dec_CallProceeding-UUIE'(Data);
decode_disp('Connect-UUIE',Data) -> 'dec_Connect-UUIE'(Data);
decode_disp('Information-UUIE',Data) -> 'dec_Information-UUIE'(Data);
decode_disp('ReleaseComplete-UUIE',Data) -> 'dec_ReleaseComplete-UUIE'(Data);
decode_disp('ReleaseCompleteReason',Data) -> 'dec_ReleaseCompleteReason'(Data);
decode_disp('Setup-UUIE',Data) -> 'dec_Setup-UUIE'(Data);
decode_disp('ScnConnectionType',Data) -> 'dec_ScnConnectionType'(Data);
decode_disp('ScnConnectionAggregation',Data) -> 'dec_ScnConnectionAggregation'(Data);
decode_disp('PresentationIndicator',Data) -> 'dec_PresentationIndicator'(Data);
decode_disp('ScreeningIndicator',Data) -> 'dec_ScreeningIndicator'(Data);
decode_disp('Facility-UUIE',Data) -> 'dec_Facility-UUIE'(Data);
decode_disp('ConferenceList',Data) -> 'dec_ConferenceList'(Data);
decode_disp('FacilityReason',Data) -> 'dec_FacilityReason'(Data);
decode_disp('Progress-UUIE',Data) -> 'dec_Progress-UUIE'(Data);
decode_disp('TransportAddress',Data) -> 'dec_TransportAddress'(Data);
decode_disp('Status-UUIE',Data) -> 'dec_Status-UUIE'(Data);
decode_disp('StatusInquiry-UUIE',Data) -> 'dec_StatusInquiry-UUIE'(Data);
decode_disp('SetupAcknowledge-UUIE',Data) -> 'dec_SetupAcknowledge-UUIE'(Data);
decode_disp('Notify-UUIE',Data) -> 'dec_Notify-UUIE'(Data);
decode_disp('EndpointType',Data) -> 'dec_EndpointType'(Data);
decode_disp('GatewayInfo',Data) -> 'dec_GatewayInfo'(Data);
decode_disp('SupportedProtocols',Data) -> 'dec_SupportedProtocols'(Data);
decode_disp('H310Caps',Data) -> 'dec_H310Caps'(Data);
decode_disp('H320Caps',Data) -> 'dec_H320Caps'(Data);
decode_disp('H321Caps',Data) -> 'dec_H321Caps'(Data);
decode_disp('H322Caps',Data) -> 'dec_H322Caps'(Data);
decode_disp('H323Caps',Data) -> 'dec_H323Caps'(Data);
decode_disp('H324Caps',Data) -> 'dec_H324Caps'(Data);
decode_disp('VoiceCaps',Data) -> 'dec_VoiceCaps'(Data);
decode_disp('T120OnlyCaps',Data) -> 'dec_T120OnlyCaps'(Data);
decode_disp('NonStandardProtocol',Data) -> 'dec_NonStandardProtocol'(Data);
decode_disp('T38FaxAnnexbOnlyCaps',Data) -> 'dec_T38FaxAnnexbOnlyCaps'(Data);
decode_disp('SIPCaps',Data) -> 'dec_SIPCaps'(Data);
decode_disp('McuInfo',Data) -> 'dec_McuInfo'(Data);
decode_disp('TerminalInfo',Data) -> 'dec_TerminalInfo'(Data);
decode_disp('GatekeeperInfo',Data) -> 'dec_GatekeeperInfo'(Data);
decode_disp('VendorIdentifier',Data) -> 'dec_VendorIdentifier'(Data);
decode_disp('H221NonStandard',Data) -> 'dec_H221NonStandard'(Data);
decode_disp('TunnelledProtocol',Data) -> 'dec_TunnelledProtocol'(Data);
decode_disp('TunnelledProtocolAlternateIdentifier',Data) -> 'dec_TunnelledProtocolAlternateIdentifier'(Data);
decode_disp('NonStandardParameter',Data) -> 'dec_NonStandardParameter'(Data);
decode_disp('NonStandardIdentifier',Data) -> 'dec_NonStandardIdentifier'(Data);
decode_disp('AliasAddress',Data) -> 'dec_AliasAddress'(Data);
decode_disp('AddressPattern',Data) -> 'dec_AddressPattern'(Data);
decode_disp('PartyNumber',Data) -> 'dec_PartyNumber'(Data);
decode_disp('PublicPartyNumber',Data) -> 'dec_PublicPartyNumber'(Data);
decode_disp('PrivatePartyNumber',Data) -> 'dec_PrivatePartyNumber'(Data);
decode_disp('NumberDigits',Data) -> 'dec_NumberDigits'(Data);
decode_disp('PublicTypeOfNumber',Data) -> 'dec_PublicTypeOfNumber'(Data);
decode_disp('PrivateTypeOfNumber',Data) -> 'dec_PrivateTypeOfNumber'(Data);
decode_disp('MobileUIM',Data) -> 'dec_MobileUIM'(Data);
decode_disp('TBCD-STRING',Data) -> 'dec_TBCD-STRING'(Data);
decode_disp('ANSI-41-UIM',Data) -> 'dec_ANSI-41-UIM'(Data);
decode_disp('GSM-UIM',Data) -> 'dec_GSM-UIM'(Data);
decode_disp('ExtendedAliasAddress',Data) -> 'dec_ExtendedAliasAddress'(Data);
decode_disp('Endpoint',Data) -> 'dec_Endpoint'(Data);
decode_disp('AlternateTransportAddresses',Data) -> 'dec_AlternateTransportAddresses'(Data);
decode_disp('UseSpecifiedTransport',Data) -> 'dec_UseSpecifiedTransport'(Data);
decode_disp('AlternateGK',Data) -> 'dec_AlternateGK'(Data);
decode_disp('AltGKInfo',Data) -> 'dec_AltGKInfo'(Data);
decode_disp('SecurityServiceMode',Data) -> 'dec_SecurityServiceMode'(Data);
decode_disp('SecurityCapabilities',Data) -> 'dec_SecurityCapabilities'(Data);
decode_disp('SecurityErrors',Data) -> 'dec_SecurityErrors'(Data);
decode_disp('SecurityErrors2',Data) -> 'dec_SecurityErrors2'(Data);
decode_disp('H245Security',Data) -> 'dec_H245Security'(Data);
decode_disp('QseriesOptions',Data) -> 'dec_QseriesOptions'(Data);
decode_disp('Q954Details',Data) -> 'dec_Q954Details'(Data);
decode_disp('GloballyUniqueID',Data) -> 'dec_GloballyUniqueID'(Data);
decode_disp('ConferenceIdentifier',Data) -> 'dec_ConferenceIdentifier'(Data);
decode_disp('RequestSeqNum',Data) -> 'dec_RequestSeqNum'(Data);
decode_disp('GatekeeperIdentifier',Data) -> 'dec_GatekeeperIdentifier'(Data);
decode_disp('BandWidth',Data) -> 'dec_BandWidth'(Data);
decode_disp('CallReferenceValue',Data) -> 'dec_CallReferenceValue'(Data);
decode_disp('EndpointIdentifier',Data) -> 'dec_EndpointIdentifier'(Data);
decode_disp('ProtocolIdentifier',Data) -> 'dec_ProtocolIdentifier'(Data);
decode_disp('TimeToLive',Data) -> 'dec_TimeToLive'(Data);
decode_disp('H248PackagesDescriptor',Data) -> 'dec_H248PackagesDescriptor'(Data);
decode_disp('H248SignalsDescriptor',Data) -> 'dec_H248SignalsDescriptor'(Data);
decode_disp('FeatureDescriptor',Data) -> 'dec_FeatureDescriptor'(Data);
decode_disp('CallIdentifier',Data) -> 'dec_CallIdentifier'(Data);
decode_disp('EncryptIntAlg',Data) -> 'dec_EncryptIntAlg'(Data);
decode_disp('NonIsoIntegrityMechanism',Data) -> 'dec_NonIsoIntegrityMechanism'(Data);
decode_disp('IntegrityMechanism',Data) -> 'dec_IntegrityMechanism'(Data);
decode_disp('ICV',Data) -> 'dec_ICV'(Data);
decode_disp('FastStartToken',Data) -> 'dec_FastStartToken'(Data);
decode_disp('EncodedFastStartToken',Data) -> 'dec_EncodedFastStartToken'(Data);
decode_disp('CryptoH323Token',Data) -> 'dec_CryptoH323Token'(Data);
decode_disp('DataRate',Data) -> 'dec_DataRate'(Data);
decode_disp('CallLinkage',Data) -> 'dec_CallLinkage'(Data);
decode_disp('SupportedPrefix',Data) -> 'dec_SupportedPrefix'(Data);
decode_disp('CapacityReportingCapability',Data) -> 'dec_CapacityReportingCapability'(Data);
decode_disp('CapacityReportingSpecification',Data) -> 'dec_CapacityReportingSpecification'(Data);
decode_disp('CallCapacity',Data) -> 'dec_CallCapacity'(Data);
decode_disp('CallCapacityInfo',Data) -> 'dec_CallCapacityInfo'(Data);
decode_disp('CallsAvailable',Data) -> 'dec_CallsAvailable'(Data);
decode_disp('CircuitInfo',Data) -> 'dec_CircuitInfo'(Data);
decode_disp('CircuitIdentifier',Data) -> 'dec_CircuitIdentifier'(Data);
decode_disp('CicInfo',Data) -> 'dec_CicInfo'(Data);
decode_disp('GroupID',Data) -> 'dec_GroupID'(Data);
decode_disp('CarrierInfo',Data) -> 'dec_CarrierInfo'(Data);
decode_disp('ServiceControlDescriptor',Data) -> 'dec_ServiceControlDescriptor'(Data);
decode_disp('ServiceControlSession',Data) -> 'dec_ServiceControlSession'(Data);
decode_disp('RasUsageInfoTypes',Data) -> 'dec_RasUsageInfoTypes'(Data);
decode_disp('RasUsageSpecification',Data) -> 'dec_RasUsageSpecification'(Data);
decode_disp('RasUsageInformation',Data) -> 'dec_RasUsageInformation'(Data);
decode_disp('CallTerminationCause',Data) -> 'dec_CallTerminationCause'(Data);
decode_disp('BandwidthDetails',Data) -> 'dec_BandwidthDetails'(Data);
decode_disp('CallCreditCapability',Data) -> 'dec_CallCreditCapability'(Data);
decode_disp('CallCreditServiceControl',Data) -> 'dec_CallCreditServiceControl'(Data);
decode_disp('GenericData',Data) -> 'dec_GenericData'(Data);
decode_disp('GenericIdentifier',Data) -> 'dec_GenericIdentifier'(Data);
decode_disp('EnumeratedParameter',Data) -> 'dec_EnumeratedParameter'(Data);
decode_disp('Content',Data) -> 'dec_Content'(Data);
decode_disp('FeatureSet',Data) -> 'dec_FeatureSet'(Data);
decode_disp('TransportChannelInfo',Data) -> 'dec_TransportChannelInfo'(Data);
decode_disp('RTPSession',Data) -> 'dec_RTPSession'(Data);
decode_disp('RasMessage',Data) -> 'dec_RasMessage'(Data);
decode_disp('GatekeeperRequest',Data) -> 'dec_GatekeeperRequest'(Data);
decode_disp('GatekeeperConfirm',Data) -> 'dec_GatekeeperConfirm'(Data);
decode_disp('GatekeeperReject',Data) -> 'dec_GatekeeperReject'(Data);
decode_disp('GatekeeperRejectReason',Data) -> 'dec_GatekeeperRejectReason'(Data);
decode_disp('RegistrationRequest',Data) -> 'dec_RegistrationRequest'(Data);
decode_disp('RegistrationConfirm',Data) -> 'dec_RegistrationConfirm'(Data);
decode_disp('RegistrationReject',Data) -> 'dec_RegistrationReject'(Data);
decode_disp('RegistrationRejectReason',Data) -> 'dec_RegistrationRejectReason'(Data);
decode_disp('UnregistrationRequest',Data) -> 'dec_UnregistrationRequest'(Data);
decode_disp('UnregRequestReason',Data) -> 'dec_UnregRequestReason'(Data);
decode_disp('UnregistrationConfirm',Data) -> 'dec_UnregistrationConfirm'(Data);
decode_disp('UnregistrationReject',Data) -> 'dec_UnregistrationReject'(Data);
decode_disp('UnregRejectReason',Data) -> 'dec_UnregRejectReason'(Data);
decode_disp('AdmissionRequest',Data) -> 'dec_AdmissionRequest'(Data);
decode_disp('CallType',Data) -> 'dec_CallType'(Data);
decode_disp('CallModel',Data) -> 'dec_CallModel'(Data);
decode_disp('TransportQOS',Data) -> 'dec_TransportQOS'(Data);
decode_disp('AdmissionConfirm',Data) -> 'dec_AdmissionConfirm'(Data);
decode_disp('UUIEsRequested',Data) -> 'dec_UUIEsRequested'(Data);
decode_disp('AdmissionReject',Data) -> 'dec_AdmissionReject'(Data);
decode_disp('AdmissionRejectReason',Data) -> 'dec_AdmissionRejectReason'(Data);
decode_disp('BandwidthRequest',Data) -> 'dec_BandwidthRequest'(Data);
decode_disp('BandwidthConfirm',Data) -> 'dec_BandwidthConfirm'(Data);
decode_disp('BandwidthReject',Data) -> 'dec_BandwidthReject'(Data);
decode_disp('BandRejectReason',Data) -> 'dec_BandRejectReason'(Data);
decode_disp('LocationRequest',Data) -> 'dec_LocationRequest'(Data);
decode_disp('LocationConfirm',Data) -> 'dec_LocationConfirm'(Data);
decode_disp('LocationReject',Data) -> 'dec_LocationReject'(Data);
decode_disp('LocationRejectReason',Data) -> 'dec_LocationRejectReason'(Data);
decode_disp('DisengageRequest',Data) -> 'dec_DisengageRequest'(Data);
decode_disp('DisengageReason',Data) -> 'dec_DisengageReason'(Data);
decode_disp('DisengageConfirm',Data) -> 'dec_DisengageConfirm'(Data);
decode_disp('DisengageReject',Data) -> 'dec_DisengageReject'(Data);
decode_disp('DisengageRejectReason',Data) -> 'dec_DisengageRejectReason'(Data);
decode_disp('InfoRequest',Data) -> 'dec_InfoRequest'(Data);
decode_disp('InfoRequestResponse',Data) -> 'dec_InfoRequestResponse'(Data);
decode_disp('InfoRequestResponseStatus',Data) -> 'dec_InfoRequestResponseStatus'(Data);
decode_disp('InfoRequestAck',Data) -> 'dec_InfoRequestAck'(Data);
decode_disp('InfoRequestNak',Data) -> 'dec_InfoRequestNak'(Data);
decode_disp('InfoRequestNakReason',Data) -> 'dec_InfoRequestNakReason'(Data);
decode_disp('NonStandardMessage',Data) -> 'dec_NonStandardMessage'(Data);
decode_disp('UnknownMessageResponse',Data) -> 'dec_UnknownMessageResponse'(Data);
decode_disp('RequestInProgress',Data) -> 'dec_RequestInProgress'(Data);
decode_disp('ResourcesAvailableIndicate',Data) -> 'dec_ResourcesAvailableIndicate'(Data);
decode_disp('ResourcesAvailableConfirm',Data) -> 'dec_ResourcesAvailableConfirm'(Data);
decode_disp('ServiceControlIndication',Data) -> 'dec_ServiceControlIndication'(Data);
decode_disp('ServiceControlResponse',Data) -> 'dec_ServiceControlResponse'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
'enc_H323-UserInformation'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
'enc_H323-UU-PDU'(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
'enc_H323-UserInformation_user-data'(Enc4@element)
end
end].
'enc_H323-UserInformation_user-data'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(3, Val),
Enc5@len = byte_size(Enc4@element),
Enc5@len@sub = Enc5@len - 1,
if 0 =< Enc5@len@sub, Enc5@len@sub < 131 ->
[Enc5@len@sub|Enc4@element]
end
end].

'dec_H323-UserInformation_user-data'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
<<V3@V0:8/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Conv5 = binary:copy(V3@V3),
{V3@Conv5,V3@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'H323-UserInformation_user-data',Term1,Term2},Bytes5}.



'dec_H323-UserInformation'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type H323-UU-PDU
{Term1,Bytes3} = 'dec_H323-UU-PDU'(Bytes2),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_H323-UserInformation_user-data'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'H323-UserInformation',Term1,Term2},Bytes6}.

'enc_H323-UU-PDU'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 4, 13),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<8:7,Enc2@bitmap:9>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
'enc_H323-UU-PDU_h323-message-body'(Enc4@element)
end,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc5@element)
end
end,
Extensions,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@output = 'enc_H323-UU-PDU_h4501SupplementaryService'(Enc7@element),
Enc8@bin = complete(Enc8@output),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[align,
Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[align,
<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
[align|encode_fragmented(Enc8@bin, 8)]
end
end
end
end,
begin
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@output = if Enc10@element =:= false ->
<<0:1,0:7>>;
Enc10@element =:= true ->
<<1:1,0:7>>
end,
Enc12@bin = Enc12@output,
[align,
1|Enc12@bin]
end
end
end,
begin
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@output = 'enc_H323-UU-PDU_h245Control'(Enc14@element),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[align|encode_fragmented(Enc15@bin, 8)]
end
end
end
end,
begin
Enc17@element = element(7, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc18@output = 'enc_H323-UU-PDU_nonStandardControl'(Enc17@element),
Enc18@bin = complete(Enc18@output),
Enc18@len = byte_size(Enc18@bin),
if Enc18@len < 128 ->
[align,
Enc18@len|Enc18@bin];
Enc18@len < 16384 ->
[align,
<<2:2,Enc18@len:14>>|Enc18@bin];
true ->
[align|encode_fragmented(Enc18@bin, 8)]
end
end
end
end,
begin
Enc20@element = element(8, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc21@output = enc_CallLinkage(Enc20@element),
Enc21@bin = complete(Enc21@output),
Enc21@len = byte_size(Enc21@bin),
if Enc21@len < 128 ->
[align,
Enc21@len|Enc21@bin];
Enc21@len < 16384 ->
[align,
<<2:2,Enc21@len:14>>|Enc21@bin];
true ->
[align|encode_fragmented(Enc21@bin, 8)]
end
end
end
end,
begin
Enc23@element = element(9, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc24@output = 'enc_H323-UU-PDU_tunnelledSignallingMessage'(Enc23@element),
Enc24@bin = complete(Enc24@output),
Enc24@len = byte_size(Enc24@bin),
if Enc24@len < 128 ->
[align,
Enc24@len|Enc24@bin];
Enc24@len < 16384 ->
[align,
<<2:2,Enc24@len:14>>|Enc24@bin];
true ->
[align|encode_fragmented(Enc24@bin, 8)]
end
end
end
end,
begin
Enc26@element = element(10, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc27@output = [],
Enc27@bin = <<0:8>>,
[align,
1|Enc27@bin]
end
end
end,
begin
Enc29@element = element(11, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc30@output = enc_StimulusControl(Enc29@element),
Enc30@bin = complete(Enc30@output),
Enc30@len = byte_size(Enc30@bin),
if Enc30@len < 128 ->
[align,
Enc30@len|Enc30@bin];
Enc30@len < 16384 ->
[align,
<<2:2,Enc30@len:14>>|Enc30@bin];
true ->
[align|encode_fragmented(Enc30@bin, 8)]
end
end
end
end|begin
Enc32@element = element(12, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc33@output = 'enc_H323-UU-PDU_genericData'(Enc32@element),
Enc33@bin = complete(Enc33@output),
Enc33@len = byte_size(Enc33@bin),
if Enc33@len < 128 ->
[align,
Enc33@len|Enc33@bin];
Enc33@len < 16384 ->
[align,
<<2:2,Enc33@len:14>>|Enc33@bin];
true ->
[align|encode_fragmented(Enc33@bin, 8)]
end
end
end
end].
'enc_H323-UU-PDU_h323-message-body'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= setup ->
[<<0:1,0:3>>|'enc_Setup-UUIE'(ChoiceVal)];
ChoiceTag =:= callProceeding ->
[<<0:1,1:3>>|'enc_CallProceeding-UUIE'(ChoiceVal)];
ChoiceTag =:= connect ->
[<<0:1,2:3>>|'enc_Connect-UUIE'(ChoiceVal)];
ChoiceTag =:= alerting ->
[<<0:1,3:3>>|'enc_Alerting-UUIE'(ChoiceVal)];
ChoiceTag =:= information ->
[<<0:1,4:3>>|'enc_Information-UUIE'(ChoiceVal)];
ChoiceTag =:= releaseComplete ->
[<<0:1,5:3>>|'enc_ReleaseComplete-UUIE'(ChoiceVal)];
ChoiceTag =:= facility ->
[<<0:1,6:3>>|'enc_Facility-UUIE'(ChoiceVal)];
ChoiceTag =:= progress ->
begin
Enc8@output = 'enc_Progress-UUIE'(ChoiceVal),
Enc8@bin = complete(Enc8@output),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[<<1:1,0:7>>,
align,
Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc8@bin, 8)]
end
end;
ChoiceTag =:= empty ->
begin
Enc9@output = [],
Enc9@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc9@bin]
end;
ChoiceTag =:= status ->
begin
Enc10@output = 'enc_Status-UUIE'(ChoiceVal),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[<<1:1,2:7>>,
align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc10@bin, 8)]
end
end;
ChoiceTag =:= statusInquiry ->
begin
Enc11@output = 'enc_StatusInquiry-UUIE'(ChoiceVal),
Enc11@bin = complete(Enc11@output),
Enc11@len = byte_size(Enc11@bin),
if Enc11@len < 128 ->
[<<1:1,3:7>>,
align,
Enc11@len|Enc11@bin];
Enc11@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc11@len:14>>|Enc11@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc11@bin, 8)]
end
end;
ChoiceTag =:= setupAcknowledge ->
begin
Enc12@output = 'enc_SetupAcknowledge-UUIE'(ChoiceVal),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[<<1:1,4:7>>,
align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc12@bin, 8)]
end
end;
ChoiceTag =:= notify ->
begin
Enc13@output = 'enc_Notify-UUIE'(ChoiceVal),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[<<1:1,5:7>>,
align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[<<1:1,5:7>>,
align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[<<1:1,5:7>>,
align|encode_fragmented(Enc13@bin, 8)]
end
end
end.

'dec_H323-UU-PDU_h323-message-body'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_Setup-UUIE'(Bytes2)
end,
{{setup,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_CallProceeding-UUIE'(Bytes2)
end,
{{callProceeding,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_Connect-UUIE'(Bytes2)
end,
{{connect,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
'dec_Alerting-UUIE'(Bytes2)
end,
{{alerting,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
'dec_Information-UUIE'(Bytes2)
end,
{{information,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
'dec_ReleaseComplete-UUIE'(Bytes2)
end,
{{releaseComplete,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
'dec_Facility-UUIE'(Bytes2)
end,
{{facility,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_Progress-UUIE'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{progress,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{empty,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_Status-UUIE'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{status,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_StatusInquiry-UUIE'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{statusInquiry,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_SetupAcknowledge-UUIE'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{setupAcknowledge,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_Notify-UUIE'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{notify,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H323-UU-PDU_h4501SupplementaryService'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len < 128 ->
[Enc1@len|Comp];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Comp];
true ->
encode_fragmented(Comp, 8)
end
end || Comp <- Val]].


'dec_H323-UU-PDU_h4501SupplementaryService'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components1(V1@V0, V1@Buf1, []).

'enc_H323-UU-PDU_h245Control'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len < 128 ->
[Enc1@len|Comp];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Comp];
true ->
encode_fragmented(Comp, 8)
end
end || Comp <- Val]].


'dec_H323-UU-PDU_h245Control'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components2(V1@V0, V1@Buf1, []).

'enc_H323-UU-PDU_nonStandardControl'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_NonStandardParameter(Comp) || Comp <- Val]].


'dec_H323-UU-PDU_nonStandardControl'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components3(V1@V0, V1@Buf1, []).

'enc_H323-UU-PDU_tunnelledSignallingMessage'(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
enc_TunnelledProtocol(Enc4@element)
end,
begin
Enc5@element = element(3, Val),
'enc_H323-UU-PDU_tunnelledSignallingMessage_messageContent'(Enc5@element)
end,
begin
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
[]
end
end|begin
Enc8@element = element(5, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc8@element)
end
end].
'enc_H323-UU-PDU_tunnelledSignallingMessage_messageContent'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len < 128 ->
[Enc1@len|Comp];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Comp];
true ->
encode_fragmented(Comp, 8)
end
end || Comp <- Val]].


'dec_H323-UU-PDU_tunnelledSignallingMessage_messageContent'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components4(V1@V0, V1@Buf1, []).


'dec_H323-UU-PDU_tunnelledSignallingMessage'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type TunnelledProtocol
{Term1,Bytes3} = dec_TunnelledProtocol(Bytes2),

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = 'dec_H323-UU-PDU_tunnelledSignallingMessage_messageContent'(Bytes3),

%% attribute number 3 with type NULL
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
ignore,
{'NULL',Bytes4}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type NonStandardParameter
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'H323-UU-PDU_tunnelledSignallingMessage',Term1,Term2,Term3,Term4},Bytes8}.

'enc_H323-UU-PDU_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


'dec_H323-UU-PDU_genericData'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components5(V1@V0, V1@Buf1, []).



'dec_H323-UU-PDU'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes3} = 'dec_H323-UU-PDU_h323-message-body'(Bytes2),

%% attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes5) band 7,
{V4@V0,V4@Buf1} = case Bytes5 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx3,_} = 'dec_H323-UU-PDU_h4501SupplementaryService'(V4@V0),
{TmpValx3,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes7} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes6) band 7,
{V5@V0,V5@Buf1} = case Bytes6 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx4,_} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = V5@V0,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,
{TmpValx4,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes8} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes7) band 7,
{V7@V0,V7@Buf1} = case Bytes7 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx5,_} = 'dec_H323-UU-PDU_h245Control'(V7@V0),
{TmpValx5,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes8) band 7,
{V8@V0,V8@Buf1} = case Bytes8 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx6,_} = 'dec_H323-UU-PDU_nonStandardControl'(V8@V0),
{TmpValx6,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type CallLinkage
{Term7,Bytes10} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes9) band 7,
{V9@V0,V9@Buf1} = case Bytes9 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx7,_} = dec_CallLinkage(V9@V0),
{TmpValx7,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type SEQUENCE
{Term8,Bytes11} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes10) band 7,
{V10@V0,V10@Buf1} = case Bytes10 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx8,_} = 'dec_H323-UU-PDU_tunnelledSignallingMessage'(V10@V0),
{TmpValx8,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type NULL
{Term9,Bytes12} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes11) band 7,
{V11@V0,V11@Buf1} = case Bytes11 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx9,_} = begin
ignore,
{'NULL',V11@V0}
end,
{TmpValx9,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type StimulusControl
{Term10,Bytes13} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes12) band 7,
{V13@V0,V13@Buf1} = case Bytes12 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx10,_} = dec_StimulusControl(V13@V0),
{TmpValx10,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes14} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes13) band 7,
{V14@V0,V14@Buf1} = case Bytes13 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx11,_} = 'dec_H323-UU-PDU_genericData'(V14@V0),
{TmpValx11,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,
Bytes15= skipextensions(Bytes14, 10, Extensions),
{{'H323-UU-PDU',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},Bytes15}.

'enc_StimulusControl'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc5@element)
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
[]
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@len = byte_size(Enc9@element),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc9@element];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc9@element];
true ->
[align|encode_fragmented(Enc9@element, 8)]
end
end
end
end].


dec_StimulusControl(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type NULL
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
ignore,
{'NULL',Bytes3}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = case Opt band 1 of
1 ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
V4@Conv10 = binary:copy(V4@V0),
{V4@Conv10,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'StimulusControl',Term1,Term2,Term3},Bytes7}.

'enc_Alerting-UUIE'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 5, 19),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<13:7,Enc2@bitmap:14>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc5@bin = encode_oid(Enc4@element),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end,
begin
Enc6@element = element(3, Val),
enc_EndpointType(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc7@element)
end
end,
Extensions,
begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_CallIdentifier(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end,
begin
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@output = enc_H245Security(Enc12@element),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[align|encode_fragmented(Enc13@bin, 8)]
end
end
end
end,
begin
Enc15@element = element(7, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = 'enc_Alerting-UUIE_tokens'(Enc15@element),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[align|encode_fragmented(Enc16@bin, 8)]
end
end
end
end,
begin
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@output = 'enc_Alerting-UUIE_cryptoTokens'(Enc18@element),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[align|encode_fragmented(Enc19@bin, 8)]
end
end
end
end,
begin
Enc21@element = element(9, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@output = 'enc_Alerting-UUIE_fastStart'(Enc21@element),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[align|encode_fragmented(Enc22@bin, 8)]
end
end
end
end,
begin
Enc24@element = element(10, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@output = if Enc24@element =:= false ->
<<0:1,0:7>>;
Enc24@element =:= true ->
<<1:1,0:7>>
end,
Enc26@bin = Enc26@output,
[align,
1|Enc26@bin]
end
end
end,
begin
Enc28@element = element(11, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc30@output = if Enc28@element =:= false ->
<<0:1,0:7>>;
Enc28@element =:= true ->
<<1:1,0:7>>
end,
Enc30@bin = Enc30@output,
[align,
1|Enc30@bin]
end
end
end,
begin
Enc32@element = element(12, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc33@output = 'enc_Alerting-UUIE_alertingAddress'(Enc32@element),
Enc33@bin = complete(Enc33@output),
Enc33@len = byte_size(Enc33@bin),
if Enc33@len < 128 ->
[align,
Enc33@len|Enc33@bin];
Enc33@len < 16384 ->
[align,
<<2:2,Enc33@len:14>>|Enc33@bin];
true ->
[align|encode_fragmented(Enc33@bin, 8)]
end
end
end
end,
begin
Enc35@element = element(13, Val),
if Enc35@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc36@output = enc_PresentationIndicator(Enc35@element),
Enc36@bin = complete(Enc36@output),
Enc36@len = byte_size(Enc36@bin),
if Enc36@len < 128 ->
[align,
Enc36@len|Enc36@bin];
Enc36@len < 16384 ->
[align,
<<2:2,Enc36@len:14>>|Enc36@bin];
true ->
[align|encode_fragmented(Enc36@bin, 8)]
end
end
end
end,
begin
Enc38@element = element(14, Val),
if Enc38@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc40@output = if Enc38@element =:= userProvidedNotScreened ->
<<0:1,0:2,0:5>>;
Enc38@element =:= userProvidedVerifiedAndPassed ->
<<0:1,1:2,0:5>>;
Enc38@element =:= userProvidedVerifiedAndFailed ->
<<0:1,2:2,0:5>>;
Enc38@element =:= networkProvided ->
<<0:1,3:2,0:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc38@element}}})
end,
Enc40@bin = Enc40@output,
[align,
1|Enc40@bin]
end
end
end,
begin
Enc42@element = element(15, Val),
if Enc42@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc43@output = [],
Enc43@bin = <<0:8>>,
[align,
1|Enc43@bin]
end
end
end,
begin
Enc45@element = element(16, Val),
if Enc45@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc46@output = 'enc_Alerting-UUIE_serviceControl'(Enc45@element),
Enc46@bin = complete(Enc46@output),
Enc46@len = byte_size(Enc46@bin),
if Enc46@len < 128 ->
[align,
Enc46@len|Enc46@bin];
Enc46@len < 16384 ->
[align,
<<2:2,Enc46@len:14>>|Enc46@bin];
true ->
[align|encode_fragmented(Enc46@bin, 8)]
end
end
end
end,
begin
Enc48@element = element(17, Val),
if Enc48@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc49@output = enc_CallCapacity(Enc48@element),
Enc49@bin = complete(Enc49@output),
Enc49@len = byte_size(Enc49@bin),
if Enc49@len < 128 ->
[align,
Enc49@len|Enc49@bin];
Enc49@len < 16384 ->
[align,
<<2:2,Enc49@len:14>>|Enc49@bin];
true ->
[align|encode_fragmented(Enc49@bin, 8)]
end
end
end
end|begin
Enc51@element = element(18, Val),
if Enc51@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc52@output = enc_FeatureSet(Enc51@element),
Enc52@bin = complete(Enc52@output),
Enc52@len = byte_size(Enc52@bin),
if Enc52@len < 128 ->
[align,
Enc52@len|Enc52@bin];
Enc52@len < 16384 ->
[align,
<<2:2,Enc52@len:14>>|Enc52@bin];
true ->
[align|encode_fragmented(Enc52@bin, 8)]
end
end
end
end].
'enc_Alerting-UUIE_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


'dec_Alerting-UUIE_tokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components6(V1@V0, V1@Buf1, []).

'enc_Alerting-UUIE_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


'dec_Alerting-UUIE_cryptoTokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components7(V1@V0, V1@Buf1, []).

'enc_Alerting-UUIE_fastStart'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len < 128 ->
[Enc1@len|Comp];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Comp];
true ->
encode_fragmented(Comp, 8)
end
end || Comp <- Val]].


'dec_Alerting-UUIE_fastStart'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components8(V1@V0, V1@Buf1, []).

'enc_Alerting-UUIE_alertingAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


'dec_Alerting-UUIE_alertingAddress'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components9(V1@V0, V1@Buf1, []).

'enc_Alerting-UUIE_serviceControl'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ServiceControlSession(Comp) || Comp <- Val]].


'dec_Alerting-UUIE_serviceControl'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components10(V1@V0, V1@Buf1, []).



'dec_Alerting-UUIE'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type EndpointType
{Term2,Bytes4} = dec_EndpointType(Bytes3),

%% attribute number 3 with type TransportAddress
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_TransportAddress(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 4 with type CallIdentifier
{Term4,Bytes7} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes6) band 7,
{V5@V0,V5@Buf1} = case Bytes6 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx4,_} = dec_CallIdentifier(V5@V0),
{TmpValx4,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type H245Security
{Term5,Bytes8} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes7) band 7,
{V6@V0,V6@Buf1} = case Bytes7 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx5,_} = dec_H245Security(V6@V0),
{TmpValx5,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = 'dec_Alerting-UUIE_tokens'(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes10} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = 'dec_Alerting-UUIE_cryptoTokens'(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes11} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = 'dec_Alerting-UUIE_fastStart'(V9@V0),
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes12} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes11) band 7,
{V10@V0,V10@Buf1} = case Bytes11 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx9,_} = begin
<<V11@V0:1,V11@Buf1/bitstring>> = V10@V0,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end,
{TmpValx9,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes13} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes12) band 7,
{V12@V0,V12@Buf1} = case Bytes12 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx10,_} = begin
<<V13@V0:1,V13@Buf1/bitstring>> = V12@V0,
V13@Int2 = case V13@V0 of
0 -> false;
1 -> true
end,
{V13@Int2,V13@Buf1}
end,
{TmpValx10,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes14} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes13) band 7,
{V14@V0,V14@Buf1} = case Bytes13 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx11,_} = 'dec_Alerting-UUIE_alertingAddress'(V14@V0),
{TmpValx11,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type PresentationIndicator
{Term12,Bytes15} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V15@Pad3 = bit_size(Bytes14) band 7,
{V15@V0,V15@Buf1} = case Bytes14 of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
{TmpValx12,_} = dec_PresentationIndicator(V15@V0),
{TmpValx12,V15@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type ENUMERATED
{Term13,Bytes16} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes15) band 7,
{V16@V0,V16@Buf1} = case Bytes15 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx13,_} = begin
{V17@V0,V17@Buf1} = case V16@V0 of
<<0:1,V17@V3:2/unsigned-unit:1,V17@Buf4/bitstring>> ->
V17@Int5 = case V17@V3 of
0 -> userProvidedNotScreened;
1 -> userProvidedVerifiedAndPassed;
2 -> userProvidedVerifiedAndFailed;
3 -> networkProvided
end,
{V17@Int5,V17@Buf4};
<<1:1,V17@Buf2/bitstring>> ->
{V17@V3,V17@Buf4} = case V17@Buf2 of
<<0:1,V17@V6:6,V17@Buf7/bitstring>> ->
{V17@V6,V17@Buf7};
<<1:1,V17@Buf5/bitstring>> ->
V17@Pad9 = bit_size(V17@Buf5) band 7,
{V17@V6,V17@Buf7} = case V17@Buf5 of
<<_:V17@Pad9,0:1,V17@V11:7,V17@Buf12/bitstring>> when V17@V11 =/= 0 ->
{V17@V11,V17@Buf12};
<<_:V17@Pad9,1:1,0:1,V17@V12:14,V17@Buf13/bitstring>> when V17@V12 =/= 0 ->
{V17@V12,V17@Buf13}
end,
<<V17@V14:V17@V6/unit:8,V17@Buf15/bitstring>> = V17@Buf7,
{V17@V14,V17@Buf15}
end,
V17@Int16 = case V17@V3 of
_ -> {asn1_enum,V17@V3}
end,
{V17@Int16,V17@Buf4}
end,
{V17@V0,V17@Buf1}
end,
{TmpValx13,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type NULL
{Term14,Bytes17} = case Extensions of
  <<_:10,1:1,_/bitstring>> ->
begin
V18@Pad3 = bit_size(Bytes16) band 7,
{V18@V0,V18@Buf1} = case Bytes16 of
<<_:V18@Pad3,0:1,V18@V5:7,V18@V7:V18@V5/binary-unit:8,V18@Buf8/bitstring>> ->
{V18@V7,V18@Buf8};
<<_:V18@Pad3,1:1,0:1,V18@V6:14,V18@V8:V18@V6/binary-unit:8,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<_:V18@Pad3,1:1,1:1,V18@V6:6,V18@Buf7/bitstring>> ->
{V18@V8,V18@Buf9}  = decode_fragmented(V18@V6, V18@Buf7, 8),
{V18@V8,V18@Buf9}
end,
{TmpValx14,_} = begin
ignore,
{'NULL',V18@V0}
end,
{TmpValx14,V18@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type SEQUENCE OF
{Term15,Bytes18} = case Extensions of
  <<_:11,1:1,_/bitstring>> ->
begin
V20@Pad3 = bit_size(Bytes17) band 7,
{V20@V0,V20@Buf1} = case Bytes17 of
<<_:V20@Pad3,0:1,V20@V5:7,V20@V7:V20@V5/binary-unit:8,V20@Buf8/bitstring>> ->
{V20@V7,V20@Buf8};
<<_:V20@Pad3,1:1,0:1,V20@V6:14,V20@V8:V20@V6/binary-unit:8,V20@Buf9/bitstring>> ->
{V20@V8,V20@Buf9};
<<_:V20@Pad3,1:1,1:1,V20@V6:6,V20@Buf7/bitstring>> ->
{V20@V8,V20@Buf9}  = decode_fragmented(V20@V6, V20@Buf7, 8),
{V20@V8,V20@Buf9}
end,
{TmpValx15,_} = 'dec_Alerting-UUIE_serviceControl'(V20@V0),
{TmpValx15,V20@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type CallCapacity
{Term16,Bytes19} = case Extensions of
  <<_:12,1:1,_/bitstring>> ->
begin
V21@Pad3 = bit_size(Bytes18) band 7,
{V21@V0,V21@Buf1} = case Bytes18 of
<<_:V21@Pad3,0:1,V21@V5:7,V21@V7:V21@V5/binary-unit:8,V21@Buf8/bitstring>> ->
{V21@V7,V21@Buf8};
<<_:V21@Pad3,1:1,0:1,V21@V6:14,V21@V8:V21@V6/binary-unit:8,V21@Buf9/bitstring>> ->
{V21@V8,V21@Buf9};
<<_:V21@Pad3,1:1,1:1,V21@V6:6,V21@Buf7/bitstring>> ->
{V21@V8,V21@Buf9}  = decode_fragmented(V21@V6, V21@Buf7, 8),
{V21@V8,V21@Buf9}
end,
{TmpValx16,_} = dec_CallCapacity(V21@V0),
{TmpValx16,V21@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type FeatureSet
{Term17,Bytes20} = case Extensions of
  <<_:13,1:1,_/bitstring>> ->
begin
V22@Pad3 = bit_size(Bytes19) band 7,
{V22@V0,V22@Buf1} = case Bytes19 of
<<_:V22@Pad3,0:1,V22@V5:7,V22@V7:V22@V5/binary-unit:8,V22@Buf8/bitstring>> ->
{V22@V7,V22@Buf8};
<<_:V22@Pad3,1:1,0:1,V22@V6:14,V22@V8:V22@V6/binary-unit:8,V22@Buf9/bitstring>> ->
{V22@V8,V22@Buf9};
<<_:V22@Pad3,1:1,1:1,V22@V6:6,V22@Buf7/bitstring>> ->
{V22@V8,V22@Buf9}  = decode_fragmented(V22@V6, V22@Buf7, 8),
{V22@V8,V22@Buf9}
end,
{TmpValx17,_} = dec_FeatureSet(V22@V0),
{TmpValx17,V22@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,
Bytes21= skipextensions(Bytes20, 15, Extensions),
{{'Alerting-UUIE',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17},Bytes21}.

'enc_CallProceeding-UUIE'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 5, 14),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<8:7,Enc2@bitmap:9>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc5@bin = encode_oid(Enc4@element),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end,
begin
Enc6@element = element(3, Val),
enc_EndpointType(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc7@element)
end
end,
Extensions,
begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_CallIdentifier(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end,
begin
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@output = enc_H245Security(Enc12@element),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[align|encode_fragmented(Enc13@bin, 8)]
end
end
end
end,
begin
Enc15@element = element(7, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = 'enc_CallProceeding-UUIE_tokens'(Enc15@element),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[align|encode_fragmented(Enc16@bin, 8)]
end
end
end
end,
begin
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@output = 'enc_CallProceeding-UUIE_cryptoTokens'(Enc18@element),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[align|encode_fragmented(Enc19@bin, 8)]
end
end
end
end,
begin
Enc21@element = element(9, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@output = 'enc_CallProceeding-UUIE_fastStart'(Enc21@element),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[align|encode_fragmented(Enc22@bin, 8)]
end
end
end
end,
begin
Enc24@element = element(10, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@output = if Enc24@element =:= false ->
<<0:1,0:7>>;
Enc24@element =:= true ->
<<1:1,0:7>>
end,
Enc26@bin = Enc26@output,
[align,
1|Enc26@bin]
end
end
end,
begin
Enc28@element = element(11, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc30@output = if Enc28@element =:= false ->
<<0:1,0:7>>;
Enc28@element =:= true ->
<<1:1,0:7>>
end,
Enc30@bin = Enc30@output,
[align,
1|Enc30@bin]
end
end
end,
begin
Enc32@element = element(12, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc33@output = [],
Enc33@bin = <<0:8>>,
[align,
1|Enc33@bin]
end
end
end|begin
Enc35@element = element(13, Val),
if Enc35@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc36@output = enc_FeatureSet(Enc35@element),
Enc36@bin = complete(Enc36@output),
Enc36@len = byte_size(Enc36@bin),
if Enc36@len < 128 ->
[align,
Enc36@len|Enc36@bin];
Enc36@len < 16384 ->
[align,
<<2:2,Enc36@len:14>>|Enc36@bin];
true ->
[align|encode_fragmented(Enc36@bin, 8)]
end
end
end
end].
'enc_CallProceeding-UUIE_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


'dec_CallProceeding-UUIE_tokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components11(V1@V0, V1@Buf1, []).

'enc_CallProceeding-UUIE_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


'dec_CallProceeding-UUIE_cryptoTokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components12(V1@V0, V1@Buf1, []).

'enc_CallProceeding-UUIE_fastStart'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len < 128 ->
[Enc1@len|Comp];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Comp];
true ->
encode_fragmented(Comp, 8)
end
end || Comp <- Val]].


'dec_CallProceeding-UUIE_fastStart'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components13(V1@V0, V1@Buf1, []).



'dec_CallProceeding-UUIE'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type EndpointType
{Term2,Bytes4} = dec_EndpointType(Bytes3),

%% attribute number 3 with type TransportAddress
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_TransportAddress(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 4 with type CallIdentifier
{Term4,Bytes7} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes6) band 7,
{V5@V0,V5@Buf1} = case Bytes6 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx4,_} = dec_CallIdentifier(V5@V0),
{TmpValx4,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type H245Security
{Term5,Bytes8} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes7) band 7,
{V6@V0,V6@Buf1} = case Bytes7 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx5,_} = dec_H245Security(V6@V0),
{TmpValx5,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = 'dec_CallProceeding-UUIE_tokens'(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes10} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = 'dec_CallProceeding-UUIE_cryptoTokens'(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes11} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = 'dec_CallProceeding-UUIE_fastStart'(V9@V0),
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes12} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes11) band 7,
{V10@V0,V10@Buf1} = case Bytes11 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx9,_} = begin
<<V11@V0:1,V11@Buf1/bitstring>> = V10@V0,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end,
{TmpValx9,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes13} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes12) band 7,
{V12@V0,V12@Buf1} = case Bytes12 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx10,_} = begin
<<V13@V0:1,V13@Buf1/bitstring>> = V12@V0,
V13@Int2 = case V13@V0 of
0 -> false;
1 -> true
end,
{V13@Int2,V13@Buf1}
end,
{TmpValx10,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type NULL
{Term11,Bytes14} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes13) band 7,
{V14@V0,V14@Buf1} = case Bytes13 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx11,_} = begin
ignore,
{'NULL',V14@V0}
end,
{TmpValx11,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type FeatureSet
{Term12,Bytes15} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes14) band 7,
{V16@V0,V16@Buf1} = case Bytes14 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx12,_} = dec_FeatureSet(V16@V0),
{TmpValx12,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,
Bytes16= skipextensions(Bytes15, 10, Extensions),
{{'CallProceeding-UUIE',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12},Bytes16}.

'enc_Connect-UUIE'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 6, 21),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<14:7,Enc2@bitmap:15>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc5@bin = encode_oid(Enc4@element),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc6@element)
end
end,
begin
Enc8@element = element(4, Val),
enc_EndpointType(Enc8@element)
end,
align,
begin
Enc9@element = element(5, Val),
Enc10@len = byte_size(Enc9@element),
if Enc10@len =:= 16 ->
Enc9@element
end
end,
Extensions,
begin
Enc11@element = element(6, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@output = enc_CallIdentifier(Enc11@element),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[align|encode_fragmented(Enc12@bin, 8)]
end
end
end
end,
begin
Enc14@element = element(7, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@output = enc_H245Security(Enc14@element),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[align|encode_fragmented(Enc15@bin, 8)]
end
end
end
end,
begin
Enc17@element = element(8, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc18@output = 'enc_Connect-UUIE_tokens'(Enc17@element),
Enc18@bin = complete(Enc18@output),
Enc18@len = byte_size(Enc18@bin),
if Enc18@len < 128 ->
[align,
Enc18@len|Enc18@bin];
Enc18@len < 16384 ->
[align,
<<2:2,Enc18@len:14>>|Enc18@bin];
true ->
[align|encode_fragmented(Enc18@bin, 8)]
end
end
end
end,
begin
Enc20@element = element(9, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc21@output = 'enc_Connect-UUIE_cryptoTokens'(Enc20@element),
Enc21@bin = complete(Enc21@output),
Enc21@len = byte_size(Enc21@bin),
if Enc21@len < 128 ->
[align,
Enc21@len|Enc21@bin];
Enc21@len < 16384 ->
[align,
<<2:2,Enc21@len:14>>|Enc21@bin];
true ->
[align|encode_fragmented(Enc21@bin, 8)]
end
end
end
end,
begin
Enc23@element = element(10, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc24@output = 'enc_Connect-UUIE_fastStart'(Enc23@element),
Enc24@bin = complete(Enc24@output),
Enc24@len = byte_size(Enc24@bin),
if Enc24@len < 128 ->
[align,
Enc24@len|Enc24@bin];
Enc24@len < 16384 ->
[align,
<<2:2,Enc24@len:14>>|Enc24@bin];
true ->
[align|encode_fragmented(Enc24@bin, 8)]
end
end
end
end,
begin
Enc26@element = element(11, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc28@output = if Enc26@element =:= false ->
<<0:1,0:7>>;
Enc26@element =:= true ->
<<1:1,0:7>>
end,
Enc28@bin = Enc28@output,
[align,
1|Enc28@bin]
end
end
end,
begin
Enc30@element = element(12, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc32@output = if Enc30@element =:= false ->
<<0:1,0:7>>;
Enc30@element =:= true ->
<<1:1,0:7>>
end,
Enc32@bin = Enc32@output,
[align,
1|Enc32@bin]
end
end
end,
begin
Enc34@element = element(13, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc35@output = 'enc_Connect-UUIE_language'(Enc34@element),
Enc35@bin = complete(Enc35@output),
Enc35@len = byte_size(Enc35@bin),
if Enc35@len < 128 ->
[align,
Enc35@len|Enc35@bin];
Enc35@len < 16384 ->
[align,
<<2:2,Enc35@len:14>>|Enc35@bin];
true ->
[align|encode_fragmented(Enc35@bin, 8)]
end
end
end
end,
begin
Enc37@element = element(14, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc38@output = 'enc_Connect-UUIE_connectedAddress'(Enc37@element),
Enc38@bin = complete(Enc38@output),
Enc38@len = byte_size(Enc38@bin),
if Enc38@len < 128 ->
[align,
Enc38@len|Enc38@bin];
Enc38@len < 16384 ->
[align,
<<2:2,Enc38@len:14>>|Enc38@bin];
true ->
[align|encode_fragmented(Enc38@bin, 8)]
end
end
end
end,
begin
Enc40@element = element(15, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc41@output = enc_PresentationIndicator(Enc40@element),
Enc41@bin = complete(Enc41@output),
Enc41@len = byte_size(Enc41@bin),
if Enc41@len < 128 ->
[align,
Enc41@len|Enc41@bin];
Enc41@len < 16384 ->
[align,
<<2:2,Enc41@len:14>>|Enc41@bin];
true ->
[align|encode_fragmented(Enc41@bin, 8)]
end
end
end
end,
begin
Enc43@element = element(16, Val),
if Enc43@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@output = if Enc43@element =:= userProvidedNotScreened ->
<<0:1,0:2,0:5>>;
Enc43@element =:= userProvidedVerifiedAndPassed ->
<<0:1,1:2,0:5>>;
Enc43@element =:= userProvidedVerifiedAndFailed ->
<<0:1,2:2,0:5>>;
Enc43@element =:= networkProvided ->
<<0:1,3:2,0:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc43@element}}})
end,
Enc45@bin = Enc45@output,
[align,
1|Enc45@bin]
end
end
end,
begin
Enc47@element = element(17, Val),
if Enc47@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc48@output = [],
Enc48@bin = <<0:8>>,
[align,
1|Enc48@bin]
end
end
end,
begin
Enc50@element = element(18, Val),
if Enc50@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc51@output = 'enc_Connect-UUIE_serviceControl'(Enc50@element),
Enc51@bin = complete(Enc51@output),
Enc51@len = byte_size(Enc51@bin),
if Enc51@len < 128 ->
[align,
Enc51@len|Enc51@bin];
Enc51@len < 16384 ->
[align,
<<2:2,Enc51@len:14>>|Enc51@bin];
true ->
[align|encode_fragmented(Enc51@bin, 8)]
end
end
end
end,
begin
Enc53@element = element(19, Val),
if Enc53@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc54@output = enc_CallCapacity(Enc53@element),
Enc54@bin = complete(Enc54@output),
Enc54@len = byte_size(Enc54@bin),
if Enc54@len < 128 ->
[align,
Enc54@len|Enc54@bin];
Enc54@len < 16384 ->
[align,
<<2:2,Enc54@len:14>>|Enc54@bin];
true ->
[align|encode_fragmented(Enc54@bin, 8)]
end
end
end
end|begin
Enc56@element = element(20, Val),
if Enc56@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc57@output = enc_FeatureSet(Enc56@element),
Enc57@bin = complete(Enc57@output),
Enc57@len = byte_size(Enc57@bin),
if Enc57@len < 128 ->
[align,
Enc57@len|Enc57@bin];
Enc57@len < 16384 ->
[align,
<<2:2,Enc57@len:14>>|Enc57@bin];
true ->
[align|encode_fragmented(Enc57@bin, 8)]
end
end
end
end].
'enc_Connect-UUIE_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


'dec_Connect-UUIE_tokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components14(V1@V0, V1@Buf1, []).

'enc_Connect-UUIE_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


'dec_Connect-UUIE_cryptoTokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components15(V1@V0, V1@Buf1, []).

'enc_Connect-UUIE_fastStart'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len < 128 ->
[Enc1@len|Comp];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Comp];
true ->
encode_fragmented(Comp, 8)
end
end || Comp <- Val]].


'dec_Connect-UUIE_fastStart'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components16(V1@V0, V1@Buf1, []).

'enc_Connect-UUIE_language'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@bin = list_to_binary(Comp),
Enc1@len = byte_size(Enc1@bin),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5,0:3>>|Enc1@bin]
end
end || Comp <- Val]].


'dec_Connect-UUIE_language'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components17(V1@V0, V1@Buf1, []).

'enc_Connect-UUIE_connectedAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


'dec_Connect-UUIE_connectedAddress'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components18(V1@V0, V1@Buf1, []).

'enc_Connect-UUIE_serviceControl'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ServiceControlSession(Comp) || Comp <- Val]].


'dec_Connect-UUIE_serviceControl'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components19(V1@V0, V1@Buf1, []).



'dec_Connect-UUIE'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type TransportAddress
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TransportAddress(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type EndpointType
{Term3,Bytes5} = dec_EndpointType(Bytes4),

%% attribute number 4 with type OCTET STRING
{Term4,Bytes6} = begin
V4@Pad2 = bit_size(Bytes5) band 7,
<<_:V4@Pad2,V4@V0:16/binary-unit:8,V4@Buf1/bitstring>> = Bytes5,
V4@Conv4 = binary:copy(V4@V0),
{V4@Conv4,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:7,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:7,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,

%% attribute number 5 with type CallIdentifier
{Term5,Bytes8} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes7) band 7,
{V6@V0,V6@Buf1} = case Bytes7 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx5,_} = dec_CallIdentifier(V6@V0),
{TmpValx5,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type H245Security
{Term6,Bytes9} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = dec_H245Security(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes10} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = 'dec_Connect-UUIE_tokens'(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes11} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = 'dec_Connect-UUIE_cryptoTokens'(V9@V0),
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes12} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes11) band 7,
{V10@V0,V10@Buf1} = case Bytes11 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx9,_} = 'dec_Connect-UUIE_fastStart'(V10@V0),
{TmpValx9,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes13} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes12) band 7,
{V11@V0,V11@Buf1} = case Bytes12 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx10,_} = begin
<<V12@V0:1,V12@Buf1/bitstring>> = V11@V0,
V12@Int2 = case V12@V0 of
0 -> false;
1 -> true
end,
{V12@Int2,V12@Buf1}
end,
{TmpValx10,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type BOOLEAN
{Term11,Bytes14} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes13) band 7,
{V13@V0,V13@Buf1} = case Bytes13 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx11,_} = begin
<<V14@V0:1,V14@Buf1/bitstring>> = V13@V0,
V14@Int2 = case V14@V0 of
0 -> false;
1 -> true
end,
{V14@Int2,V14@Buf1}
end,
{TmpValx11,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type SEQUENCE OF
{Term12,Bytes15} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V15@Pad3 = bit_size(Bytes14) band 7,
{V15@V0,V15@Buf1} = case Bytes14 of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
{TmpValx12,_} = 'dec_Connect-UUIE_language'(V15@V0),
{TmpValx12,V15@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type SEQUENCE OF
{Term13,Bytes16} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes15) band 7,
{V16@V0,V16@Buf1} = case Bytes15 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx13,_} = 'dec_Connect-UUIE_connectedAddress'(V16@V0),
{TmpValx13,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type PresentationIndicator
{Term14,Bytes17} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V17@Pad3 = bit_size(Bytes16) band 7,
{V17@V0,V17@Buf1} = case Bytes16 of
<<_:V17@Pad3,0:1,V17@V5:7,V17@V7:V17@V5/binary-unit:8,V17@Buf8/bitstring>> ->
{V17@V7,V17@Buf8};
<<_:V17@Pad3,1:1,0:1,V17@V6:14,V17@V8:V17@V6/binary-unit:8,V17@Buf9/bitstring>> ->
{V17@V8,V17@Buf9};
<<_:V17@Pad3,1:1,1:1,V17@V6:6,V17@Buf7/bitstring>> ->
{V17@V8,V17@Buf9}  = decode_fragmented(V17@V6, V17@Buf7, 8),
{V17@V8,V17@Buf9}
end,
{TmpValx14,_} = dec_PresentationIndicator(V17@V0),
{TmpValx14,V17@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type ENUMERATED
{Term15,Bytes18} = case Extensions of
  <<_:10,1:1,_/bitstring>> ->
begin
V18@Pad3 = bit_size(Bytes17) band 7,
{V18@V0,V18@Buf1} = case Bytes17 of
<<_:V18@Pad3,0:1,V18@V5:7,V18@V7:V18@V5/binary-unit:8,V18@Buf8/bitstring>> ->
{V18@V7,V18@Buf8};
<<_:V18@Pad3,1:1,0:1,V18@V6:14,V18@V8:V18@V6/binary-unit:8,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<_:V18@Pad3,1:1,1:1,V18@V6:6,V18@Buf7/bitstring>> ->
{V18@V8,V18@Buf9}  = decode_fragmented(V18@V6, V18@Buf7, 8),
{V18@V8,V18@Buf9}
end,
{TmpValx15,_} = begin
{V19@V0,V19@Buf1} = case V18@V0 of
<<0:1,V19@V3:2/unsigned-unit:1,V19@Buf4/bitstring>> ->
V19@Int5 = case V19@V3 of
0 -> userProvidedNotScreened;
1 -> userProvidedVerifiedAndPassed;
2 -> userProvidedVerifiedAndFailed;
3 -> networkProvided
end,
{V19@Int5,V19@Buf4};
<<1:1,V19@Buf2/bitstring>> ->
{V19@V3,V19@Buf4} = case V19@Buf2 of
<<0:1,V19@V6:6,V19@Buf7/bitstring>> ->
{V19@V6,V19@Buf7};
<<1:1,V19@Buf5/bitstring>> ->
V19@Pad9 = bit_size(V19@Buf5) band 7,
{V19@V6,V19@Buf7} = case V19@Buf5 of
<<_:V19@Pad9,0:1,V19@V11:7,V19@Buf12/bitstring>> when V19@V11 =/= 0 ->
{V19@V11,V19@Buf12};
<<_:V19@Pad9,1:1,0:1,V19@V12:14,V19@Buf13/bitstring>> when V19@V12 =/= 0 ->
{V19@V12,V19@Buf13}
end,
<<V19@V14:V19@V6/unit:8,V19@Buf15/bitstring>> = V19@Buf7,
{V19@V14,V19@Buf15}
end,
V19@Int16 = case V19@V3 of
_ -> {asn1_enum,V19@V3}
end,
{V19@Int16,V19@Buf4}
end,
{V19@V0,V19@Buf1}
end,
{TmpValx15,V18@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type NULL
{Term16,Bytes19} = case Extensions of
  <<_:11,1:1,_/bitstring>> ->
begin
V20@Pad3 = bit_size(Bytes18) band 7,
{V20@V0,V20@Buf1} = case Bytes18 of
<<_:V20@Pad3,0:1,V20@V5:7,V20@V7:V20@V5/binary-unit:8,V20@Buf8/bitstring>> ->
{V20@V7,V20@Buf8};
<<_:V20@Pad3,1:1,0:1,V20@V6:14,V20@V8:V20@V6/binary-unit:8,V20@Buf9/bitstring>> ->
{V20@V8,V20@Buf9};
<<_:V20@Pad3,1:1,1:1,V20@V6:6,V20@Buf7/bitstring>> ->
{V20@V8,V20@Buf9}  = decode_fragmented(V20@V6, V20@Buf7, 8),
{V20@V8,V20@Buf9}
end,
{TmpValx16,_} = begin
ignore,
{'NULL',V20@V0}
end,
{TmpValx16,V20@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type SEQUENCE OF
{Term17,Bytes20} = case Extensions of
  <<_:12,1:1,_/bitstring>> ->
begin
V22@Pad3 = bit_size(Bytes19) band 7,
{V22@V0,V22@Buf1} = case Bytes19 of
<<_:V22@Pad3,0:1,V22@V5:7,V22@V7:V22@V5/binary-unit:8,V22@Buf8/bitstring>> ->
{V22@V7,V22@Buf8};
<<_:V22@Pad3,1:1,0:1,V22@V6:14,V22@V8:V22@V6/binary-unit:8,V22@Buf9/bitstring>> ->
{V22@V8,V22@Buf9};
<<_:V22@Pad3,1:1,1:1,V22@V6:6,V22@Buf7/bitstring>> ->
{V22@V8,V22@Buf9}  = decode_fragmented(V22@V6, V22@Buf7, 8),
{V22@V8,V22@Buf9}
end,
{TmpValx17,_} = 'dec_Connect-UUIE_serviceControl'(V22@V0),
{TmpValx17,V22@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type CallCapacity
{Term18,Bytes21} = case Extensions of
  <<_:13,1:1,_/bitstring>> ->
begin
V23@Pad3 = bit_size(Bytes20) band 7,
{V23@V0,V23@Buf1} = case Bytes20 of
<<_:V23@Pad3,0:1,V23@V5:7,V23@V7:V23@V5/binary-unit:8,V23@Buf8/bitstring>> ->
{V23@V7,V23@Buf8};
<<_:V23@Pad3,1:1,0:1,V23@V6:14,V23@V8:V23@V6/binary-unit:8,V23@Buf9/bitstring>> ->
{V23@V8,V23@Buf9};
<<_:V23@Pad3,1:1,1:1,V23@V6:6,V23@Buf7/bitstring>> ->
{V23@V8,V23@Buf9}  = decode_fragmented(V23@V6, V23@Buf7, 8),
{V23@V8,V23@Buf9}
end,
{TmpValx18,_} = dec_CallCapacity(V23@V0),
{TmpValx18,V23@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute number 19 with type FeatureSet
{Term19,Bytes22} = case Extensions of
  <<_:14,1:1,_/bitstring>> ->
begin
V24@Pad3 = bit_size(Bytes21) band 7,
{V24@V0,V24@Buf1} = case Bytes21 of
<<_:V24@Pad3,0:1,V24@V5:7,V24@V7:V24@V5/binary-unit:8,V24@Buf8/bitstring>> ->
{V24@V7,V24@Buf8};
<<_:V24@Pad3,1:1,0:1,V24@V6:14,V24@V8:V24@V6/binary-unit:8,V24@Buf9/bitstring>> ->
{V24@V8,V24@Buf9};
<<_:V24@Pad3,1:1,1:1,V24@V6:6,V24@Buf7/bitstring>> ->
{V24@V8,V24@Buf9}  = decode_fragmented(V24@V6, V24@Buf7, 8),
{V24@V8,V24@Buf9}
end,
{TmpValx19,_} = dec_FeatureSet(V24@V0),
{TmpValx19,V24@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes21}
end,
Bytes23= skipextensions(Bytes22, 16, Extensions),
{{'Connect-UUIE',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19},Bytes23}.

'enc_Information-UUIE'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 3, 9),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<5:7,Enc1@bitmap:6>>
end,
[if Extensions =:= [] ->
<<0:1>>;
true ->
<<1:1>>
end,
align,
begin
Enc3@element = element(2, Val),
Enc4@bin = encode_oid(Enc3@element),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
encode_fragmented(Enc4@bin, 8)
end
end,
Extensions,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@output = enc_CallIdentifier(Enc5@element),
Enc6@bin = complete(Enc6@output),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[align,
Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[align,
<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
[align|encode_fragmented(Enc6@bin, 8)]
end
end
end
end,
begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@output = 'enc_Information-UUIE_tokens'(Enc8@element),
Enc9@bin = complete(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[align,
Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[align,
<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
[align|encode_fragmented(Enc9@bin, 8)]
end
end
end
end,
begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@output = 'enc_Information-UUIE_cryptoTokens'(Enc11@element),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[align|encode_fragmented(Enc12@bin, 8)]
end
end
end
end,
begin
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@output = 'enc_Information-UUIE_fastStart'(Enc14@element),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[align|encode_fragmented(Enc15@bin, 8)]
end
end
end
end,
begin
Enc17@element = element(7, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc18@output = [],
Enc18@bin = <<0:8>>,
[align,
1|Enc18@bin]
end
end
end|begin
Enc20@element = element(8, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc21@output = enc_CircuitInfo(Enc20@element),
Enc21@bin = complete(Enc21@output),
Enc21@len = byte_size(Enc21@bin),
if Enc21@len < 128 ->
[align,
Enc21@len|Enc21@bin];
Enc21@len < 16384 ->
[align,
<<2:2,Enc21@len:14>>|Enc21@bin];
true ->
[align|encode_fragmented(Enc21@bin, 8)]
end
end
end
end].
'enc_Information-UUIE_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


'dec_Information-UUIE_tokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components20(V1@V0, V1@Buf1, []).

'enc_Information-UUIE_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


'dec_Information-UUIE_cryptoTokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components21(V1@V0, V1@Buf1, []).

'enc_Information-UUIE_fastStart'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len < 128 ->
[Enc1@len|Comp];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Comp];
true ->
encode_fragmented(Comp, 8)
end
end || Comp <- Val]].


'dec_Information-UUIE_fastStart'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components22(V1@V0, V1@Buf1, []).



'dec_Information-UUIE'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes2} = begin
V2@Pad3 = bit_size(Bytes1) band 7,
{V2@V0,V2@Buf1} = case Bytes1 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/binary-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
V2@Conv10 = binary_to_list(V2@V8),
{V2@V11,V2@Buf12}  = {decode_oid(V2@Conv10),V2@Buf9},
{V2@V11,V2@Buf12}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,

%% attribute number 2 with type CallIdentifier
{Term2,Bytes4} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes3) band 7,
{V4@V0,V4@Buf1} = case Bytes3 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = dec_CallIdentifier(V4@V0),
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes4) band 7,
{V5@V0,V5@Buf1} = case Bytes4 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = 'dec_Information-UUIE_tokens'(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes5) band 7,
{V6@V0,V6@Buf1} = case Bytes5 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx4,_} = 'dec_Information-UUIE_cryptoTokens'(V6@V0),
{TmpValx4,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes6) band 7,
{V7@V0,V7@Buf1} = case Bytes6 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx5,_} = 'dec_Information-UUIE_fastStart'(V7@V0),
{TmpValx5,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type NULL
{Term6,Bytes8} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes7) band 7,
{V8@V0,V8@Buf1} = case Bytes7 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx6,_} = begin
ignore,
{'NULL',V8@V0}
end,
{TmpValx6,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type CircuitInfo
{Term7,Bytes9} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes8) band 7,
{V10@V0,V10@Buf1} = case Bytes8 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx7,_} = dec_CircuitInfo(V10@V0),
{TmpValx7,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,
Bytes10= skipextensions(Bytes9, 7, Extensions),
{{'Information-UUIE',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes10}.

'enc_ReleaseComplete-UUIE'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 4, 13),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<8:7,Enc2@bitmap:9>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc5@bin = encode_oid(Enc4@element),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_ReleaseCompleteReason(Enc6@element)
end
end,
Extensions,
begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@output = enc_CallIdentifier(Enc8@element),
Enc9@bin = complete(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[align,
Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[align,
<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
[align|encode_fragmented(Enc9@bin, 8)]
end
end
end
end,
begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@output = 'enc_ReleaseComplete-UUIE_tokens'(Enc11@element),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[align|encode_fragmented(Enc12@bin, 8)]
end
end
end
end,
begin
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@output = 'enc_ReleaseComplete-UUIE_cryptoTokens'(Enc14@element),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[align|encode_fragmented(Enc15@bin, 8)]
end
end
end
end,
begin
Enc17@element = element(7, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc18@output = 'enc_ReleaseComplete-UUIE_busyAddress'(Enc17@element),
Enc18@bin = complete(Enc18@output),
Enc18@len = byte_size(Enc18@bin),
if Enc18@len < 128 ->
[align,
Enc18@len|Enc18@bin];
Enc18@len < 16384 ->
[align,
<<2:2,Enc18@len:14>>|Enc18@bin];
true ->
[align|encode_fragmented(Enc18@bin, 8)]
end
end
end
end,
begin
Enc20@element = element(8, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc21@output = enc_PresentationIndicator(Enc20@element),
Enc21@bin = complete(Enc21@output),
Enc21@len = byte_size(Enc21@bin),
if Enc21@len < 128 ->
[align,
Enc21@len|Enc21@bin];
Enc21@len < 16384 ->
[align,
<<2:2,Enc21@len:14>>|Enc21@bin];
true ->
[align|encode_fragmented(Enc21@bin, 8)]
end
end
end
end,
begin
Enc23@element = element(9, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc25@output = if Enc23@element =:= userProvidedNotScreened ->
<<0:1,0:2,0:5>>;
Enc23@element =:= userProvidedVerifiedAndPassed ->
<<0:1,1:2,0:5>>;
Enc23@element =:= userProvidedVerifiedAndFailed ->
<<0:1,2:2,0:5>>;
Enc23@element =:= networkProvided ->
<<0:1,3:2,0:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc23@element}}})
end,
Enc25@bin = Enc25@output,
[align,
1|Enc25@bin]
end
end
end,
begin
Enc27@element = element(10, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc28@output = enc_CallCapacity(Enc27@element),
Enc28@bin = complete(Enc28@output),
Enc28@len = byte_size(Enc28@bin),
if Enc28@len < 128 ->
[align,
Enc28@len|Enc28@bin];
Enc28@len < 16384 ->
[align,
<<2:2,Enc28@len:14>>|Enc28@bin];
true ->
[align|encode_fragmented(Enc28@bin, 8)]
end
end
end
end,
begin
Enc30@element = element(11, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@output = 'enc_ReleaseComplete-UUIE_serviceControl'(Enc30@element),
Enc31@bin = complete(Enc31@output),
Enc31@len = byte_size(Enc31@bin),
if Enc31@len < 128 ->
[align,
Enc31@len|Enc31@bin];
Enc31@len < 16384 ->
[align,
<<2:2,Enc31@len:14>>|Enc31@bin];
true ->
[align|encode_fragmented(Enc31@bin, 8)]
end
end
end
end|begin
Enc33@element = element(12, Val),
if Enc33@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc34@output = enc_FeatureSet(Enc33@element),
Enc34@bin = complete(Enc34@output),
Enc34@len = byte_size(Enc34@bin),
if Enc34@len < 128 ->
[align,
Enc34@len|Enc34@bin];
Enc34@len < 16384 ->
[align,
<<2:2,Enc34@len:14>>|Enc34@bin];
true ->
[align|encode_fragmented(Enc34@bin, 8)]
end
end
end
end].
'enc_ReleaseComplete-UUIE_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


'dec_ReleaseComplete-UUIE_tokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components23(V1@V0, V1@Buf1, []).

'enc_ReleaseComplete-UUIE_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


'dec_ReleaseComplete-UUIE_cryptoTokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components24(V1@V0, V1@Buf1, []).

'enc_ReleaseComplete-UUIE_busyAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


'dec_ReleaseComplete-UUIE_busyAddress'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components25(V1@V0, V1@Buf1, []).

'enc_ReleaseComplete-UUIE_serviceControl'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ServiceControlSession(Comp) || Comp <- Val]].


'dec_ReleaseComplete-UUIE_serviceControl'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components26(V1@V0, V1@Buf1, []).



'dec_ReleaseComplete-UUIE'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type ReleaseCompleteReason
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_ReleaseCompleteReason(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 3 with type CallIdentifier
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes5) band 7,
{V5@V0,V5@Buf1} = case Bytes5 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = dec_CallIdentifier(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes7} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes6) band 7,
{V6@V0,V6@Buf1} = case Bytes6 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx4,_} = 'dec_ReleaseComplete-UUIE_tokens'(V6@V0),
{TmpValx4,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes8} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes7) band 7,
{V7@V0,V7@Buf1} = case Bytes7 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx5,_} = 'dec_ReleaseComplete-UUIE_cryptoTokens'(V7@V0),
{TmpValx5,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes8) band 7,
{V8@V0,V8@Buf1} = case Bytes8 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx6,_} = 'dec_ReleaseComplete-UUIE_busyAddress'(V8@V0),
{TmpValx6,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type PresentationIndicator
{Term7,Bytes10} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes9) band 7,
{V9@V0,V9@Buf1} = case Bytes9 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx7,_} = dec_PresentationIndicator(V9@V0),
{TmpValx7,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type ENUMERATED
{Term8,Bytes11} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes10) band 7,
{V10@V0,V10@Buf1} = case Bytes10 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx8,_} = begin
{V11@V0,V11@Buf1} = case V10@V0 of
<<0:1,V11@V3:2/unsigned-unit:1,V11@Buf4/bitstring>> ->
V11@Int5 = case V11@V3 of
0 -> userProvidedNotScreened;
1 -> userProvidedVerifiedAndPassed;
2 -> userProvidedVerifiedAndFailed;
3 -> networkProvided
end,
{V11@Int5,V11@Buf4};
<<1:1,V11@Buf2/bitstring>> ->
{V11@V3,V11@Buf4} = case V11@Buf2 of
<<0:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V6,V11@Buf7};
<<1:1,V11@Buf5/bitstring>> ->
V11@Pad9 = bit_size(V11@Buf5) band 7,
{V11@V6,V11@Buf7} = case V11@Buf5 of
<<_:V11@Pad9,0:1,V11@V11:7,V11@Buf12/bitstring>> when V11@V11 =/= 0 ->
{V11@V11,V11@Buf12};
<<_:V11@Pad9,1:1,0:1,V11@V12:14,V11@Buf13/bitstring>> when V11@V12 =/= 0 ->
{V11@V12,V11@Buf13}
end,
<<V11@V14:V11@V6/unit:8,V11@Buf15/bitstring>> = V11@Buf7,
{V11@V14,V11@Buf15}
end,
V11@Int16 = case V11@V3 of
_ -> {asn1_enum,V11@V3}
end,
{V11@Int16,V11@Buf4}
end,
{V11@V0,V11@Buf1}
end,
{TmpValx8,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type CallCapacity
{Term9,Bytes12} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes11) band 7,
{V12@V0,V12@Buf1} = case Bytes11 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx9,_} = dec_CallCapacity(V12@V0),
{TmpValx9,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes13} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes12) band 7,
{V13@V0,V13@Buf1} = case Bytes12 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx10,_} = 'dec_ReleaseComplete-UUIE_serviceControl'(V13@V0),
{TmpValx10,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type FeatureSet
{Term11,Bytes14} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes13) band 7,
{V14@V0,V14@Buf1} = case Bytes13 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx11,_} = dec_FeatureSet(V14@V0),
{TmpValx11,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,
Bytes15= skipextensions(Bytes14, 10, Extensions),
{{'ReleaseComplete-UUIE',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},Bytes15}.

'enc_ReleaseCompleteReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= noBandwidth ->
<<0:1,0:4>>;
ChoiceTag =:= gatekeeperResources ->
<<0:1,1:4>>;
ChoiceTag =:= unreachableDestination ->
<<0:1,2:4>>;
ChoiceTag =:= destinationRejection ->
<<0:1,3:4>>;
ChoiceTag =:= invalidRevision ->
<<0:1,4:4>>;
ChoiceTag =:= noPermission ->
<<0:1,5:4>>;
ChoiceTag =:= unreachableGatekeeper ->
<<0:1,6:4>>;
ChoiceTag =:= gatewayResources ->
<<0:1,7:4>>;
ChoiceTag =:= badFormatAddress ->
<<0:1,8:4>>;
ChoiceTag =:= adaptiveBusy ->
<<0:1,9:4>>;
ChoiceTag =:= inConf ->
<<0:1,10:4>>;
ChoiceTag =:= undefinedReason ->
<<0:1,11:4>>;
ChoiceTag =:= facilityCallDeflection ->
begin
Enc13@output = [],
Enc13@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc13@bin]
end;
ChoiceTag =:= securityDenied ->
begin
Enc14@output = [],
Enc14@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc14@bin]
end;
ChoiceTag =:= calledPartyNotRegistered ->
begin
Enc15@output = [],
Enc15@bin = <<0:8>>,
[<<1:1,2:7>>,
align,
1|Enc15@bin]
end;
ChoiceTag =:= callerNotRegistered ->
begin
Enc16@output = [],
Enc16@bin = <<0:8>>,
[<<1:1,3:7>>,
align,
1|Enc16@bin]
end;
ChoiceTag =:= newConnectionNeeded ->
begin
Enc17@output = [],
Enc17@bin = <<0:8>>,
[<<1:1,4:7>>,
align,
1|Enc17@bin]
end;
ChoiceTag =:= nonStandardReason ->
begin
Enc18@output = enc_NonStandardParameter(ChoiceVal),
Enc18@bin = complete(Enc18@output),
Enc18@len = byte_size(Enc18@bin),
if Enc18@len < 128 ->
[<<1:1,5:7>>,
align,
Enc18@len|Enc18@bin];
Enc18@len < 16384 ->
[<<1:1,5:7>>,
align,
<<2:2,Enc18@len:14>>|Enc18@bin];
true ->
[<<1:1,5:7>>,
align|encode_fragmented(Enc18@bin, 8)]
end
end;
ChoiceTag =:= replaceWithConferenceInvite ->
begin
Enc20@output = begin
Enc19@len = byte_size(ChoiceVal),
if Enc19@len =:= 16 ->
ChoiceVal
end
end,
Enc20@bin = Enc20@output,
[<<1:1,6:7>>,
align,
16|Enc20@bin]
end;
ChoiceTag =:= genericDataReason ->
begin
Enc21@output = [],
Enc21@bin = <<0:8>>,
[<<1:1,7:7>>,
align,
1|Enc21@bin]
end;
ChoiceTag =:= neededFeatureNotSupported ->
begin
Enc22@output = [],
Enc22@bin = <<0:8>>,
[<<1:1,8:7>>,
align,
1|Enc22@bin]
end;
ChoiceTag =:= tunnelledSignallingRejected ->
begin
Enc23@output = [],
Enc23@bin = <<0:8>>,
[<<1:1,9:7>>,
align,
1|Enc23@bin]
end;
ChoiceTag =:= invalidCID ->
begin
Enc24@output = [],
Enc24@bin = <<0:8>>,
[<<1:1,10:7>>,
align,
1|Enc24@bin]
end;
ChoiceTag =:= securityError ->
begin
Enc25@output = enc_SecurityErrors(ChoiceVal),
Enc25@bin = complete(Enc25@output),
Enc25@len = byte_size(Enc25@bin),
if Enc25@len < 128 ->
[<<1:1,11:7>>,
align,
Enc25@len|Enc25@bin];
Enc25@len < 16384 ->
[<<1:1,11:7>>,
align,
<<2:2,Enc25@len:14>>|Enc25@bin];
true ->
[<<1:1,11:7>>,
align|encode_fragmented(Enc25@bin, 8)]
end
end;
ChoiceTag =:= hopCountExceeded ->
begin
Enc26@output = [],
Enc26@bin = <<0:8>>,
[<<1:1,12:7>>,
align,
1|Enc26@bin]
end
end.


dec_ReleaseCompleteReason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noBandwidth,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{gatekeeperResources,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unreachableDestination,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{destinationRejection,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invalidRevision,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noPermission,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unreachableGatekeeper,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{gatewayResources,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{badFormatAddress,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{adaptiveBusy,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{inConf,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefinedReason,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{facilityCallDeflection,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{securityDenied,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{calledPartyNotRegistered,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{callerNotRegistered,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{newConnectionNeeded,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_NonStandardParameter(V2@V0),
{TmpVal,V2@Buf1}
end,
{{nonStandardReason,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
V8@Pad2 = bit_size(V2@V0) band 7,
<<_:V8@Pad2,V8@V0:16/binary-unit:8,V8@Buf1/bitstring>> = V2@V0,
V8@Conv4 = binary:copy(V8@V0),
{V8@Conv4,V8@Buf1}
end,
{TmpVal,V2@Buf1}
end,
{{replaceWithConferenceInvite,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{genericDataReason,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{neededFeatureNotSupported,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{tunnelledSignallingRejected,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{invalidCID,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_SecurityErrors(V2@V0),
{TmpVal,V2@Buf1}
end,
{{securityError,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{hopCountExceeded,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_Setup-UUIE'(Val) ->
Enc8@bitmap = extension_bitmap(Val, 15, 42),
Extensions = if Enc8@bitmap =:= 0 ->
[];
true ->
<<26:7,Enc8@bitmap:27>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(4, Val),
Enc3@element = element(6, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(7, Val),
Enc5@element = element(8, Val),
if Enc4@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@element = element(9, Val),
Enc7@element = element(13, Val),
if Enc6@element =:= asn1_NOVALUE ->
if Enc7@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc7@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc10@element = element(2, Val),
Enc11@bin = encode_oid(Enc10@element),
Enc11@len = byte_size(Enc11@bin),
if Enc11@len < 128 ->
[Enc11@len|Enc11@bin];
Enc11@len < 16384 ->
[<<2:2,Enc11@len:14>>|Enc11@bin];
true ->
encode_fragmented(Enc11@bin, 8)
end
end,
begin
Enc12@element = element(3, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc12@element)
end
end,
begin
Enc14@element = element(4, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Setup-UUIE_sourceAddress'(Enc14@element)
end
end,
begin
Enc16@element = element(5, Val),
enc_EndpointType(Enc16@element)
end,
begin
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Setup-UUIE_destinationAddress'(Enc17@element)
end
end,
begin
Enc19@element = element(7, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc19@element)
end
end,
begin
Enc21@element = element(8, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Setup-UUIE_destExtraCallInfo'(Enc21@element)
end
end,
begin
Enc23@element = element(9, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Setup-UUIE_destExtraCRV'(Enc23@element)
end
end,
begin
Enc25@element = element(10, Val),
if Enc25@element =:= false ->
[<<0:1>>,
align];
Enc25@element =:= true ->
[<<1:1>>,
align]
end
end,
begin
Enc27@element = element(11, Val),
Enc28@len = byte_size(Enc27@element),
if Enc28@len =:= 16 ->
Enc27@element
end
end,
begin
Enc29@element = element(12, Val),
'enc_Setup-UUIE_conferenceGoal'(Enc29@element)
end,
begin
Enc30@element = element(13, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
enc_QseriesOptions(Enc30@element)
end
end,
begin
Enc32@element = element(14, Val),
enc_CallType(Enc32@element)
end,
Extensions,
begin
Enc33@element = element(15, Val),
if Enc33@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc34@output = enc_TransportAddress(Enc33@element),
Enc34@bin = complete(Enc34@output),
Enc34@len = byte_size(Enc34@bin),
if Enc34@len < 128 ->
[align,
Enc34@len|Enc34@bin];
Enc34@len < 16384 ->
[align,
<<2:2,Enc34@len:14>>|Enc34@bin];
true ->
[align|encode_fragmented(Enc34@bin, 8)]
end
end
end
end,
begin
Enc36@element = element(16, Val),
if Enc36@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc37@output = enc_AliasAddress(Enc36@element),
Enc37@bin = complete(Enc37@output),
Enc37@len = byte_size(Enc37@bin),
if Enc37@len < 128 ->
[align,
Enc37@len|Enc37@bin];
Enc37@len < 16384 ->
[align,
<<2:2,Enc37@len:14>>|Enc37@bin];
true ->
[align|encode_fragmented(Enc37@bin, 8)]
end
end
end
end,
begin
Enc39@element = element(17, Val),
if Enc39@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc40@output = enc_CallIdentifier(Enc39@element),
Enc40@bin = complete(Enc40@output),
Enc40@len = byte_size(Enc40@bin),
if Enc40@len < 128 ->
[align,
Enc40@len|Enc40@bin];
Enc40@len < 16384 ->
[align,
<<2:2,Enc40@len:14>>|Enc40@bin];
true ->
[align|encode_fragmented(Enc40@bin, 8)]
end
end
end
end,
begin
Enc42@element = element(18, Val),
if Enc42@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc43@output = 'enc_Setup-UUIE_h245SecurityCapability'(Enc42@element),
Enc43@bin = complete(Enc43@output),
Enc43@len = byte_size(Enc43@bin),
if Enc43@len < 128 ->
[align,
Enc43@len|Enc43@bin];
Enc43@len < 16384 ->
[align,
<<2:2,Enc43@len:14>>|Enc43@bin];
true ->
[align|encode_fragmented(Enc43@bin, 8)]
end
end
end
end,
begin
Enc45@element = element(19, Val),
if Enc45@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc46@output = 'enc_Setup-UUIE_tokens'(Enc45@element),
Enc46@bin = complete(Enc46@output),
Enc46@len = byte_size(Enc46@bin),
if Enc46@len < 128 ->
[align,
Enc46@len|Enc46@bin];
Enc46@len < 16384 ->
[align,
<<2:2,Enc46@len:14>>|Enc46@bin];
true ->
[align|encode_fragmented(Enc46@bin, 8)]
end
end
end
end,
begin
Enc48@element = element(20, Val),
if Enc48@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc49@output = 'enc_Setup-UUIE_cryptoTokens'(Enc48@element),
Enc49@bin = complete(Enc49@output),
Enc49@len = byte_size(Enc49@bin),
if Enc49@len < 128 ->
[align,
Enc49@len|Enc49@bin];
Enc49@len < 16384 ->
[align,
<<2:2,Enc49@len:14>>|Enc49@bin];
true ->
[align|encode_fragmented(Enc49@bin, 8)]
end
end
end
end,
begin
Enc51@element = element(21, Val),
if Enc51@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc52@output = 'enc_Setup-UUIE_fastStart'(Enc51@element),
Enc52@bin = complete(Enc52@output),
Enc52@len = byte_size(Enc52@bin),
if Enc52@len < 128 ->
[align,
Enc52@len|Enc52@bin];
Enc52@len < 16384 ->
[align,
<<2:2,Enc52@len:14>>|Enc52@bin];
true ->
[align|encode_fragmented(Enc52@bin, 8)]
end
end
end
end,
begin
Enc54@element = element(22, Val),
if Enc54@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc56@output = if Enc54@element =:= false ->
<<0:1,0:7>>;
Enc54@element =:= true ->
<<1:1,0:7>>
end,
Enc56@bin = Enc56@output,
[align,
1|Enc56@bin]
end
end
end,
begin
Enc58@element = element(23, Val),
if Enc58@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc60@output = if Enc58@element =:= false ->
<<0:1,0:7>>;
Enc58@element =:= true ->
<<1:1,0:7>>
end,
Enc60@bin = Enc60@output,
[align,
1|Enc60@bin]
end
end
end,
begin
Enc62@element = element(24, Val),
if Enc62@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc64@output = begin
Enc63@len = length(Enc62@element),
Enc63@bin = encode_chars_16bit(Enc62@element),
Enc63@len@sub = Enc63@len - 1,
if Enc63@len@sub bsr 7 =:= 0 ->
[<<Enc63@len@sub:7,0:1>>|Enc63@bin]
end
end,
Enc64@bin = iolist_to_binary(Enc64@output),
Enc64@len = byte_size(Enc64@bin),
if Enc64@len < 128 ->
[align,
Enc64@len|Enc64@bin];
true ->
[align,
<<2:2,Enc64@len:14>>|Enc64@bin]
end
end
end
end,
begin
Enc66@element = element(25, Val),
if Enc66@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc68@output = if Enc66@element =:= false ->
<<0:1,0:7>>;
Enc66@element =:= true ->
<<1:1,0:7>>
end,
Enc68@bin = Enc68@output,
[align,
1|Enc68@bin]
end
end
end,
begin
Enc70@element = element(26, Val),
if Enc70@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc72@output = if Enc70@element =:= false ->
<<0:1,0:7>>;
Enc70@element =:= true ->
<<1:1,0:7>>
end,
Enc72@bin = Enc72@output,
[align,
1|Enc72@bin]
end
end
end,
begin
Enc74@element = element(27, Val),
if Enc74@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc75@output = 'enc_Setup-UUIE_connectionParameters'(Enc74@element),
Enc75@bin = complete(Enc75@output),
Enc75@len = byte_size(Enc75@bin),
if Enc75@len < 128 ->
[align,
Enc75@len|Enc75@bin];
Enc75@len < 16384 ->
[align,
<<2:2,Enc75@len:14>>|Enc75@bin];
true ->
[align|encode_fragmented(Enc75@bin, 8)]
end
end
end
end,
begin
Enc77@element = element(28, Val),
if Enc77@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc78@output = 'enc_Setup-UUIE_language'(Enc77@element),
Enc78@bin = complete(Enc78@output),
Enc78@len = byte_size(Enc78@bin),
if Enc78@len < 128 ->
[align,
Enc78@len|Enc78@bin];
Enc78@len < 16384 ->
[align,
<<2:2,Enc78@len:14>>|Enc78@bin];
true ->
[align|encode_fragmented(Enc78@bin, 8)]
end
end
end
end,
begin
Enc80@element = element(29, Val),
if Enc80@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc81@output = enc_PresentationIndicator(Enc80@element),
Enc81@bin = complete(Enc81@output),
Enc81@len = byte_size(Enc81@bin),
if Enc81@len < 128 ->
[align,
Enc81@len|Enc81@bin];
Enc81@len < 16384 ->
[align,
<<2:2,Enc81@len:14>>|Enc81@bin];
true ->
[align|encode_fragmented(Enc81@bin, 8)]
end
end
end
end,
begin
Enc83@element = element(30, Val),
if Enc83@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc85@output = if Enc83@element =:= userProvidedNotScreened ->
<<0:1,0:2,0:5>>;
Enc83@element =:= userProvidedVerifiedAndPassed ->
<<0:1,1:2,0:5>>;
Enc83@element =:= userProvidedVerifiedAndFailed ->
<<0:1,2:2,0:5>>;
Enc83@element =:= networkProvided ->
<<0:1,3:2,0:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc83@element}}})
end,
Enc85@bin = Enc85@output,
[align,
1|Enc85@bin]
end
end
end,
begin
Enc87@element = element(31, Val),
if Enc87@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc88@output = 'enc_Setup-UUIE_serviceControl'(Enc87@element),
Enc88@bin = complete(Enc88@output),
Enc88@len = byte_size(Enc88@bin),
if Enc88@len < 128 ->
[align,
Enc88@len|Enc88@bin];
Enc88@len < 16384 ->
[align,
<<2:2,Enc88@len:14>>|Enc88@bin];
true ->
[align|encode_fragmented(Enc88@bin, 8)]
end
end
end
end,
begin
Enc90@element = element(32, Val),
if Enc90@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc91@output = [],
Enc91@bin = <<0:8>>,
[align,
1|Enc91@bin]
end
end
end,
begin
Enc93@element = element(33, Val),
if Enc93@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc94@output = enc_CallCapacity(Enc93@element),
Enc94@bin = complete(Enc94@output),
Enc94@len = byte_size(Enc94@bin),
if Enc94@len < 128 ->
[align,
Enc94@len|Enc94@bin];
Enc94@len < 16384 ->
[align,
<<2:2,Enc94@len:14>>|Enc94@bin];
true ->
[align|encode_fragmented(Enc94@bin, 8)]
end
end
end
end,
begin
Enc96@element = element(34, Val),
if Enc96@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc97@output = enc_CircuitInfo(Enc96@element),
Enc97@bin = complete(Enc97@output),
Enc97@len = byte_size(Enc97@bin),
if Enc97@len < 128 ->
[align,
Enc97@len|Enc97@bin];
Enc97@len < 16384 ->
[align,
<<2:2,Enc97@len:14>>|Enc97@bin];
true ->
[align|encode_fragmented(Enc97@bin, 8)]
end
end
end
end,
begin
Enc99@element = element(35, Val),
if Enc99@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc100@output = 'enc_Setup-UUIE_desiredProtocols'(Enc99@element),
Enc100@bin = complete(Enc100@output),
Enc100@len = byte_size(Enc100@bin),
if Enc100@len < 128 ->
[align,
Enc100@len|Enc100@bin];
Enc100@len < 16384 ->
[align,
<<2:2,Enc100@len:14>>|Enc100@bin];
true ->
[align|encode_fragmented(Enc100@bin, 8)]
end
end
end
end,
begin
Enc102@element = element(36, Val),
if Enc102@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc103@output = 'enc_Setup-UUIE_neededFeatures'(Enc102@element),
Enc103@bin = complete(Enc103@output),
Enc103@len = byte_size(Enc103@bin),
if Enc103@len < 128 ->
[align,
Enc103@len|Enc103@bin];
Enc103@len < 16384 ->
[align,
<<2:2,Enc103@len:14>>|Enc103@bin];
true ->
[align|encode_fragmented(Enc103@bin, 8)]
end
end
end
end,
begin
Enc105@element = element(37, Val),
if Enc105@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc106@output = 'enc_Setup-UUIE_desiredFeatures'(Enc105@element),
Enc106@bin = complete(Enc106@output),
Enc106@len = byte_size(Enc106@bin),
if Enc106@len < 128 ->
[align,
Enc106@len|Enc106@bin];
Enc106@len < 16384 ->
[align,
<<2:2,Enc106@len:14>>|Enc106@bin];
true ->
[align|encode_fragmented(Enc106@bin, 8)]
end
end
end
end,
begin
Enc108@element = element(38, Val),
if Enc108@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc109@output = 'enc_Setup-UUIE_supportedFeatures'(Enc108@element),
Enc109@bin = complete(Enc109@output),
Enc109@len = byte_size(Enc109@bin),
if Enc109@len < 128 ->
[align,
Enc109@len|Enc109@bin];
Enc109@len < 16384 ->
[align,
<<2:2,Enc109@len:14>>|Enc109@bin];
true ->
[align|encode_fragmented(Enc109@bin, 8)]
end
end
end
end,
begin
Enc111@element = element(39, Val),
if Enc111@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc112@output = 'enc_Setup-UUIE_parallelH245Control'(Enc111@element),
Enc112@bin = complete(Enc112@output),
Enc112@len = byte_size(Enc112@bin),
if Enc112@len < 128 ->
[align,
Enc112@len|Enc112@bin];
Enc112@len < 16384 ->
[align,
<<2:2,Enc112@len:14>>|Enc112@bin];
true ->
[align|encode_fragmented(Enc112@bin, 8)]
end
end
end
end,
begin
Enc114@element = element(40, Val),
if Enc114@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc115@output = 'enc_Setup-UUIE_additionalSourceAddresses'(Enc114@element),
Enc115@bin = complete(Enc115@output),
Enc115@len = byte_size(Enc115@bin),
if Enc115@len < 128 ->
[align,
Enc115@len|Enc115@bin];
Enc115@len < 16384 ->
[align,
<<2:2,Enc115@len:14>>|Enc115@bin];
true ->
[align|encode_fragmented(Enc115@bin, 8)]
end
end
end
end|begin
Enc117@element = element(41, Val),
if Enc117@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc119@output = begin
Enc117@element@sub = Enc117@element - 1,
[if 0 =< Enc117@element@sub, Enc117@element@sub < 31 ->
<<Enc117@element@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc117@element}}})
end|<<0:3>>]
end,
Enc119@bin = list_to_bitstring(Enc119@output),
[align,
1|Enc119@bin]
end
end
end].
'enc_Setup-UUIE_sourceAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


'dec_Setup-UUIE_sourceAddress'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components27(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_destinationAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


'dec_Setup-UUIE_destinationAddress'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components28(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_destExtraCallInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


'dec_Setup-UUIE_destExtraCallInfo'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components29(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_destExtraCRV'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[if Comp bsr 16 =:= 0 ->
<<Comp:16>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]].


'dec_Setup-UUIE_destExtraCRV'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components30(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_conferenceGoal'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= create ->
<<0:1,0:2>>;
ChoiceTag =:= join ->
<<0:1,1:2>>;
ChoiceTag =:= invite ->
<<0:1,2:2>>;
ChoiceTag =:= 'capability-negotiation' ->
begin
Enc4@output = [],
Enc4@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc4@bin]
end;
ChoiceTag =:= callIndependentSupplementaryService ->
begin
Enc5@output = [],
Enc5@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc5@bin]
end
end.

'dec_Setup-UUIE_conferenceGoal'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{create,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{join,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invite,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{'capability-negotiation',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{callIndependentSupplementaryService,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_Setup-UUIE_h245SecurityCapability'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_H245Security(Comp) || Comp <- Val]].


'dec_Setup-UUIE_h245SecurityCapability'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components31(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


'dec_Setup-UUIE_tokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components32(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


'dec_Setup-UUIE_cryptoTokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components33(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_fastStart'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len < 128 ->
[Enc1@len|Comp];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Comp];
true ->
encode_fragmented(Comp, 8)
end
end || Comp <- Val]].


'dec_Setup-UUIE_fastStart'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components34(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_connectionParameters'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_ScnConnectionType(Enc2@element)
end,
align,
begin
Enc3@element = element(3, Val),
if Enc3@element bsr 16 =:= 0 ->
<<Enc3@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end|begin
Enc5@element = element(4, Val),
enc_ScnConnectionAggregation(Enc5@element)
end].

'dec_Setup-UUIE_connectionParameters'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ScnConnectionType
{Term1,Bytes2} = dec_ScnConnectionType(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes2,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type ScnConnectionAggregation
{Term3,Bytes4} = dec_ScnConnectionAggregation(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'Setup-UUIE_connectionParameters',Term1,Term2,Term3},Bytes6}.

'enc_Setup-UUIE_language'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@bin = list_to_binary(Comp),
Enc1@len = byte_size(Enc1@bin),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5,0:3>>|Enc1@bin]
end
end || Comp <- Val]].


'dec_Setup-UUIE_language'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components35(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_serviceControl'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ServiceControlSession(Comp) || Comp <- Val]].


'dec_Setup-UUIE_serviceControl'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components36(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_desiredProtocols'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedProtocols(Comp) || Comp <- Val]].


'dec_Setup-UUIE_desiredProtocols'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components37(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_neededFeatures'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_FeatureDescriptor(Comp) || Comp <- Val]].


'dec_Setup-UUIE_neededFeatures'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components38(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_desiredFeatures'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_FeatureDescriptor(Comp) || Comp <- Val]].


'dec_Setup-UUIE_desiredFeatures'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components39(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_supportedFeatures'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_FeatureDescriptor(Comp) || Comp <- Val]].


'dec_Setup-UUIE_supportedFeatures'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components40(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_parallelH245Control'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len < 128 ->
[Enc1@len|Comp];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Comp];
true ->
encode_fragmented(Comp, 8)
end
end || Comp <- Val]].


'dec_Setup-UUIE_parallelH245Control'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components41(V1@V0, V1@Buf1, []).

'enc_Setup-UUIE_additionalSourceAddresses'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ExtendedAliasAddress(Comp) || Comp <- Val]].


'dec_Setup-UUIE_additionalSourceAddresses'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components42(V1@V0, V1@Buf1, []).



'dec_Setup-UUIE'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type TransportAddress
{Term2,Bytes4} = case (Opt bsr 6) band 1 of
1 ->
dec_TransportAddress(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case (Opt bsr 5) band 1 of
1 ->
'dec_Setup-UUIE_sourceAddress'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type EndpointType
{Term4,Bytes6} = dec_EndpointType(Bytes5),

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case (Opt bsr 4) band 1 of
1 ->
'dec_Setup-UUIE_destinationAddress'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type TransportAddress
{Term6,Bytes8} = case (Opt bsr 3) band 1 of
1 ->
dec_TransportAddress(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes9} = case (Opt bsr 2) band 1 of
1 ->
'dec_Setup-UUIE_destExtraCallInfo'(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes10} = case (Opt bsr 1) band 1 of
1 ->
'dec_Setup-UUIE_destExtraCRV'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes11} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes10,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 10 with type OCTET STRING
{Term10,Bytes12} = begin
V5@Pad2 = bit_size(Bytes11) band 7,
<<_:V5@Pad2,V5@V0:16/binary-unit:8,V5@Buf1/bitstring>> = Bytes11,
V5@Conv4 = binary:copy(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 11 with type CHOICE
{Term11,Bytes13} = 'dec_Setup-UUIE_conferenceGoal'(Bytes12),

%% attribute number 12 with type QseriesOptions
{Term12,Bytes14} = case Opt band 1 of
1 ->
dec_QseriesOptions(Bytes13);
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 13 with type CallType
{Term13,Bytes15} = dec_CallType(Bytes14),

%% Extensions
{Extensions,Bytes16} = case Ext of
0 -> {<<>>,Bytes15};
1 ->
{V6@V0,V6@Buf1} = case Bytes15 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,

%% attribute number 14 with type TransportAddress
{Term14,Bytes17} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes16) band 7,
{V7@V0,V7@Buf1} = case Bytes16 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx14,_} = dec_TransportAddress(V7@V0),
{TmpValx14,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type AliasAddress
{Term15,Bytes18} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes17) band 7,
{V8@V0,V8@Buf1} = case Bytes17 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx15,_} = dec_AliasAddress(V8@V0),
{TmpValx15,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type CallIdentifier
{Term16,Bytes19} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes18) band 7,
{V9@V0,V9@Buf1} = case Bytes18 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx16,_} = dec_CallIdentifier(V9@V0),
{TmpValx16,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type SEQUENCE OF
{Term17,Bytes20} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes19) band 7,
{V10@V0,V10@Buf1} = case Bytes19 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx17,_} = 'dec_Setup-UUIE_h245SecurityCapability'(V10@V0),
{TmpValx17,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type SEQUENCE OF
{Term18,Bytes21} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes20) band 7,
{V11@V0,V11@Buf1} = case Bytes20 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx18,_} = 'dec_Setup-UUIE_tokens'(V11@V0),
{TmpValx18,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute number 19 with type SEQUENCE OF
{Term19,Bytes22} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes21) band 7,
{V12@V0,V12@Buf1} = case Bytes21 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx19,_} = 'dec_Setup-UUIE_cryptoTokens'(V12@V0),
{TmpValx19,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes21}
end,

%% attribute number 20 with type SEQUENCE OF
{Term20,Bytes23} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes22) band 7,
{V13@V0,V13@Buf1} = case Bytes22 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx20,_} = 'dec_Setup-UUIE_fastStart'(V13@V0),
{TmpValx20,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes22}
end,

%% attribute number 21 with type BOOLEAN
{Term21,Bytes24} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes23) band 7,
{V14@V0,V14@Buf1} = case Bytes23 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx21,_} = begin
<<V15@V0:1,V15@Buf1/bitstring>> = V14@V0,
V15@Int2 = case V15@V0 of
0 -> false;
1 -> true
end,
{V15@Int2,V15@Buf1}
end,
{TmpValx21,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes23}
end,

%% attribute number 22 with type BOOLEAN
{Term22,Bytes25} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes24) band 7,
{V16@V0,V16@Buf1} = case Bytes24 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx22,_} = begin
<<V17@V0:1,V17@Buf1/bitstring>> = V16@V0,
V17@Int2 = case V17@V0 of
0 -> false;
1 -> true
end,
{V17@Int2,V17@Buf1}
end,
{TmpValx22,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes24}
end,

%% attribute number 23 with type BMPString
{Term23,Bytes26} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V18@Pad3 = bit_size(Bytes25) band 7,
{V18@V0,V18@Buf1} = case Bytes25 of
<<_:V18@Pad3,0:1,V18@V5:7,V18@V7:V18@V5/binary-unit:8,V18@Buf8/bitstring>> ->
{V18@V7,V18@Buf8};
<<_:V18@Pad3,1:1,0:1,V18@V6:14,V18@V8:V18@V6/binary-unit:8,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<_:V18@Pad3,1:1,1:1,V18@V6:6,V18@Buf7/bitstring>> ->
{V18@V8,V18@Buf9}  = decode_fragmented(V18@V6, V18@Buf7, 8),
{V18@V8,V18@Buf9}
end,
{TmpValx23,_} = begin
<<V19@V0:7/unsigned-unit:1,V19@Buf1/bitstring>> = V18@V0,
V19@Add2 = V19@V0 + 1,
V19@Pad5 = bit_size(V19@Buf1) band 7,
<<_:V19@Pad5,V19@V3:V19@Add2/binary-unit:16,V19@Buf4/bitstring>> = V19@Buf1,
{V19@V7,V19@Buf8}  = {decode_chars_16bit(V19@V3),V19@Buf4},
{V19@V7,V19@Buf8}
end,
{TmpValx23,V18@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes25}
end,

%% attribute number 24 with type BOOLEAN
{Term24,Bytes27} = case Extensions of
  <<_:10,1:1,_/bitstring>> ->
begin
V20@Pad3 = bit_size(Bytes26) band 7,
{V20@V0,V20@Buf1} = case Bytes26 of
<<_:V20@Pad3,0:1,V20@V5:7,V20@V7:V20@V5/binary-unit:8,V20@Buf8/bitstring>> ->
{V20@V7,V20@Buf8};
<<_:V20@Pad3,1:1,0:1,V20@V6:14,V20@V8:V20@V6/binary-unit:8,V20@Buf9/bitstring>> ->
{V20@V8,V20@Buf9};
<<_:V20@Pad3,1:1,1:1,V20@V6:6,V20@Buf7/bitstring>> ->
{V20@V8,V20@Buf9}  = decode_fragmented(V20@V6, V20@Buf7, 8),
{V20@V8,V20@Buf9}
end,
{TmpValx24,_} = begin
<<V21@V0:1,V21@Buf1/bitstring>> = V20@V0,
V21@Int2 = case V21@V0 of
0 -> false;
1 -> true
end,
{V21@Int2,V21@Buf1}
end,
{TmpValx24,V20@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes26}
end,

%% attribute number 25 with type BOOLEAN
{Term25,Bytes28} = case Extensions of
  <<_:11,1:1,_/bitstring>> ->
begin
V22@Pad3 = bit_size(Bytes27) band 7,
{V22@V0,V22@Buf1} = case Bytes27 of
<<_:V22@Pad3,0:1,V22@V5:7,V22@V7:V22@V5/binary-unit:8,V22@Buf8/bitstring>> ->
{V22@V7,V22@Buf8};
<<_:V22@Pad3,1:1,0:1,V22@V6:14,V22@V8:V22@V6/binary-unit:8,V22@Buf9/bitstring>> ->
{V22@V8,V22@Buf9};
<<_:V22@Pad3,1:1,1:1,V22@V6:6,V22@Buf7/bitstring>> ->
{V22@V8,V22@Buf9}  = decode_fragmented(V22@V6, V22@Buf7, 8),
{V22@V8,V22@Buf9}
end,
{TmpValx25,_} = begin
<<V23@V0:1,V23@Buf1/bitstring>> = V22@V0,
V23@Int2 = case V23@V0 of
0 -> false;
1 -> true
end,
{V23@Int2,V23@Buf1}
end,
{TmpValx25,V22@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes27}
end,

%% attribute number 26 with type SEQUENCE
{Term26,Bytes29} = case Extensions of
  <<_:12,1:1,_/bitstring>> ->
begin
V24@Pad3 = bit_size(Bytes28) band 7,
{V24@V0,V24@Buf1} = case Bytes28 of
<<_:V24@Pad3,0:1,V24@V5:7,V24@V7:V24@V5/binary-unit:8,V24@Buf8/bitstring>> ->
{V24@V7,V24@Buf8};
<<_:V24@Pad3,1:1,0:1,V24@V6:14,V24@V8:V24@V6/binary-unit:8,V24@Buf9/bitstring>> ->
{V24@V8,V24@Buf9};
<<_:V24@Pad3,1:1,1:1,V24@V6:6,V24@Buf7/bitstring>> ->
{V24@V8,V24@Buf9}  = decode_fragmented(V24@V6, V24@Buf7, 8),
{V24@V8,V24@Buf9}
end,
{TmpValx26,_} = 'dec_Setup-UUIE_connectionParameters'(V24@V0),
{TmpValx26,V24@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes28}
end,

%% attribute number 27 with type SEQUENCE OF
{Term27,Bytes30} = case Extensions of
  <<_:13,1:1,_/bitstring>> ->
begin
V25@Pad3 = bit_size(Bytes29) band 7,
{V25@V0,V25@Buf1} = case Bytes29 of
<<_:V25@Pad3,0:1,V25@V5:7,V25@V7:V25@V5/binary-unit:8,V25@Buf8/bitstring>> ->
{V25@V7,V25@Buf8};
<<_:V25@Pad3,1:1,0:1,V25@V6:14,V25@V8:V25@V6/binary-unit:8,V25@Buf9/bitstring>> ->
{V25@V8,V25@Buf9};
<<_:V25@Pad3,1:1,1:1,V25@V6:6,V25@Buf7/bitstring>> ->
{V25@V8,V25@Buf9}  = decode_fragmented(V25@V6, V25@Buf7, 8),
{V25@V8,V25@Buf9}
end,
{TmpValx27,_} = 'dec_Setup-UUIE_language'(V25@V0),
{TmpValx27,V25@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes29}
end,

%% attribute number 28 with type PresentationIndicator
{Term28,Bytes31} = case Extensions of
  <<_:14,1:1,_/bitstring>> ->
begin
V26@Pad3 = bit_size(Bytes30) band 7,
{V26@V0,V26@Buf1} = case Bytes30 of
<<_:V26@Pad3,0:1,V26@V5:7,V26@V7:V26@V5/binary-unit:8,V26@Buf8/bitstring>> ->
{V26@V7,V26@Buf8};
<<_:V26@Pad3,1:1,0:1,V26@V6:14,V26@V8:V26@V6/binary-unit:8,V26@Buf9/bitstring>> ->
{V26@V8,V26@Buf9};
<<_:V26@Pad3,1:1,1:1,V26@V6:6,V26@Buf7/bitstring>> ->
{V26@V8,V26@Buf9}  = decode_fragmented(V26@V6, V26@Buf7, 8),
{V26@V8,V26@Buf9}
end,
{TmpValx28,_} = dec_PresentationIndicator(V26@V0),
{TmpValx28,V26@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes30}
end,

%% attribute number 29 with type ENUMERATED
{Term29,Bytes32} = case Extensions of
  <<_:15,1:1,_/bitstring>> ->
begin
V27@Pad3 = bit_size(Bytes31) band 7,
{V27@V0,V27@Buf1} = case Bytes31 of
<<_:V27@Pad3,0:1,V27@V5:7,V27@V7:V27@V5/binary-unit:8,V27@Buf8/bitstring>> ->
{V27@V7,V27@Buf8};
<<_:V27@Pad3,1:1,0:1,V27@V6:14,V27@V8:V27@V6/binary-unit:8,V27@Buf9/bitstring>> ->
{V27@V8,V27@Buf9};
<<_:V27@Pad3,1:1,1:1,V27@V6:6,V27@Buf7/bitstring>> ->
{V27@V8,V27@Buf9}  = decode_fragmented(V27@V6, V27@Buf7, 8),
{V27@V8,V27@Buf9}
end,
{TmpValx29,_} = begin
{V28@V0,V28@Buf1} = case V27@V0 of
<<0:1,V28@V3:2/unsigned-unit:1,V28@Buf4/bitstring>> ->
V28@Int5 = case V28@V3 of
0 -> userProvidedNotScreened;
1 -> userProvidedVerifiedAndPassed;
2 -> userProvidedVerifiedAndFailed;
3 -> networkProvided
end,
{V28@Int5,V28@Buf4};
<<1:1,V28@Buf2/bitstring>> ->
{V28@V3,V28@Buf4} = case V28@Buf2 of
<<0:1,V28@V6:6,V28@Buf7/bitstring>> ->
{V28@V6,V28@Buf7};
<<1:1,V28@Buf5/bitstring>> ->
V28@Pad9 = bit_size(V28@Buf5) band 7,
{V28@V6,V28@Buf7} = case V28@Buf5 of
<<_:V28@Pad9,0:1,V28@V11:7,V28@Buf12/bitstring>> when V28@V11 =/= 0 ->
{V28@V11,V28@Buf12};
<<_:V28@Pad9,1:1,0:1,V28@V12:14,V28@Buf13/bitstring>> when V28@V12 =/= 0 ->
{V28@V12,V28@Buf13}
end,
<<V28@V14:V28@V6/unit:8,V28@Buf15/bitstring>> = V28@Buf7,
{V28@V14,V28@Buf15}
end,
V28@Int16 = case V28@V3 of
_ -> {asn1_enum,V28@V3}
end,
{V28@Int16,V28@Buf4}
end,
{V28@V0,V28@Buf1}
end,
{TmpValx29,V27@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes31}
end,

%% attribute number 30 with type SEQUENCE OF
{Term30,Bytes33} = case Extensions of
  <<_:16,1:1,_/bitstring>> ->
begin
V29@Pad3 = bit_size(Bytes32) band 7,
{V29@V0,V29@Buf1} = case Bytes32 of
<<_:V29@Pad3,0:1,V29@V5:7,V29@V7:V29@V5/binary-unit:8,V29@Buf8/bitstring>> ->
{V29@V7,V29@Buf8};
<<_:V29@Pad3,1:1,0:1,V29@V6:14,V29@V8:V29@V6/binary-unit:8,V29@Buf9/bitstring>> ->
{V29@V8,V29@Buf9};
<<_:V29@Pad3,1:1,1:1,V29@V6:6,V29@Buf7/bitstring>> ->
{V29@V8,V29@Buf9}  = decode_fragmented(V29@V6, V29@Buf7, 8),
{V29@V8,V29@Buf9}
end,
{TmpValx30,_} = 'dec_Setup-UUIE_serviceControl'(V29@V0),
{TmpValx30,V29@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes32}
end,

%% attribute number 31 with type NULL
{Term31,Bytes34} = case Extensions of
  <<_:17,1:1,_/bitstring>> ->
begin
V30@Pad3 = bit_size(Bytes33) band 7,
{V30@V0,V30@Buf1} = case Bytes33 of
<<_:V30@Pad3,0:1,V30@V5:7,V30@V7:V30@V5/binary-unit:8,V30@Buf8/bitstring>> ->
{V30@V7,V30@Buf8};
<<_:V30@Pad3,1:1,0:1,V30@V6:14,V30@V8:V30@V6/binary-unit:8,V30@Buf9/bitstring>> ->
{V30@V8,V30@Buf9};
<<_:V30@Pad3,1:1,1:1,V30@V6:6,V30@Buf7/bitstring>> ->
{V30@V8,V30@Buf9}  = decode_fragmented(V30@V6, V30@Buf7, 8),
{V30@V8,V30@Buf9}
end,
{TmpValx31,_} = begin
ignore,
{'NULL',V30@V0}
end,
{TmpValx31,V30@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes33}
end,

%% attribute number 32 with type CallCapacity
{Term32,Bytes35} = case Extensions of
  <<_:18,1:1,_/bitstring>> ->
begin
V32@Pad3 = bit_size(Bytes34) band 7,
{V32@V0,V32@Buf1} = case Bytes34 of
<<_:V32@Pad3,0:1,V32@V5:7,V32@V7:V32@V5/binary-unit:8,V32@Buf8/bitstring>> ->
{V32@V7,V32@Buf8};
<<_:V32@Pad3,1:1,0:1,V32@V6:14,V32@V8:V32@V6/binary-unit:8,V32@Buf9/bitstring>> ->
{V32@V8,V32@Buf9};
<<_:V32@Pad3,1:1,1:1,V32@V6:6,V32@Buf7/bitstring>> ->
{V32@V8,V32@Buf9}  = decode_fragmented(V32@V6, V32@Buf7, 8),
{V32@V8,V32@Buf9}
end,
{TmpValx32,_} = dec_CallCapacity(V32@V0),
{TmpValx32,V32@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes34}
end,

%% attribute number 33 with type CircuitInfo
{Term33,Bytes36} = case Extensions of
  <<_:19,1:1,_/bitstring>> ->
begin
V33@Pad3 = bit_size(Bytes35) band 7,
{V33@V0,V33@Buf1} = case Bytes35 of
<<_:V33@Pad3,0:1,V33@V5:7,V33@V7:V33@V5/binary-unit:8,V33@Buf8/bitstring>> ->
{V33@V7,V33@Buf8};
<<_:V33@Pad3,1:1,0:1,V33@V6:14,V33@V8:V33@V6/binary-unit:8,V33@Buf9/bitstring>> ->
{V33@V8,V33@Buf9};
<<_:V33@Pad3,1:1,1:1,V33@V6:6,V33@Buf7/bitstring>> ->
{V33@V8,V33@Buf9}  = decode_fragmented(V33@V6, V33@Buf7, 8),
{V33@V8,V33@Buf9}
end,
{TmpValx33,_} = dec_CircuitInfo(V33@V0),
{TmpValx33,V33@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes35}
end,

%% attribute number 34 with type SEQUENCE OF
{Term34,Bytes37} = case Extensions of
  <<_:20,1:1,_/bitstring>> ->
begin
V34@Pad3 = bit_size(Bytes36) band 7,
{V34@V0,V34@Buf1} = case Bytes36 of
<<_:V34@Pad3,0:1,V34@V5:7,V34@V7:V34@V5/binary-unit:8,V34@Buf8/bitstring>> ->
{V34@V7,V34@Buf8};
<<_:V34@Pad3,1:1,0:1,V34@V6:14,V34@V8:V34@V6/binary-unit:8,V34@Buf9/bitstring>> ->
{V34@V8,V34@Buf9};
<<_:V34@Pad3,1:1,1:1,V34@V6:6,V34@Buf7/bitstring>> ->
{V34@V8,V34@Buf9}  = decode_fragmented(V34@V6, V34@Buf7, 8),
{V34@V8,V34@Buf9}
end,
{TmpValx34,_} = 'dec_Setup-UUIE_desiredProtocols'(V34@V0),
{TmpValx34,V34@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes36}
end,

%% attribute number 35 with type SEQUENCE OF
{Term35,Bytes38} = case Extensions of
  <<_:21,1:1,_/bitstring>> ->
begin
V35@Pad3 = bit_size(Bytes37) band 7,
{V35@V0,V35@Buf1} = case Bytes37 of
<<_:V35@Pad3,0:1,V35@V5:7,V35@V7:V35@V5/binary-unit:8,V35@Buf8/bitstring>> ->
{V35@V7,V35@Buf8};
<<_:V35@Pad3,1:1,0:1,V35@V6:14,V35@V8:V35@V6/binary-unit:8,V35@Buf9/bitstring>> ->
{V35@V8,V35@Buf9};
<<_:V35@Pad3,1:1,1:1,V35@V6:6,V35@Buf7/bitstring>> ->
{V35@V8,V35@Buf9}  = decode_fragmented(V35@V6, V35@Buf7, 8),
{V35@V8,V35@Buf9}
end,
{TmpValx35,_} = 'dec_Setup-UUIE_neededFeatures'(V35@V0),
{TmpValx35,V35@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes37}
end,

%% attribute number 36 with type SEQUENCE OF
{Term36,Bytes39} = case Extensions of
  <<_:22,1:1,_/bitstring>> ->
begin
V36@Pad3 = bit_size(Bytes38) band 7,
{V36@V0,V36@Buf1} = case Bytes38 of
<<_:V36@Pad3,0:1,V36@V5:7,V36@V7:V36@V5/binary-unit:8,V36@Buf8/bitstring>> ->
{V36@V7,V36@Buf8};
<<_:V36@Pad3,1:1,0:1,V36@V6:14,V36@V8:V36@V6/binary-unit:8,V36@Buf9/bitstring>> ->
{V36@V8,V36@Buf9};
<<_:V36@Pad3,1:1,1:1,V36@V6:6,V36@Buf7/bitstring>> ->
{V36@V8,V36@Buf9}  = decode_fragmented(V36@V6, V36@Buf7, 8),
{V36@V8,V36@Buf9}
end,
{TmpValx36,_} = 'dec_Setup-UUIE_desiredFeatures'(V36@V0),
{TmpValx36,V36@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes38}
end,

%% attribute number 37 with type SEQUENCE OF
{Term37,Bytes40} = case Extensions of
  <<_:23,1:1,_/bitstring>> ->
begin
V37@Pad3 = bit_size(Bytes39) band 7,
{V37@V0,V37@Buf1} = case Bytes39 of
<<_:V37@Pad3,0:1,V37@V5:7,V37@V7:V37@V5/binary-unit:8,V37@Buf8/bitstring>> ->
{V37@V7,V37@Buf8};
<<_:V37@Pad3,1:1,0:1,V37@V6:14,V37@V8:V37@V6/binary-unit:8,V37@Buf9/bitstring>> ->
{V37@V8,V37@Buf9};
<<_:V37@Pad3,1:1,1:1,V37@V6:6,V37@Buf7/bitstring>> ->
{V37@V8,V37@Buf9}  = decode_fragmented(V37@V6, V37@Buf7, 8),
{V37@V8,V37@Buf9}
end,
{TmpValx37,_} = 'dec_Setup-UUIE_supportedFeatures'(V37@V0),
{TmpValx37,V37@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes39}
end,

%% attribute number 38 with type SEQUENCE OF
{Term38,Bytes41} = case Extensions of
  <<_:24,1:1,_/bitstring>> ->
begin
V38@Pad3 = bit_size(Bytes40) band 7,
{V38@V0,V38@Buf1} = case Bytes40 of
<<_:V38@Pad3,0:1,V38@V5:7,V38@V7:V38@V5/binary-unit:8,V38@Buf8/bitstring>> ->
{V38@V7,V38@Buf8};
<<_:V38@Pad3,1:1,0:1,V38@V6:14,V38@V8:V38@V6/binary-unit:8,V38@Buf9/bitstring>> ->
{V38@V8,V38@Buf9};
<<_:V38@Pad3,1:1,1:1,V38@V6:6,V38@Buf7/bitstring>> ->
{V38@V8,V38@Buf9}  = decode_fragmented(V38@V6, V38@Buf7, 8),
{V38@V8,V38@Buf9}
end,
{TmpValx38,_} = 'dec_Setup-UUIE_parallelH245Control'(V38@V0),
{TmpValx38,V38@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes40}
end,

%% attribute number 39 with type SEQUENCE OF
{Term39,Bytes42} = case Extensions of
  <<_:25,1:1,_/bitstring>> ->
begin
V39@Pad3 = bit_size(Bytes41) band 7,
{V39@V0,V39@Buf1} = case Bytes41 of
<<_:V39@Pad3,0:1,V39@V5:7,V39@V7:V39@V5/binary-unit:8,V39@Buf8/bitstring>> ->
{V39@V7,V39@Buf8};
<<_:V39@Pad3,1:1,0:1,V39@V6:14,V39@V8:V39@V6/binary-unit:8,V39@Buf9/bitstring>> ->
{V39@V8,V39@Buf9};
<<_:V39@Pad3,1:1,1:1,V39@V6:6,V39@Buf7/bitstring>> ->
{V39@V8,V39@Buf9}  = decode_fragmented(V39@V6, V39@Buf7, 8),
{V39@V8,V39@Buf9}
end,
{TmpValx39,_} = 'dec_Setup-UUIE_additionalSourceAddresses'(V39@V0),
{TmpValx39,V39@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes41}
end,

%% attribute number 40 with type INTEGER
{Term40,Bytes43} = case Extensions of
  <<_:26,1:1,_/bitstring>> ->
begin
V40@Pad3 = bit_size(Bytes42) band 7,
{V40@V0,V40@Buf1} = case Bytes42 of
<<_:V40@Pad3,0:1,V40@V5:7,V40@V7:V40@V5/binary-unit:8,V40@Buf8/bitstring>> ->
{V40@V7,V40@Buf8};
<<_:V40@Pad3,1:1,0:1,V40@V6:14,V40@V8:V40@V6/binary-unit:8,V40@Buf9/bitstring>> ->
{V40@V8,V40@Buf9};
<<_:V40@Pad3,1:1,1:1,V40@V6:6,V40@Buf7/bitstring>> ->
{V40@V8,V40@Buf9}  = decode_fragmented(V40@V6, V40@Buf7, 8),
{V40@V8,V40@Buf9}
end,
{TmpValx40,_} = begin
<<V41@V0:5/unsigned-unit:1,V41@Buf1/bitstring>> = V40@V0,
V41@Add2 = V41@V0 + 1,
{V41@Add2,V41@Buf1}
end,
{TmpValx40,V40@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes42}
end,
Bytes44= skipextensions(Bytes43, 28, Extensions),
{{'Setup-UUIE',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21,Term22,Term23,Term24,Term25,Term26,Term27,Term28,Term29,Term30,Term31,Term32,Term33,Term34,Term35,Term36,Term37,Term38,Term39,Term40},Bytes44}.

'enc_ScnConnectionType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= unknown ->
<<0:1,0:3>>;
ChoiceTag =:= bChannel ->
<<0:1,1:3>>;
ChoiceTag =:= hybrid2x64 ->
<<0:1,2:3>>;
ChoiceTag =:= hybrid384 ->
<<0:1,3:3>>;
ChoiceTag =:= hybrid1536 ->
<<0:1,4:3>>;
ChoiceTag =:= hybrid1920 ->
<<0:1,5:3>>;
ChoiceTag =:= multirate ->
<<0:1,6:3>>
end.


dec_ScnConnectionType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unknown,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{bChannel,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{hybrid2x64,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{hybrid384,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{hybrid1536,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{hybrid1920,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{multirate,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ScnConnectionAggregation'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= auto ->
<<0:1,0:3>>;
ChoiceTag =:= none ->
<<0:1,1:3>>;
ChoiceTag =:= h221 ->
<<0:1,2:3>>;
ChoiceTag =:= 'bonded-mode1' ->
<<0:1,3:3>>;
ChoiceTag =:= 'bonded-mode2' ->
<<0:1,4:3>>;
ChoiceTag =:= 'bonded-mode3' ->
<<0:1,5:3>>
end.


dec_ScnConnectionAggregation(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{auto,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{none,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{h221,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'bonded-mode1',Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'bonded-mode2',Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'bonded-mode3',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_PresentationIndicator'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= presentationAllowed ->
<<0:1,0:2>>;
ChoiceTag =:= presentationRestricted ->
<<0:1,1:2>>;
ChoiceTag =:= addressNotAvailable ->
<<0:1,2:2>>
end.


dec_PresentationIndicator(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{presentationAllowed,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{presentationRestricted,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{addressNotAvailable,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ScreeningIndicator'(Val) ->
if Val =:= userProvidedNotScreened ->
<<0:1,0:2>>;
Val =:= userProvidedVerifiedAndPassed ->
<<0:1,1:2>>;
Val =:= userProvidedVerifiedAndFailed ->
<<0:1,2:2>>;
Val =:= networkProvided ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ScreeningIndicator(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> userProvidedNotScreened;
1 -> userProvidedVerifiedAndPassed;
2 -> userProvidedVerifiedAndFailed;
3 -> networkProvided
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_Facility-UUIE'(Val) ->
Enc4@bitmap = extension_bitmap(Val, 7, 23),
Extensions = if Enc4@bitmap =:= 0 ->
[];
true ->
<<15:7,Enc4@bitmap:16>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(4, Val),
Enc3@element = element(5, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc6@element = element(2, Val),
Enc7@bin = encode_oid(Enc6@element),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end,
begin
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc8@element)
end
end,
begin
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Facility-UUIE_alternativeAliasAddress'(Enc10@element)
end
end,
begin
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@len = byte_size(Enc12@element),
if Enc13@len =:= 16 ->
[align|Enc12@element]
end
end
end
end,
begin
Enc15@element = element(6, Val),
enc_FacilityReason(Enc15@element)
end,
Extensions,
begin
Enc16@element = element(7, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@output = enc_CallIdentifier(Enc16@element),
Enc17@bin = complete(Enc17@output),
Enc17@len = byte_size(Enc17@bin),
if Enc17@len < 128 ->
[align,
Enc17@len|Enc17@bin];
Enc17@len < 16384 ->
[align,
<<2:2,Enc17@len:14>>|Enc17@bin];
true ->
[align|encode_fragmented(Enc17@bin, 8)]
end
end
end
end,
begin
Enc19@element = element(8, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@output = 'enc_Facility-UUIE_destExtraCallInfo'(Enc19@element),
Enc20@bin = complete(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[align,
Enc20@len|Enc20@bin];
Enc20@len < 16384 ->
[align,
<<2:2,Enc20@len:14>>|Enc20@bin];
true ->
[align|encode_fragmented(Enc20@bin, 8)]
end
end
end
end,
begin
Enc22@element = element(9, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@output = enc_AliasAddress(Enc22@element),
Enc23@bin = complete(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[align,
Enc23@len|Enc23@bin];
Enc23@len < 16384 ->
[align,
<<2:2,Enc23@len:14>>|Enc23@bin];
true ->
[align|encode_fragmented(Enc23@bin, 8)]
end
end
end
end,
begin
Enc25@element = element(10, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@output = 'enc_Facility-UUIE_tokens'(Enc25@element),
Enc26@bin = complete(Enc26@output),
Enc26@len = byte_size(Enc26@bin),
if Enc26@len < 128 ->
[align,
Enc26@len|Enc26@bin];
Enc26@len < 16384 ->
[align,
<<2:2,Enc26@len:14>>|Enc26@bin];
true ->
[align|encode_fragmented(Enc26@bin, 8)]
end
end
end
end,
begin
Enc28@element = element(11, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc29@output = 'enc_Facility-UUIE_cryptoTokens'(Enc28@element),
Enc29@bin = complete(Enc29@output),
Enc29@len = byte_size(Enc29@bin),
if Enc29@len < 128 ->
[align,
Enc29@len|Enc29@bin];
Enc29@len < 16384 ->
[align,
<<2:2,Enc29@len:14>>|Enc29@bin];
true ->
[align|encode_fragmented(Enc29@bin, 8)]
end
end
end
end,
begin
Enc31@element = element(12, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc32@output = 'enc_Facility-UUIE_conferences'(Enc31@element),
Enc32@bin = complete(Enc32@output),
Enc32@len = byte_size(Enc32@bin),
if Enc32@len < 128 ->
[align,
Enc32@len|Enc32@bin];
Enc32@len < 16384 ->
[align,
<<2:2,Enc32@len:14>>|Enc32@bin];
true ->
[align|encode_fragmented(Enc32@bin, 8)]
end
end
end
end,
begin
Enc34@element = element(13, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc35@output = enc_TransportAddress(Enc34@element),
Enc35@bin = complete(Enc35@output),
Enc35@len = byte_size(Enc35@bin),
if Enc35@len < 128 ->
[align,
Enc35@len|Enc35@bin];
Enc35@len < 16384 ->
[align,
<<2:2,Enc35@len:14>>|Enc35@bin];
true ->
[align|encode_fragmented(Enc35@bin, 8)]
end
end
end
end,
begin
Enc37@element = element(14, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc38@output = 'enc_Facility-UUIE_fastStart'(Enc37@element),
Enc38@bin = complete(Enc38@output),
Enc38@len = byte_size(Enc38@bin),
if Enc38@len < 128 ->
[align,
Enc38@len|Enc38@bin];
Enc38@len < 16384 ->
[align,
<<2:2,Enc38@len:14>>|Enc38@bin];
true ->
[align|encode_fragmented(Enc38@bin, 8)]
end
end
end
end,
begin
Enc40@element = element(15, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc42@output = if Enc40@element =:= false ->
<<0:1,0:7>>;
Enc40@element =:= true ->
<<1:1,0:7>>
end,
Enc42@bin = Enc42@output,
[align,
1|Enc42@bin]
end
end
end,
begin
Enc44@element = element(16, Val),
if Enc44@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc46@output = if Enc44@element =:= false ->
<<0:1,0:7>>;
Enc44@element =:= true ->
<<1:1,0:7>>
end,
Enc46@bin = Enc46@output,
[align,
1|Enc46@bin]
end
end
end,
begin
Enc48@element = element(17, Val),
if Enc48@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc49@output = [],
Enc49@bin = <<0:8>>,
[align,
1|Enc49@bin]
end
end
end,
begin
Enc51@element = element(18, Val),
if Enc51@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc52@output = 'enc_Facility-UUIE_serviceControl'(Enc51@element),
Enc52@bin = complete(Enc52@output),
Enc52@len = byte_size(Enc52@bin),
if Enc52@len < 128 ->
[align,
Enc52@len|Enc52@bin];
Enc52@len < 16384 ->
[align,
<<2:2,Enc52@len:14>>|Enc52@bin];
true ->
[align|encode_fragmented(Enc52@bin, 8)]
end
end
end
end,
begin
Enc54@element = element(19, Val),
if Enc54@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc55@output = enc_CircuitInfo(Enc54@element),
Enc55@bin = complete(Enc55@output),
Enc55@len = byte_size(Enc55@bin),
if Enc55@len < 128 ->
[align,
Enc55@len|Enc55@bin];
Enc55@len < 16384 ->
[align,
<<2:2,Enc55@len:14>>|Enc55@bin];
true ->
[align|encode_fragmented(Enc55@bin, 8)]
end
end
end
end,
begin
Enc57@element = element(20, Val),
if Enc57@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc58@output = enc_FeatureSet(Enc57@element),
Enc58@bin = complete(Enc58@output),
Enc58@len = byte_size(Enc58@bin),
if Enc58@len < 128 ->
[align,
Enc58@len|Enc58@bin];
Enc58@len < 16384 ->
[align,
<<2:2,Enc58@len:14>>|Enc58@bin];
true ->
[align|encode_fragmented(Enc58@bin, 8)]
end
end
end
end,
begin
Enc60@element = element(21, Val),
if Enc60@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc61@output = enc_EndpointType(Enc60@element),
Enc61@bin = complete(Enc61@output),
Enc61@len = byte_size(Enc61@bin),
if Enc61@len < 128 ->
[align,
Enc61@len|Enc61@bin];
Enc61@len < 16384 ->
[align,
<<2:2,Enc61@len:14>>|Enc61@bin];
true ->
[align|encode_fragmented(Enc61@bin, 8)]
end
end
end
end|begin
Enc63@element = element(22, Val),
if Enc63@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc64@output = enc_H245Security(Enc63@element),
Enc64@bin = complete(Enc64@output),
Enc64@len = byte_size(Enc64@bin),
if Enc64@len < 128 ->
[align,
Enc64@len|Enc64@bin];
Enc64@len < 16384 ->
[align,
<<2:2,Enc64@len:14>>|Enc64@bin];
true ->
[align|encode_fragmented(Enc64@bin, 8)]
end
end
end
end].
'enc_Facility-UUIE_alternativeAliasAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


'dec_Facility-UUIE_alternativeAliasAddress'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components43(V1@V0, V1@Buf1, []).

'enc_Facility-UUIE_destExtraCallInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


'dec_Facility-UUIE_destExtraCallInfo'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components44(V1@V0, V1@Buf1, []).

'enc_Facility-UUIE_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


'dec_Facility-UUIE_tokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components45(V1@V0, V1@Buf1, []).

'enc_Facility-UUIE_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


'dec_Facility-UUIE_cryptoTokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components46(V1@V0, V1@Buf1, []).

'enc_Facility-UUIE_conferences'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ConferenceList(Comp) || Comp <- Val]].


'dec_Facility-UUIE_conferences'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components47(V1@V0, V1@Buf1, []).

'enc_Facility-UUIE_fastStart'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len < 128 ->
[Enc1@len|Comp];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Comp];
true ->
encode_fragmented(Comp, 8)
end
end || Comp <- Val]].


'dec_Facility-UUIE_fastStart'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components48(V1@V0, V1@Buf1, []).

'enc_Facility-UUIE_serviceControl'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ServiceControlSession(Comp) || Comp <- Val]].


'dec_Facility-UUIE_serviceControl'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components49(V1@V0, V1@Buf1, []).



'dec_Facility-UUIE'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type TransportAddress
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
dec_TransportAddress(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
'dec_Facility-UUIE_alternativeAliasAddress'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type OCTET STRING
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes5) band 7,
<<_:V4@Pad2,V4@V0:16/binary-unit:8,V4@Buf1/bitstring>> = Bytes5,
V4@Conv4 = binary:copy(V4@V0),
{V4@Conv4,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type FacilityReason
{Term5,Bytes7} = dec_FacilityReason(Bytes6),

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 6 with type CallIdentifier
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes8) band 7,
{V6@V0,V6@Buf1} = case Bytes8 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx6,_} = dec_CallIdentifier(V6@V0),
{TmpValx6,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes10} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes9) band 7,
{V7@V0,V7@Buf1} = case Bytes9 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx7,_} = 'dec_Facility-UUIE_destExtraCallInfo'(V7@V0),
{TmpValx7,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type AliasAddress
{Term8,Bytes11} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes10) band 7,
{V8@V0,V8@Buf1} = case Bytes10 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx8,_} = dec_AliasAddress(V8@V0),
{TmpValx8,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes12} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes11) band 7,
{V9@V0,V9@Buf1} = case Bytes11 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx9,_} = 'dec_Facility-UUIE_tokens'(V9@V0),
{TmpValx9,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes13} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes12) band 7,
{V10@V0,V10@Buf1} = case Bytes12 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx10,_} = 'dec_Facility-UUIE_cryptoTokens'(V10@V0),
{TmpValx10,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes14} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes13) band 7,
{V11@V0,V11@Buf1} = case Bytes13 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx11,_} = 'dec_Facility-UUIE_conferences'(V11@V0),
{TmpValx11,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type TransportAddress
{Term12,Bytes15} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes14) band 7,
{V12@V0,V12@Buf1} = case Bytes14 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx12,_} = dec_TransportAddress(V12@V0),
{TmpValx12,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type SEQUENCE OF
{Term13,Bytes16} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes15) band 7,
{V13@V0,V13@Buf1} = case Bytes15 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx13,_} = 'dec_Facility-UUIE_fastStart'(V13@V0),
{TmpValx13,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type BOOLEAN
{Term14,Bytes17} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes16) band 7,
{V14@V0,V14@Buf1} = case Bytes16 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx14,_} = begin
<<V15@V0:1,V15@Buf1/bitstring>> = V14@V0,
V15@Int2 = case V15@V0 of
0 -> false;
1 -> true
end,
{V15@Int2,V15@Buf1}
end,
{TmpValx14,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type BOOLEAN
{Term15,Bytes18} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes17) band 7,
{V16@V0,V16@Buf1} = case Bytes17 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx15,_} = begin
<<V17@V0:1,V17@Buf1/bitstring>> = V16@V0,
V17@Int2 = case V17@V0 of
0 -> false;
1 -> true
end,
{V17@Int2,V17@Buf1}
end,
{TmpValx15,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type NULL
{Term16,Bytes19} = case Extensions of
  <<_:10,1:1,_/bitstring>> ->
begin
V18@Pad3 = bit_size(Bytes18) band 7,
{V18@V0,V18@Buf1} = case Bytes18 of
<<_:V18@Pad3,0:1,V18@V5:7,V18@V7:V18@V5/binary-unit:8,V18@Buf8/bitstring>> ->
{V18@V7,V18@Buf8};
<<_:V18@Pad3,1:1,0:1,V18@V6:14,V18@V8:V18@V6/binary-unit:8,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<_:V18@Pad3,1:1,1:1,V18@V6:6,V18@Buf7/bitstring>> ->
{V18@V8,V18@Buf9}  = decode_fragmented(V18@V6, V18@Buf7, 8),
{V18@V8,V18@Buf9}
end,
{TmpValx16,_} = begin
ignore,
{'NULL',V18@V0}
end,
{TmpValx16,V18@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type SEQUENCE OF
{Term17,Bytes20} = case Extensions of
  <<_:11,1:1,_/bitstring>> ->
begin
V20@Pad3 = bit_size(Bytes19) band 7,
{V20@V0,V20@Buf1} = case Bytes19 of
<<_:V20@Pad3,0:1,V20@V5:7,V20@V7:V20@V5/binary-unit:8,V20@Buf8/bitstring>> ->
{V20@V7,V20@Buf8};
<<_:V20@Pad3,1:1,0:1,V20@V6:14,V20@V8:V20@V6/binary-unit:8,V20@Buf9/bitstring>> ->
{V20@V8,V20@Buf9};
<<_:V20@Pad3,1:1,1:1,V20@V6:6,V20@Buf7/bitstring>> ->
{V20@V8,V20@Buf9}  = decode_fragmented(V20@V6, V20@Buf7, 8),
{V20@V8,V20@Buf9}
end,
{TmpValx17,_} = 'dec_Facility-UUIE_serviceControl'(V20@V0),
{TmpValx17,V20@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type CircuitInfo
{Term18,Bytes21} = case Extensions of
  <<_:12,1:1,_/bitstring>> ->
begin
V21@Pad3 = bit_size(Bytes20) band 7,
{V21@V0,V21@Buf1} = case Bytes20 of
<<_:V21@Pad3,0:1,V21@V5:7,V21@V7:V21@V5/binary-unit:8,V21@Buf8/bitstring>> ->
{V21@V7,V21@Buf8};
<<_:V21@Pad3,1:1,0:1,V21@V6:14,V21@V8:V21@V6/binary-unit:8,V21@Buf9/bitstring>> ->
{V21@V8,V21@Buf9};
<<_:V21@Pad3,1:1,1:1,V21@V6:6,V21@Buf7/bitstring>> ->
{V21@V8,V21@Buf9}  = decode_fragmented(V21@V6, V21@Buf7, 8),
{V21@V8,V21@Buf9}
end,
{TmpValx18,_} = dec_CircuitInfo(V21@V0),
{TmpValx18,V21@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute number 19 with type FeatureSet
{Term19,Bytes22} = case Extensions of
  <<_:13,1:1,_/bitstring>> ->
begin
V22@Pad3 = bit_size(Bytes21) band 7,
{V22@V0,V22@Buf1} = case Bytes21 of
<<_:V22@Pad3,0:1,V22@V5:7,V22@V7:V22@V5/binary-unit:8,V22@Buf8/bitstring>> ->
{V22@V7,V22@Buf8};
<<_:V22@Pad3,1:1,0:1,V22@V6:14,V22@V8:V22@V6/binary-unit:8,V22@Buf9/bitstring>> ->
{V22@V8,V22@Buf9};
<<_:V22@Pad3,1:1,1:1,V22@V6:6,V22@Buf7/bitstring>> ->
{V22@V8,V22@Buf9}  = decode_fragmented(V22@V6, V22@Buf7, 8),
{V22@V8,V22@Buf9}
end,
{TmpValx19,_} = dec_FeatureSet(V22@V0),
{TmpValx19,V22@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes21}
end,

%% attribute number 20 with type EndpointType
{Term20,Bytes23} = case Extensions of
  <<_:14,1:1,_/bitstring>> ->
begin
V23@Pad3 = bit_size(Bytes22) band 7,
{V23@V0,V23@Buf1} = case Bytes22 of
<<_:V23@Pad3,0:1,V23@V5:7,V23@V7:V23@V5/binary-unit:8,V23@Buf8/bitstring>> ->
{V23@V7,V23@Buf8};
<<_:V23@Pad3,1:1,0:1,V23@V6:14,V23@V8:V23@V6/binary-unit:8,V23@Buf9/bitstring>> ->
{V23@V8,V23@Buf9};
<<_:V23@Pad3,1:1,1:1,V23@V6:6,V23@Buf7/bitstring>> ->
{V23@V8,V23@Buf9}  = decode_fragmented(V23@V6, V23@Buf7, 8),
{V23@V8,V23@Buf9}
end,
{TmpValx20,_} = dec_EndpointType(V23@V0),
{TmpValx20,V23@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes22}
end,

%% attribute number 21 with type H245Security
{Term21,Bytes24} = case Extensions of
  <<_:15,1:1,_/bitstring>> ->
begin
V24@Pad3 = bit_size(Bytes23) band 7,
{V24@V0,V24@Buf1} = case Bytes23 of
<<_:V24@Pad3,0:1,V24@V5:7,V24@V7:V24@V5/binary-unit:8,V24@Buf8/bitstring>> ->
{V24@V7,V24@Buf8};
<<_:V24@Pad3,1:1,0:1,V24@V6:14,V24@V8:V24@V6/binary-unit:8,V24@Buf9/bitstring>> ->
{V24@V8,V24@Buf9};
<<_:V24@Pad3,1:1,1:1,V24@V6:6,V24@Buf7/bitstring>> ->
{V24@V8,V24@Buf9}  = decode_fragmented(V24@V6, V24@Buf7, 8),
{V24@V8,V24@Buf9}
end,
{TmpValx21,_} = dec_H245Security(V24@V0),
{TmpValx21,V24@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes23}
end,
Bytes25= skipextensions(Bytes24, 17, Extensions),
{{'Facility-UUIE',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21},Bytes25}.

'enc_ConferenceList'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@len = byte_size(Enc5@element),
if Enc6@len =:= 16 ->
[align|Enc5@element]
end
end
end
end,
begin
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
enc_AliasAddress(Enc8@element)
end
end|begin
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc10@element)
end
end].


dec_ConferenceList(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:16/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type AliasAddress
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_AliasAddress(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ConferenceList',Term1,Term2,Term3},Bytes7}.

'enc_FacilityReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= routeCallToGatekeeper ->
<<0:1,0:2>>;
ChoiceTag =:= callForwarded ->
<<0:1,1:2>>;
ChoiceTag =:= routeCallToMC ->
<<0:1,2:2>>;
ChoiceTag =:= undefinedReason ->
<<0:1,3:2>>;
ChoiceTag =:= conferenceListChoice ->
begin
Enc5@output = [],
Enc5@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc5@bin]
end;
ChoiceTag =:= startH245 ->
begin
Enc6@output = [],
Enc6@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc6@bin]
end;
ChoiceTag =:= noH245 ->
begin
Enc7@output = [],
Enc7@bin = <<0:8>>,
[<<1:1,2:7>>,
align,
1|Enc7@bin]
end;
ChoiceTag =:= newTokens ->
begin
Enc8@output = [],
Enc8@bin = <<0:8>>,
[<<1:1,3:7>>,
align,
1|Enc8@bin]
end;
ChoiceTag =:= featureSetUpdate ->
begin
Enc9@output = [],
Enc9@bin = <<0:8>>,
[<<1:1,4:7>>,
align,
1|Enc9@bin]
end;
ChoiceTag =:= forwardedElements ->
begin
Enc10@output = [],
Enc10@bin = <<0:8>>,
[<<1:1,5:7>>,
align,
1|Enc10@bin]
end;
ChoiceTag =:= transportedInformation ->
begin
Enc11@output = [],
Enc11@bin = <<0:8>>,
[<<1:1,6:7>>,
align,
1|Enc11@bin]
end
end.


dec_FacilityReason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{routeCallToGatekeeper,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{callForwarded,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{routeCallToMC,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefinedReason,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{conferenceListChoice,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{startH245,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{noH245,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{newTokens,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{featureSetUpdate,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{forwardedElements,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{transportedInformation,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_Progress-UUIE'(Val) ->
Enc6@bitmap = extension_bitmap(Val, 10, 13),
Extensions = if Enc6@bitmap =:= 0 ->
[];
true ->
<<2:7,Enc6@bitmap:3>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(6, Val),
Enc3@element = element(7, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(8, Val),
Enc5@element = element(9, Val),
if Enc4@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc8@element = element(2, Val),
Enc9@bin = encode_oid(Enc8@element),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
encode_fragmented(Enc9@bin, 8)
end
end,
begin
Enc10@element = element(3, Val),
enc_EndpointType(Enc10@element)
end,
begin
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc11@element)
end
end,
begin
Enc13@element = element(5, Val),
enc_CallIdentifier(Enc13@element)
end,
begin
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_H245Security(Enc14@element)
end
end,
begin
Enc16@element = element(7, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Progress-UUIE_tokens'(Enc16@element)
end
end,
begin
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Progress-UUIE_cryptoTokens'(Enc18@element)
end
end,
begin
Enc20@element = element(9, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Progress-UUIE_fastStart'(Enc20@element)
end
end,
Extensions,
begin
Enc22@element = element(10, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc24@output = if Enc22@element =:= false ->
<<0:1,0:7>>;
Enc22@element =:= true ->
<<1:1,0:7>>
end,
Enc24@bin = Enc24@output,
[align,
1|Enc24@bin]
end
end
end,
begin
Enc26@element = element(11, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc28@output = if Enc26@element =:= false ->
<<0:1,0:7>>;
Enc26@element =:= true ->
<<1:1,0:7>>
end,
Enc28@bin = Enc28@output,
[align,
1|Enc28@bin]
end
end
end|begin
Enc30@element = element(12, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@output = [],
Enc31@bin = <<0:8>>,
[align,
1|Enc31@bin]
end
end
end].
'enc_Progress-UUIE_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


'dec_Progress-UUIE_tokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components50(V1@V0, V1@Buf1, []).

'enc_Progress-UUIE_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


'dec_Progress-UUIE_cryptoTokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components51(V1@V0, V1@Buf1, []).

'enc_Progress-UUIE_fastStart'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len < 128 ->
[Enc1@len|Comp];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Comp];
true ->
encode_fragmented(Comp, 8)
end
end || Comp <- Val]].


'dec_Progress-UUIE_fastStart'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components52(V1@V0, V1@Buf1, []).



'dec_Progress-UUIE'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type EndpointType
{Term2,Bytes4} = dec_EndpointType(Bytes3),

%% attribute number 3 with type TransportAddress
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
dec_TransportAddress(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type CallIdentifier
{Term4,Bytes6} = dec_CallIdentifier(Bytes5),

%% attribute number 5 with type H245Security
{Term5,Bytes7} = case (Opt bsr 3) band 1 of
1 ->
dec_H245Security(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case (Opt bsr 2) band 1 of
1 ->
'dec_Progress-UUIE_tokens'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes9} = case (Opt bsr 1) band 1 of
1 ->
'dec_Progress-UUIE_cryptoTokens'(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes10} = case Opt band 1 of
1 ->
'dec_Progress-UUIE_fastStart'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V4@V0,V4@Buf1} = case Bytes10 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes12} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes11) band 7,
{V5@V0,V5@Buf1} = case Bytes11 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx9,_} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = V5@V0,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,
{TmpValx9,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes13} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes12) band 7,
{V7@V0,V7@Buf1} = case Bytes12 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx10,_} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = V7@V0,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,
{TmpValx10,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type NULL
{Term11,Bytes14} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes13) band 7,
{V9@V0,V9@Buf1} = case Bytes13 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx11,_} = begin
ignore,
{'NULL',V9@V0}
end,
{TmpValx11,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,
Bytes15= skipextensions(Bytes14, 4, Extensions),
{{'Progress-UUIE',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},Bytes15}.

'enc_TransportAddress'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= ipAddress ->
[<<0:1,0:3>>|enc_TransportAddress_ipAddress(ChoiceVal)];
ChoiceTag =:= ipSourceRoute ->
[<<0:1,1:3>>|enc_TransportAddress_ipSourceRoute(ChoiceVal)];
ChoiceTag =:= ipxAddress ->
[<<0:1,2:3>>|enc_TransportAddress_ipxAddress(ChoiceVal)];
ChoiceTag =:= ip6Address ->
[<<0:1,3:3>>|enc_TransportAddress_ip6Address(ChoiceVal)];
ChoiceTag =:= netBios ->
begin
Enc6@len = byte_size(ChoiceVal),
if Enc6@len =:= 16 ->
[<<0:1,4:3>>,
align|ChoiceVal]
end
end;
ChoiceTag =:= nsap ->
begin
Enc8@len = byte_size(ChoiceVal),
Enc8@len@sub = Enc8@len - 1,
if 0 =< Enc8@len@sub, Enc8@len@sub < 20 ->
[<<0:1,5:3,Enc8@len@sub:5>>,
align|ChoiceVal]
end
end;
ChoiceTag =:= nonStandardAddress ->
[<<0:1,6:3>>|enc_NonStandardParameter(ChoiceVal)]
end.
'enc_TransportAddress_ipAddress'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
Enc2@len = byte_size(Enc1@element),
if Enc2@len =:= 4 ->
Enc1@element
end
end|begin
Enc3@element = element(3, Val),
if Enc3@element bsr 16 =:= 0 ->
<<Enc3@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end].

dec_TransportAddress_ipAddress(Bytes) ->

%% attribute number 1 with type OCTET STRING
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:4/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary:copy(V1@V0),
{V1@Conv4,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'TransportAddress_ipAddress',Term1,Term2},Bytes2}.

'enc_TransportAddress_ipSourceRoute'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc3@len = byte_size(Enc2@element),
if Enc3@len =:= 4 ->
[<<0:1>>,
align|Enc2@element]
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element bsr 16 =:= 0 ->
<<Enc4@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(4, Val),
enc_TransportAddress_ipSourceRoute_route(Enc6@element)
end|begin
Enc7@element = element(5, Val),
enc_TransportAddress_ipSourceRoute_routing(Enc7@element)
end].
'enc_TransportAddress_ipSourceRoute_route'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len =:= 4 ->
Comp
end
end || Comp <- Val]].


dec_TransportAddress_ipSourceRoute_route(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components53(V1@V0, V1@Buf1, []).

'enc_TransportAddress_ipSourceRoute_routing'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= strict ->
<<0:1,0:1>>;
ChoiceTag =:= loose ->
<<0:1,1:1>>
end.

dec_TransportAddress_ipSourceRoute_routing(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{strict,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{loose,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_TransportAddress_ipSourceRoute(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:4/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv4 = binary:copy(V2@V0),
{V2@Conv4,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes4} = 'dec_TransportAddress_ipSourceRoute_route'(Bytes3),

%% attribute number 4 with type CHOICE
{Term4,Bytes5} = 'dec_TransportAddress_ipSourceRoute_routing'(Bytes4),

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'TransportAddress_ipSourceRoute',Term1,Term2,Term3,Term4},Bytes7}.

'enc_TransportAddress_ipxAddress'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
Enc2@len = byte_size(Enc1@element),
if Enc2@len =:= 6 ->
Enc1@element
end
end,
begin
Enc3@element = element(3, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 4 ->
Enc3@element
end
end|begin
Enc5@element = element(4, Val),
Enc6@len = byte_size(Enc5@element),
if Enc6@len =:= 2 ->
Enc5@element
end
end].

dec_TransportAddress_ipxAddress(Bytes) ->

%% attribute number 1 with type OCTET STRING
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:6/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary:copy(V1@V0),
{V1@Conv4,V1@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} = begin
<<V2@V0:4/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv2 = binary:copy(V2@V0),
{V2@Conv2,V2@Buf1}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes3} = begin
<<V3@V0:2/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv2 = binary:copy(V3@V0),
{V3@Conv2,V3@Buf1}
end,
{{'TransportAddress_ipxAddress',Term1,Term2,Term3},Bytes3}.

'enc_TransportAddress_ip6Address'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc3@len = byte_size(Enc2@element),
if Enc3@len =:= 16 ->
[<<0:1>>,
align|Enc2@element]
end
end|begin
Enc4@element = element(3, Val),
if Enc4@element bsr 16 =:= 0 ->
<<Enc4@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end].

dec_TransportAddress_ip6Address(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:16/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv4 = binary:copy(V2@V0),
{V2@Conv4,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'TransportAddress_ip6Address',Term1,Term2},Bytes5}.



dec_TransportAddress(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_TransportAddress_ipAddress'(Bytes2)
end,
{{ipAddress,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_TransportAddress_ipSourceRoute'(Bytes2)
end,
{{ipSourceRoute,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_TransportAddress_ipxAddress'(Bytes2)
end,
{{ipxAddress,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
'dec_TransportAddress_ip6Address'(Bytes2)
end,
{{ip6Address,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:16/binary-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Conv4 = binary:copy(V2@V0),
{V2@Conv4,V2@Buf1}
end
end,
{{netBios,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
<<V3@V0:5/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Conv7 = binary:copy(V3@V3),
{V3@Conv7,V3@Buf4}
end
end,
{{nsap,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandardAddress,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_Status-UUIE'(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc5@bin = encode_oid(Enc4@element),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end,
begin
Enc6@element = element(3, Val),
enc_CallIdentifier(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Status-UUIE_tokens'(Enc7@element)
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Status-UUIE_cryptoTokens'(Enc9@element)
end
end].
'enc_Status-UUIE_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


'dec_Status-UUIE_tokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components54(V1@V0, V1@Buf1, []).

'enc_Status-UUIE_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


'dec_Status-UUIE_cryptoTokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components55(V1@V0, V1@Buf1, []).



'dec_Status-UUIE'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type CallIdentifier
{Term2,Bytes4} = dec_CallIdentifier(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
'dec_Status-UUIE_tokens'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_Status-UUIE_cryptoTokens'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'Status-UUIE',Term1,Term2,Term3,Term4},Bytes8}.

'enc_StatusInquiry-UUIE'(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc5@bin = encode_oid(Enc4@element),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end,
begin
Enc6@element = element(3, Val),
enc_CallIdentifier(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_StatusInquiry-UUIE_tokens'(Enc7@element)
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_StatusInquiry-UUIE_cryptoTokens'(Enc9@element)
end
end].
'enc_StatusInquiry-UUIE_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


'dec_StatusInquiry-UUIE_tokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components56(V1@V0, V1@Buf1, []).

'enc_StatusInquiry-UUIE_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


'dec_StatusInquiry-UUIE_cryptoTokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components57(V1@V0, V1@Buf1, []).



'dec_StatusInquiry-UUIE'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type CallIdentifier
{Term2,Bytes4} = dec_CallIdentifier(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
'dec_StatusInquiry-UUIE_tokens'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_StatusInquiry-UUIE_cryptoTokens'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'StatusInquiry-UUIE',Term1,Term2,Term3,Term4},Bytes8}.

'enc_SetupAcknowledge-UUIE'(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc5@bin = encode_oid(Enc4@element),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end,
begin
Enc6@element = element(3, Val),
enc_CallIdentifier(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_SetupAcknowledge-UUIE_tokens'(Enc7@element)
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_SetupAcknowledge-UUIE_cryptoTokens'(Enc9@element)
end
end].
'enc_SetupAcknowledge-UUIE_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


'dec_SetupAcknowledge-UUIE_tokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components58(V1@V0, V1@Buf1, []).

'enc_SetupAcknowledge-UUIE_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


'dec_SetupAcknowledge-UUIE_cryptoTokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components59(V1@V0, V1@Buf1, []).



'dec_SetupAcknowledge-UUIE'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type CallIdentifier
{Term2,Bytes4} = dec_CallIdentifier(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
'dec_SetupAcknowledge-UUIE_tokens'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_SetupAcknowledge-UUIE_cryptoTokens'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'SetupAcknowledge-UUIE',Term1,Term2,Term3,Term4},Bytes8}.

'enc_Notify-UUIE'(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc5@bin = encode_oid(Enc4@element),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end,
begin
Enc6@element = element(3, Val),
enc_CallIdentifier(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Notify-UUIE_tokens'(Enc7@element)
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Notify-UUIE_cryptoTokens'(Enc9@element)
end
end].
'enc_Notify-UUIE_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


'dec_Notify-UUIE_tokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components60(V1@V0, V1@Buf1, []).

'enc_Notify-UUIE_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


'dec_Notify-UUIE_cryptoTokens'(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components61(V1@V0, V1@Buf1, []).



'dec_Notify-UUIE'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type CallIdentifier
{Term2,Bytes4} = dec_CallIdentifier(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
'dec_Notify-UUIE_tokens'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_Notify-UUIE_cryptoTokens'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'Notify-UUIE',Term1,Term2,Term3,Term4},Bytes8}.

'enc_EndpointType'(Val) ->
Enc7@bitmap = extension_bitmap(Val, 10, 12),
Extensions = if Enc7@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc7@bitmap:2>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(3, Val),
Enc3@element = element(4, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(5, Val),
Enc5@element = element(6, Val),
if Enc4@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@element = element(7, Val),
if Enc6@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc9@element = element(2, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc9@element)
end
end,
begin
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_VendorIdentifier(Enc11@element)
end
end,
begin
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_GatekeeperInfo(Enc13@element)
end
end,
begin
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_GatewayInfo(Enc15@element)
end
end,
begin
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_McuInfo(Enc17@element)
end
end,
begin
Enc19@element = element(7, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
enc_TerminalInfo(Enc19@element)
end
end,
begin
Enc21@element = element(8, Val),
Enc23@element = element(9, Val),
if Enc21@element =:= false ->
if Enc23@element =:= false ->
<<0:1,0:1>>;
Enc23@element =:= true ->
<<0:1,1:1>>
end;
Enc21@element =:= true ->
if Enc23@element =:= false ->
<<1:1,0:1>>;
Enc23@element =:= true ->
<<1:1,1:1>>
end
end
end,
Extensions,
begin
Enc25@element = element(10, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc27@output = begin
Enc26@bits = bit_size(Enc25@element),
if Enc26@bits =:= 32 ->
Enc25@element
end
end,
Enc27@bin = Enc27@output,
[align,
4|Enc27@bin]
end
end
end|begin
Enc29@element = element(11, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc30@output = enc_EndpointType_supportedTunnelledProtocols(Enc29@element),
Enc30@bin = complete(Enc30@output),
Enc30@len = byte_size(Enc30@bin),
if Enc30@len < 128 ->
[align,
Enc30@len|Enc30@bin];
Enc30@len < 16384 ->
[align,
<<2:2,Enc30@len:14>>|Enc30@bin];
true ->
[align|encode_fragmented(Enc30@bin, 8)]
end
end
end
end].
'enc_EndpointType_supportedTunnelledProtocols'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_TunnelledProtocol(Comp) || Comp <- Val]].


dec_EndpointType_supportedTunnelledProtocols(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components62(V1@V0, V1@Buf1, []).



dec_EndpointType(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case (Opt bsr 5) band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type VendorIdentifier
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
dec_VendorIdentifier(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type GatekeeperInfo
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
dec_GatekeeperInfo(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type GatewayInfo
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
dec_GatewayInfo(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type McuInfo
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
dec_McuInfo(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type TerminalInfo
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_TerminalInfo(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes9} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes8,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes10} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes9,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V5@V0,V5@Buf1} = case Bytes10 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 9 with type BIT STRING
{Term9,Bytes12} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes11) band 7,
{V6@V0,V6@Buf1} = case Bytes11 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx9,_} = begin
V7@Pad2 = bit_size(V6@V0) band 7,
<<_:V7@Pad2,V7@V0:32/binary-unit:1,V7@Buf1/bitstring>> = V6@V0,
{V7@V4,V7@Buf5}  = {list_to_bitstring([V7@V0]),V7@Buf1},
{V7@V4,V7@Buf5}
end,
{TmpValx9,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes13} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes12) band 7,
{V8@V0,V8@Buf1} = case Bytes12 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx10,_} = 'dec_EndpointType_supportedTunnelledProtocols'(V8@V0),
{TmpValx10,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,
Bytes14= skipextensions(Bytes13, 3, Extensions),
{{'EndpointType',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},Bytes14}.

'enc_GatewayInfo'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_GatewayInfo_protocol(Enc4@element)
end
end|begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc6@element)
end
end].
'enc_GatewayInfo_protocol'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedProtocols(Comp) || Comp <- Val]].


dec_GatewayInfo_protocol(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components63(V1@V0, V1@Buf1, []).



dec_GatewayInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
'dec_GatewayInfo_protocol'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'GatewayInfo',Term1,Term2},Bytes6}.

'enc_SupportedProtocols'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandardData ->
[<<0:1,0:4>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= h310 ->
[<<0:1,1:4>>|enc_H310Caps(ChoiceVal)];
ChoiceTag =:= h320 ->
[<<0:1,2:4>>|enc_H320Caps(ChoiceVal)];
ChoiceTag =:= h321 ->
[<<0:1,3:4>>|enc_H321Caps(ChoiceVal)];
ChoiceTag =:= h322 ->
[<<0:1,4:4>>|enc_H322Caps(ChoiceVal)];
ChoiceTag =:= h323 ->
[<<0:1,5:4>>|enc_H323Caps(ChoiceVal)];
ChoiceTag =:= h324 ->
[<<0:1,6:4>>|enc_H324Caps(ChoiceVal)];
ChoiceTag =:= voice ->
[<<0:1,7:4>>|enc_VoiceCaps(ChoiceVal)];
ChoiceTag =:= 't120-only' ->
[<<0:1,8:4>>|enc_T120OnlyCaps(ChoiceVal)];
ChoiceTag =:= nonStandardProtocol ->
begin
Enc10@output = enc_NonStandardProtocol(ChoiceVal),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[<<1:1,0:7>>,
align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc10@bin, 8)]
end
end;
ChoiceTag =:= t38FaxAnnexbOnly ->
begin
Enc11@output = enc_T38FaxAnnexbOnlyCaps(ChoiceVal),
Enc11@bin = complete(Enc11@output),
Enc11@len = byte_size(Enc11@bin),
if Enc11@len < 128 ->
[<<1:1,1:7>>,
align,
Enc11@len|Enc11@bin];
Enc11@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc11@len:14>>|Enc11@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc11@bin, 8)]
end
end;
ChoiceTag =:= sip ->
begin
Enc12@output = enc_SIPCaps(ChoiceVal),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[<<1:1,2:7>>,
align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc12@bin, 8)]
end
end
end.


dec_SupportedProtocols(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandardData,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_H310Caps(Bytes2)
end,
{{h310,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_H320Caps(Bytes2)
end,
{{h320,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_H321Caps(Bytes2)
end,
{{h321,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_H322Caps(Bytes2)
end,
{{h322,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_H323Caps(Bytes2)
end,
{{h323,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_H324Caps(Bytes2)
end,
{{h324,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_VoiceCaps(Bytes2)
end,
{{voice,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_T120OnlyCaps(Bytes2)
end,
{{'t120-only',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_NonStandardProtocol(V2@V0),
{TmpVal,V2@Buf1}
end,
{{nonStandardProtocol,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_T38FaxAnnexbOnlyCaps(V2@V0),
{TmpVal,V2@Buf1}
end,
{{t38FaxAnnexbOnly,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_SIPCaps(V2@V0),
{TmpVal,V2@Buf1}
end,
{{sip,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H310Caps'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 3, 5),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc2@bitmap:2>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@element)
end
end,
Extensions,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@output = enc_H310Caps_dataRatesSupported(Enc6@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[align|encode_fragmented(Enc7@bin, 8)]
end
end
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_H310Caps_supportedPrefixes(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end].
'enc_H310Caps_dataRatesSupported'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_DataRate(Comp) || Comp <- Val]].


dec_H310Caps_dataRatesSupported(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components64(V1@V0, V1@Buf1, []).

'enc_H310Caps_supportedPrefixes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedPrefix(Comp) || Comp <- Val]].


dec_H310Caps_supportedPrefixes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components65(V1@V0, V1@Buf1, []).



dec_H310Caps(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes5} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = 'dec_H310Caps_dataRatesSupported'(V4@V0),
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes6} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes5) band 7,
{V5@V0,V5@Buf1} = case Bytes5 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = 'dec_H310Caps_supportedPrefixes'(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,
Bytes7= skipextensions(Bytes6, 3, Extensions),
{{'H310Caps',Term1,Term2,Term3},Bytes7}.

'enc_H320Caps'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 3, 5),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc2@bitmap:2>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@element)
end
end,
Extensions,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@output = enc_H320Caps_dataRatesSupported(Enc6@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[align|encode_fragmented(Enc7@bin, 8)]
end
end
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_H320Caps_supportedPrefixes(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end].
'enc_H320Caps_dataRatesSupported'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_DataRate(Comp) || Comp <- Val]].


dec_H320Caps_dataRatesSupported(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components66(V1@V0, V1@Buf1, []).

'enc_H320Caps_supportedPrefixes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedPrefix(Comp) || Comp <- Val]].


dec_H320Caps_supportedPrefixes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components67(V1@V0, V1@Buf1, []).



dec_H320Caps(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes5} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = 'dec_H320Caps_dataRatesSupported'(V4@V0),
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes6} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes5) band 7,
{V5@V0,V5@Buf1} = case Bytes5 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = 'dec_H320Caps_supportedPrefixes'(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,
Bytes7= skipextensions(Bytes6, 3, Extensions),
{{'H320Caps',Term1,Term2,Term3},Bytes7}.

'enc_H321Caps'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 3, 5),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc2@bitmap:2>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@element)
end
end,
Extensions,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@output = enc_H321Caps_dataRatesSupported(Enc6@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[align|encode_fragmented(Enc7@bin, 8)]
end
end
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_H321Caps_supportedPrefixes(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end].
'enc_H321Caps_dataRatesSupported'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_DataRate(Comp) || Comp <- Val]].


dec_H321Caps_dataRatesSupported(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components68(V1@V0, V1@Buf1, []).

'enc_H321Caps_supportedPrefixes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedPrefix(Comp) || Comp <- Val]].


dec_H321Caps_supportedPrefixes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components69(V1@V0, V1@Buf1, []).



dec_H321Caps(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes5} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = 'dec_H321Caps_dataRatesSupported'(V4@V0),
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes6} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes5) band 7,
{V5@V0,V5@Buf1} = case Bytes5 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = 'dec_H321Caps_supportedPrefixes'(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,
Bytes7= skipextensions(Bytes6, 3, Extensions),
{{'H321Caps',Term1,Term2,Term3},Bytes7}.

'enc_H322Caps'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 3, 5),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc2@bitmap:2>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@element)
end
end,
Extensions,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@output = enc_H322Caps_dataRatesSupported(Enc6@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[align|encode_fragmented(Enc7@bin, 8)]
end
end
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_H322Caps_supportedPrefixes(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end].
'enc_H322Caps_dataRatesSupported'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_DataRate(Comp) || Comp <- Val]].


dec_H322Caps_dataRatesSupported(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components70(V1@V0, V1@Buf1, []).

'enc_H322Caps_supportedPrefixes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedPrefix(Comp) || Comp <- Val]].


dec_H322Caps_supportedPrefixes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components71(V1@V0, V1@Buf1, []).



dec_H322Caps(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes5} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = 'dec_H322Caps_dataRatesSupported'(V4@V0),
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes6} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes5) band 7,
{V5@V0,V5@Buf1} = case Bytes5 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = 'dec_H322Caps_supportedPrefixes'(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,
Bytes7= skipextensions(Bytes6, 3, Extensions),
{{'H322Caps',Term1,Term2,Term3},Bytes7}.

'enc_H323Caps'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 3, 5),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc2@bitmap:2>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@element)
end
end,
Extensions,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@output = enc_H323Caps_dataRatesSupported(Enc6@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[align|encode_fragmented(Enc7@bin, 8)]
end
end
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_H323Caps_supportedPrefixes(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end].
'enc_H323Caps_dataRatesSupported'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_DataRate(Comp) || Comp <- Val]].


dec_H323Caps_dataRatesSupported(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components72(V1@V0, V1@Buf1, []).

'enc_H323Caps_supportedPrefixes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedPrefix(Comp) || Comp <- Val]].


dec_H323Caps_supportedPrefixes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components73(V1@V0, V1@Buf1, []).



dec_H323Caps(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes5} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = 'dec_H323Caps_dataRatesSupported'(V4@V0),
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes6} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes5) band 7,
{V5@V0,V5@Buf1} = case Bytes5 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = 'dec_H323Caps_supportedPrefixes'(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,
Bytes7= skipextensions(Bytes6, 3, Extensions),
{{'H323Caps',Term1,Term2,Term3},Bytes7}.

'enc_H324Caps'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 3, 5),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc2@bitmap:2>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@element)
end
end,
Extensions,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@output = enc_H324Caps_dataRatesSupported(Enc6@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[align|encode_fragmented(Enc7@bin, 8)]
end
end
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_H324Caps_supportedPrefixes(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end].
'enc_H324Caps_dataRatesSupported'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_DataRate(Comp) || Comp <- Val]].


dec_H324Caps_dataRatesSupported(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components74(V1@V0, V1@Buf1, []).

'enc_H324Caps_supportedPrefixes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedPrefix(Comp) || Comp <- Val]].


dec_H324Caps_supportedPrefixes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components75(V1@V0, V1@Buf1, []).



dec_H324Caps(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes5} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = 'dec_H324Caps_dataRatesSupported'(V4@V0),
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes6} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes5) band 7,
{V5@V0,V5@Buf1} = case Bytes5 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = 'dec_H324Caps_supportedPrefixes'(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,
Bytes7= skipextensions(Bytes6, 3, Extensions),
{{'H324Caps',Term1,Term2,Term3},Bytes7}.

'enc_VoiceCaps'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 3, 5),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc2@bitmap:2>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@element)
end
end,
Extensions,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@output = enc_VoiceCaps_dataRatesSupported(Enc6@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[align|encode_fragmented(Enc7@bin, 8)]
end
end
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_VoiceCaps_supportedPrefixes(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end].
'enc_VoiceCaps_dataRatesSupported'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_DataRate(Comp) || Comp <- Val]].


dec_VoiceCaps_dataRatesSupported(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components76(V1@V0, V1@Buf1, []).

'enc_VoiceCaps_supportedPrefixes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedPrefix(Comp) || Comp <- Val]].


dec_VoiceCaps_supportedPrefixes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components77(V1@V0, V1@Buf1, []).



dec_VoiceCaps(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes5} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = 'dec_VoiceCaps_dataRatesSupported'(V4@V0),
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes6} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes5) band 7,
{V5@V0,V5@Buf1} = case Bytes5 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = 'dec_VoiceCaps_supportedPrefixes'(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,
Bytes7= skipextensions(Bytes6, 3, Extensions),
{{'VoiceCaps',Term1,Term2,Term3},Bytes7}.

'enc_T120OnlyCaps'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 3, 5),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc2@bitmap:2>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@element)
end
end,
Extensions,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@output = enc_T120OnlyCaps_dataRatesSupported(Enc6@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[align|encode_fragmented(Enc7@bin, 8)]
end
end
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_T120OnlyCaps_supportedPrefixes(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end].
'enc_T120OnlyCaps_dataRatesSupported'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_DataRate(Comp) || Comp <- Val]].


dec_T120OnlyCaps_dataRatesSupported(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components78(V1@V0, V1@Buf1, []).

'enc_T120OnlyCaps_supportedPrefixes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedPrefix(Comp) || Comp <- Val]].


dec_T120OnlyCaps_supportedPrefixes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components79(V1@V0, V1@Buf1, []).



dec_T120OnlyCaps(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes5} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = 'dec_T120OnlyCaps_dataRatesSupported'(V4@V0),
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes6} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes5) band 7,
{V5@V0,V5@Buf1} = case Bytes5 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = 'dec_T120OnlyCaps_supportedPrefixes'(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,
Bytes7= skipextensions(Bytes6, 3, Extensions),
{{'T120OnlyCaps',Term1,Term2,Term3},Bytes7}.

'enc_NonStandardProtocol'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@element)
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardProtocol_dataRatesSupported(Enc6@element)
end
end|begin
Enc8@element = element(4, Val),
enc_NonStandardProtocol_supportedPrefixes(Enc8@element)
end].
'enc_NonStandardProtocol_dataRatesSupported'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_DataRate(Comp) || Comp <- Val]].


dec_NonStandardProtocol_dataRatesSupported(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components80(V1@V0, V1@Buf1, []).

'enc_NonStandardProtocol_supportedPrefixes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedPrefix(Comp) || Comp <- Val]].


dec_NonStandardProtocol_supportedPrefixes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components81(V1@V0, V1@Buf1, []).



dec_NonStandardProtocol(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_NonStandardProtocol_dataRatesSupported'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = 'dec_NonStandardProtocol_supportedPrefixes'(Bytes4),

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'NonStandardProtocol',Term1,Term2,Term3},Bytes7}.

'enc_T38FaxAnnexbOnlyCaps'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@element)
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_T38FaxAnnexbOnlyCaps_dataRatesSupported(Enc6@element)
end
end,
begin
Enc8@element = element(4, Val),
enc_T38FaxAnnexbOnlyCaps_supportedPrefixes(Enc8@element)
end,
begin
Enc9@element = element(5, Val),
'MULTIMEDIA-SYSTEM-CONTROL':enc_DataProtocolCapability(Enc9@element)
end|begin
Enc10@element = element(6, Val),
'MULTIMEDIA-SYSTEM-CONTROL':enc_T38FaxProfile(Enc10@element)
end].
'enc_T38FaxAnnexbOnlyCaps_dataRatesSupported'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_DataRate(Comp) || Comp <- Val]].


dec_T38FaxAnnexbOnlyCaps_dataRatesSupported(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components82(V1@V0, V1@Buf1, []).

'enc_T38FaxAnnexbOnlyCaps_supportedPrefixes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedPrefix(Comp) || Comp <- Val]].


dec_T38FaxAnnexbOnlyCaps_supportedPrefixes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components83(V1@V0, V1@Buf1, []).



dec_T38FaxAnnexbOnlyCaps(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_T38FaxAnnexbOnlyCaps_dataRatesSupported'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = 'dec_T38FaxAnnexbOnlyCaps_supportedPrefixes'(Bytes4),

%% attribute number 4 with type DataProtocolCapability
{Term4,Bytes6} = 'MULTIMEDIA-SYSTEM-CONTROL':dec_DataProtocolCapability(Bytes5),

%% attribute number 5 with type T38FaxProfile
{Term5,Bytes7} = 'MULTIMEDIA-SYSTEM-CONTROL':dec_T38FaxProfile(Bytes6),

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V3@V0,V3@Buf1} = case Bytes7 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'T38FaxAnnexbOnlyCaps',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_SIPCaps'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc5@element)
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_SIPCaps_dataRatesSupported(Enc7@element)
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_SIPCaps_supportedPrefixes(Enc9@element)
end
end].
'enc_SIPCaps_dataRatesSupported'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_DataRate(Comp) || Comp <- Val]].


dec_SIPCaps_dataRatesSupported(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components84(V1@V0, V1@Buf1, []).

'enc_SIPCaps_supportedPrefixes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedPrefix(Comp) || Comp <- Val]].


dec_SIPCaps_supportedPrefixes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components85(V1@V0, V1@Buf1, []).



dec_SIPCaps(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
'dec_SIPCaps_dataRatesSupported'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_SIPCaps_supportedPrefixes'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'SIPCaps',Term1,Term2,Term3},Bytes7}.

'enc_McuInfo'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 3, 4),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@element)
end
end,
Extensions|begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@output = enc_McuInfo_protocol(Enc6@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[align|encode_fragmented(Enc7@bin, 8)]
end
end
end
end].
'enc_McuInfo_protocol'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedProtocols(Comp) || Comp <- Val]].


dec_McuInfo_protocol(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components86(V1@V0, V1@Buf1, []).



dec_McuInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes5} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = 'dec_McuInfo_protocol'(V4@V0),
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,
Bytes6= skipextensions(Bytes5, 2, Extensions),
{{'McuInfo',Term1,Term2},Bytes6}.

'enc_TerminalInfo'(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end|begin
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc3@element)
end
end].


dec_TerminalInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'TerminalInfo',Term1},Bytes5}.

'enc_GatekeeperInfo'(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end|begin
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc3@element)
end
end].


dec_GatekeeperInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'GatekeeperInfo',Term1},Bytes5}.

'enc_VendorIdentifier'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 5, 6),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(4, Val),
if Enc2@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
enc_H221NonStandard(Enc5@element)
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@len = byte_size(Enc6@element),
Enc7@len@sub = Enc7@len - 1,
if Enc7@len@sub bsr 8 =:= 0 ->
[align,
Enc7@len@sub|Enc6@element]
end
end
end
end,
begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@len = byte_size(Enc9@element),
Enc10@len@sub = Enc10@len - 1,
if Enc10@len@sub bsr 8 =:= 0 ->
[align,
Enc10@len@sub|Enc9@element]
end
end
end
end,
Extensions|begin
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@output = begin
Enc13@bin = encode_oid(Enc12@element),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
encode_fragmented(Enc13@bin, 8)
end
end,
Enc14@bin = iolist_to_binary(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[align|encode_fragmented(Enc14@bin, 8)]
end
end
end
end].


dec_VendorIdentifier(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type H221NonStandard
{Term1,Bytes3} = dec_H221NonStandard(Bytes2),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes3) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes3,
V3@Add4 = V3@V0 + 1,
<<V3@V5:V3@Add4/binary-unit:8,V3@Buf6/bitstring>> = V3@Buf1,
V3@Conv7 = binary:copy(V3@V5),
{V3@Conv7,V3@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = case Opt band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes4) band 7,
<<_:V4@Pad2,V4@V0:1/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes4,
V4@Add4 = V4@V0 + 1,
<<V4@V5:V4@Add4/binary-unit:8,V4@Buf6/bitstring>> = V4@Buf1,
V4@Conv7 = binary:copy(V4@V5),
{V4@Conv7,V4@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 4 with type OBJECT IDENTIFIER
{Term4,Bytes7} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes6) band 7,
{V6@V0,V6@Buf1} = case Bytes6 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx4,_} = begin
V7@Pad3 = bit_size(V6@V0) band 7,
{V7@V0,V7@Buf1} = case V6@V0 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@Buf6/bitstring>> ->
{V7@V5,V7@Buf6};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@Buf7/bitstring>> ->
{V7@V6,V7@Buf7}
end,
<<V7@V8:V7@V0/binary-unit:8,V7@Buf9/bitstring>> = V7@Buf1,
V7@Conv10 = binary_to_list(V7@V8),
{V7@V11,V7@Buf12}  = {decode_oid(V7@Conv10),V7@Buf9},
{V7@V11,V7@Buf12}
end,
{TmpValx4,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,
Bytes8= skipextensions(Bytes7, 2, Extensions),
{{'VendorIdentifier',Term1,Term2,Term3,Term4},Bytes8}.

'enc_H221NonStandard'(Val) ->
[begin
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
[<<0:1>>,
align,
Enc2@element];
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element bsr 8 =:= 0 ->
Enc4@element;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
if Enc6@element bsr 16 =:= 0 ->
<<Enc6@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end].


dec_H221NonStandard(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:1/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:7,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:7,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'H221NonStandard',Term1,Term2,Term3},Bytes6}.

'enc_TunnelledProtocol'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_TunnelledProtocol_id(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@bin = list_to_binary(Enc4@element),
Enc5@len = byte_size(Enc5@bin),
Enc5@len@sub = Enc5@len - 1,
if Enc5@len@sub bsr 6 =:= 0 ->
[<<Enc5@len@sub:6>>,
align|Enc5@bin]
end
end
end
end].
'enc_TunnelledProtocol_id'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= tunnelledProtocolObjectID ->
begin
Enc2@bin = encode_oid(ChoiceVal),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 128 ->
[<<0:1,0:1>>,
align,
Enc2@len|Enc2@bin];
Enc2@len < 16384 ->
[<<0:1,0:1>>,
align,
<<2:2,Enc2@len:14>>|Enc2@bin];
true ->
[<<0:1,0:1>>,
align|encode_fragmented(Enc2@bin, 8)]
end
end;
ChoiceTag =:= tunnelledProtocolAlternateID ->
[<<0:1,1:1>>|enc_TunnelledProtocolAlternateIdentifier(ChoiceVal)]
end.

dec_TunnelledProtocol_id(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/binary-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
V2@Conv10 = binary_to_list(V2@V8),
{V2@V11,V2@Buf12}  = {decode_oid(V2@Conv10),V2@Buf9},
{V2@V11,V2@Buf12}
end
end,
{{tunnelledProtocolObjectID,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_TunnelledProtocolAlternateIdentifier(Bytes2)
end,
{{tunnelledProtocolAlternateID,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_TunnelledProtocol(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes3} = 'dec_TunnelledProtocol_id'(Bytes2),

%% attribute number 2 with type IA5String
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V3@V0:6/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Conv7 = binary_to_list(V3@V3),
{V3@Conv7,V3@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'TunnelledProtocol',Term1,Term2},Bytes6}.

'enc_TunnelledProtocolAlternateIdentifier'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
Enc4@bin = list_to_binary(Enc3@element),
Enc4@len = byte_size(Enc4@bin),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 6 =:= 0 ->
[<<Enc4@len@sub:6>>,
align|Enc4@bin]
end
end|begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@bin = list_to_binary(Enc5@element),
Enc6@len = byte_size(Enc6@bin),
Enc6@len@sub = Enc6@len - 1,
if Enc6@len@sub bsr 6 =:= 0 ->
[<<Enc6@len@sub:6,0:2>>|Enc6@bin]
end
end
end
end].


dec_TunnelledProtocolAlternateIdentifier(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type IA5String
{Term1,Bytes3} = begin
<<V3@V0:6/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Conv7 = binary_to_list(V3@V3),
{V3@Conv7,V3@Buf4}
end,

%% attribute number 2 with type IA5String
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:6/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Conv7 = binary_to_list(V4@V3),
{V4@Conv7,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'TunnelledProtocolAlternateIdentifier',Term1,Term2},Bytes6}.

'enc_NonStandardParameter'(Val) ->
[begin
Enc1@element = element(2, Val),
enc_NonStandardIdentifier(Enc1@element)
end,
align|begin
Enc2@element = element(3, Val),
Enc3@len = byte_size(Enc2@element),
if Enc3@len < 128 ->
[Enc3@len|Enc2@element];
Enc3@len < 16384 ->
[<<2:2,Enc3@len:14>>|Enc2@element];
true ->
encode_fragmented(Enc2@element, 8)
end
end].


dec_NonStandardParameter(Bytes) ->

%% attribute number 1 with type NonStandardIdentifier
{Term1,Bytes1} = dec_NonStandardIdentifier(Bytes),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} = begin
V1@Pad3 = bit_size(Bytes1) band 7,
{V1@V0,V1@Buf1} = case Bytes1 of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end,
{{'NonStandardParameter',Term1,Term2},Bytes2}.

'enc_NonStandardIdentifier'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= object ->
begin
Enc2@bin = encode_oid(ChoiceVal),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 128 ->
[<<0:1,0:1>>,
align,
Enc2@len|Enc2@bin];
Enc2@len < 16384 ->
[<<0:1,0:1>>,
align,
<<2:2,Enc2@len:14>>|Enc2@bin];
true ->
[<<0:1,0:1>>,
align|encode_fragmented(Enc2@bin, 8)]
end
end;
ChoiceTag =:= h221NonStandard ->
[<<0:1,1:1>>|enc_H221NonStandard(ChoiceVal)]
end.


dec_NonStandardIdentifier(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/binary-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
V2@Conv10 = binary_to_list(V2@V8),
{V2@V11,V2@Buf12}  = {decode_oid(V2@Conv10),V2@Buf9},
{V2@V11,V2@Buf12}
end
end,
{{object,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_H221NonStandard(Bytes2)
end,
{{h221NonStandard,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_AliasAddress'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= dialedDigits ->
begin
Enc2@len = length(ChoiceVal),
Enc2@bin = encode_chars(ChoiceVal, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,2,ill,ill,ill,3,4,5,6,7,8,9,10,11,12}}),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 7 =:= 0 ->
[<<0:1,0:1,Enc2@len@sub:7>>,
align|Enc2@bin]
end
end;
ChoiceTag =:= 'h323-ID' ->
begin
Enc4@len = length(ChoiceVal),
Enc4@bin = encode_chars_16bit(ChoiceVal),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 8 =:= 0 ->
[<<0:1,1:1>>,
align,
Enc4@len@sub|Enc4@bin]
end
end;
ChoiceTag =:= 'url-ID' ->
begin
Enc6@output = begin
Enc5@bin = list_to_binary(ChoiceVal),
Enc5@len = byte_size(Enc5@bin),
Enc5@len@sub = Enc5@len - 1,
if Enc5@len@sub bsr 9 =:= 0 ->
[<<Enc5@len@sub:16>>|Enc5@bin]
end
end,
Enc6@bin = iolist_to_binary(Enc6@output),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[<<1:1,0:7>>,
align,
Enc6@len|Enc6@bin];
true ->
[<<1:1,0:7>>,
align,
<<2:2,Enc6@len:14>>|Enc6@bin]
end
end;
ChoiceTag =:= transportID ->
begin
Enc7@output = enc_TransportAddress(ChoiceVal),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[<<1:1,1:7>>,
align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc7@bin, 8)]
end
end;
ChoiceTag =:= 'email-ID' ->
begin
Enc9@output = begin
Enc8@bin = list_to_binary(ChoiceVal),
Enc8@len = byte_size(Enc8@bin),
Enc8@len@sub = Enc8@len - 1,
if Enc8@len@sub bsr 9 =:= 0 ->
[<<Enc8@len@sub:16>>|Enc8@bin]
end
end,
Enc9@bin = iolist_to_binary(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[<<1:1,2:7>>,
align,
Enc9@len|Enc9@bin];
true ->
[<<1:1,2:7>>,
align,
<<2:2,Enc9@len:14>>|Enc9@bin]
end
end;
ChoiceTag =:= partyNumber ->
begin
Enc10@output = enc_PartyNumber(ChoiceVal),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[<<1:1,3:7>>,
align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc10@bin, 8)]
end
end;
ChoiceTag =:= mobileUIM ->
begin
Enc11@output = enc_MobileUIM(ChoiceVal),
Enc11@bin = complete(Enc11@output),
Enc11@len = byte_size(Enc11@bin),
if Enc11@len < 128 ->
[<<1:1,4:7>>,
align,
Enc11@len|Enc11@bin];
Enc11@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc11@len:14>>|Enc11@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc11@bin, 8)]
end
end
end.


dec_AliasAddress(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:4,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V7,V2@Buf8}  = {decode_chars(V2@V3, 4, {35,42,44,48,49,50,51,52,53,54,55,56,57}),V2@Buf4},
{V2@V7,V2@Buf8}
end
end,
{{dialedDigits,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
<<V3@V5:V3@Add4/binary-unit:16,V3@Buf6/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars_16bit(V3@V5),V3@Buf6},
{V3@V7,V3@Buf8}
end
end,
{{'h323-ID',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
V3@Pad2 = bit_size(V2@V0) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = V2@V0,
V3@Add4 = V3@V0 + 1,
<<V3@V5:V3@Add4/binary-unit:8,V3@Buf6/bitstring>> = V3@Buf1,
V3@Conv7 = binary_to_list(V3@V5),
{V3@Conv7,V3@Buf6}
end,
{TmpVal,V2@Buf1}
end,
{{'url-ID',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_TransportAddress(V2@V0),
{TmpVal,V2@Buf1}
end,
{{transportID,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
V4@Pad2 = bit_size(V2@V0) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = V2@V0,
V4@Add4 = V4@V0 + 1,
<<V4@V5:V4@Add4/binary-unit:8,V4@Buf6/bitstring>> = V4@Buf1,
V4@Conv7 = binary_to_list(V4@V5),
{V4@Conv7,V4@Buf6}
end,
{TmpVal,V2@Buf1}
end,
{{'email-ID',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_PartyNumber(V2@V0),
{TmpVal,V2@Buf1}
end,
{{partyNumber,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_MobileUIM(V2@V0),
{TmpVal,V2@Buf1}
end,
{{mobileUIM,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_AddressPattern'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= wildcard ->
[<<0:1,0:1>>|enc_AliasAddress(ChoiceVal)];
ChoiceTag =:= range ->
[<<0:1,1:1>>|enc_AddressPattern_range(ChoiceVal)]
end.
'enc_AddressPattern_range'(Val) ->
[begin
Enc1@element = element(2, Val),
enc_PartyNumber(Enc1@element)
end|begin
Enc2@element = element(3, Val),
enc_PartyNumber(Enc2@element)
end].

dec_AddressPattern_range(Bytes) ->

%% attribute number 1 with type PartyNumber
{Term1,Bytes1} = dec_PartyNumber(Bytes),

%% attribute number 2 with type PartyNumber
{Term2,Bytes2} = dec_PartyNumber(Bytes1),
{{'AddressPattern_range',Term1,Term2},Bytes2}.



dec_AddressPattern(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_AliasAddress(Bytes2)
end,
{{wildcard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_AddressPattern_range'(Bytes2)
end,
{{range,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_PartyNumber'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= e164Number ->
[<<0:1,0:3>>|enc_PublicPartyNumber(ChoiceVal)];
ChoiceTag =:= dataPartyNumber ->
begin
Enc3@len = length(ChoiceVal),
Enc3@bin = encode_chars(ChoiceVal, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,2,ill,ill,ill,3,4,5,6,7,8,9,10,11,12}}),
Enc3@len@sub = Enc3@len - 1,
if Enc3@len@sub bsr 7 =:= 0 ->
[<<0:1,1:3,Enc3@len@sub:7>>,
align|Enc3@bin]
end
end;
ChoiceTag =:= telexPartyNumber ->
begin
Enc5@len = length(ChoiceVal),
Enc5@bin = encode_chars(ChoiceVal, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,2,ill,ill,ill,3,4,5,6,7,8,9,10,11,12}}),
Enc5@len@sub = Enc5@len - 1,
if Enc5@len@sub bsr 7 =:= 0 ->
[<<0:1,2:3,Enc5@len@sub:7>>,
align|Enc5@bin]
end
end;
ChoiceTag =:= privateNumber ->
[<<0:1,3:3>>|enc_PrivatePartyNumber(ChoiceVal)];
ChoiceTag =:= nationalStandardPartyNumber ->
begin
Enc8@len = length(ChoiceVal),
Enc8@bin = encode_chars(ChoiceVal, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,2,ill,ill,ill,3,4,5,6,7,8,9,10,11,12}}),
Enc8@len@sub = Enc8@len - 1,
if Enc8@len@sub bsr 7 =:= 0 ->
[<<0:1,4:3,Enc8@len@sub:7>>,
align|Enc8@bin]
end
end
end.


dec_PartyNumber(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_PublicPartyNumber(Bytes2)
end,
{{e164Number,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V2@V0:7/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:4,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V7,V2@Buf8}  = {decode_chars(V2@V3, 4, {35,42,44,48,49,50,51,52,53,54,55,56,57}),V2@Buf4},
{V2@V7,V2@Buf8}
end
end,
{{dataPartyNumber,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V3@V0:7/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:4,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars(V3@V3, 4, {35,42,44,48,49,50,51,52,53,54,55,56,57}),V3@Buf4},
{V3@V7,V3@Buf8}
end
end,
{{telexPartyNumber,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_PrivatePartyNumber(Bytes2)
end,
{{privateNumber,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes2,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:4,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V7,V4@Buf8}  = {decode_chars(V4@V3, 4, {35,42,44,48,49,50,51,52,53,54,55,56,57}),V4@Buf4},
{V4@V7,V4@Buf8}
end
end,
{{nationalStandardPartyNumber,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_PublicPartyNumber'(Val) ->
[begin
Enc1@element = element(2, Val),
enc_PublicTypeOfNumber(Enc1@element)
end|begin
Enc2@element = element(3, Val),
Enc3@len = length(Enc2@element),
Enc3@bin = encode_chars(Enc2@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,2,ill,ill,ill,3,4,5,6,7,8,9,10,11,12}}),
Enc3@len@sub = Enc3@len - 1,
if Enc3@len@sub bsr 7 =:= 0 ->
[<<Enc3@len@sub:7>>,
align|Enc3@bin]
end
end].


dec_PublicPartyNumber(Bytes) ->

%% attribute number 1 with type PublicTypeOfNumber
{Term1,Bytes1} = dec_PublicTypeOfNumber(Bytes),

%% attribute number 2 with type IA5String
{Term2,Bytes2} = begin
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:4,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V7,V1@Buf8}  = {decode_chars(V1@V3, 4, {35,42,44,48,49,50,51,52,53,54,55,56,57}),V1@Buf4},
{V1@V7,V1@Buf8}
end,
{{'PublicPartyNumber',Term1,Term2},Bytes2}.

'enc_PrivatePartyNumber'(Val) ->
[begin
Enc1@element = element(2, Val),
enc_PrivateTypeOfNumber(Enc1@element)
end|begin
Enc2@element = element(3, Val),
Enc3@len = length(Enc2@element),
Enc3@bin = encode_chars(Enc2@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,2,ill,ill,ill,3,4,5,6,7,8,9,10,11,12}}),
Enc3@len@sub = Enc3@len - 1,
if Enc3@len@sub bsr 7 =:= 0 ->
[<<Enc3@len@sub:7>>,
align|Enc3@bin]
end
end].


dec_PrivatePartyNumber(Bytes) ->

%% attribute number 1 with type PrivateTypeOfNumber
{Term1,Bytes1} = dec_PrivateTypeOfNumber(Bytes),

%% attribute number 2 with type IA5String
{Term2,Bytes2} = begin
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:4,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V7,V1@Buf8}  = {decode_chars(V1@V3, 4, {35,42,44,48,49,50,51,52,53,54,55,56,57}),V1@Buf4},
{V1@V7,V1@Buf8}
end,
{{'PrivatePartyNumber',Term1,Term2},Bytes2}.

'enc_NumberDigits'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars(Val, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,2,ill,ill,ill,3,4,5,6,7,8,9,10,11,12}}),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 7 =:= 0 ->
[<<Enc1@len@sub:7>>,
align|Enc1@bin]
end.


dec_NumberDigits(Bytes) ->
begin
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:4,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V7,V1@Buf8}  = {decode_chars(V1@V3, 4, {35,42,44,48,49,50,51,52,53,54,55,56,57}),V1@Buf4},
{V1@V7,V1@Buf8}
end.

'enc_PublicTypeOfNumber'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= unknown ->
<<0:1,0:3>>;
ChoiceTag =:= internationalNumber ->
<<0:1,1:3>>;
ChoiceTag =:= nationalNumber ->
<<0:1,2:3>>;
ChoiceTag =:= networkSpecificNumber ->
<<0:1,3:3>>;
ChoiceTag =:= subscriberNumber ->
<<0:1,4:3>>;
ChoiceTag =:= abbreviatedNumber ->
<<0:1,5:3>>
end.


dec_PublicTypeOfNumber(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unknown,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{internationalNumber,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{nationalNumber,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{networkSpecificNumber,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{subscriberNumber,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{abbreviatedNumber,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_PrivateTypeOfNumber'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= unknown ->
<<0:1,0:3>>;
ChoiceTag =:= level2RegionalNumber ->
<<0:1,1:3>>;
ChoiceTag =:= level1RegionalNumber ->
<<0:1,2:3>>;
ChoiceTag =:= pISNSpecificNumber ->
<<0:1,3:3>>;
ChoiceTag =:= localNumber ->
<<0:1,4:3>>;
ChoiceTag =:= abbreviatedNumber ->
<<0:1,5:3>>
end.


dec_PrivateTypeOfNumber(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{unknown,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{level2RegionalNumber,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{level1RegionalNumber,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{pISNSpecificNumber,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{localNumber,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{abbreviatedNumber,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_MobileUIM'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'ansi-41-uim' ->
[<<0:1,0:1>>|'enc_ANSI-41-UIM'(ChoiceVal)];
ChoiceTag =:= 'gsm-uim' ->
[<<0:1,1:1>>|'enc_GSM-UIM'(ChoiceVal)]
end.


dec_MobileUIM(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_ANSI-41-UIM'(Bytes2)
end,
{{'ansi-41-uim',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_GSM-UIM'(Bytes2)
end,
{{'gsm-uim',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_TBCD-STRING'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars(Val, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
if Enc1@len < 128 ->
[align,
Enc1@len|Enc1@bin];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Enc1@bin];
true ->
[align|encode_fragmented(Enc1@bin, 4)]
end.


'dec_TBCD-STRING'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:4,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:4,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 4),
{V1@V8,V1@Buf9}
end,
{V1@V10,V1@Buf11}  = {decode_chars(V1@V0, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V1@Buf1},
{V1@V10,V1@Buf11}
end.

'enc_ANSI-41-UIM'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(9, Val),
Enc8@element = element(10, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(11, Val),
Enc10@element = element(12, Val),
if Enc9@element =:= asn1_NOVALUE ->
if Enc10@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@element = element(13, Val),
if Enc11@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc13@element = element(2, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@len = length(Enc13@element),
Enc14@bin = encode_chars(Enc13@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
Enc14@len@sub = Enc14@len - 3,
if 0 =< Enc14@len@sub, Enc14@len@sub < 14 ->
[<<Enc14@len@sub:4>>,
align|Enc14@bin]
end
end
end
end,
begin
Enc16@element = element(3, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@len = length(Enc16@element),
Enc17@bin = encode_chars(Enc16@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
Enc17@len@sub = Enc17@len - 3,
if 0 =< Enc17@len@sub, Enc17@len@sub < 14 ->
[<<Enc17@len@sub:4>>,
align|Enc17@bin]
end
end
end
end,
begin
Enc19@element = element(4, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@len = length(Enc19@element),
Enc20@bin = encode_chars(Enc19@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
Enc20@len@sub = Enc20@len - 3,
if 0 =< Enc20@len@sub, Enc20@len@sub < 14 ->
[<<Enc20@len@sub:4>>,
align|Enc20@bin]
end
end
end
end,
begin
Enc22@element = element(5, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@len = length(Enc22@element),
Enc23@bin = encode_chars(Enc22@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
Enc23@len@sub = Enc23@len - 3,
if 0 =< Enc23@len@sub, Enc23@len@sub < 14 ->
[<<Enc23@len@sub:4>>,
align|Enc23@bin]
end
end
end
end,
begin
Enc25@element = element(6, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@len = length(Enc25@element),
Enc26@bin = encode_chars(Enc25@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
if Enc26@len =:= 16 ->
[align|Enc26@bin]
end
end
end
end,
begin
Enc28@element = element(7, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc29@len = length(Enc28@element),
Enc29@bin = encode_chars(Enc28@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
Enc29@len@sub = Enc29@len - 3,
if 0 =< Enc29@len@sub, Enc29@len@sub < 14 ->
[<<Enc29@len@sub:4>>,
align|Enc29@bin]
end
end
end
end,
begin
Enc31@element = element(8, Val),
'enc_ANSI-41-UIM_system-id'(Enc31@element)
end,
begin
Enc32@element = element(9, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc33@len = byte_size(Enc32@element),
if Enc33@len =:= 1 ->
Enc32@element
end
end
end
end,
begin
Enc35@element = element(10, Val),
if Enc35@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc36@len = byte_size(Enc35@element),
if Enc36@len =:= 1 ->
Enc35@element
end
end
end
end,
begin
Enc38@element = element(11, Val),
if Enc38@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc39@len = byte_size(Enc38@element),
if Enc39@len =:= 1 ->
Enc38@element
end
end
end
end,
begin
Enc41@element = element(12, Val),
if Enc41@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc42@len = length(Enc41@element),
Enc42@bin = encode_chars(Enc41@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
if Enc42@len =:= 16 ->
[align|Enc42@bin]
end
end
end
end|begin
Enc44@element = element(13, Val),
if Enc44@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@len = length(Enc44@element),
Enc45@bin = encode_chars(Enc44@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
Enc45@len@sub = Enc45@len - 3,
if 0 =< Enc45@len@sub, Enc45@len@sub < 14 ->
[<<Enc45@len@sub:4>>,
align|Enc45@bin]
end
end
end
end].
'enc_ANSI-41-UIM_system-id'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= sid ->
begin
Enc2@len = length(ChoiceVal),
Enc2@bin = encode_chars(ChoiceVal, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 2 =:= 0 ->
[<<0:1,0:1,Enc2@len@sub:2>>,
align|Enc2@bin]
end
end;
ChoiceTag =:= mid ->
begin
Enc4@len = length(ChoiceVal),
Enc4@bin = encode_chars(ChoiceVal, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 2 =:= 0 ->
[<<0:1,1:1,Enc4@len@sub:2>>,
align|Enc4@bin]
end
end
end.

'dec_ANSI-41-UIM_system-id'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:4,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V7,V2@Buf8}  = {decode_chars(V2@V3, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V2@Buf4},
{V2@V7,V2@Buf8}
end
end,
{{sid,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:4,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars(V3@V3, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V3@Buf4},
{V3@V7,V3@Buf8}
end
end,
{{mid,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


'dec_ANSI-41-UIM'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:11,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type IA5String
{Term1,Bytes3} = case (Opt bsr 10) band 1 of
1 ->
begin
<<V3@V0:4/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 3,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:4,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars(V3@V3, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V3@Buf4},
{V3@V7,V3@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type IA5String
{Term2,Bytes4} = case (Opt bsr 9) band 1 of
1 ->
begin
<<V4@V0:4/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 3,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:4,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V7,V4@Buf8}  = {decode_chars(V4@V3, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V4@Buf4},
{V4@V7,V4@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type IA5String
{Term3,Bytes5} = case (Opt bsr 8) band 1 of
1 ->
begin
<<V5@V0:4/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 3,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/binary-unit:4,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V7,V5@Buf8}  = {decode_chars(V5@V3, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V5@Buf4},
{V5@V7,V5@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type IA5String
{Term4,Bytes6} = case (Opt bsr 7) band 1 of
1 ->
begin
<<V6@V0:4/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 3,
V6@Pad5 = bit_size(V6@Buf1) band 7,
<<_:V6@Pad5,V6@V3:V6@Add2/binary-unit:4,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V7,V6@Buf8}  = {decode_chars(V6@V3, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V6@Buf4},
{V6@V7,V6@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type IA5String
{Term5,Bytes7} = case (Opt bsr 6) band 1 of
1 ->
begin
V7@Pad2 = bit_size(Bytes6) band 7,
<<_:V7@Pad2,V7@V0:16/binary-unit:4,V7@Buf1/bitstring>> = Bytes6,
{V7@V4,V7@Buf5}  = {decode_chars(V7@V0, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V7@Buf1},
{V7@V4,V7@Buf5}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type IA5String
{Term6,Bytes8} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V8@V0:4/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes7,
V8@Add2 = V8@V0 + 3,
V8@Pad5 = bit_size(V8@Buf1) band 7,
<<_:V8@Pad5,V8@V3:V8@Add2/binary-unit:4,V8@Buf4/bitstring>> = V8@Buf1,
{V8@V7,V8@Buf8}  = {decode_chars(V8@V3, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V8@Buf4},
{V8@V7,V8@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type CHOICE
{Term7,Bytes9} = 'dec_ANSI-41-UIM_system-id'(Bytes8),

%% attribute number 8 with type OCTET STRING
{Term8,Bytes10} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V9@V0:1/binary-unit:8,V9@Buf1/bitstring>> = Bytes9,
V9@Conv2 = binary:copy(V9@V0),
{V9@Conv2,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type OCTET STRING
{Term9,Bytes11} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V10@V0:1/binary-unit:8,V10@Buf1/bitstring>> = Bytes10,
V10@Conv2 = binary:copy(V10@V0),
{V10@Conv2,V10@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type OCTET STRING
{Term10,Bytes12} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V11@V0:1/binary-unit:8,V11@Buf1/bitstring>> = Bytes11,
V11@Conv2 = binary:copy(V11@V0),
{V11@Conv2,V11@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 11 with type IA5String
{Term11,Bytes13} = case (Opt bsr 1) band 1 of
1 ->
begin
V12@Pad2 = bit_size(Bytes12) band 7,
<<_:V12@Pad2,V12@V0:16/binary-unit:4,V12@Buf1/bitstring>> = Bytes12,
{V12@V4,V12@Buf5}  = {decode_chars(V12@V0, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V12@Buf1},
{V12@V4,V12@Buf5}
end;
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 12 with type IA5String
{Term12,Bytes14} = case Opt band 1 of
1 ->
begin
<<V13@V0:4/unsigned-unit:1,V13@Buf1/bitstring>> = Bytes13,
V13@Add2 = V13@V0 + 3,
V13@Pad5 = bit_size(V13@Buf1) band 7,
<<_:V13@Pad5,V13@V3:V13@Add2/binary-unit:4,V13@Buf4/bitstring>> = V13@Buf1,
{V13@V7,V13@Buf8}  = {decode_chars(V13@V3, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V13@Buf4},
{V13@V7,V13@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% Extensions
{Extensions,Bytes15} = case Ext of
0 -> {<<>>,Bytes14};
1 ->
{V14@V0,V14@Buf1} = case Bytes14 of
<<0:1,V14@V3:6,V14@Buf4/bitstring>> ->
V14@Add5 = V14@V3 + 1,
{V14@Add5,V14@Buf4};
<<1:1,V14@Buf2/bitstring>> ->
V14@Pad6 = bit_size(V14@Buf2) band 7,
{V14@V3,V14@Buf4} = case V14@Buf2 of
<<_:V14@Pad6,0:1,V14@V8:7,V14@Buf9/bitstring>> when V14@V8 =/= 0 ->
{V14@V8,V14@Buf9};
<<_:V14@Pad6,1:1,0:1,V14@V9:14,V14@Buf10/bitstring>> when V14@V9 =/= 0 ->
{V14@V9,V14@Buf10}
end,
{V14@V3,V14@Buf4}
end,
<<V14@V11:V14@V0/bitstring-unit:1,V14@Buf12/bitstring>> = V14@Buf1,
{V14@V11,V14@Buf12}
end,
Bytes16= skipextensions(Bytes15, 1, Extensions),
{{'ANSI-41-UIM',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12},Bytes16}.

'enc_GSM-UIM'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@element = element(2, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@len = length(Enc8@element),
Enc9@bin = encode_chars(Enc8@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
Enc9@len@sub = Enc9@len - 3,
if 0 =< Enc9@len@sub, Enc9@len@sub < 14 ->
[<<Enc9@len@sub:4>>,
align|Enc9@bin]
end
end
end
end,
begin
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@len = byte_size(Enc11@element),
Enc12@len@sub = Enc12@len - 1,
if Enc12@len@sub bsr 2 =:= 0 ->
[<<Enc12@len@sub:2>>,
align|Enc11@element]
end
end
end
end,
begin
Enc14@element = element(4, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@len = length(Enc14@element),
Enc15@bin = encode_chars(Enc14@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
Enc15@len@sub = Enc15@len - 3,
if 0 =< Enc15@len@sub, Enc15@len@sub < 14 ->
[<<Enc15@len@sub:4>>,
align|Enc15@bin]
end
end
end
end,
begin
Enc17@element = element(5, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc18@len = length(Enc17@element),
Enc18@bin = encode_chars(Enc17@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
Enc18@len@sub = Enc18@len - 15,
if Enc18@len@sub bsr 1 =:= 0 ->
[<<Enc18@len@sub:1>>,
align|Enc18@bin]
end
end
end
end,
begin
Enc20@element = element(6, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc21@len = length(Enc20@element),
Enc21@bin = encode_chars(Enc20@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
Enc21@len@sub = Enc21@len - 1,
if Enc21@len@sub bsr 2 =:= 0 ->
[<<Enc21@len@sub:2>>,
align|Enc21@bin]
end
end
end
end|begin
Enc23@element = element(7, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc24@len = length(Enc23@element),
Enc24@bin = encode_chars(Enc23@element, 4, {34,{0,ill,ill,ill,ill,ill,ill,1,ill,ill,ill,ill,ill,2,3,4,5,6,7,8,9,10,11,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,ill,12,13,14}}),
Enc24@len@sub = Enc24@len - 1,
if Enc24@len@sub bsr 2 =:= 0 ->
[<<Enc24@len@sub:2>>,
align|Enc24@bin]
end
end
end
end].


'dec_GSM-UIM'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type IA5String
{Term1,Bytes3} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V3@V0:4/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 3,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:4,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars(V3@V3, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V3@Buf4},
{V3@V7,V3@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Conv7 = binary:copy(V4@V3),
{V4@Conv7,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type IA5String
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:4/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 3,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/binary-unit:4,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V7,V5@Buf8}  = {decode_chars(V5@V3, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V5@Buf4},
{V5@V7,V5@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type IA5String
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V6@V0:1/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 15,
V6@Pad5 = bit_size(V6@Buf1) band 7,
<<_:V6@Pad5,V6@V3:V6@Add2/binary-unit:4,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V7,V6@Buf8}  = {decode_chars(V6@V3, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V6@Buf4},
{V6@V7,V6@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type IA5String
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V7@V0:2/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes6,
V7@Add2 = V7@V0 + 1,
V7@Pad5 = bit_size(V7@Buf1) band 7,
<<_:V7@Pad5,V7@V3:V7@Add2/binary-unit:4,V7@Buf4/bitstring>> = V7@Buf1,
{V7@V7,V7@Buf8}  = {decode_chars(V7@V3, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V7@Buf4},
{V7@V7,V7@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type IA5String
{Term6,Bytes8} = case Opt band 1 of
1 ->
begin
<<V8@V0:2/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes7,
V8@Add2 = V8@V0 + 1,
V8@Pad5 = bit_size(V8@Buf1) band 7,
<<_:V8@Pad5,V8@V3:V8@Add2/binary-unit:4,V8@Buf4/bitstring>> = V8@Buf1,
{V8@V7,V8@Buf8}  = {decode_chars(V8@V3, 4, {35,42,48,49,50,51,52,53,54,55,56,57,97,98,99}),V8@Buf4},
{V8@V7,V8@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V9@V0,V9@Buf1} = case Bytes8 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
V9@Pad6 = bit_size(V9@Buf2) band 7,
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<_:V9@Pad6,0:1,V9@V8:7,V9@Buf9/bitstring>> when V9@V8 =/= 0 ->
{V9@V8,V9@Buf9};
<<_:V9@Pad6,1:1,0:1,V9@V9:14,V9@Buf10/bitstring>> when V9@V9 =/= 0 ->
{V9@V9,V9@Buf10}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V11:V9@V0/bitstring-unit:1,V9@Buf12/bitstring>> = V9@Buf1,
{V9@V11,V9@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'GSM-UIM',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_ExtendedAliasAddress'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
enc_AliasAddress(Enc4@element)
end,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_PresentationIndicator(Enc5@element)
end
end|begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
Enc7@element =:= userProvidedNotScreened ->
<<0:1,0:2>>;
Enc7@element =:= userProvidedVerifiedAndPassed ->
<<0:1,1:2>>;
Enc7@element =:= userProvidedVerifiedAndFailed ->
<<0:1,2:2>>;
Enc7@element =:= networkProvided ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end].


dec_ExtendedAliasAddress(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type AliasAddress
{Term1,Bytes3} = dec_AliasAddress(Bytes2),

%% attribute number 2 with type PresentationIndicator
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_PresentationIndicator(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = case Opt band 1 of
1 ->
begin
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:2/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> userProvidedNotScreened;
1 -> userProvidedVerifiedAndPassed;
2 -> userProvidedVerifiedAndFailed;
3 -> networkProvided
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
V3@Pad9 = bit_size(V3@Buf5) band 7,
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:V3@Pad9,0:1,V3@V11:7,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12};
<<_:V3@Pad9,1:1,0:1,V3@V12:14,V3@Buf13/bitstring>> when V3@V12 =/= 0 ->
{V3@V12,V3@Buf13}
end,
<<V3@V14:V3@V6/unit:8,V3@Buf15/bitstring>> = V3@Buf7,
{V3@V14,V3@Buf15}
end,
V3@Int16 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int16,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ExtendedAliasAddress',Term1,Term2,Term3},Bytes7}.

'enc_Endpoint'(Val) ->
Enc11@bitmap = extension_bitmap(Val, 12, 15),
Extensions = if Enc11@bitmap =:= 0 ->
[];
true ->
<<2:7,Enc11@bitmap:3>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(3, Val),
Enc3@element = element(4, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(5, Val),
Enc5@element = element(6, Val),
if Enc4@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@element = element(7, Val),
Enc7@element = element(8, Val),
if Enc6@element =:= asn1_NOVALUE ->
if Enc7@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc7@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@element = element(9, Val),
Enc9@element = element(10, Val),
if Enc8@element =:= asn1_NOVALUE ->
if Enc9@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc9@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(11, Val),
if Enc10@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc13@element = element(2, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc13@element)
end
end,
begin
Enc15@element = element(3, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_Endpoint_aliasAddress(Enc15@element)
end
end,
begin
Enc17@element = element(4, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_Endpoint_callSignalAddress(Enc17@element)
end
end,
begin
Enc19@element = element(5, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
enc_Endpoint_rasAddress(Enc19@element)
end
end,
begin
Enc21@element = element(6, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
enc_EndpointType(Enc21@element)
end
end,
begin
Enc23@element = element(7, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
enc_Endpoint_tokens(Enc23@element)
end
end,
begin
Enc25@element = element(8, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
enc_Endpoint_cryptoTokens(Enc25@element)
end
end,
begin
Enc27@element = element(9, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
Enc27@element bsr 7 =:= 0 ->
<<Enc27@element:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc27@element}}})
end
end,
begin
Enc30@element = element(10, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
enc_Endpoint_remoteExtensionAddress(Enc30@element)
end
end,
begin
Enc32@element = element(11, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
enc_Endpoint_destExtraCallInfo(Enc32@element)
end
end,
Extensions,
begin
Enc34@element = element(12, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc35@output = enc_AlternateTransportAddresses(Enc34@element),
Enc35@bin = complete(Enc35@output),
Enc35@len = byte_size(Enc35@bin),
if Enc35@len < 128 ->
[align,
Enc35@len|Enc35@bin];
Enc35@len < 16384 ->
[align,
<<2:2,Enc35@len:14>>|Enc35@bin];
true ->
[align|encode_fragmented(Enc35@bin, 8)]
end
end
end
end,
begin
Enc37@element = element(13, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc38@output = enc_CircuitInfo(Enc37@element),
Enc38@bin = complete(Enc38@output),
Enc38@len = byte_size(Enc38@bin),
if Enc38@len < 128 ->
[align,
Enc38@len|Enc38@bin];
Enc38@len < 16384 ->
[align,
<<2:2,Enc38@len:14>>|Enc38@bin];
true ->
[align|encode_fragmented(Enc38@bin, 8)]
end
end
end
end|begin
Enc40@element = element(14, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc41@output = enc_FeatureSet(Enc40@element),
Enc41@bin = complete(Enc41@output),
Enc41@len = byte_size(Enc41@bin),
if Enc41@len < 128 ->
[align,
Enc41@len|Enc41@bin];
Enc41@len < 16384 ->
[align,
<<2:2,Enc41@len:14>>|Enc41@bin];
true ->
[align|encode_fragmented(Enc41@bin, 8)]
end
end
end
end].
'enc_Endpoint_aliasAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_Endpoint_aliasAddress(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components87(V1@V0, V1@Buf1, []).

'enc_Endpoint_callSignalAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_TransportAddress(Comp) || Comp <- Val]].


dec_Endpoint_callSignalAddress(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components88(V1@V0, V1@Buf1, []).

'enc_Endpoint_rasAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_TransportAddress(Comp) || Comp <- Val]].


dec_Endpoint_rasAddress(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components89(V1@V0, V1@Buf1, []).

'enc_Endpoint_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_Endpoint_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components90(V1@V0, V1@Buf1, []).

'enc_Endpoint_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_Endpoint_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components91(V1@V0, V1@Buf1, []).

'enc_Endpoint_remoteExtensionAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_Endpoint_remoteExtensionAddress(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components92(V1@V0, V1@Buf1, []).

'enc_Endpoint_destExtraCallInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_Endpoint_destExtraCallInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components93(V1@V0, V1@Buf1, []).



dec_Endpoint(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:10,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case (Opt bsr 9) band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case (Opt bsr 8) band 1 of
1 ->
'dec_Endpoint_aliasAddress'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case (Opt bsr 7) band 1 of
1 ->
'dec_Endpoint_callSignalAddress'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case (Opt bsr 6) band 1 of
1 ->
'dec_Endpoint_rasAddress'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type EndpointType
{Term5,Bytes7} = case (Opt bsr 5) band 1 of
1 ->
dec_EndpointType(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case (Opt bsr 4) band 1 of
1 ->
'dec_Endpoint_tokens'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes9} = case (Opt bsr 3) band 1 of
1 ->
'dec_Endpoint_cryptoTokens'(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type INTEGER
{Term8,Bytes10} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:7/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes9,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
'dec_Endpoint_remoteExtensionAddress'(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes12} = case Opt band 1 of
1 ->
'dec_Endpoint_destExtraCallInfo'(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V4@V0,V4@Buf1} = case Bytes12 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 11 with type AlternateTransportAddresses
{Term11,Bytes14} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes13) band 7,
{V5@V0,V5@Buf1} = case Bytes13 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx11,_} = dec_AlternateTransportAddresses(V5@V0),
{TmpValx11,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type CircuitInfo
{Term12,Bytes15} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes14) band 7,
{V6@V0,V6@Buf1} = case Bytes14 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx12,_} = dec_CircuitInfo(V6@V0),
{TmpValx12,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type FeatureSet
{Term13,Bytes16} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes15) band 7,
{V7@V0,V7@Buf1} = case Bytes15 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx13,_} = dec_FeatureSet(V7@V0),
{TmpValx13,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,
Bytes17= skipextensions(Bytes16, 4, Extensions),
{{'Endpoint',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13},Bytes17}.

'enc_AlternateTransportAddresses'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 3, 4),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_AlternateTransportAddresses_annexE(Enc4@element)
end
end,
Extensions|begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@output = enc_AlternateTransportAddresses_sctp(Enc6@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[align|encode_fragmented(Enc7@bin, 8)]
end
end
end
end].
'enc_AlternateTransportAddresses_annexE'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_TransportAddress(Comp) || Comp <- Val]].


dec_AlternateTransportAddresses_annexE(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components94(V1@V0, V1@Buf1, []).

'enc_AlternateTransportAddresses_sctp'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_TransportAddress(Comp) || Comp <- Val]].


dec_AlternateTransportAddresses_sctp(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components95(V1@V0, V1@Buf1, []).



dec_AlternateTransportAddresses(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes3} = case Opt band 1 of
1 ->
'dec_AlternateTransportAddresses_annexE'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes5} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = 'dec_AlternateTransportAddresses_sctp'(V4@V0),
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,
Bytes6= skipextensions(Bytes5, 2, Extensions),
{{'AlternateTransportAddresses',Term1,Term2},Bytes6}.

'enc_UseSpecifiedTransport'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= tcp ->
<<0:1,0:1>>;
ChoiceTag =:= annexE ->
<<0:1,1:1>>;
ChoiceTag =:= sctp ->
begin
Enc3@output = [],
Enc3@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc3@bin]
end
end.


dec_UseSpecifiedTransport(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{tcp,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{annexE,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{sctp,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_AlternateGK'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_TransportAddress(Enc3@element)
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@len = length(Enc4@element),
Enc5@bin = encode_chars_16bit(Enc4@element),
Enc5@len@sub = Enc5@len - 1,
if Enc5@len@sub bsr 7 =:= 0 ->
[<<Enc5@len@sub:7>>,
align|Enc5@bin]
end
end
end
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= false ->
<<0:1>>;
Enc7@element =:= true ->
<<1:1>>
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element bsr 7 =:= 0 ->
<<Enc9@element:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@element}}})
end
end].


dec_AlternateGK(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type TransportAddress
{Term1,Bytes3} = dec_TransportAddress(Bytes2),

%% attribute number 2 with type BMPString
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V3@V0:7/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:16,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars_16bit(V3@V3),V3@Buf4},
{V3@V7,V3@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes5} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes4,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = begin
<<V5@V0:7/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes5,
{V5@V0,V5@Buf1}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'AlternateGK',Term1,Term2,Term3,Term4},Bytes8}.

'enc_AltGKInfo'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_AltGKInfo_alternateGatekeeper(Enc2@element)
end|begin
Enc3@element = element(3, Val),
if Enc3@element =:= false ->
<<0:1>>;
Enc3@element =:= true ->
<<1:1>>
end
end].
'enc_AltGKInfo_alternateGatekeeper'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AlternateGK(Comp) || Comp <- Val]].


dec_AltGKInfo_alternateGatekeeper(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components96(V1@V0, V1@Buf1, []).



dec_AltGKInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_AltGKInfo_alternateGatekeeper'(Bytes1),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'AltGKInfo',Term1,Term2},Bytes5}.

'enc_SecurityServiceMode'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:2>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= none ->
<<0:1,1:2>>;
ChoiceTag =:= default ->
<<0:1,2:2>>
end.


dec_SecurityServiceMode(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{none,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{default,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_SecurityCapabilities'(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc3@element)
end
end,
begin
Enc5@element = element(3, Val),
enc_SecurityServiceMode(Enc5@element)
end,
begin
Enc6@element = element(4, Val),
enc_SecurityServiceMode(Enc6@element)
end|begin
Enc7@element = element(5, Val),
enc_SecurityServiceMode(Enc7@element)
end].


dec_SecurityCapabilities(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type SecurityServiceMode
{Term2,Bytes4} = dec_SecurityServiceMode(Bytes3),

%% attribute number 3 with type SecurityServiceMode
{Term3,Bytes5} = dec_SecurityServiceMode(Bytes4),

%% attribute number 4 with type SecurityServiceMode
{Term4,Bytes6} = dec_SecurityServiceMode(Bytes5),

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V3@V0,V3@Buf1} = case Bytes6 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'SecurityCapabilities',Term1,Term2,Term3,Term4},Bytes8}.

'enc_SecurityErrors'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= securityWrongSyncTime ->
<<0:1,0:4>>;
ChoiceTag =:= securityReplay ->
<<0:1,1:4>>;
ChoiceTag =:= securityWrongGeneralID ->
<<0:1,2:4>>;
ChoiceTag =:= securityWrongSendersID ->
<<0:1,3:4>>;
ChoiceTag =:= securityIntegrityFailed ->
<<0:1,4:4>>;
ChoiceTag =:= securityWrongOID ->
<<0:1,5:4>>;
ChoiceTag =:= securityDHmismatch ->
<<0:1,6:4>>;
ChoiceTag =:= securityCertificateExpired ->
<<0:1,7:4>>;
ChoiceTag =:= securityCertificateDateInvalid ->
<<0:1,8:4>>;
ChoiceTag =:= securityCertificateRevoked ->
<<0:1,9:4>>;
ChoiceTag =:= securityCertificateNotReadable ->
<<0:1,10:4>>;
ChoiceTag =:= securityCertificateSignatureInvalid ->
<<0:1,11:4>>;
ChoiceTag =:= securityCertificateMissing ->
<<0:1,12:4>>;
ChoiceTag =:= securityCertificateIncomplete ->
<<0:1,13:4>>;
ChoiceTag =:= securityUnsupportedCertificateAlgOID ->
<<0:1,14:4>>;
ChoiceTag =:= securityUnknownCA ->
<<0:1,15:4>>
end.


dec_SecurityErrors(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityWrongSyncTime,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityReplay,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityWrongGeneralID,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityWrongSendersID,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityIntegrityFailed,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityWrongOID,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityDHmismatch,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityCertificateExpired,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityCertificateDateInvalid,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityCertificateRevoked,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityCertificateNotReadable,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityCertificateSignatureInvalid,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityCertificateMissing,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityCertificateIncomplete,Val},NewBytes};
14 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityUnsupportedCertificateAlgOID,Val},NewBytes};
15 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityUnknownCA,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_SecurityErrors2'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= securityWrongSyncTime ->
<<0:1,0:3>>;
ChoiceTag =:= securityReplay ->
<<0:1,1:3>>;
ChoiceTag =:= securityWrongGeneralID ->
<<0:1,2:3>>;
ChoiceTag =:= securityWrongSendersID ->
<<0:1,3:3>>;
ChoiceTag =:= securityIntegrityFailed ->
<<0:1,4:3>>;
ChoiceTag =:= securityWrongOID ->
<<0:1,5:3>>
end.


dec_SecurityErrors2(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityWrongSyncTime,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityReplay,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityWrongGeneralID,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityWrongSendersID,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityIntegrityFailed,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityWrongOID,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_H245Security'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:2>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= noSecurity ->
<<0:1,1:2>>;
ChoiceTag =:= tls ->
[<<0:1,2:2>>|enc_SecurityCapabilities(ChoiceVal)];
ChoiceTag =:= ipsec ->
[<<0:1,3:2>>|enc_SecurityCapabilities(ChoiceVal)]
end.


dec_H245Security(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noSecurity,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_SecurityCapabilities(Bytes2)
end,
{{tls,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_SecurityCapabilities(Bytes2)
end,
{{ipsec,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_QseriesOptions'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc4@element = element(3, Val),
if Enc2@element =:= false ->
if Enc4@element =:= false ->
<<0:1,0:1,0:1>>;
Enc4@element =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@element =:= true ->
if Enc4@element =:= false ->
<<0:1,1:1,0:1>>;
Enc4@element =:= true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc6@element = element(4, Val),
Enc8@element = element(5, Val),
if Enc6@element =:= false ->
if Enc8@element =:= false ->
<<0:1,0:1>>;
Enc8@element =:= true ->
<<0:1,1:1>>
end;
Enc6@element =:= true ->
if Enc8@element =:= false ->
<<1:1,0:1>>;
Enc8@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(6, Val),
Enc12@element = element(7, Val),
if Enc10@element =:= false ->
if Enc12@element =:= false ->
<<0:1,0:1>>;
Enc12@element =:= true ->
<<0:1,1:1>>
end;
Enc10@element =:= true ->
if Enc12@element =:= false ->
<<1:1,0:1>>;
Enc12@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc14@element = element(8, Val),
if Enc14@element =:= false ->
<<0:1>>;
Enc14@element =:= true ->
<<1:1>>
end
end|begin
Enc16@element = element(9, Val),
enc_Q954Details(Enc16@element)
end].


dec_QseriesOptions(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 8 with type Q954Details
{Term8,Bytes9} = dec_Q954Details(Bytes8),

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V9@V0,V9@Buf1} = case Bytes9 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
V9@Pad6 = bit_size(V9@Buf2) band 7,
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<_:V9@Pad6,0:1,V9@V8:7,V9@Buf9/bitstring>> when V9@V8 =/= 0 ->
{V9@V8,V9@Buf9};
<<_:V9@Pad6,1:1,0:1,V9@V9:14,V9@Buf10/bitstring>> when V9@V9 =/= 0 ->
{V9@V9,V9@Buf10}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V11:V9@V0/bitstring-unit:1,V9@Buf12/bitstring>> = V9@Buf1,
{V9@V11,V9@Buf12}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
{{'QseriesOptions',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes11}.

'enc_Q954Details'(Val) ->
Enc2@element = element(2, Val),
Enc4@element = element(3, Val),
if Enc2@element =:= false ->
if Enc4@element =:= false ->
<<0:1,0:1,0:1>>;
Enc4@element =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@element =:= true ->
if Enc4@element =:= false ->
<<0:1,1:1,0:1>>;
Enc4@element =:= true ->
<<0:1,1:1,1:1>>
end
end.


dec_Q954Details(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'Q954Details',Term1,Term2},Bytes5}.

'enc_GloballyUniqueID'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 16 ->
[align|Val]
end.


dec_GloballyUniqueID(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:16/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary:copy(V1@V0),
{V1@Conv4,V1@Buf1}
end.

'enc_ConferenceIdentifier'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 16 ->
[align|Val]
end.


dec_ConferenceIdentifier(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:16/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary:copy(V1@V0),
{V1@Conv4,V1@Buf1}
end.

'enc_RequestSeqNum'(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 65535 ->
[align|<<Val@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_RequestSeqNum(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
{V1@Add4,V1@Buf1}
end.

'enc_GatekeeperIdentifier'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars_16bit(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 7 =:= 0 ->
[<<Enc1@len@sub:7>>,
align|Enc1@bin]
end.


dec_GatekeeperIdentifier(Bytes) ->
begin
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:16,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V7,V1@Buf8}  = {decode_chars_16bit(V1@V3),V1@Buf4},
{V1@V7,V1@Buf8}
end.

'enc_BandWidth'(Val) ->
if Val bsr 32 =:= 0 ->
begin
Val@bin = binary:encode_unsigned(Val),
Val@bin_size0 = byte_size(Val@bin),
Val@bin_size = Val@bin_size0 - 1,
[<<Val@bin_size:2>>,
align|Val@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_BandWidth(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V3,V1@Buf4}
end.

'enc_CallReferenceValue'(Val) ->
if Val bsr 16 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CallReferenceValue(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_EndpointIdentifier'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars_16bit(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 7 =:= 0 ->
[<<Enc1@len@sub:7>>,
align|Enc1@bin]
end.


dec_EndpointIdentifier(Bytes) ->
begin
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:16,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V7,V1@Buf8}  = {decode_chars_16bit(V1@V3),V1@Buf4},
{V1@V7,V1@Buf8}
end.

'enc_ProtocolIdentifier'(Val) ->
Enc1@bin = encode_oid(Val),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len < 128 ->
[align,
Enc1@len|Enc1@bin];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Enc1@bin];
true ->
[align|encode_fragmented(Enc1@bin, 8)]
end.


dec_ProtocolIdentifier(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
<<V1@V8:V1@V0/binary-unit:8,V1@Buf9/bitstring>> = V1@Buf1,
V1@Conv10 = binary_to_list(V1@V8),
{V1@V11,V1@Buf12}  = {decode_oid(V1@Conv10),V1@Buf9},
{V1@V11,V1@Buf12}
end.

'enc_TimeToLive'(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 4294967295 ->
begin
Val@sub@bin = binary:encode_unsigned(Val@sub),
Val@sub@bin_size0 = byte_size(Val@sub@bin),
Val@sub@bin_size = Val@sub@bin_size0 - 1,
[<<Val@sub@bin_size:2>>,
align|Val@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_TimeToLive(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Add7 = V1@V3 + 1,
{V1@Add7,V1@Buf4}
end.

'enc_H248PackagesDescriptor'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


dec_H248PackagesDescriptor(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_H248SignalsDescriptor'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


dec_H248SignalsDescriptor(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_FeatureDescriptor'(Val) ->
'enc_GenericData'(Val).



dec_FeatureDescriptor(Bytes) ->
dec_GenericData(Bytes).

'enc_CallIdentifier'(Val) ->
Enc2@element = element(2, Val),
Enc3@len = byte_size(Enc2@element),
if Enc3@len =:= 16 ->
[<<0:1>>,
align|Enc2@element]
end.


dec_CallIdentifier(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:16/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv4 = binary:copy(V2@V0),
{V2@Conv4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'CallIdentifier',Term1},Bytes4}.

'enc_EncryptIntAlg'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:1>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= isoAlgorithm ->
begin
Enc3@bin = encode_oid(ChoiceVal),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 128 ->
[<<0:1,1:1>>,
align,
Enc3@len|Enc3@bin];
Enc3@len < 16384 ->
[<<0:1,1:1>>,
align,
<<2:2,Enc3@len:14>>|Enc3@bin];
true ->
[<<0:1,1:1>>,
align|encode_fragmented(Enc3@bin, 8)]
end
end
end.


dec_EncryptIntAlg(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7}
end,
<<V2@V8:V2@V0/binary-unit:8,V2@Buf9/bitstring>> = V2@Buf1,
V2@Conv10 = binary_to_list(V2@V8),
{V2@V11,V2@Buf12}  = {decode_oid(V2@Conv10),V2@Buf9},
{V2@V11,V2@Buf12}
end
end,
{{isoAlgorithm,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_NonIsoIntegrityMechanism'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'hMAC-MD5' ->
<<0:1,0:2>>;
ChoiceTag =:= 'hMAC-iso10118-2-s' ->
[<<0:1,1:2>>|enc_EncryptIntAlg(ChoiceVal)];
ChoiceTag =:= 'hMAC-iso10118-2-l' ->
[<<0:1,2:2>>|enc_EncryptIntAlg(ChoiceVal)];
ChoiceTag =:= 'hMAC-iso10118-3' ->
begin
Enc5@bin = encode_oid(ChoiceVal),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[<<0:1,3:2>>,
align,
Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<0:1,3:2>>,
align,
<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
[<<0:1,3:2>>,
align|encode_fragmented(Enc5@bin, 8)]
end
end
end.


dec_NonIsoIntegrityMechanism(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'hMAC-MD5',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_EncryptIntAlg(Bytes2)
end,
{{'hMAC-iso10118-2-s',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_EncryptIntAlg(Bytes2)
end,
{{'hMAC-iso10118-2-l',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end
end,
{{'hMAC-iso10118-3',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_IntegrityMechanism'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nonStandard ->
[<<0:1,0:2>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= digSig ->
<<0:1,1:2>>;
ChoiceTag =:= iso9797 ->
begin
Enc4@bin = encode_oid(ChoiceVal),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[<<0:1,2:2>>,
align,
Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<0:1,2:2>>,
align,
<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
[<<0:1,2:2>>,
align|encode_fragmented(Enc4@bin, 8)]
end
end;
ChoiceTag =:= nonIsoIM ->
[<<0:1,3:2>>|enc_NonIsoIntegrityMechanism(ChoiceVal)]
end.


dec_IntegrityMechanism(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{digSig,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end
end,
{{iso9797,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_NonIsoIntegrityMechanism(Bytes2)
end,
{{nonIsoIM,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ICV'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
Enc2@bin = encode_oid(Enc1@element),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 128 ->
[Enc2@len|Enc2@bin];
Enc2@len < 16384 ->
[<<2:2,Enc2@len:14>>|Enc2@bin];
true ->
encode_fragmented(Enc2@bin, 8)
end
end|begin
Enc3@element = element(3, Val),
Enc4@bits = bit_size(Enc3@element),
if Enc4@bits < 128 ->
[Enc4@bits|Enc3@element];
Enc4@bits < 16384 ->
[<<2:2,Enc4@bits:14>>|Enc3@element];
true ->
encode_fragmented(Enc3@element, 1)
end
end].


dec_ICV(Bytes) ->

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes1} = begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
<<V1@V8:V1@V0/binary-unit:8,V1@Buf9/bitstring>> = V1@Buf1,
V1@Conv10 = binary_to_list(V1@V8),
{V1@V11,V1@Buf12}  = {decode_oid(V1@Conv10),V1@Buf9},
{V1@V11,V1@Buf12}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:1,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:1,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 1),
{V2@V6,V2@Buf7}
end,
{V2@V8,V2@Buf9}  = {list_to_bitstring([V2@V0]),V2@Buf1},
{V2@V8,V2@Buf9}
end,
{{'ICV',Term1,Term2},Bytes2}.

'enc_FastStartToken'(Val) ->
'H235-SECURITY-MESSAGES':'enc_ClearToken'(Val).



dec_FastStartToken(Bytes) ->
'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes).

'enc_EncodedFastStartToken'(Val) ->
Enc1@output = enc_FastStartToken(Val),
Enc1@bin = complete(Enc1@output),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len < 128 ->
[align,
Enc1@len|Enc1@bin];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Enc1@bin];
true ->
[align|encode_fragmented(Enc1@bin, 8)]
end.


dec_EncodedFastStartToken(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
{V1@V10,V1@Buf11}  = begin
{Tmpval1,_} = dec_FastStartToken(V1@V0),
{Tmpval1,V1@Buf1}
end,
{V1@V10,V1@Buf11}
end.

'enc_CryptoH323Token'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= cryptoEPPwdHash ->
[<<0:1,0:3>>|enc_CryptoH323Token_cryptoEPPwdHash(ChoiceVal)];
ChoiceTag =:= cryptoGKPwdHash ->
[<<0:1,1:3>>|enc_CryptoH323Token_cryptoGKPwdHash(ChoiceVal)];
ChoiceTag =:= cryptoEPPwdEncr ->
[<<0:1,2:3>>|enc_CryptoH323Token_cryptoEPPwdEncr(ChoiceVal)];
ChoiceTag =:= cryptoGKPwdEncr ->
[<<0:1,3:3>>|enc_CryptoH323Token_cryptoGKPwdEncr(ChoiceVal)];
ChoiceTag =:= cryptoEPCert ->
[<<0:1,4:3>>|enc_CryptoH323Token_cryptoEPCert(ChoiceVal)];
ChoiceTag =:= cryptoGKCert ->
[<<0:1,5:3>>|enc_CryptoH323Token_cryptoGKCert(ChoiceVal)];
ChoiceTag =:= cryptoFastStart ->
[<<0:1,6:3>>|enc_CryptoH323Token_cryptoFastStart(ChoiceVal)];
ChoiceTag =:= nestedcryptoToken ->
[<<0:1,7:3>>|'H235-SECURITY-MESSAGES':enc_CryptoToken(ChoiceVal)]
end.
'enc_CryptoH323Token_cryptoEPPwdHash'(Val) ->
[begin
Enc1@element = element(2, Val),
enc_AliasAddress(Enc1@element)
end,
begin
Enc2@element = element(3, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 4294967295 ->
begin
Enc2@element@sub@bin = binary:encode_unsigned(Enc2@element@sub),
Enc2@element@sub@bin_size0 = byte_size(Enc2@element@sub@bin),
Enc2@element@sub@bin_size = Enc2@element@sub@bin_size0 - 1,
[<<Enc2@element@sub@bin_size:2>>,
align|Enc2@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end|begin
Enc4@element = element(4, Val),
enc_CryptoH323Token_cryptoEPPwdHash_token(Enc4@element)
end].
'enc_CryptoH323Token_cryptoEPPwdHash_token'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
Enc2@bin = encode_oid(Enc1@element),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 128 ->
[Enc2@len|Enc2@bin];
Enc2@len < 16384 ->
[<<2:2,Enc2@len:14>>|Enc2@bin];
true ->
encode_fragmented(Enc2@bin, 8)
end
end,
begin
Enc3@element = element(3, Val),
'H235-SECURITY-MESSAGES':enc_Params(Enc3@element)
end,
align|begin
Enc4@element = element(4, Val),
Enc5@bits = bit_size(Enc4@element),
if Enc5@bits < 128 ->
[Enc5@bits|Enc4@element];
Enc5@bits < 16384 ->
[<<2:2,Enc5@bits:14>>|Enc4@element];
true ->
encode_fragmented(Enc4@element, 1)
end
end].

dec_CryptoH323Token_cryptoEPPwdHash_token(Bytes) ->

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes1} = begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
<<V1@V8:V1@V0/binary-unit:8,V1@Buf9/bitstring>> = V1@Buf1,
V1@Conv10 = binary_to_list(V1@V8),
{V1@V11,V1@Buf12}  = {decode_oid(V1@Conv10),V1@Buf9},
{V1@V11,V1@Buf12}
end,

%% attribute number 2 with type Params
{Term2,Bytes2} = 'H235-SECURITY-MESSAGES':dec_Params(Bytes1),

%% attribute number 3 with type BIT STRING
{Term3,Bytes3} = begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:1,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:1,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 1),
{V2@V8,V2@Buf9}
end,
{V2@V10,V2@Buf11}  = {list_to_bitstring([V2@V0]),V2@Buf1},
{V2@V10,V2@Buf11}
end,
{{'CryptoH323Token_cryptoEPPwdHash_token',Term1,Term2,Term3},Bytes3}.


dec_CryptoH323Token_cryptoEPPwdHash(Bytes) ->

%% attribute number 1 with type AliasAddress
{Term1,Bytes1} = dec_AliasAddress(Bytes),

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Add7 = V1@V3 + 1,
{V1@Add7,V1@Buf4}
end,

%% attribute number 3 with type SEQUENCE
{Term3,Bytes3} = 'dec_CryptoH323Token_cryptoEPPwdHash_token'(Bytes2),
{{'CryptoH323Token_cryptoEPPwdHash',Term1,Term2,Term3},Bytes3}.

'enc_CryptoH323Token_cryptoGKPwdHash'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@len = length(Enc1@element),
Enc2@bin = encode_chars_16bit(Enc1@element),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 7 =:= 0 ->
[<<Enc2@len@sub:7>>,
align|Enc2@bin]
end
end,
begin
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - 1,
if 0 =< Enc3@element@sub, Enc3@element@sub < 4294967295 ->
begin
Enc3@element@sub@bin = binary:encode_unsigned(Enc3@element@sub),
Enc3@element@sub@bin_size0 = byte_size(Enc3@element@sub@bin),
Enc3@element@sub@bin_size = Enc3@element@sub@bin_size0 - 1,
[<<Enc3@element@sub@bin_size:2,0:6>>|Enc3@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end|begin
Enc5@element = element(4, Val),
enc_CryptoH323Token_cryptoGKPwdHash_token(Enc5@element)
end].
'enc_CryptoH323Token_cryptoGKPwdHash_token'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
Enc2@bin = encode_oid(Enc1@element),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 128 ->
[Enc2@len|Enc2@bin];
Enc2@len < 16384 ->
[<<2:2,Enc2@len:14>>|Enc2@bin];
true ->
encode_fragmented(Enc2@bin, 8)
end
end,
begin
Enc3@element = element(3, Val),
'H235-SECURITY-MESSAGES':enc_Params(Enc3@element)
end,
align|begin
Enc4@element = element(4, Val),
Enc5@bits = bit_size(Enc4@element),
if Enc5@bits < 128 ->
[Enc5@bits|Enc4@element];
Enc5@bits < 16384 ->
[<<2:2,Enc5@bits:14>>|Enc4@element];
true ->
encode_fragmented(Enc4@element, 1)
end
end].

dec_CryptoH323Token_cryptoGKPwdHash_token(Bytes) ->

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes1} = begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
<<V1@V8:V1@V0/binary-unit:8,V1@Buf9/bitstring>> = V1@Buf1,
V1@Conv10 = binary_to_list(V1@V8),
{V1@V11,V1@Buf12}  = {decode_oid(V1@Conv10),V1@Buf9},
{V1@V11,V1@Buf12}
end,

%% attribute number 2 with type Params
{Term2,Bytes2} = 'H235-SECURITY-MESSAGES':dec_Params(Bytes1),

%% attribute number 3 with type BIT STRING
{Term3,Bytes3} = begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:1,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:1,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 1),
{V2@V8,V2@Buf9}
end,
{V2@V10,V2@Buf11}  = {list_to_bitstring([V2@V0]),V2@Buf1},
{V2@V10,V2@Buf11}
end,
{{'CryptoH323Token_cryptoGKPwdHash_token',Term1,Term2,Term3},Bytes3}.


dec_CryptoH323Token_cryptoGKPwdHash(Bytes) ->

%% attribute number 1 with type BMPString
{Term1,Bytes1} = begin
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:16,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V7,V1@Buf8}  = {decode_chars_16bit(V1@V3),V1@Buf4},
{V1@V7,V1@Buf8}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
<<_:6,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Add6 = V2@V3 + 1,
{V2@Add6,V2@Buf4}
end,

%% attribute number 3 with type SEQUENCE
{Term3,Bytes3} = 'dec_CryptoH323Token_cryptoGKPwdHash_token'(Bytes2),
{{'CryptoH323Token_cryptoGKPwdHash',Term1,Term2,Term3},Bytes3}.

'enc_CryptoH323Token_cryptoEPPwdEncr'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
Enc2@bin = encode_oid(Enc1@element),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 128 ->
[Enc2@len|Enc2@bin];
Enc2@len < 16384 ->
[<<2:2,Enc2@len:14>>|Enc2@bin];
true ->
encode_fragmented(Enc2@bin, 8)
end
end,
begin
Enc3@element = element(3, Val),
'H235-SECURITY-MESSAGES':enc_Params(Enc3@element)
end,
align|begin
Enc4@element = element(4, Val),
Enc5@len = byte_size(Enc4@element),
if Enc5@len < 128 ->
[Enc5@len|Enc4@element];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc4@element];
true ->
encode_fragmented(Enc4@element, 8)
end
end].

dec_CryptoH323Token_cryptoEPPwdEncr(Bytes) ->

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes1} = begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
<<V1@V8:V1@V0/binary-unit:8,V1@Buf9/bitstring>> = V1@Buf1,
V1@Conv10 = binary_to_list(V1@V8),
{V1@V11,V1@Buf12}  = {decode_oid(V1@Conv10),V1@Buf9},
{V1@V11,V1@Buf12}
end,

%% attribute number 2 with type Params
{Term2,Bytes2} = 'H235-SECURITY-MESSAGES':dec_Params(Bytes1),

%% attribute number 3 with type OCTET STRING
{Term3,Bytes3} = begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end,
V2@Conv10 = binary:copy(V2@V0),
{V2@Conv10,V2@Buf1}
end,
{{'CryptoH323Token_cryptoEPPwdEncr',Term1,Term2,Term3},Bytes3}.

'enc_CryptoH323Token_cryptoGKPwdEncr'(Val) ->
[align,
begin
Enc1@element = element(2, Val),
Enc2@bin = encode_oid(Enc1@element),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 128 ->
[Enc2@len|Enc2@bin];
Enc2@len < 16384 ->
[<<2:2,Enc2@len:14>>|Enc2@bin];
true ->
encode_fragmented(Enc2@bin, 8)
end
end,
begin
Enc3@element = element(3, Val),
'H235-SECURITY-MESSAGES':enc_Params(Enc3@element)
end,
align|begin
Enc4@element = element(4, Val),
Enc5@len = byte_size(Enc4@element),
if Enc5@len < 128 ->
[Enc5@len|Enc4@element];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc4@element];
true ->
encode_fragmented(Enc4@element, 8)
end
end].

dec_CryptoH323Token_cryptoGKPwdEncr(Bytes) ->

%% attribute number 1 with type OBJECT IDENTIFIER
{Term1,Bytes1} = begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
<<V1@V8:V1@V0/binary-unit:8,V1@Buf9/bitstring>> = V1@Buf1,
V1@Conv10 = binary_to_list(V1@V8),
{V1@V11,V1@Buf12}  = {decode_oid(V1@Conv10),V1@Buf9},
{V1@V11,V1@Buf12}
end,

%% attribute number 2 with type Params
{Term2,Bytes2} = 'H235-SECURITY-MESSAGES':dec_Params(Bytes1),

%% attribute number 3 with type OCTET STRING
{Term3,Bytes3} = begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end,
V2@Conv10 = binary:copy(V2@V0),
{V2@Conv10,V2@Buf1}
end,
{{'CryptoH323Token_cryptoGKPwdEncr',Term1,Term2,Term3},Bytes3}.

'enc_CryptoH323Token_cryptoEPCert'(Val) ->
[begin
Enc1@element = element(2, Val),
'H235-SECURITY-MESSAGES':enc_EncodedPwdCertToken(Enc1@element)
end,
align,
begin
Enc2@element = element(3, Val),
Enc3@bin = encode_oid(Enc2@element),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 128 ->
[Enc3@len|Enc3@bin];
Enc3@len < 16384 ->
[<<2:2,Enc3@len:14>>|Enc3@bin];
true ->
encode_fragmented(Enc3@bin, 8)
end
end,
begin
Enc4@element = element(4, Val),
'H235-SECURITY-MESSAGES':enc_Params(Enc4@element)
end,
align|begin
Enc5@element = element(5, Val),
Enc6@bits = bit_size(Enc5@element),
if Enc6@bits < 128 ->
[Enc6@bits|Enc5@element];
Enc6@bits < 16384 ->
[<<2:2,Enc6@bits:14>>|Enc5@element];
true ->
encode_fragmented(Enc5@element, 1)
end
end].

dec_CryptoH323Token_cryptoEPCert(Bytes) ->

%% attribute number 1 with type EncodedPwdCertToken
{Term1,Bytes1} = 'H235-SECURITY-MESSAGES':dec_EncodedPwdCertToken(Bytes),

%% attribute number 2 with type OBJECT IDENTIFIER
{Term2,Bytes2} = begin
V1@Pad3 = bit_size(Bytes1) band 7,
{V1@V0,V1@Buf1} = case Bytes1 of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
<<V1@V8:V1@V0/binary-unit:8,V1@Buf9/bitstring>> = V1@Buf1,
V1@Conv10 = binary_to_list(V1@V8),
{V1@V11,V1@Buf12}  = {decode_oid(V1@Conv10),V1@Buf9},
{V1@V11,V1@Buf12}
end,

%% attribute number 3 with type Params
{Term3,Bytes3} = 'H235-SECURITY-MESSAGES':dec_Params(Bytes2),

%% attribute number 4 with type BIT STRING
{Term4,Bytes4} = begin
V2@Pad3 = bit_size(Bytes3) band 7,
{V2@V0,V2@Buf1} = case Bytes3 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:1,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:1,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 1),
{V2@V8,V2@Buf9}
end,
{V2@V10,V2@Buf11}  = {list_to_bitstring([V2@V0]),V2@Buf1},
{V2@V10,V2@Buf11}
end,
{{'CryptoH323Token_cryptoEPCert',Term1,Term2,Term3,Term4},Bytes4}.

'enc_CryptoH323Token_cryptoGKCert'(Val) ->
[begin
Enc1@element = element(2, Val),
'H235-SECURITY-MESSAGES':enc_EncodedPwdCertToken(Enc1@element)
end,
align,
begin
Enc2@element = element(3, Val),
Enc3@bin = encode_oid(Enc2@element),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 128 ->
[Enc3@len|Enc3@bin];
Enc3@len < 16384 ->
[<<2:2,Enc3@len:14>>|Enc3@bin];
true ->
encode_fragmented(Enc3@bin, 8)
end
end,
begin
Enc4@element = element(4, Val),
'H235-SECURITY-MESSAGES':enc_Params(Enc4@element)
end,
align|begin
Enc5@element = element(5, Val),
Enc6@bits = bit_size(Enc5@element),
if Enc6@bits < 128 ->
[Enc6@bits|Enc5@element];
Enc6@bits < 16384 ->
[<<2:2,Enc6@bits:14>>|Enc5@element];
true ->
encode_fragmented(Enc5@element, 1)
end
end].

dec_CryptoH323Token_cryptoGKCert(Bytes) ->

%% attribute number 1 with type EncodedPwdCertToken
{Term1,Bytes1} = 'H235-SECURITY-MESSAGES':dec_EncodedPwdCertToken(Bytes),

%% attribute number 2 with type OBJECT IDENTIFIER
{Term2,Bytes2} = begin
V1@Pad3 = bit_size(Bytes1) band 7,
{V1@V0,V1@Buf1} = case Bytes1 of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
<<V1@V8:V1@V0/binary-unit:8,V1@Buf9/bitstring>> = V1@Buf1,
V1@Conv10 = binary_to_list(V1@V8),
{V1@V11,V1@Buf12}  = {decode_oid(V1@Conv10),V1@Buf9},
{V1@V11,V1@Buf12}
end,

%% attribute number 3 with type Params
{Term3,Bytes3} = 'H235-SECURITY-MESSAGES':dec_Params(Bytes2),

%% attribute number 4 with type BIT STRING
{Term4,Bytes4} = begin
V2@Pad3 = bit_size(Bytes3) band 7,
{V2@V0,V2@Buf1} = case Bytes3 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:1,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:1,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 1),
{V2@V8,V2@Buf9}
end,
{V2@V10,V2@Buf11}  = {list_to_bitstring([V2@V0]),V2@Buf1},
{V2@V10,V2@Buf11}
end,
{{'CryptoH323Token_cryptoGKCert',Term1,Term2,Term3,Term4},Bytes4}.

'enc_CryptoH323Token_cryptoFastStart'(Val) ->
[begin
Enc1@element = element(2, Val),
enc_EncodedFastStartToken(Enc1@element)
end,
align,
begin
Enc2@element = element(3, Val),
Enc3@bin = encode_oid(Enc2@element),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 128 ->
[Enc3@len|Enc3@bin];
Enc3@len < 16384 ->
[<<2:2,Enc3@len:14>>|Enc3@bin];
true ->
encode_fragmented(Enc3@bin, 8)
end
end,
begin
Enc4@element = element(4, Val),
'H235-SECURITY-MESSAGES':enc_Params(Enc4@element)
end,
align|begin
Enc5@element = element(5, Val),
Enc6@bits = bit_size(Enc5@element),
if Enc6@bits < 128 ->
[Enc6@bits|Enc5@element];
Enc6@bits < 16384 ->
[<<2:2,Enc6@bits:14>>|Enc5@element];
true ->
encode_fragmented(Enc5@element, 1)
end
end].

dec_CryptoH323Token_cryptoFastStart(Bytes) ->

%% attribute number 1 with type EncodedFastStartToken
{Term1,Bytes1} = dec_EncodedFastStartToken(Bytes),

%% attribute number 2 with type OBJECT IDENTIFIER
{Term2,Bytes2} = begin
V1@Pad3 = bit_size(Bytes1) band 7,
{V1@V0,V1@Buf1} = case Bytes1 of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
<<V1@V8:V1@V0/binary-unit:8,V1@Buf9/bitstring>> = V1@Buf1,
V1@Conv10 = binary_to_list(V1@V8),
{V1@V11,V1@Buf12}  = {decode_oid(V1@Conv10),V1@Buf9},
{V1@V11,V1@Buf12}
end,

%% attribute number 3 with type Params
{Term3,Bytes3} = 'H235-SECURITY-MESSAGES':dec_Params(Bytes2),

%% attribute number 4 with type BIT STRING
{Term4,Bytes4} = begin
V2@Pad3 = bit_size(Bytes3) band 7,
{V2@V0,V2@Buf1} = case Bytes3 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:1,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:1,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 1),
{V2@V8,V2@Buf9}
end,
{V2@V10,V2@Buf11}  = {list_to_bitstring([V2@V0]),V2@Buf1},
{V2@V10,V2@Buf11}
end,
{{'CryptoH323Token_cryptoFastStart',Term1,Term2,Term3,Term4},Bytes4}.



dec_CryptoH323Token(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_CryptoH323Token_cryptoEPPwdHash'(Bytes2)
end,
{{cryptoEPPwdHash,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_CryptoH323Token_cryptoGKPwdHash'(Bytes2)
end,
{{cryptoGKPwdHash,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_CryptoH323Token_cryptoEPPwdEncr'(Bytes2)
end,
{{cryptoEPPwdEncr,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
'dec_CryptoH323Token_cryptoGKPwdEncr'(Bytes2)
end,
{{cryptoGKPwdEncr,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
'dec_CryptoH323Token_cryptoEPCert'(Bytes2)
end,
{{cryptoEPCert,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
'dec_CryptoH323Token_cryptoGKCert'(Bytes2)
end,
{{cryptoGKCert,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
'dec_CryptoH323Token_cryptoFastStart'(Bytes2)
end,
{{cryptoFastStart,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
'H235-SECURITY-MESSAGES':dec_CryptoToken(Bytes2)
end,
{{nestedcryptoToken,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_DataRate'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc4@element)
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element bsr 32 =:= 0 ->
begin
Enc6@element@bin = binary:encode_unsigned(Enc6@element),
Enc6@element@bin_size0 = byte_size(Enc6@element@bin),
Enc6@element@bin_size = Enc6@element@bin_size0 - 1,
[<<Enc6@element@bin_size:2>>,
align|Enc6@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end|begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@element@sub = Enc8@element - 1,
if Enc8@element@sub bsr 8 =:= 0 ->
[Enc8@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc8@element}}})
end
end
end
end].


dec_DataRate(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case Opt band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes4) band 7,
<<_:V4@Pad2,V4@V0:1/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes4,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'DataRate',Term1,Term2,Term3},Bytes7}.

'enc_CallLinkage'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@len = byte_size(Enc4@element),
if Enc5@len =:= 16 ->
[align|Enc4@element]
end
end
end
end|begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@len = byte_size(Enc7@element),
if Enc8@len =:= 16 ->
[align|Enc7@element]
end
end
end
end].


dec_CallLinkage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:16/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:16/binary-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Conv4 = binary:copy(V4@V0),
{V4@Conv4,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'CallLinkage',Term1,Term2},Bytes6}.

'enc_SupportedPrefix'(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc3@element)
end
end|begin
Enc5@element = element(3, Val),
enc_AliasAddress(Enc5@element)
end].


dec_SupportedPrefix(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type AliasAddress
{Term2,Bytes4} = dec_AliasAddress(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'SupportedPrefix',Term1,Term2},Bytes6}.

'enc_CapacityReportingCapability'(Val) ->
Enc2@element = element(2, Val),
if Enc2@element =:= false ->
<<0:1,0:1>>;
Enc2@element =:= true ->
<<0:1,1:1>>
end.


dec_CapacityReportingCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'CapacityReportingCapability',Term1},Bytes4}.

'enc_CapacityReportingSpecification'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_CapacityReportingSpecification_when(Enc2@element)
end].
'enc_CapacityReportingSpecification_when'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
[]
end
end|begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
[]
end
end].

dec_CapacityReportingSpecification_when(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NULL
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
ignore,
{'NULL',Bytes2}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type NULL
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
ignore,
{'NULL',Bytes3}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'CapacityReportingSpecification_when',Term1,Term2},Bytes6}.



dec_CapacityReportingSpecification(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes2} = 'dec_CapacityReportingSpecification_when'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'CapacityReportingSpecification',Term1},Bytes4}.

'enc_CallCapacity'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCapacityInfo(Enc4@element)
end
end|begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCapacityInfo(Enc6@element)
end
end].


dec_CallCapacity(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CallCapacityInfo
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_CallCapacityInfo(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type CallCapacityInfo
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_CallCapacityInfo(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'CallCapacity',Term1,Term2},Bytes6}.

'enc_CallCapacityInfo'(Val) ->
Enc12@bitmap = extension_bitmap(Val, 13, 14),
Extensions = if Enc12@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(3, Val),
Enc3@element = element(4, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(5, Val),
Enc5@element = element(6, Val),
if Enc4@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@element = element(7, Val),
Enc7@element = element(8, Val),
if Enc6@element =:= asn1_NOVALUE ->
if Enc7@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc7@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@element = element(9, Val),
Enc9@element = element(10, Val),
if Enc8@element =:= asn1_NOVALUE ->
if Enc9@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc9@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc10@element = element(11, Val),
Enc11@element = element(12, Val),
if Enc10@element =:= asn1_NOVALUE ->
if Enc11@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc11@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc14@element = element(2, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCapacityInfo_voiceGwCallsAvailable(Enc14@element)
end
end,
begin
Enc16@element = element(3, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCapacityInfo_h310GwCallsAvailable(Enc16@element)
end
end,
begin
Enc18@element = element(4, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCapacityInfo_h320GwCallsAvailable(Enc18@element)
end
end,
begin
Enc20@element = element(5, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCapacityInfo_h321GwCallsAvailable(Enc20@element)
end
end,
begin
Enc22@element = element(6, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCapacityInfo_h322GwCallsAvailable(Enc22@element)
end
end,
begin
Enc24@element = element(7, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCapacityInfo_h323GwCallsAvailable(Enc24@element)
end
end,
begin
Enc26@element = element(8, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCapacityInfo_h324GwCallsAvailable(Enc26@element)
end
end,
begin
Enc28@element = element(9, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCapacityInfo_t120OnlyGwCallsAvailable(Enc28@element)
end
end,
begin
Enc30@element = element(10, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCapacityInfo_t38FaxAnnexbOnlyGwCallsAvailable(Enc30@element)
end
end,
begin
Enc32@element = element(11, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCapacityInfo_terminalCallsAvailable(Enc32@element)
end
end,
begin
Enc34@element = element(12, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCapacityInfo_mcuCallsAvailable(Enc34@element)
end
end,
Extensions|begin
Enc36@element = element(13, Val),
if Enc36@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc37@output = enc_CallCapacityInfo_sipGwCallsAvailable(Enc36@element),
Enc37@bin = complete(Enc37@output),
Enc37@len = byte_size(Enc37@bin),
if Enc37@len < 128 ->
[align,
Enc37@len|Enc37@bin];
Enc37@len < 16384 ->
[align,
<<2:2,Enc37@len:14>>|Enc37@bin];
true ->
[align|encode_fragmented(Enc37@bin, 8)]
end
end
end
end].
'enc_CallCapacityInfo_voiceGwCallsAvailable'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CallsAvailable(Comp) || Comp <- Val]].


dec_CallCapacityInfo_voiceGwCallsAvailable(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components97(V1@V0, V1@Buf1, []).

'enc_CallCapacityInfo_h310GwCallsAvailable'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CallsAvailable(Comp) || Comp <- Val]].


dec_CallCapacityInfo_h310GwCallsAvailable(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components98(V1@V0, V1@Buf1, []).

'enc_CallCapacityInfo_h320GwCallsAvailable'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CallsAvailable(Comp) || Comp <- Val]].


dec_CallCapacityInfo_h320GwCallsAvailable(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components99(V1@V0, V1@Buf1, []).

'enc_CallCapacityInfo_h321GwCallsAvailable'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CallsAvailable(Comp) || Comp <- Val]].


dec_CallCapacityInfo_h321GwCallsAvailable(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components100(V1@V0, V1@Buf1, []).

'enc_CallCapacityInfo_h322GwCallsAvailable'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CallsAvailable(Comp) || Comp <- Val]].


dec_CallCapacityInfo_h322GwCallsAvailable(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components101(V1@V0, V1@Buf1, []).

'enc_CallCapacityInfo_h323GwCallsAvailable'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CallsAvailable(Comp) || Comp <- Val]].


dec_CallCapacityInfo_h323GwCallsAvailable(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components102(V1@V0, V1@Buf1, []).

'enc_CallCapacityInfo_h324GwCallsAvailable'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CallsAvailable(Comp) || Comp <- Val]].


dec_CallCapacityInfo_h324GwCallsAvailable(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components103(V1@V0, V1@Buf1, []).

'enc_CallCapacityInfo_t120OnlyGwCallsAvailable'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CallsAvailable(Comp) || Comp <- Val]].


dec_CallCapacityInfo_t120OnlyGwCallsAvailable(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components104(V1@V0, V1@Buf1, []).

'enc_CallCapacityInfo_t38FaxAnnexbOnlyGwCallsAvailable'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CallsAvailable(Comp) || Comp <- Val]].


dec_CallCapacityInfo_t38FaxAnnexbOnlyGwCallsAvailable(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components105(V1@V0, V1@Buf1, []).

'enc_CallCapacityInfo_terminalCallsAvailable'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CallsAvailable(Comp) || Comp <- Val]].


dec_CallCapacityInfo_terminalCallsAvailable(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components106(V1@V0, V1@Buf1, []).

'enc_CallCapacityInfo_mcuCallsAvailable'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CallsAvailable(Comp) || Comp <- Val]].


dec_CallCapacityInfo_mcuCallsAvailable(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components107(V1@V0, V1@Buf1, []).

'enc_CallCapacityInfo_sipGwCallsAvailable'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CallsAvailable(Comp) || Comp <- Val]].


dec_CallCapacityInfo_sipGwCallsAvailable(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components108(V1@V0, V1@Buf1, []).



dec_CallCapacityInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:11,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes3} = case (Opt bsr 10) band 1 of
1 ->
'dec_CallCapacityInfo_voiceGwCallsAvailable'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case (Opt bsr 9) band 1 of
1 ->
'dec_CallCapacityInfo_h310GwCallsAvailable'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case (Opt bsr 8) band 1 of
1 ->
'dec_CallCapacityInfo_h320GwCallsAvailable'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case (Opt bsr 7) band 1 of
1 ->
'dec_CallCapacityInfo_h321GwCallsAvailable'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case (Opt bsr 6) band 1 of
1 ->
'dec_CallCapacityInfo_h322GwCallsAvailable'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case (Opt bsr 5) band 1 of
1 ->
'dec_CallCapacityInfo_h323GwCallsAvailable'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes9} = case (Opt bsr 4) band 1 of
1 ->
'dec_CallCapacityInfo_h324GwCallsAvailable'(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes10} = case (Opt bsr 3) band 1 of
1 ->
'dec_CallCapacityInfo_t120OnlyGwCallsAvailable'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes11} = case (Opt bsr 2) band 1 of
1 ->
'dec_CallCapacityInfo_t38FaxAnnexbOnlyGwCallsAvailable'(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes12} = case (Opt bsr 1) band 1 of
1 ->
'dec_CallCapacityInfo_terminalCallsAvailable'(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes13} = case Opt band 1 of
1 ->
'dec_CallCapacityInfo_mcuCallsAvailable'(Bytes12);
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% Extensions
{Extensions,Bytes14} = case Ext of
0 -> {<<>>,Bytes13};
1 ->
{V3@V0,V3@Buf1} = case Bytes13 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 12 with type SEQUENCE OF
{Term12,Bytes15} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes14) band 7,
{V4@V0,V4@Buf1} = case Bytes14 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx12,_} = 'dec_CallCapacityInfo_sipGwCallsAvailable'(V4@V0),
{TmpValx12,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,
Bytes16= skipextensions(Bytes15, 2, Extensions),
{{'CallCapacityInfo',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12},Bytes16}.

'enc_CallsAvailable'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 4, 5),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element bsr 32 =:= 0 ->
begin
Enc4@element@bin = binary:encode_unsigned(Enc4@element),
Enc4@element@bin_size0 = byte_size(Enc4@element@bin),
Enc4@element@bin_size = Enc4@element@bin_size0 - 1,
[<<Enc4@element@bin_size:2>>,
align|Enc4@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@bin = list_to_binary(Enc6@element),
Enc7@len = byte_size(Enc7@bin),
Enc7@len@sub = Enc7@len - 1,
if Enc7@len@sub bsr 7 =:= 0 ->
[<<Enc7@len@sub:7,0:1>>|Enc7@bin]
end
end
end
end,
Extensions|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_CarrierInfo(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end].


dec_CallsAvailable(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% attribute number 2 with type IA5String
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Conv7 = binary_to_list(V4@V3),
{V4@Conv7,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 3 with type CarrierInfo
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes5) band 7,
{V6@V0,V6@Buf1} = case Bytes5 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx3,_} = dec_CarrierInfo(V6@V0),
{TmpValx3,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,
Bytes7= skipextensions(Bytes6, 2, Extensions),
{{'CallsAvailable',Term1,Term2,Term3},Bytes7}.

'enc_CircuitInfo'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_CircuitIdentifier(Enc5@element)
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_CircuitIdentifier(Enc7@element)
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_CircuitInfo_genericData(Enc9@element)
end
end].
'enc_CircuitInfo_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_CircuitInfo_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components109(V1@V0, V1@Buf1, []).



dec_CircuitInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CircuitIdentifier
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
dec_CircuitIdentifier(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type CircuitIdentifier
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_CircuitIdentifier(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_CircuitInfo_genericData'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'CircuitInfo',Term1,Term2,Term3},Bytes7}.

'enc_CircuitIdentifier'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 4, 5),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(3, Val),
if Enc2@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_CicInfo(Enc5@element)
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_GroupID(Enc7@element)
end
end,
Extensions|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_CarrierInfo(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end].


dec_CircuitIdentifier(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CicInfo
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_CicInfo(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type GroupID
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_GroupID(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 3 with type CarrierInfo
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes5) band 7,
{V4@V0,V4@Buf1} = case Bytes5 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx3,_} = dec_CarrierInfo(V4@V0),
{TmpValx3,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,
Bytes7= skipextensions(Bytes6, 2, Extensions),
{{'CircuitIdentifier',Term1,Term2,Term3},Bytes7}.

'enc_CicInfo'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_CicInfo_cic(Enc2@element)
end|begin
Enc3@element = element(3, Val),
Enc4@len = byte_size(Enc3@element),
Enc4@len@sub = Enc4@len - 2,
if Enc4@len@sub bsr 2 =:= 0 ->
[<<Enc4@len@sub:2>>,
align|Enc3@element]
end
end].
'enc_CicInfo_cic'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
Enc1@len@sub = Enc1@len - 2,
if 0 =< Enc1@len@sub, Enc1@len@sub < 3 ->
[<<Enc1@len@sub:2,0:6>>|Comp]
end
end || Comp <- Val]].


dec_CicInfo_cic(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components110(V1@V0, V1@Buf1, []).



dec_CicInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_CicInfo_cic'(Bytes1),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 2,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Conv7 = binary:copy(V2@V3),
{V2@Conv7,V2@Buf4}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'CicInfo',Term1,Term2},Bytes5}.

'enc_GroupID'(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
true ->
enc_GroupID_member(Enc3@element)
end
end|begin
Enc5@element = element(3, Val),
Enc6@bin = list_to_binary(Enc5@element),
Enc6@len = byte_size(Enc6@bin),
Enc6@len@sub = Enc6@len - 1,
if Enc6@len@sub bsr 7 =:= 0 ->
[<<Enc6@len@sub:7>>,
align|Enc6@bin]
end
end].
'enc_GroupID_member'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[if Comp bsr 16 =:= 0 ->
<<Comp:16>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]].


dec_GroupID_member(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components111(V1@V0, V1@Buf1, []).



dec_GroupID(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes3} = case Opt band 1 of
1 ->
'dec_GroupID_member'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type IA5String
{Term2,Bytes4} = begin
<<V3@V0:7/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Conv7 = binary_to_list(V3@V3),
{V3@Conv7,V3@Buf4}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:7,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:7,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'GroupID',Term1,Term2},Bytes6}.

'enc_CarrierInfo'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@len = byte_size(Enc4@element),
Enc5@len@sub = Enc5@len - 3,
if Enc5@len@sub bsr 1 =:= 0 ->
[<<Enc5@len@sub:1>>,
align|Enc4@element]
end
end
end
end|begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@bin = list_to_binary(Enc7@element),
Enc8@len = byte_size(Enc8@bin),
Enc8@len@sub = Enc8@len - 1,
if Enc8@len@sub bsr 7 =:= 0 ->
[<<Enc8@len@sub:7>>,
align|Enc8@bin]
end
end
end
end].


dec_CarrierInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:1/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 3,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/binary-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Conv7 = binary:copy(V3@V3),
{V3@Conv7,V3@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type IA5String
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Conv7 = binary_to_list(V4@V3),
{V4@Conv7,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'CarrierInfo',Term1,Term2},Bytes6}.

'enc_ServiceControlDescriptor'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= url ->
begin
Enc2@bin = list_to_binary(ChoiceVal),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 513 ->
[<<0:1,0:2>>,
align,
<<Enc2@len:16>>|Enc2@bin]
end
end;
ChoiceTag =:= signal ->
begin
Enc4@len = byte_size(ChoiceVal),
if Enc4@len < 128 ->
[<<0:1,1:2>>,
align,
Enc4@len|ChoiceVal];
Enc4@len < 16384 ->
[<<0:1,1:2>>,
align,
<<2:2,Enc4@len:14>>|ChoiceVal];
true ->
[<<0:1,1:2>>,
align|encode_fragmented(ChoiceVal, 8)]
end
end;
ChoiceTag =:= nonStandard ->
[<<0:1,2:2>>|enc_NonStandardParameter(ChoiceVal)];
ChoiceTag =:= callCreditServiceControl ->
[<<0:1,3:2>>|enc_CallCreditServiceControl(ChoiceVal)]
end.


dec_ServiceControlDescriptor(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@V4:V2@V0/binary-unit:8,V2@Buf5/bitstring>> = Bytes2,
V2@Conv6 = binary_to_list(V2@V4),
{V2@Conv6,V2@Buf5}
end
end,
{{url,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end
end,
{{signal,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_NonStandardParameter(Bytes2)
end,
{{nonStandard,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_CallCreditServiceControl(Bytes2)
end,
{{callCreditServiceControl,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ServiceControlSession'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 8 =:= 0 ->
Enc3@element;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_ServiceControlDescriptor(Enc5@element)
end
end|begin
Enc7@element = element(4, Val),
enc_ServiceControlSession_reason(Enc7@element)
end].
'enc_ServiceControlSession_reason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= open ->
<<0:1,0:2>>;
ChoiceTag =:= refresh ->
<<0:1,1:2>>;
ChoiceTag =:= close ->
<<0:1,2:2>>
end.

dec_ServiceControlSession_reason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{open,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{refresh,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{close,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_ServiceControlSession(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type ServiceControlDescriptor
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_ServiceControlDescriptor(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type CHOICE
{Term3,Bytes5} = 'dec_ServiceControlSession_reason'(Bytes4),

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ServiceControlSession',Term1,Term2,Term3},Bytes7}.

'enc_RasUsageInfoTypes'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
enc_RasUsageInfoTypes_nonStandardUsageTypes(Enc5@element)
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
[]
end
end,
begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
[]
end
end|begin
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
[]
end
end].
'enc_RasUsageInfoTypes_nonStandardUsageTypes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_NonStandardParameter(Comp) || Comp <- Val]].


dec_RasUsageInfoTypes_nonStandardUsageTypes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components112(V1@V0, V1@Buf1, []).



dec_RasUsageInfoTypes(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes3} = 'dec_RasUsageInfoTypes_nonStandardUsageTypes'(Bytes2),

%% attribute number 2 with type NULL
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
ignore,
{'NULL',Bytes3}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type NULL
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
ignore,
{'NULL',Bytes4}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type NULL
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
ignore,
{'NULL',Bytes5}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'RasUsageInfoTypes',Term1,Term2,Term3,Term4},Bytes8}.

'enc_RasUsageSpecification'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_RasUsageSpecification_when(Enc3@element)
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_RasUsageSpecification_callStartingPoint(Enc4@element)
end
end|begin
Enc6@element = element(4, Val),
enc_RasUsageInfoTypes(Enc6@element)
end].
'enc_RasUsageSpecification_when'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc5@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<0:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1>>;
true ->
<<1:1>>
end
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
[]
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
[]
end
end].

dec_RasUsageSpecification_when(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NULL
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
ignore,
{'NULL',Bytes2}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type NULL
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
ignore,
{'NULL',Bytes3}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type NULL
{Term3,Bytes5} = case Opt band 1 of
1 ->
begin
ignore,
{'NULL',Bytes4}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'RasUsageSpecification_when',Term1,Term2,Term3},Bytes7}.

'enc_RasUsageSpecification_callStartingPoint'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
[]
end
end|begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
[]
end
end].

dec_RasUsageSpecification_callStartingPoint(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NULL
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
ignore,
{'NULL',Bytes2}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type NULL
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
ignore,
{'NULL',Bytes3}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RasUsageSpecification_callStartingPoint',Term1,Term2},Bytes6}.



dec_RasUsageSpecification(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes3} = 'dec_RasUsageSpecification_when'(Bytes2),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_RasUsageSpecification_callStartingPoint'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type RasUsageInfoTypes
{Term3,Bytes5} = dec_RasUsageInfoTypes(Bytes4),

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'RasUsageSpecification',Term1,Term2,Term3},Bytes7}.

'enc_RasUsageInformation'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
enc_RasUsageInformation_nonStandardUsageFields(Enc5@element)
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@element@sub = Enc6@element - 1,
if 0 =< Enc6@element@sub, Enc6@element@sub < 4294967295 ->
begin
Enc6@element@sub@bin = binary:encode_unsigned(Enc6@element@sub),
Enc6@element@sub@bin_size0 = byte_size(Enc6@element@sub@bin),
Enc6@element@sub@bin_size = Enc6@element@sub@bin_size0 - 1,
[<<Enc6@element@sub@bin_size:2>>,
align|Enc6@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end
end
end,
begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@element@sub = Enc9@element - 1,
if 0 =< Enc9@element@sub, Enc9@element@sub < 4294967295 ->
begin
Enc9@element@sub@bin = binary:encode_unsigned(Enc9@element@sub),
Enc9@element@sub@bin_size0 = byte_size(Enc9@element@sub@bin),
Enc9@element@sub@bin_size = Enc9@element@sub@bin_size0 - 1,
[<<Enc9@element@sub@bin_size:2>>,
align|Enc9@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc9@element}}})
end
end
end
end|begin
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@element@sub = Enc12@element - 1,
if 0 =< Enc12@element@sub, Enc12@element@sub < 4294967295 ->
begin
Enc12@element@sub@bin = binary:encode_unsigned(Enc12@element@sub),
Enc12@element@sub@bin_size0 = byte_size(Enc12@element@sub@bin),
Enc12@element@sub@bin_size = Enc12@element@sub@bin_size0 - 1,
[<<Enc12@element@sub@bin_size:2>>,
align|Enc12@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc12@element}}})
end
end
end
end].
'enc_RasUsageInformation_nonStandardUsageFields'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_NonStandardParameter(Comp) || Comp <- Val]].


dec_RasUsageInformation_nonStandardUsageFields(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components113(V1@V0, V1@Buf1, []).



dec_RasUsageInformation(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes3} = 'dec_RasUsageInformation_nonStandardUsageFields'(Bytes2),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Add7 = V3@V3 + 1,
{V3@Add7,V3@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Add7 = V4@V3 + 1,
{V4@Add7,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V5@V0:2/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes5,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/unsigned-unit:8,V5@Buf4/bitstring>> = V5@Buf1,
V5@Add7 = V5@V3 + 1,
{V5@Add7,V5@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'RasUsageInformation',Term1,Term2,Term3,Term4},Bytes8}.

'enc_CallTerminationCause'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= releaseCompleteReason ->
[<<0:1,0:1>>|enc_ReleaseCompleteReason(ChoiceVal)];
ChoiceTag =:= releaseCompleteCauseIE ->
begin
Enc3@len = byte_size(ChoiceVal),
Enc3@len@sub = Enc3@len - 2,
if 0 =< Enc3@len@sub, Enc3@len@sub < 31 ->
[<<0:1,1:1,Enc3@len@sub:5>>,
align|ChoiceVal]
end
end
end.


dec_CallTerminationCause(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_ReleaseCompleteReason(Bytes2)
end,
{{releaseCompleteReason,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V2@V0:5/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 2,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Conv7 = binary:copy(V2@V3),
{V2@Conv7,V2@Buf4}
end
end,
{{releaseCompleteCauseIE,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_BandwidthDetails'(Val) ->
[begin
Enc2@element = element(2, Val),
Enc4@element = element(3, Val),
if Enc2@element =:= false ->
if Enc4@element =:= false ->
<<0:1,0:1,0:1>>;
Enc4@element =:= true ->
<<0:1,0:1,1:1>>
end;
Enc2@element =:= true ->
if Enc4@element =:= false ->
<<0:1,1:1,0:1>>;
Enc4@element =:= true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc6@element = element(4, Val),
if Enc6@element bsr 32 =:= 0 ->
begin
Enc6@element@bin = binary:encode_unsigned(Enc6@element),
Enc6@element@bin_size0 = byte_size(Enc6@element@bin),
Enc6@element@bin_size = Enc6@element@bin_size0 - 1,
[<<Enc6@element@bin_size:2>>,
align|Enc6@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end|begin
Enc8@element = element(5, Val),
enc_TransportChannelInfo(Enc8@element)
end].


dec_BandwidthDetails(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% attribute number 4 with type TransportChannelInfo
{Term4,Bytes5} = dec_TransportChannelInfo(Bytes4),

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'BandwidthDetails',Term1,Term2,Term3,Term4},Bytes7}.

'enc_CallCreditCapability'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
Enc4@element =:= false ->
<<0:1>>;
Enc4@element =:= true ->
<<1:1>>
end
end|begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
Enc7@element =:= false ->
<<0:1>>;
Enc7@element =:= true ->
<<1:1>>
end
end].


dec_CallCreditCapability(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'CallCreditCapability',Term1,Term2},Bytes6}.

'enc_CallCreditServiceControl'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc7@element = element(2, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@len = length(Enc7@element),
Enc8@bin = encode_chars_16bit(Enc7@element),
Enc8@len@sub = Enc8@len - 1,
if Enc8@len@sub bsr 9 =:= 0 ->
[align,
<<Enc8@len@sub:16>>|Enc8@bin]
end
end
end
end,
begin
Enc10@element = element(3, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCreditServiceControl_billingMode(Enc10@element)
end
end,
begin
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@element@sub = Enc12@element - 1,
if 0 =< Enc12@element@sub, Enc12@element@sub < 4294967295 ->
begin
Enc12@element@sub@bin = binary:encode_unsigned(Enc12@element@sub),
Enc12@element@sub@bin_size0 = byte_size(Enc12@element@sub@bin),
Enc12@element@sub@bin_size = Enc12@element@sub@bin_size0 - 1,
[<<Enc12@element@sub@bin_size:2>>,
align|Enc12@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc12@element}}})
end
end
end
end,
begin
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
Enc15@element =:= false ->
<<0:1>>;
Enc15@element =:= true ->
<<1:1>>
end
end|begin
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallCreditServiceControl_callStartingPoint(Enc18@element)
end
end].
'enc_CallCreditServiceControl_billingMode'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= credit ->
<<0:1,0:1>>;
ChoiceTag =:= debit ->
<<0:1,1:1>>
end.

dec_CallCreditServiceControl_billingMode(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{credit,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{debit,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_CallCreditServiceControl_callStartingPoint'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= alerting ->
<<0:1,0:1>>;
ChoiceTag =:= connect ->
<<0:1,1:1>>
end.

dec_CallCreditServiceControl_callStartingPoint(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{alerting,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{connect,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_CallCreditServiceControl(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BMPString
{Term1,Bytes3} = case (Opt bsr 4) band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
<<V3@V5:V3@Add4/binary-unit:16,V3@Buf6/bitstring>> = V3@Buf1,
{V3@V7,V3@Buf8}  = {decode_chars_16bit(V3@V5),V3@Buf6},
{V3@V7,V3@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
'dec_CallCreditServiceControl_billingMode'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Add7 = V4@V3 + 1,
{V4@Add7,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes5,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type CHOICE
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_CallCreditServiceControl_callStartingPoint'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'CallCreditServiceControl',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_GenericData'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_GenericIdentifier(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_GenericData_parameters(Enc4@element)
end
end].
'enc_GenericData_parameters'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 9 =:= 0 ->
[align,
<<Enc1@len@sub:16>>|[enc_EnumeratedParameter(Comp) || Comp <- Val]]
end.


dec_GenericData_parameters(Bytes) ->
%% Length with constraint {1,512}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components114(V1@Add4, V1@Buf1, []).



dec_GenericData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type GenericIdentifier
{Term1,Bytes3} = dec_GenericIdentifier(Bytes2),

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_GenericData_parameters'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'GenericData',Term1,Term2},Bytes6}.

'enc_GenericIdentifier'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= standard ->
if ChoiceVal bsr 14 =:= 0 ->
[<<0:1,0:2,0:1>>,
align|<<ChoiceVal:16>>];
true ->
[<<0:1,0:2,1:1>>,
align|encode_unconstrained_number(ChoiceVal)]
end;
ChoiceTag =:= oid ->
begin
Enc4@bin = encode_oid(ChoiceVal),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[<<0:1,1:2>>,
align,
Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<0:1,1:2>>,
align,
<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
[<<0:1,1:2>>,
align|encode_fragmented(Enc4@bin, 8)]
end
end;
ChoiceTag =:= nonStandard ->
begin
Enc6@len = byte_size(ChoiceVal),
if Enc6@len =:= 16 ->
[<<0:1,2:2>>,
align|ChoiceVal]
end
end
end.


dec_GenericIdentifier(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@Buf2/bitstring>> ->
V2@Pad5 = bit_size(V2@Buf2) band 7,
<<_:V2@Pad5,V2@V3:2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf2,
{V2@V3,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
<<V2@V11:V2@V3/signed-unit:8,V2@Buf12/bitstring>> = V2@Buf4,
{V2@V11,V2@Buf12}
end,
{V2@V0,V2@Buf1}
end
end,
{{standard,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end
end,
{{oid,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
V4@Pad2 = bit_size(Bytes2) band 7,
<<_:V4@Pad2,V4@V0:16/binary-unit:8,V4@Buf1/bitstring>> = Bytes2,
V4@Conv4 = binary:copy(V4@V0),
{V4@Conv4,V4@Buf1}
end
end,
{{nonStandard,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_EnumeratedParameter'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_GenericIdentifier(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Content(Enc4@element)
end
end].


dec_EnumeratedParameter(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type GenericIdentifier
{Term1,Bytes3} = dec_GenericIdentifier(Bytes2),

%% attribute number 2 with type Content
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_Content(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'EnumeratedParameter',Term1,Term2},Bytes6}.

'enc_Content'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= raw ->
begin
Enc2@len = byte_size(ChoiceVal),
if Enc2@len < 128 ->
[<<0:1,0:4>>,
align,
Enc2@len|ChoiceVal];
Enc2@len < 16384 ->
[<<0:1,0:4>>,
align,
<<2:2,Enc2@len:14>>|ChoiceVal];
true ->
[<<0:1,0:4>>,
align|encode_fragmented(ChoiceVal, 8)]
end
end;
ChoiceTag =:= text ->
begin
Enc4@bin = list_to_binary(ChoiceVal),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[<<0:1,1:4>>,
align,
Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<0:1,1:4>>,
align,
<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
[<<0:1,1:4>>,
align|encode_fragmented(Enc4@bin, 8)]
end
end;
ChoiceTag =:= unicode ->
begin
Enc6@len = length(ChoiceVal),
Enc6@bin = encode_chars_16bit(ChoiceVal),
if Enc6@len < 128 ->
[<<0:1,2:4>>,
align,
Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[<<0:1,2:4>>,
align,
<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
[<<0:1,2:4>>,
align|encode_fragmented(Enc6@bin, 16)]
end
end;
ChoiceTag =:= bool ->
if ChoiceVal =:= false ->
<<0:1,3:4,0:1>>;
ChoiceVal =:= true ->
<<0:1,3:4,1:1>>
end;
ChoiceTag =:= number8 ->
if ChoiceVal bsr 8 =:= 0 ->
[<<0:1,4:4>>,
align,
ChoiceVal];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= number16 ->
if ChoiceVal bsr 16 =:= 0 ->
[<<0:1,5:4>>,
align|<<ChoiceVal:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= number32 ->
if ChoiceVal bsr 32 =:= 0 ->
[<<0:1,6:4>>|begin
ChoiceVal@bin = binary:encode_unsigned(ChoiceVal),
ChoiceVal@bin_size0 = byte_size(ChoiceVal@bin),
ChoiceVal@bin_size = ChoiceVal@bin_size0 - 1,
[<<ChoiceVal@bin_size:2>>,
align|ChoiceVal@bin]
end];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= id ->
[<<0:1,7:4>>|enc_GenericIdentifier(ChoiceVal)];
ChoiceTag =:= alias ->
[<<0:1,8:4>>|enc_AliasAddress(ChoiceVal)];
ChoiceTag =:= transport ->
[<<0:1,9:4>>|enc_TransportAddress(ChoiceVal)];
ChoiceTag =:= compound ->
[<<0:1,10:4>>|enc_Content_compound(ChoiceVal)];
ChoiceTag =:= nested ->
[<<0:1,11:4>>|enc_Content_nested(ChoiceVal)]
end.
'enc_Content_compound'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 9 =:= 0 ->
[align,
<<Enc1@len@sub:16>>|[enc_EnumeratedParameter(Comp) || Comp <- Val]]
end.


dec_Content_compound(Bytes) ->
%% Length with constraint {1,512}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components115(V1@Add4, V1@Buf1, []).

'enc_Content_nested'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_GenericData(Comp) || Comp <- Val]]
end.


dec_Content_nested(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components116(V1@Add2, V1@Buf1, []).



dec_Content(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end,
V2@Conv10 = binary:copy(V2@V0),
{V2@Conv10,V2@Buf1}
end
end,
{{raw,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary_to_list(V3@V0),
{V3@Conv10,V3@Buf1}
end
end,
{{text,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
V4@Pad3 = bit_size(Bytes2) band 7,
{V4@V0,V4@Buf1} = case Bytes2 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:16,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:16,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 16),
{V4@V8,V4@Buf9}
end,
{V4@V10,V4@Buf11}  = {decode_chars_16bit(V4@V0),V4@Buf1},
{V4@V10,V4@Buf11}
end
end,
{{unicode,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes2,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end
end,
{{bool,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
V6@Pad2 = bit_size(Bytes2) band 7,
<<_:V6@Pad2,V6@V0:1/unsigned-unit:8,V6@Buf1/bitstring>> = Bytes2,
{V6@V0,V6@Buf1}
end
end,
{{number8,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
V7@Pad2 = bit_size(Bytes2) band 7,
<<_:V7@Pad2,V7@V0:2/unsigned-unit:8,V7@Buf1/bitstring>> = Bytes2,
{V7@V0,V7@Buf1}
end
end,
{{number16,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
<<V8@V0:2/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes2,
V8@Add2 = V8@V0 + 1,
V8@Pad5 = bit_size(V8@Buf1) band 7,
<<_:V8@Pad5,V8@V3:V8@Add2/unsigned-unit:8,V8@Buf4/bitstring>> = V8@Buf1,
{V8@V3,V8@Buf4}
end
end,
{{number32,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_GenericIdentifier(Bytes2)
end,
{{id,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_AliasAddress(Bytes2)
end,
{{alias,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
dec_TransportAddress(Bytes2)
end,
{{transport,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
'dec_Content_compound'(Bytes2)
end,
{{compound,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
'dec_Content_nested'(Bytes2)
end,
{{nested,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_FeatureSet'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc5@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc5@element =:= false ->
<<0:1,0:1>>;
Enc5@element =:= true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= false ->
<<1:1,0:1>>;
Enc5@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_FeatureSet_neededFeatures(Enc7@element)
end
end,
begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_FeatureSet_desiredFeatures(Enc9@element)
end
end|begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_FeatureSet_supportedFeatures(Enc11@element)
end
end].
'enc_FeatureSet_neededFeatures'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_FeatureDescriptor(Comp) || Comp <- Val]].


dec_FeatureSet_neededFeatures(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components117(V1@V0, V1@Buf1, []).

'enc_FeatureSet_desiredFeatures'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_FeatureDescriptor(Comp) || Comp <- Val]].


dec_FeatureSet_desiredFeatures(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components118(V1@V0, V1@Buf1, []).

'enc_FeatureSet_supportedFeatures'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_FeatureDescriptor(Comp) || Comp <- Val]].


dec_FeatureSet_supportedFeatures(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components119(V1@V0, V1@Buf1, []).



dec_FeatureSet(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
'dec_FeatureSet_neededFeatures'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
'dec_FeatureSet_desiredFeatures'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_FeatureSet_supportedFeatures'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'FeatureSet',Term1,Term2,Term3,Term4},Bytes8}.

'enc_TransportChannelInfo'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc4@element)
end
end|begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc6@element)
end
end].


dec_TransportChannelInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type TransportAddress
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_TransportAddress(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type TransportAddress
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TransportAddress(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'TransportChannelInfo',Term1,Term2},Bytes6}.

'enc_RTPSession'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 8, 10),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc1@bitmap:2>>
end,
[if Extensions =:= [] ->
<<0:1>>;
true ->
<<1:1>>
end,
begin
Enc3@element = element(2, Val),
enc_TransportChannelInfo(Enc3@element)
end,
begin
Enc4@element = element(3, Val),
enc_TransportChannelInfo(Enc4@element)
end,
align,
begin
Enc5@element = element(4, Val),
Enc6@bin = list_to_binary(Enc5@element),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
encode_fragmented(Enc6@bin, 8)
end
end,
begin
Enc7@element = element(5, Val),
Enc7@element@sub = Enc7@element - 1,
if 0 =< Enc7@element@sub, Enc7@element@sub < 4294967295 ->
begin
Enc7@element@sub@bin = binary:encode_unsigned(Enc7@element@sub),
Enc7@element@sub@bin_size0 = byte_size(Enc7@element@sub@bin),
Enc7@element@sub@bin_size = Enc7@element@sub@bin_size0 - 1,
[<<Enc7@element@sub@bin_size:2,0:6>>|Enc7@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc9@element = element(6, Val),
Enc9@element@sub = Enc9@element - 1,
if 0 =< Enc9@element@sub, Enc9@element@sub < 255 ->
Enc9@element@sub;
true ->
exit({error,{asn1,{illegal_value,Enc9@element}}})
end
end,
begin
Enc11@element = element(7, Val),
enc_RTPSession_associatedSessionIds(Enc11@element)
end,
Extensions,
begin
Enc12@element = element(8, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@output = [],
Enc13@bin = <<0:8>>,
[align,
1|Enc13@bin]
end
end
end|begin
Enc15@element = element(9, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@output = if Enc15@element bsr 32 =:= 0 ->
begin
Enc15@element@bin = binary:encode_unsigned(Enc15@element),
Enc15@element@bin_size0 = byte_size(Enc15@element@bin),
Enc15@element@bin_size = Enc15@element@bin_size0 - 1,
[<<Enc15@element@bin_size:2,0:6>>|Enc15@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc15@element}}})
end,
Enc17@bin = iolist_to_binary(Enc17@output),
Enc17@len = byte_size(Enc17@bin),
[align,
Enc17@len|Enc17@bin]
end
end
end].
'enc_RTPSession_associatedSessionIds'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Comp@sub = Comp - 1,
if 0 =< Comp@sub, Comp@sub < 255 ->
[Comp@sub];
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]].


dec_RTPSession_associatedSessionIds(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components120(V1@V0, V1@Buf1, []).



dec_RTPSession(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type TransportChannelInfo
{Term1,Bytes2} = dec_TransportChannelInfo(Bytes1),

%% attribute number 2 with type TransportChannelInfo
{Term2,Bytes3} = dec_TransportChannelInfo(Bytes2),

%% attribute number 3 with type PrintableString
{Term3,Bytes4} = begin
V2@Pad3 = bit_size(Bytes3) band 7,
{V2@V0,V2@Buf1} = case Bytes3 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end,
V2@Conv10 = binary_to_list(V2@V0),
{V2@Conv10,V2@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes4,
V3@Add2 = V3@V0 + 1,
<<_:6,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Add6 = V3@V3 + 1,
{V3@Add6,V3@Buf4}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes6} = begin
<<V4@V0:8/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes5,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes7} = 'dec_RTPSession_associatedSessionIds'(Bytes6),

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 7 with type NULL
{Term7,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes8) band 7,
{V6@V0,V6@Buf1} = case Bytes8 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx7,_} = begin
ignore,
{'NULL',V6@V0}
end,
{TmpValx7,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type INTEGER
{Term8,Bytes10} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx8,_} = begin
<<V9@V0:2/unsigned-unit:1,V9@Buf1/bitstring>> = V8@V0,
V9@Add2 = V9@V0 + 1,
V9@Pad5 = bit_size(V9@Buf1) band 7,
<<_:V9@Pad5,V9@V3:V9@Add2/unsigned-unit:8,V9@Buf4/bitstring>> = V9@Buf1,
{V9@V3,V9@Buf4}
end,
{TmpValx8,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,
Bytes11= skipextensions(Bytes10, 3, Extensions),
{{'RTPSession',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes11}.

'enc_RasMessage'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= gatekeeperRequest ->
[<<0:1,0:5>>|enc_GatekeeperRequest(ChoiceVal)];
ChoiceTag =:= gatekeeperConfirm ->
[<<0:1,1:5>>|enc_GatekeeperConfirm(ChoiceVal)];
ChoiceTag =:= gatekeeperReject ->
[<<0:1,2:5>>|enc_GatekeeperReject(ChoiceVal)];
ChoiceTag =:= registrationRequest ->
[<<0:1,3:5>>|enc_RegistrationRequest(ChoiceVal)];
ChoiceTag =:= registrationConfirm ->
[<<0:1,4:5>>|enc_RegistrationConfirm(ChoiceVal)];
ChoiceTag =:= registrationReject ->
[<<0:1,5:5>>|enc_RegistrationReject(ChoiceVal)];
ChoiceTag =:= unregistrationRequest ->
[<<0:1,6:5>>|enc_UnregistrationRequest(ChoiceVal)];
ChoiceTag =:= unregistrationConfirm ->
[<<0:1,7:5>>|enc_UnregistrationConfirm(ChoiceVal)];
ChoiceTag =:= unregistrationReject ->
[<<0:1,8:5>>|enc_UnregistrationReject(ChoiceVal)];
ChoiceTag =:= admissionRequest ->
[<<0:1,9:5>>|enc_AdmissionRequest(ChoiceVal)];
ChoiceTag =:= admissionConfirm ->
[<<0:1,10:5>>|enc_AdmissionConfirm(ChoiceVal)];
ChoiceTag =:= admissionReject ->
[<<0:1,11:5>>|enc_AdmissionReject(ChoiceVal)];
ChoiceTag =:= bandwidthRequest ->
[<<0:1,12:5>>|enc_BandwidthRequest(ChoiceVal)];
ChoiceTag =:= bandwidthConfirm ->
[<<0:1,13:5>>|enc_BandwidthConfirm(ChoiceVal)];
ChoiceTag =:= bandwidthReject ->
[<<0:1,14:5>>|enc_BandwidthReject(ChoiceVal)];
ChoiceTag =:= disengageRequest ->
[<<0:1,15:5>>|enc_DisengageRequest(ChoiceVal)];
ChoiceTag =:= disengageConfirm ->
[<<0:1,16:5>>|enc_DisengageConfirm(ChoiceVal)];
ChoiceTag =:= disengageReject ->
[<<0:1,17:5>>|enc_DisengageReject(ChoiceVal)];
ChoiceTag =:= locationRequest ->
[<<0:1,18:5>>|enc_LocationRequest(ChoiceVal)];
ChoiceTag =:= locationConfirm ->
[<<0:1,19:5>>|enc_LocationConfirm(ChoiceVal)];
ChoiceTag =:= locationReject ->
[<<0:1,20:5>>|enc_LocationReject(ChoiceVal)];
ChoiceTag =:= infoRequest ->
[<<0:1,21:5>>|enc_InfoRequest(ChoiceVal)];
ChoiceTag =:= infoRequestResponse ->
[<<0:1,22:5>>|enc_InfoRequestResponse(ChoiceVal)];
ChoiceTag =:= nonStandardMessage ->
[<<0:1,23:5>>|enc_NonStandardMessage(ChoiceVal)];
ChoiceTag =:= unknownMessageResponse ->
[<<0:1,24:5>>|enc_UnknownMessageResponse(ChoiceVal)];
ChoiceTag =:= requestInProgress ->
begin
Enc26@output = enc_RequestInProgress(ChoiceVal),
Enc26@bin = complete(Enc26@output),
Enc26@len = byte_size(Enc26@bin),
if Enc26@len < 128 ->
[<<1:1,0:7>>,
align,
Enc26@len|Enc26@bin];
Enc26@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc26@len:14>>|Enc26@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc26@bin, 8)]
end
end;
ChoiceTag =:= resourcesAvailableIndicate ->
begin
Enc27@output = enc_ResourcesAvailableIndicate(ChoiceVal),
Enc27@bin = complete(Enc27@output),
Enc27@len = byte_size(Enc27@bin),
if Enc27@len < 128 ->
[<<1:1,1:7>>,
align,
Enc27@len|Enc27@bin];
Enc27@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc27@len:14>>|Enc27@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc27@bin, 8)]
end
end;
ChoiceTag =:= resourcesAvailableConfirm ->
begin
Enc28@output = enc_ResourcesAvailableConfirm(ChoiceVal),
Enc28@bin = complete(Enc28@output),
Enc28@len = byte_size(Enc28@bin),
if Enc28@len < 128 ->
[<<1:1,2:7>>,
align,
Enc28@len|Enc28@bin];
Enc28@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc28@len:14>>|Enc28@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc28@bin, 8)]
end
end;
ChoiceTag =:= infoRequestAck ->
begin
Enc29@output = enc_InfoRequestAck(ChoiceVal),
Enc29@bin = complete(Enc29@output),
Enc29@len = byte_size(Enc29@bin),
if Enc29@len < 128 ->
[<<1:1,3:7>>,
align,
Enc29@len|Enc29@bin];
Enc29@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc29@len:14>>|Enc29@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc29@bin, 8)]
end
end;
ChoiceTag =:= infoRequestNak ->
begin
Enc30@output = enc_InfoRequestNak(ChoiceVal),
Enc30@bin = complete(Enc30@output),
Enc30@len = byte_size(Enc30@bin),
if Enc30@len < 128 ->
[<<1:1,4:7>>,
align,
Enc30@len|Enc30@bin];
Enc30@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc30@len:14>>|Enc30@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc30@bin, 8)]
end
end;
ChoiceTag =:= serviceControlIndication ->
begin
Enc31@output = enc_ServiceControlIndication(ChoiceVal),
Enc31@bin = complete(Enc31@output),
Enc31@len = byte_size(Enc31@bin),
if Enc31@len < 128 ->
[<<1:1,5:7>>,
align,
Enc31@len|Enc31@bin];
Enc31@len < 16384 ->
[<<1:1,5:7>>,
align,
<<2:2,Enc31@len:14>>|Enc31@bin];
true ->
[<<1:1,5:7>>,
align|encode_fragmented(Enc31@bin, 8)]
end
end;
ChoiceTag =:= serviceControlResponse ->
begin
Enc32@output = enc_ServiceControlResponse(ChoiceVal),
Enc32@bin = complete(Enc32@output),
Enc32@len = byte_size(Enc32@bin),
if Enc32@len < 128 ->
[<<1:1,6:7>>,
align,
Enc32@len|Enc32@bin];
Enc32@len < 16384 ->
[<<1:1,6:7>>,
align,
<<2:2,Enc32@len:14>>|Enc32@bin];
true ->
[<<1:1,6:7>>,
align|encode_fragmented(Enc32@bin, 8)]
end
end;
ChoiceTag =:= admissionConfirmSequence ->
begin
Enc33@output = enc_RasMessage_admissionConfirmSequence(ChoiceVal),
Enc33@bin = complete(Enc33@output),
Enc33@len = byte_size(Enc33@bin),
if Enc33@len < 128 ->
[<<1:1,7:7>>,
align,
Enc33@len|Enc33@bin];
Enc33@len < 16384 ->
[<<1:1,7:7>>,
align,
<<2:2,Enc33@len:14>>|Enc33@bin];
true ->
[<<1:1,7:7>>,
align|encode_fragmented(Enc33@bin, 8)]
end
end
end.
'enc_RasMessage_admissionConfirmSequence'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AdmissionConfirm(Comp) || Comp <- Val]].


dec_RasMessage_admissionConfirmSequence(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components121(V1@V0, V1@Buf1, []).



dec_RasMessage(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:5/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_GatekeeperRequest(Bytes2)
end,
{{gatekeeperRequest,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_GatekeeperConfirm(Bytes2)
end,
{{gatekeeperConfirm,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_GatekeeperReject(Bytes2)
end,
{{gatekeeperReject,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_RegistrationRequest(Bytes2)
end,
{{registrationRequest,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_RegistrationConfirm(Bytes2)
end,
{{registrationConfirm,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_RegistrationReject(Bytes2)
end,
{{registrationReject,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_UnregistrationRequest(Bytes2)
end,
{{unregistrationRequest,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_UnregistrationConfirm(Bytes2)
end,
{{unregistrationConfirm,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_UnregistrationReject(Bytes2)
end,
{{unregistrationReject,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
dec_AdmissionRequest(Bytes2)
end,
{{admissionRequest,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
dec_AdmissionConfirm(Bytes2)
end,
{{admissionConfirm,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
dec_AdmissionReject(Bytes2)
end,
{{admissionReject,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
dec_BandwidthRequest(Bytes2)
end,
{{bandwidthRequest,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
dec_BandwidthConfirm(Bytes2)
end,
{{bandwidthConfirm,Val},NewBytes};
14 ->
{Val,NewBytes} = begin
dec_BandwidthReject(Bytes2)
end,
{{bandwidthReject,Val},NewBytes};
15 ->
{Val,NewBytes} = begin
dec_DisengageRequest(Bytes2)
end,
{{disengageRequest,Val},NewBytes};
16 ->
{Val,NewBytes} = begin
dec_DisengageConfirm(Bytes2)
end,
{{disengageConfirm,Val},NewBytes};
17 ->
{Val,NewBytes} = begin
dec_DisengageReject(Bytes2)
end,
{{disengageReject,Val},NewBytes};
18 ->
{Val,NewBytes} = begin
dec_LocationRequest(Bytes2)
end,
{{locationRequest,Val},NewBytes};
19 ->
{Val,NewBytes} = begin
dec_LocationConfirm(Bytes2)
end,
{{locationConfirm,Val},NewBytes};
20 ->
{Val,NewBytes} = begin
dec_LocationReject(Bytes2)
end,
{{locationReject,Val},NewBytes};
21 ->
{Val,NewBytes} = begin
dec_InfoRequest(Bytes2)
end,
{{infoRequest,Val},NewBytes};
22 ->
{Val,NewBytes} = begin
dec_InfoRequestResponse(Bytes2)
end,
{{infoRequestResponse,Val},NewBytes};
23 ->
{Val,NewBytes} = begin
dec_NonStandardMessage(Bytes2)
end,
{{nonStandardMessage,Val},NewBytes};
24 ->
{Val,NewBytes} = begin
dec_UnknownMessageResponse(Bytes2)
end,
{{unknownMessageResponse,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_RequestInProgress(V2@V0),
{TmpVal,V2@Buf1}
end,
{{requestInProgress,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_ResourcesAvailableIndicate(V2@V0),
{TmpVal,V2@Buf1}
end,
{{resourcesAvailableIndicate,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_ResourcesAvailableConfirm(V2@V0),
{TmpVal,V2@Buf1}
end,
{{resourcesAvailableConfirm,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_InfoRequestAck(V2@V0),
{TmpVal,V2@Buf1}
end,
{{infoRequestAck,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_InfoRequestNak(V2@V0),
{TmpVal,V2@Buf1}
end,
{{infoRequestNak,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_ServiceControlIndication(V2@V0),
{TmpVal,V2@Buf1}
end,
{{serviceControlIndication,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_ServiceControlResponse(V2@V0),
{TmpVal,V2@Buf1}
end,
{{serviceControlResponse,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_RasMessage_admissionConfirmSequence'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{admissionConfirmSequence,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_GatekeeperRequest'(Val) ->
Enc5@bitmap = extension_bitmap(Val, 10, 20),
Extensions = if Enc5@bitmap =:= 0 ->
[];
true ->
<<9:7,Enc5@bitmap:10>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(7, Val),
Enc3@element = element(8, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(9, Val),
if Enc4@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc7@element = element(2, Val),
Enc7@element@sub = Enc7@element - 1,
if 0 =< Enc7@element@sub, Enc7@element@sub < 65535 ->
<<Enc7@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc9@element = element(3, Val),
Enc10@bin = encode_oid(Enc9@element),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
encode_fragmented(Enc10@bin, 8)
end
end,
begin
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc11@element)
end
end,
begin
Enc13@element = element(5, Val),
enc_TransportAddress(Enc13@element)
end,
begin
Enc14@element = element(6, Val),
enc_EndpointType(Enc14@element)
end,
begin
Enc15@element = element(7, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@len = length(Enc15@element),
Enc16@bin = encode_chars_16bit(Enc15@element),
Enc16@len@sub = Enc16@len - 1,
if Enc16@len@sub bsr 7 =:= 0 ->
[<<Enc16@len@sub:7>>,
align|Enc16@bin]
end
end
end
end,
begin
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
enc_QseriesOptions(Enc18@element)
end
end,
begin
Enc20@element = element(9, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
enc_GatekeeperRequest_endpointAlias(Enc20@element)
end
end,
Extensions,
begin
Enc22@element = element(10, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@output = enc_GatekeeperRequest_alternateEndpoints(Enc22@element),
Enc23@bin = complete(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[align,
Enc23@len|Enc23@bin];
Enc23@len < 16384 ->
[align,
<<2:2,Enc23@len:14>>|Enc23@bin];
true ->
[align|encode_fragmented(Enc23@bin, 8)]
end
end
end
end,
begin
Enc25@element = element(11, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@output = enc_GatekeeperRequest_tokens(Enc25@element),
Enc26@bin = complete(Enc26@output),
Enc26@len = byte_size(Enc26@bin),
if Enc26@len < 128 ->
[align,
Enc26@len|Enc26@bin];
Enc26@len < 16384 ->
[align,
<<2:2,Enc26@len:14>>|Enc26@bin];
true ->
[align|encode_fragmented(Enc26@bin, 8)]
end
end
end
end,
begin
Enc28@element = element(12, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc29@output = enc_GatekeeperRequest_cryptoTokens(Enc28@element),
Enc29@bin = complete(Enc29@output),
Enc29@len = byte_size(Enc29@bin),
if Enc29@len < 128 ->
[align,
Enc29@len|Enc29@bin];
Enc29@len < 16384 ->
[align,
<<2:2,Enc29@len:14>>|Enc29@bin];
true ->
[align|encode_fragmented(Enc29@bin, 8)]
end
end
end
end,
begin
Enc31@element = element(13, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc32@output = enc_GatekeeperRequest_authenticationCapability(Enc31@element),
Enc32@bin = complete(Enc32@output),
Enc32@len = byte_size(Enc32@bin),
if Enc32@len < 128 ->
[align,
Enc32@len|Enc32@bin];
Enc32@len < 16384 ->
[align,
<<2:2,Enc32@len:14>>|Enc32@bin];
true ->
[align|encode_fragmented(Enc32@bin, 8)]
end
end
end
end,
begin
Enc34@element = element(14, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc35@output = enc_GatekeeperRequest_algorithmOIDs(Enc34@element),
Enc35@bin = complete(Enc35@output),
Enc35@len = byte_size(Enc35@bin),
if Enc35@len < 128 ->
[align,
Enc35@len|Enc35@bin];
Enc35@len < 16384 ->
[align,
<<2:2,Enc35@len:14>>|Enc35@bin];
true ->
[align|encode_fragmented(Enc35@bin, 8)]
end
end
end
end,
begin
Enc37@element = element(15, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc38@output = enc_GatekeeperRequest_integrity(Enc37@element),
Enc38@bin = complete(Enc38@output),
Enc38@len = byte_size(Enc38@bin),
if Enc38@len < 128 ->
[align,
Enc38@len|Enc38@bin];
Enc38@len < 16384 ->
[align,
<<2:2,Enc38@len:14>>|Enc38@bin];
true ->
[align|encode_fragmented(Enc38@bin, 8)]
end
end
end
end,
begin
Enc40@element = element(16, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc41@output = enc_ICV(Enc40@element),
Enc41@bin = complete(Enc41@output),
Enc41@len = byte_size(Enc41@bin),
if Enc41@len < 128 ->
[align,
Enc41@len|Enc41@bin];
Enc41@len < 16384 ->
[align,
<<2:2,Enc41@len:14>>|Enc41@bin];
true ->
[align|encode_fragmented(Enc41@bin, 8)]
end
end
end
end,
begin
Enc43@element = element(17, Val),
if Enc43@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc44@output = [],
Enc44@bin = <<0:8>>,
[align,
1|Enc44@bin]
end
end
end,
begin
Enc46@element = element(18, Val),
if Enc46@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc47@output = enc_FeatureSet(Enc46@element),
Enc47@bin = complete(Enc47@output),
Enc47@len = byte_size(Enc47@bin),
if Enc47@len < 128 ->
[align,
Enc47@len|Enc47@bin];
Enc47@len < 16384 ->
[align,
<<2:2,Enc47@len:14>>|Enc47@bin];
true ->
[align|encode_fragmented(Enc47@bin, 8)]
end
end
end
end|begin
Enc49@element = element(19, Val),
if Enc49@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc50@output = enc_GatekeeperRequest_genericData(Enc49@element),
Enc50@bin = complete(Enc50@output),
Enc50@len = byte_size(Enc50@bin),
if Enc50@len < 128 ->
[align,
Enc50@len|Enc50@bin];
Enc50@len < 16384 ->
[align,
<<2:2,Enc50@len:14>>|Enc50@bin];
true ->
[align|encode_fragmented(Enc50@bin, 8)]
end
end
end
end].
'enc_GatekeeperRequest_endpointAlias'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_GatekeeperRequest_endpointAlias(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components122(V1@V0, V1@Buf1, []).

'enc_GatekeeperRequest_alternateEndpoints'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_Endpoint(Comp) || Comp <- Val]].


dec_GatekeeperRequest_alternateEndpoints(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components123(V1@V0, V1@Buf1, []).

'enc_GatekeeperRequest_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_GatekeeperRequest_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components124(V1@V0, V1@Buf1, []).

'enc_GatekeeperRequest_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_GatekeeperRequest_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components125(V1@V0, V1@Buf1, []).

'enc_GatekeeperRequest_authenticationCapability'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_AuthenticationMechanism(Comp) || Comp <- Val]].


dec_GatekeeperRequest_authenticationCapability(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components126(V1@V0, V1@Buf1, []).

'enc_GatekeeperRequest_algorithmOIDs'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@bin = encode_oid(Comp),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len < 128 ->
[Enc1@len|Enc1@bin];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Enc1@bin];
true ->
encode_fragmented(Enc1@bin, 8)
end
end || Comp <- Val]].


dec_GatekeeperRequest_algorithmOIDs(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components127(V1@V0, V1@Buf1, []).

'enc_GatekeeperRequest_integrity'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_IntegrityMechanism(Comp) || Comp <- Val]].


dec_GatekeeperRequest_integrity(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components128(V1@V0, V1@Buf1, []).

'enc_GatekeeperRequest_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_GatekeeperRequest_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components129(V1@V0, V1@Buf1, []).



dec_GatekeeperRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type OBJECT IDENTIFIER
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:7,V4@Buf4/bitstring>> ->
{V4@V3,V4@Buf4};
<<1:1,0:1,V4@V4:14,V4@Buf5/bitstring>> ->
{V4@V4,V4@Buf5}
end,
<<V4@V6:V4@V0/binary-unit:8,V4@Buf7/bitstring>> = V4@Buf1,
V4@Conv8 = binary_to_list(V4@V6),
{V4@V9,V4@Buf10}  = {decode_oid(V4@Conv8),V4@Buf7},
{V4@V9,V4@Buf10}
end,

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type TransportAddress
{Term4,Bytes6} = dec_TransportAddress(Bytes5),

%% attribute number 5 with type EndpointType
{Term5,Bytes7} = dec_EndpointType(Bytes6),

%% attribute number 6 with type BMPString
{Term6,Bytes8} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:7/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes7,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/binary-unit:16,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V7,V5@Buf8}  = {decode_chars_16bit(V5@V3),V5@Buf4},
{V5@V7,V5@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type QseriesOptions
{Term7,Bytes9} = case (Opt bsr 1) band 1 of
1 ->
dec_QseriesOptions(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes10} = case Opt band 1 of
1 ->
'dec_GatekeeperRequest_endpointAlias'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V6@V0,V6@Buf1} = case Bytes10 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes12} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes11) band 7,
{V7@V0,V7@Buf1} = case Bytes11 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx9,_} = 'dec_GatekeeperRequest_alternateEndpoints'(V7@V0),
{TmpValx9,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes13} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes12) band 7,
{V8@V0,V8@Buf1} = case Bytes12 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx10,_} = 'dec_GatekeeperRequest_tokens'(V8@V0),
{TmpValx10,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes14} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes13) band 7,
{V9@V0,V9@Buf1} = case Bytes13 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx11,_} = 'dec_GatekeeperRequest_cryptoTokens'(V9@V0),
{TmpValx11,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type SEQUENCE OF
{Term12,Bytes15} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes14) band 7,
{V10@V0,V10@Buf1} = case Bytes14 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx12,_} = 'dec_GatekeeperRequest_authenticationCapability'(V10@V0),
{TmpValx12,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type SEQUENCE OF
{Term13,Bytes16} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes15) band 7,
{V11@V0,V11@Buf1} = case Bytes15 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx13,_} = 'dec_GatekeeperRequest_algorithmOIDs'(V11@V0),
{TmpValx13,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type SEQUENCE OF
{Term14,Bytes17} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes16) band 7,
{V12@V0,V12@Buf1} = case Bytes16 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx14,_} = 'dec_GatekeeperRequest_integrity'(V12@V0),
{TmpValx14,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type ICV
{Term15,Bytes18} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes17) band 7,
{V13@V0,V13@Buf1} = case Bytes17 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx15,_} = dec_ICV(V13@V0),
{TmpValx15,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type NULL
{Term16,Bytes19} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes18) band 7,
{V14@V0,V14@Buf1} = case Bytes18 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx16,_} = begin
ignore,
{'NULL',V14@V0}
end,
{TmpValx16,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type FeatureSet
{Term17,Bytes20} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes19) band 7,
{V16@V0,V16@Buf1} = case Bytes19 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx17,_} = dec_FeatureSet(V16@V0),
{TmpValx17,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type SEQUENCE OF
{Term18,Bytes21} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V17@Pad3 = bit_size(Bytes20) band 7,
{V17@V0,V17@Buf1} = case Bytes20 of
<<_:V17@Pad3,0:1,V17@V5:7,V17@V7:V17@V5/binary-unit:8,V17@Buf8/bitstring>> ->
{V17@V7,V17@Buf8};
<<_:V17@Pad3,1:1,0:1,V17@V6:14,V17@V8:V17@V6/binary-unit:8,V17@Buf9/bitstring>> ->
{V17@V8,V17@Buf9};
<<_:V17@Pad3,1:1,1:1,V17@V6:6,V17@Buf7/bitstring>> ->
{V17@V8,V17@Buf9}  = decode_fragmented(V17@V6, V17@Buf7, 8),
{V17@V8,V17@Buf9}
end,
{TmpValx18,_} = 'dec_GatekeeperRequest_genericData'(V17@V0),
{TmpValx18,V17@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,
Bytes22= skipextensions(Bytes21, 11, Extensions),
{{'GatekeeperRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18},Bytes22}.

'enc_GatekeeperConfirm'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 7, 16),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<8:7,Enc3@bitmap:9>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(5, Val),
if Enc2@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc5@element = element(2, Val),
Enc5@element@sub = Enc5@element - 1,
if 0 =< Enc5@element@sub, Enc5@element@sub < 65535 ->
<<Enc5@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(3, Val),
Enc8@bin = encode_oid(Enc7@element),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
encode_fragmented(Enc8@bin, 8)
end
end,
begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc9@element)
end
end,
begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@len = length(Enc11@element),
Enc12@bin = encode_chars_16bit(Enc11@element),
Enc12@len@sub = Enc12@len - 1,
if Enc12@len@sub bsr 7 =:= 0 ->
[<<Enc12@len@sub:7>>,
align|Enc12@bin]
end
end
end
end,
begin
Enc14@element = element(6, Val),
enc_TransportAddress(Enc14@element)
end,
Extensions,
begin
Enc15@element = element(7, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = enc_GatekeeperConfirm_alternateGatekeeper(Enc15@element),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[align|encode_fragmented(Enc16@bin, 8)]
end
end
end
end,
begin
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@output = 'H235-SECURITY-MESSAGES':enc_AuthenticationMechanism(Enc18@element),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[align|encode_fragmented(Enc19@bin, 8)]
end
end
end
end,
begin
Enc21@element = element(9, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@output = enc_GatekeeperConfirm_tokens(Enc21@element),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[align|encode_fragmented(Enc22@bin, 8)]
end
end
end
end,
begin
Enc24@element = element(10, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc25@output = enc_GatekeeperConfirm_cryptoTokens(Enc24@element),
Enc25@bin = complete(Enc25@output),
Enc25@len = byte_size(Enc25@bin),
if Enc25@len < 128 ->
[align,
Enc25@len|Enc25@bin];
Enc25@len < 16384 ->
[align,
<<2:2,Enc25@len:14>>|Enc25@bin];
true ->
[align|encode_fragmented(Enc25@bin, 8)]
end
end
end
end,
begin
Enc27@element = element(11, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc29@output = begin
Enc28@bin = encode_oid(Enc27@element),
Enc28@len = byte_size(Enc28@bin),
if Enc28@len < 128 ->
[Enc28@len|Enc28@bin];
Enc28@len < 16384 ->
[<<2:2,Enc28@len:14>>|Enc28@bin];
true ->
encode_fragmented(Enc28@bin, 8)
end
end,
Enc29@bin = iolist_to_binary(Enc29@output),
Enc29@len = byte_size(Enc29@bin),
if Enc29@len < 128 ->
[align,
Enc29@len|Enc29@bin];
Enc29@len < 16384 ->
[align,
<<2:2,Enc29@len:14>>|Enc29@bin];
true ->
[align|encode_fragmented(Enc29@bin, 8)]
end
end
end
end,
begin
Enc31@element = element(12, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc32@output = enc_GatekeeperConfirm_integrity(Enc31@element),
Enc32@bin = complete(Enc32@output),
Enc32@len = byte_size(Enc32@bin),
if Enc32@len < 128 ->
[align,
Enc32@len|Enc32@bin];
Enc32@len < 16384 ->
[align,
<<2:2,Enc32@len:14>>|Enc32@bin];
true ->
[align|encode_fragmented(Enc32@bin, 8)]
end
end
end
end,
begin
Enc34@element = element(13, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc35@output = enc_ICV(Enc34@element),
Enc35@bin = complete(Enc35@output),
Enc35@len = byte_size(Enc35@bin),
if Enc35@len < 128 ->
[align,
Enc35@len|Enc35@bin];
Enc35@len < 16384 ->
[align,
<<2:2,Enc35@len:14>>|Enc35@bin];
true ->
[align|encode_fragmented(Enc35@bin, 8)]
end
end
end
end,
begin
Enc37@element = element(14, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc38@output = enc_FeatureSet(Enc37@element),
Enc38@bin = complete(Enc38@output),
Enc38@len = byte_size(Enc38@bin),
if Enc38@len < 128 ->
[align,
Enc38@len|Enc38@bin];
Enc38@len < 16384 ->
[align,
<<2:2,Enc38@len:14>>|Enc38@bin];
true ->
[align|encode_fragmented(Enc38@bin, 8)]
end
end
end
end|begin
Enc40@element = element(15, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc41@output = enc_GatekeeperConfirm_genericData(Enc40@element),
Enc41@bin = complete(Enc41@output),
Enc41@len = byte_size(Enc41@bin),
if Enc41@len < 128 ->
[align,
Enc41@len|Enc41@bin];
Enc41@len < 16384 ->
[align,
<<2:2,Enc41@len:14>>|Enc41@bin];
true ->
[align|encode_fragmented(Enc41@bin, 8)]
end
end
end
end].
'enc_GatekeeperConfirm_alternateGatekeeper'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AlternateGK(Comp) || Comp <- Val]].


dec_GatekeeperConfirm_alternateGatekeeper(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components130(V1@V0, V1@Buf1, []).

'enc_GatekeeperConfirm_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_GatekeeperConfirm_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components131(V1@V0, V1@Buf1, []).

'enc_GatekeeperConfirm_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_GatekeeperConfirm_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components132(V1@V0, V1@Buf1, []).

'enc_GatekeeperConfirm_integrity'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_IntegrityMechanism(Comp) || Comp <- Val]].


dec_GatekeeperConfirm_integrity(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components133(V1@V0, V1@Buf1, []).

'enc_GatekeeperConfirm_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_GatekeeperConfirm_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components134(V1@V0, V1@Buf1, []).



dec_GatekeeperConfirm(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type OBJECT IDENTIFIER
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:7,V4@Buf4/bitstring>> ->
{V4@V3,V4@Buf4};
<<1:1,0:1,V4@V4:14,V4@Buf5/bitstring>> ->
{V4@V4,V4@Buf5}
end,
<<V4@V6:V4@V0/binary-unit:8,V4@Buf7/bitstring>> = V4@Buf1,
V4@Conv8 = binary_to_list(V4@V6),
{V4@V9,V4@Buf10}  = {decode_oid(V4@Conv8),V4@Buf7},
{V4@V9,V4@Buf10}
end,

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type BMPString
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V5@V0:7/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes5,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/binary-unit:16,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V7,V5@Buf8}  = {decode_chars_16bit(V5@V3),V5@Buf4},
{V5@V7,V5@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type TransportAddress
{Term5,Bytes7} = dec_TransportAddress(Bytes6),

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = 'dec_GatekeeperConfirm_alternateGatekeeper'(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type AuthenticationMechanism
{Term7,Bytes10} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = 'H235-SECURITY-MESSAGES':dec_AuthenticationMechanism(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes11} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = 'dec_GatekeeperConfirm_tokens'(V9@V0),
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes12} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes11) band 7,
{V10@V0,V10@Buf1} = case Bytes11 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx9,_} = 'dec_GatekeeperConfirm_cryptoTokens'(V10@V0),
{TmpValx9,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type OBJECT IDENTIFIER
{Term10,Bytes13} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes12) band 7,
{V11@V0,V11@Buf1} = case Bytes12 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx10,_} = begin
V12@Pad3 = bit_size(V11@V0) band 7,
{V12@V0,V12@Buf1} = case V11@V0 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@Buf6/bitstring>> ->
{V12@V5,V12@Buf6};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@Buf7/bitstring>> ->
{V12@V6,V12@Buf7}
end,
<<V12@V8:V12@V0/binary-unit:8,V12@Buf9/bitstring>> = V12@Buf1,
V12@Conv10 = binary_to_list(V12@V8),
{V12@V11,V12@Buf12}  = {decode_oid(V12@Conv10),V12@Buf9},
{V12@V11,V12@Buf12}
end,
{TmpValx10,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes14} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes13) band 7,
{V13@V0,V13@Buf1} = case Bytes13 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx11,_} = 'dec_GatekeeperConfirm_integrity'(V13@V0),
{TmpValx11,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type ICV
{Term12,Bytes15} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes14) band 7,
{V14@V0,V14@Buf1} = case Bytes14 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx12,_} = dec_ICV(V14@V0),
{TmpValx12,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type FeatureSet
{Term13,Bytes16} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V15@Pad3 = bit_size(Bytes15) band 7,
{V15@V0,V15@Buf1} = case Bytes15 of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
{TmpValx13,_} = dec_FeatureSet(V15@V0),
{TmpValx13,V15@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type SEQUENCE OF
{Term14,Bytes17} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes16) band 7,
{V16@V0,V16@Buf1} = case Bytes16 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx14,_} = 'dec_GatekeeperConfirm_genericData'(V16@V0),
{TmpValx14,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,
Bytes18= skipextensions(Bytes17, 10, Extensions),
{{'GatekeeperConfirm',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14},Bytes18}.

'enc_GatekeeperReject'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 7, 13),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<5:7,Enc3@bitmap:6>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(5, Val),
if Enc2@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc5@element = element(2, Val),
Enc5@element@sub = Enc5@element - 1,
if 0 =< Enc5@element@sub, Enc5@element@sub < 65535 ->
<<Enc5@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(3, Val),
Enc8@bin = encode_oid(Enc7@element),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
encode_fragmented(Enc8@bin, 8)
end
end,
begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc9@element)
end
end,
begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@len = length(Enc11@element),
Enc12@bin = encode_chars_16bit(Enc11@element),
Enc12@len@sub = Enc12@len - 1,
if Enc12@len@sub bsr 7 =:= 0 ->
[<<Enc12@len@sub:7>>,
align|Enc12@bin]
end
end
end
end,
begin
Enc14@element = element(6, Val),
enc_GatekeeperRejectReason(Enc14@element)
end,
Extensions,
begin
Enc15@element = element(7, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = enc_AltGKInfo(Enc15@element),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[align|encode_fragmented(Enc16@bin, 8)]
end
end
end
end,
begin
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@output = enc_GatekeeperReject_tokens(Enc18@element),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[align|encode_fragmented(Enc19@bin, 8)]
end
end
end
end,
begin
Enc21@element = element(9, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@output = enc_GatekeeperReject_cryptoTokens(Enc21@element),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[align|encode_fragmented(Enc22@bin, 8)]
end
end
end
end,
begin
Enc24@element = element(10, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc25@output = enc_ICV(Enc24@element),
Enc25@bin = complete(Enc25@output),
Enc25@len = byte_size(Enc25@bin),
if Enc25@len < 128 ->
[align,
Enc25@len|Enc25@bin];
Enc25@len < 16384 ->
[align,
<<2:2,Enc25@len:14>>|Enc25@bin];
true ->
[align|encode_fragmented(Enc25@bin, 8)]
end
end
end
end,
begin
Enc27@element = element(11, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc28@output = enc_FeatureSet(Enc27@element),
Enc28@bin = complete(Enc28@output),
Enc28@len = byte_size(Enc28@bin),
if Enc28@len < 128 ->
[align,
Enc28@len|Enc28@bin];
Enc28@len < 16384 ->
[align,
<<2:2,Enc28@len:14>>|Enc28@bin];
true ->
[align|encode_fragmented(Enc28@bin, 8)]
end
end
end
end|begin
Enc30@element = element(12, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@output = enc_GatekeeperReject_genericData(Enc30@element),
Enc31@bin = complete(Enc31@output),
Enc31@len = byte_size(Enc31@bin),
if Enc31@len < 128 ->
[align,
Enc31@len|Enc31@bin];
Enc31@len < 16384 ->
[align,
<<2:2,Enc31@len:14>>|Enc31@bin];
true ->
[align|encode_fragmented(Enc31@bin, 8)]
end
end
end
end].
'enc_GatekeeperReject_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_GatekeeperReject_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components135(V1@V0, V1@Buf1, []).

'enc_GatekeeperReject_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_GatekeeperReject_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components136(V1@V0, V1@Buf1, []).

'enc_GatekeeperReject_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_GatekeeperReject_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components137(V1@V0, V1@Buf1, []).



dec_GatekeeperReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type OBJECT IDENTIFIER
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:7,V4@Buf4/bitstring>> ->
{V4@V3,V4@Buf4};
<<1:1,0:1,V4@V4:14,V4@Buf5/bitstring>> ->
{V4@V4,V4@Buf5}
end,
<<V4@V6:V4@V0/binary-unit:8,V4@Buf7/bitstring>> = V4@Buf1,
V4@Conv8 = binary_to_list(V4@V6),
{V4@V9,V4@Buf10}  = {decode_oid(V4@Conv8),V4@Buf7},
{V4@V9,V4@Buf10}
end,

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type BMPString
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V5@V0:7/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes5,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/binary-unit:16,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V7,V5@Buf8}  = {decode_chars_16bit(V5@V3),V5@Buf4},
{V5@V7,V5@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type GatekeeperRejectReason
{Term5,Bytes7} = dec_GatekeeperRejectReason(Bytes6),

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,

%% attribute number 6 with type AltGKInfo
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = dec_AltGKInfo(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes10} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = 'dec_GatekeeperReject_tokens'(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes11} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = 'dec_GatekeeperReject_cryptoTokens'(V9@V0),
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type ICV
{Term9,Bytes12} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes11) band 7,
{V10@V0,V10@Buf1} = case Bytes11 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx9,_} = dec_ICV(V10@V0),
{TmpValx9,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type FeatureSet
{Term10,Bytes13} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes12) band 7,
{V11@V0,V11@Buf1} = case Bytes12 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx10,_} = dec_FeatureSet(V11@V0),
{TmpValx10,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes14} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes13) band 7,
{V12@V0,V12@Buf1} = case Bytes13 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx11,_} = 'dec_GatekeeperReject_genericData'(V12@V0),
{TmpValx11,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,
Bytes15= skipextensions(Bytes14, 7, Extensions),
{{'GatekeeperReject',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},Bytes15}.

'enc_GatekeeperRejectReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= resourceUnavailable ->
<<0:1,0:2>>;
ChoiceTag =:= terminalExcluded ->
<<0:1,1:2>>;
ChoiceTag =:= invalidRevision ->
<<0:1,2:2>>;
ChoiceTag =:= undefinedReason ->
<<0:1,3:2>>;
ChoiceTag =:= securityDenial ->
begin
Enc5@output = [],
Enc5@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc5@bin]
end;
ChoiceTag =:= genericDataReason ->
begin
Enc6@output = [],
Enc6@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc6@bin]
end;
ChoiceTag =:= neededFeatureNotSupported ->
begin
Enc7@output = [],
Enc7@bin = <<0:8>>,
[<<1:1,2:7>>,
align,
1|Enc7@bin]
end;
ChoiceTag =:= securityError ->
begin
Enc8@output = enc_SecurityErrors(ChoiceVal),
Enc8@bin = complete(Enc8@output),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[<<1:1,3:7>>,
align,
Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[<<1:1,3:7>>,
align,
<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
[<<1:1,3:7>>,
align|encode_fragmented(Enc8@bin, 8)]
end
end
end.


dec_GatekeeperRejectReason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{resourceUnavailable,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{terminalExcluded,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invalidRevision,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefinedReason,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{securityDenial,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{genericDataReason,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{neededFeatureNotSupported,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_SecurityErrors(V2@V0),
{TmpVal,V2@Buf1}
end,
{{securityError,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_RegistrationRequest'(Val) ->
Enc4@bitmap = extension_bitmap(Val, 12, 35),
Extensions = if Enc4@bitmap =:= 0 ->
[];
true ->
<<22:7,Enc4@bitmap:23>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(9, Val),
Enc3@element = element(10, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc6@element = element(2, Val),
Enc6@element@sub = Enc6@element - 1,
if 0 =< Enc6@element@sub, Enc6@element@sub < 65535 ->
<<Enc6@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end,
begin
Enc8@element = element(3, Val),
Enc9@bin = encode_oid(Enc8@element),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
encode_fragmented(Enc9@bin, 8)
end
end,
begin
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc10@element)
end
end,
begin
Enc12@element = element(5, Val),
if Enc12@element =:= false ->
<<0:1>>;
Enc12@element =:= true ->
<<1:1>>
end
end,
begin
Enc14@element = element(6, Val),
enc_RegistrationRequest_callSignalAddress(Enc14@element)
end,
begin
Enc15@element = element(7, Val),
enc_RegistrationRequest_rasAddress(Enc15@element)
end,
begin
Enc16@element = element(8, Val),
enc_EndpointType(Enc16@element)
end,
begin
Enc17@element = element(9, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_RegistrationRequest_terminalAlias(Enc17@element)
end
end,
begin
Enc19@element = element(10, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@len = length(Enc19@element),
Enc20@bin = encode_chars_16bit(Enc19@element),
Enc20@len@sub = Enc20@len - 1,
if Enc20@len@sub bsr 7 =:= 0 ->
[<<Enc20@len@sub:7>>,
align|Enc20@bin]
end
end
end
end,
begin
Enc22@element = element(11, Val),
enc_VendorIdentifier(Enc22@element)
end,
Extensions,
begin
Enc23@element = element(12, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc24@output = enc_RegistrationRequest_alternateEndpoints(Enc23@element),
Enc24@bin = complete(Enc24@output),
Enc24@len = byte_size(Enc24@bin),
if Enc24@len < 128 ->
[align,
Enc24@len|Enc24@bin];
Enc24@len < 16384 ->
[align,
<<2:2,Enc24@len:14>>|Enc24@bin];
true ->
[align|encode_fragmented(Enc24@bin, 8)]
end
end
end
end,
begin
Enc26@element = element(13, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc28@output = begin
Enc26@element@sub = Enc26@element - 1,
if 0 =< Enc26@element@sub, Enc26@element@sub < 4294967295 ->
begin
Enc26@element@sub@bin = binary:encode_unsigned(Enc26@element@sub),
Enc26@element@sub@bin_size0 = byte_size(Enc26@element@sub@bin),
Enc26@element@sub@bin_size = Enc26@element@sub@bin_size0 - 1,
[<<Enc26@element@sub@bin_size:2,0:6>>|Enc26@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc26@element}}})
end
end,
Enc28@bin = iolist_to_binary(Enc28@output),
Enc28@len = byte_size(Enc28@bin),
[align,
Enc28@len|Enc28@bin]
end
end
end,
begin
Enc30@element = element(14, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@output = enc_RegistrationRequest_tokens(Enc30@element),
Enc31@bin = complete(Enc31@output),
Enc31@len = byte_size(Enc31@bin),
if Enc31@len < 128 ->
[align,
Enc31@len|Enc31@bin];
Enc31@len < 16384 ->
[align,
<<2:2,Enc31@len:14>>|Enc31@bin];
true ->
[align|encode_fragmented(Enc31@bin, 8)]
end
end
end
end,
begin
Enc33@element = element(15, Val),
if Enc33@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc34@output = enc_RegistrationRequest_cryptoTokens(Enc33@element),
Enc34@bin = complete(Enc34@output),
Enc34@len = byte_size(Enc34@bin),
if Enc34@len < 128 ->
[align,
Enc34@len|Enc34@bin];
Enc34@len < 16384 ->
[align,
<<2:2,Enc34@len:14>>|Enc34@bin];
true ->
[align|encode_fragmented(Enc34@bin, 8)]
end
end
end
end,
begin
Enc36@element = element(16, Val),
if Enc36@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc37@output = enc_ICV(Enc36@element),
Enc37@bin = complete(Enc37@output),
Enc37@len = byte_size(Enc37@bin),
if Enc37@len < 128 ->
[align,
Enc37@len|Enc37@bin];
Enc37@len < 16384 ->
[align,
<<2:2,Enc37@len:14>>|Enc37@bin];
true ->
[align|encode_fragmented(Enc37@bin, 8)]
end
end
end
end,
begin
Enc39@element = element(17, Val),
if Enc39@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc41@output = if Enc39@element =:= false ->
<<0:1,0:7>>;
Enc39@element =:= true ->
<<1:1,0:7>>
end,
Enc41@bin = Enc41@output,
[align,
1|Enc41@bin]
end
end
end,
begin
Enc43@element = element(18, Val),
if Enc43@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@output = begin
Enc44@len = length(Enc43@element),
Enc44@bin = encode_chars_16bit(Enc43@element),
Enc44@len@sub = Enc44@len - 1,
if Enc44@len@sub bsr 7 =:= 0 ->
[<<Enc44@len@sub:7,0:1>>|Enc44@bin]
end
end,
Enc45@bin = iolist_to_binary(Enc45@output),
Enc45@len = byte_size(Enc45@bin),
if Enc45@len < 128 ->
[align,
Enc45@len|Enc45@bin];
true ->
[align,
<<2:2,Enc45@len:14>>|Enc45@bin]
end
end
end
end,
begin
Enc47@element = element(19, Val),
if Enc47@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc49@output = if Enc47@element =:= false ->
<<0:1,0:7>>;
Enc47@element =:= true ->
<<1:1,0:7>>
end,
Enc49@bin = Enc49@output,
[align,
1|Enc49@bin]
end
end
end,
begin
Enc51@element = element(20, Val),
if Enc51@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc53@output = if Enc51@element =:= false ->
<<0:1,0:7>>;
Enc51@element =:= true ->
<<1:1,0:7>>
end,
Enc53@bin = Enc53@output,
[align,
1|Enc53@bin]
end
end
end,
begin
Enc55@element = element(21, Val),
if Enc55@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc56@output = enc_AlternateTransportAddresses(Enc55@element),
Enc56@bin = complete(Enc56@output),
Enc56@len = byte_size(Enc56@bin),
if Enc56@len < 128 ->
[align,
Enc56@len|Enc56@bin];
Enc56@len < 16384 ->
[align,
<<2:2,Enc56@len:14>>|Enc56@bin];
true ->
[align|encode_fragmented(Enc56@bin, 8)]
end
end
end
end,
begin
Enc58@element = element(22, Val),
if Enc58@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc59@output = [],
Enc59@bin = <<0:8>>,
[align,
1|Enc59@bin]
end
end
end,
begin
Enc61@element = element(23, Val),
if Enc61@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc62@output = enc_RegistrationRequest_terminalAliasPattern(Enc61@element),
Enc62@bin = complete(Enc62@output),
Enc62@len = byte_size(Enc62@bin),
if Enc62@len < 128 ->
[align,
Enc62@len|Enc62@bin];
Enc62@len < 16384 ->
[align,
<<2:2,Enc62@len:14>>|Enc62@bin];
true ->
[align|encode_fragmented(Enc62@bin, 8)]
end
end
end
end,
begin
Enc64@element = element(24, Val),
if Enc64@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc65@output = [],
Enc65@bin = <<0:8>>,
[align,
1|Enc65@bin]
end
end
end,
begin
Enc67@element = element(25, Val),
if Enc67@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc68@output = enc_RasUsageInfoTypes(Enc67@element),
Enc68@bin = complete(Enc68@output),
Enc68@len = byte_size(Enc68@bin),
if Enc68@len < 128 ->
[align,
Enc68@len|Enc68@bin];
Enc68@len < 16384 ->
[align,
<<2:2,Enc68@len:14>>|Enc68@bin];
true ->
[align|encode_fragmented(Enc68@bin, 8)]
end
end
end
end,
begin
Enc70@element = element(26, Val),
if Enc70@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc72@output = if Enc70@element =:= false ->
<<0:1,0:7>>;
Enc70@element =:= true ->
<<1:1,0:7>>
end,
Enc72@bin = Enc72@output,
[align,
1|Enc72@bin]
end
end
end,
begin
Enc74@element = element(27, Val),
if Enc74@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc75@output = enc_RegistrationRequest_supportedH248Packages(Enc74@element),
Enc75@bin = complete(Enc75@output),
Enc75@len = byte_size(Enc75@bin),
if Enc75@len < 128 ->
[align,
Enc75@len|Enc75@bin];
Enc75@len < 16384 ->
[align,
<<2:2,Enc75@len:14>>|Enc75@bin];
true ->
[align|encode_fragmented(Enc75@bin, 8)]
end
end
end
end,
begin
Enc77@element = element(28, Val),
if Enc77@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc78@output = enc_CallCreditCapability(Enc77@element),
Enc78@bin = complete(Enc78@output),
Enc78@len = byte_size(Enc78@bin),
if Enc78@len < 128 ->
[align,
Enc78@len|Enc78@bin];
Enc78@len < 16384 ->
[align,
<<2:2,Enc78@len:14>>|Enc78@bin];
true ->
[align|encode_fragmented(Enc78@bin, 8)]
end
end
end
end,
begin
Enc80@element = element(29, Val),
if Enc80@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc81@output = enc_CapacityReportingCapability(Enc80@element),
Enc81@bin = complete(Enc81@output),
Enc81@len = byte_size(Enc81@bin),
if Enc81@len < 128 ->
[align,
Enc81@len|Enc81@bin];
Enc81@len < 16384 ->
[align,
<<2:2,Enc81@len:14>>|Enc81@bin];
true ->
[align|encode_fragmented(Enc81@bin, 8)]
end
end
end
end,
begin
Enc83@element = element(30, Val),
if Enc83@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc84@output = enc_CallCapacity(Enc83@element),
Enc84@bin = complete(Enc84@output),
Enc84@len = byte_size(Enc84@bin),
if Enc84@len < 128 ->
[align,
Enc84@len|Enc84@bin];
Enc84@len < 16384 ->
[align,
<<2:2,Enc84@len:14>>|Enc84@bin];
true ->
[align|encode_fragmented(Enc84@bin, 8)]
end
end
end
end,
begin
Enc86@element = element(31, Val),
if Enc86@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc87@output = enc_FeatureSet(Enc86@element),
Enc87@bin = complete(Enc87@output),
Enc87@len = byte_size(Enc87@bin),
if Enc87@len < 128 ->
[align,
Enc87@len|Enc87@bin];
Enc87@len < 16384 ->
[align,
<<2:2,Enc87@len:14>>|Enc87@bin];
true ->
[align|encode_fragmented(Enc87@bin, 8)]
end
end
end
end,
begin
Enc89@element = element(32, Val),
if Enc89@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc90@output = enc_RegistrationRequest_genericData(Enc89@element),
Enc90@bin = complete(Enc90@output),
Enc90@len = byte_size(Enc90@bin),
if Enc90@len < 128 ->
[align,
Enc90@len|Enc90@bin];
Enc90@len < 16384 ->
[align,
<<2:2,Enc90@len:14>>|Enc90@bin];
true ->
[align|encode_fragmented(Enc90@bin, 8)]
end
end
end
end,
begin
Enc92@element = element(33, Val),
if Enc92@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc93@output = [],
Enc93@bin = <<0:8>>,
[align,
1|Enc93@bin]
end
end
end|begin
Enc95@element = element(34, Val),
if Enc95@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc96@output = [],
Enc96@bin = <<0:8>>,
[align,
1|Enc96@bin]
end
end
end].
'enc_RegistrationRequest_callSignalAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_TransportAddress(Comp) || Comp <- Val]].


dec_RegistrationRequest_callSignalAddress(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components138(V1@V0, V1@Buf1, []).

'enc_RegistrationRequest_rasAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_TransportAddress(Comp) || Comp <- Val]].


dec_RegistrationRequest_rasAddress(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components139(V1@V0, V1@Buf1, []).

'enc_RegistrationRequest_terminalAlias'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_RegistrationRequest_terminalAlias(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components140(V1@V0, V1@Buf1, []).

'enc_RegistrationRequest_alternateEndpoints'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_Endpoint(Comp) || Comp <- Val]].


dec_RegistrationRequest_alternateEndpoints(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components141(V1@V0, V1@Buf1, []).

'enc_RegistrationRequest_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_RegistrationRequest_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components142(V1@V0, V1@Buf1, []).

'enc_RegistrationRequest_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_RegistrationRequest_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components143(V1@V0, V1@Buf1, []).

'enc_RegistrationRequest_terminalAliasPattern'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AddressPattern(Comp) || Comp <- Val]].


dec_RegistrationRequest_terminalAliasPattern(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components144(V1@V0, V1@Buf1, []).

'enc_RegistrationRequest_supportedH248Packages'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len < 128 ->
[Enc1@len|Comp];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Comp];
true ->
encode_fragmented(Comp, 8)
end
end || Comp <- Val]].


dec_RegistrationRequest_supportedH248Packages(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components145(V1@V0, V1@Buf1, []).

'enc_RegistrationRequest_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_RegistrationRequest_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components146(V1@V0, V1@Buf1, []).



dec_RegistrationRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type OBJECT IDENTIFIER
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:7,V4@Buf4/bitstring>> ->
{V4@V3,V4@Buf4};
<<1:1,0:1,V4@V4:14,V4@Buf5/bitstring>> ->
{V4@V4,V4@Buf5}
end,
<<V4@V6:V4@V0/binary-unit:8,V4@Buf7/bitstring>> = V4@Buf1,
V4@Conv8 = binary_to_list(V4@V6),
{V4@V9,V4@Buf10}  = {decode_oid(V4@Conv8),V4@Buf7},
{V4@V9,V4@Buf10}
end,

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes5,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = 'dec_RegistrationRequest_callSignalAddress'(Bytes6),

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = 'dec_RegistrationRequest_rasAddress'(Bytes7),

%% attribute number 7 with type EndpointType
{Term7,Bytes9} = dec_EndpointType(Bytes8),

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes10} = case (Opt bsr 1) band 1 of
1 ->
'dec_RegistrationRequest_terminalAlias'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type BMPString
{Term9,Bytes11} = case Opt band 1 of
1 ->
begin
<<V6@V0:7/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes10,
V6@Add2 = V6@V0 + 1,
V6@Pad5 = bit_size(V6@Buf1) band 7,
<<_:V6@Pad5,V6@V3:V6@Add2/binary-unit:16,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V7,V6@Buf8}  = {decode_chars_16bit(V6@V3),V6@Buf4},
{V6@V7,V6@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type VendorIdentifier
{Term10,Bytes12} = dec_VendorIdentifier(Bytes11),

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V7@V0,V7@Buf1} = case Bytes12 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes14} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes13) band 7,
{V8@V0,V8@Buf1} = case Bytes13 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx11,_} = 'dec_RegistrationRequest_alternateEndpoints'(V8@V0),
{TmpValx11,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type INTEGER
{Term12,Bytes15} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes14) band 7,
{V9@V0,V9@Buf1} = case Bytes14 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx12,_} = begin
<<V10@V0:2/unsigned-unit:1,V10@Buf1/bitstring>> = V9@V0,
V10@Add2 = V10@V0 + 1,
V10@Pad5 = bit_size(V10@Buf1) band 7,
<<_:V10@Pad5,V10@V3:V10@Add2/unsigned-unit:8,V10@Buf4/bitstring>> = V10@Buf1,
V10@Add7 = V10@V3 + 1,
{V10@Add7,V10@Buf4}
end,
{TmpValx12,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type SEQUENCE OF
{Term13,Bytes16} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes15) band 7,
{V11@V0,V11@Buf1} = case Bytes15 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx13,_} = 'dec_RegistrationRequest_tokens'(V11@V0),
{TmpValx13,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type SEQUENCE OF
{Term14,Bytes17} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes16) band 7,
{V12@V0,V12@Buf1} = case Bytes16 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx14,_} = 'dec_RegistrationRequest_cryptoTokens'(V12@V0),
{TmpValx14,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type ICV
{Term15,Bytes18} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes17) band 7,
{V13@V0,V13@Buf1} = case Bytes17 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx15,_} = dec_ICV(V13@V0),
{TmpValx15,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type BOOLEAN
{Term16,Bytes19} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes18) band 7,
{V14@V0,V14@Buf1} = case Bytes18 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx16,_} = begin
<<V15@V0:1,V15@Buf1/bitstring>> = V14@V0,
V15@Int2 = case V15@V0 of
0 -> false;
1 -> true
end,
{V15@Int2,V15@Buf1}
end,
{TmpValx16,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type BMPString
{Term17,Bytes20} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes19) band 7,
{V16@V0,V16@Buf1} = case Bytes19 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx17,_} = begin
<<V17@V0:7/unsigned-unit:1,V17@Buf1/bitstring>> = V16@V0,
V17@Add2 = V17@V0 + 1,
V17@Pad5 = bit_size(V17@Buf1) band 7,
<<_:V17@Pad5,V17@V3:V17@Add2/binary-unit:16,V17@Buf4/bitstring>> = V17@Buf1,
{V17@V7,V17@Buf8}  = {decode_chars_16bit(V17@V3),V17@Buf4},
{V17@V7,V17@Buf8}
end,
{TmpValx17,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type BOOLEAN
{Term18,Bytes21} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V18@Pad3 = bit_size(Bytes20) band 7,
{V18@V0,V18@Buf1} = case Bytes20 of
<<_:V18@Pad3,0:1,V18@V5:7,V18@V7:V18@V5/binary-unit:8,V18@Buf8/bitstring>> ->
{V18@V7,V18@Buf8};
<<_:V18@Pad3,1:1,0:1,V18@V6:14,V18@V8:V18@V6/binary-unit:8,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<_:V18@Pad3,1:1,1:1,V18@V6:6,V18@Buf7/bitstring>> ->
{V18@V8,V18@Buf9}  = decode_fragmented(V18@V6, V18@Buf7, 8),
{V18@V8,V18@Buf9}
end,
{TmpValx18,_} = begin
<<V19@V0:1,V19@Buf1/bitstring>> = V18@V0,
V19@Int2 = case V19@V0 of
0 -> false;
1 -> true
end,
{V19@Int2,V19@Buf1}
end,
{TmpValx18,V18@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute number 19 with type BOOLEAN
{Term19,Bytes22} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V20@Pad3 = bit_size(Bytes21) band 7,
{V20@V0,V20@Buf1} = case Bytes21 of
<<_:V20@Pad3,0:1,V20@V5:7,V20@V7:V20@V5/binary-unit:8,V20@Buf8/bitstring>> ->
{V20@V7,V20@Buf8};
<<_:V20@Pad3,1:1,0:1,V20@V6:14,V20@V8:V20@V6/binary-unit:8,V20@Buf9/bitstring>> ->
{V20@V8,V20@Buf9};
<<_:V20@Pad3,1:1,1:1,V20@V6:6,V20@Buf7/bitstring>> ->
{V20@V8,V20@Buf9}  = decode_fragmented(V20@V6, V20@Buf7, 8),
{V20@V8,V20@Buf9}
end,
{TmpValx19,_} = begin
<<V21@V0:1,V21@Buf1/bitstring>> = V20@V0,
V21@Int2 = case V21@V0 of
0 -> false;
1 -> true
end,
{V21@Int2,V21@Buf1}
end,
{TmpValx19,V20@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes21}
end,

%% attribute number 20 with type AlternateTransportAddresses
{Term20,Bytes23} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V22@Pad3 = bit_size(Bytes22) band 7,
{V22@V0,V22@Buf1} = case Bytes22 of
<<_:V22@Pad3,0:1,V22@V5:7,V22@V7:V22@V5/binary-unit:8,V22@Buf8/bitstring>> ->
{V22@V7,V22@Buf8};
<<_:V22@Pad3,1:1,0:1,V22@V6:14,V22@V8:V22@V6/binary-unit:8,V22@Buf9/bitstring>> ->
{V22@V8,V22@Buf9};
<<_:V22@Pad3,1:1,1:1,V22@V6:6,V22@Buf7/bitstring>> ->
{V22@V8,V22@Buf9}  = decode_fragmented(V22@V6, V22@Buf7, 8),
{V22@V8,V22@Buf9}
end,
{TmpValx20,_} = dec_AlternateTransportAddresses(V22@V0),
{TmpValx20,V22@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes22}
end,

%% attribute number 21 with type NULL
{Term21,Bytes24} = case Extensions of
  <<_:10,1:1,_/bitstring>> ->
begin
V23@Pad3 = bit_size(Bytes23) band 7,
{V23@V0,V23@Buf1} = case Bytes23 of
<<_:V23@Pad3,0:1,V23@V5:7,V23@V7:V23@V5/binary-unit:8,V23@Buf8/bitstring>> ->
{V23@V7,V23@Buf8};
<<_:V23@Pad3,1:1,0:1,V23@V6:14,V23@V8:V23@V6/binary-unit:8,V23@Buf9/bitstring>> ->
{V23@V8,V23@Buf9};
<<_:V23@Pad3,1:1,1:1,V23@V6:6,V23@Buf7/bitstring>> ->
{V23@V8,V23@Buf9}  = decode_fragmented(V23@V6, V23@Buf7, 8),
{V23@V8,V23@Buf9}
end,
{TmpValx21,_} = begin
ignore,
{'NULL',V23@V0}
end,
{TmpValx21,V23@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes23}
end,

%% attribute number 22 with type SEQUENCE OF
{Term22,Bytes25} = case Extensions of
  <<_:11,1:1,_/bitstring>> ->
begin
V25@Pad3 = bit_size(Bytes24) band 7,
{V25@V0,V25@Buf1} = case Bytes24 of
<<_:V25@Pad3,0:1,V25@V5:7,V25@V7:V25@V5/binary-unit:8,V25@Buf8/bitstring>> ->
{V25@V7,V25@Buf8};
<<_:V25@Pad3,1:1,0:1,V25@V6:14,V25@V8:V25@V6/binary-unit:8,V25@Buf9/bitstring>> ->
{V25@V8,V25@Buf9};
<<_:V25@Pad3,1:1,1:1,V25@V6:6,V25@Buf7/bitstring>> ->
{V25@V8,V25@Buf9}  = decode_fragmented(V25@V6, V25@Buf7, 8),
{V25@V8,V25@Buf9}
end,
{TmpValx22,_} = 'dec_RegistrationRequest_terminalAliasPattern'(V25@V0),
{TmpValx22,V25@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes24}
end,

%% attribute number 23 with type NULL
{Term23,Bytes26} = case Extensions of
  <<_:12,1:1,_/bitstring>> ->
begin
V26@Pad3 = bit_size(Bytes25) band 7,
{V26@V0,V26@Buf1} = case Bytes25 of
<<_:V26@Pad3,0:1,V26@V5:7,V26@V7:V26@V5/binary-unit:8,V26@Buf8/bitstring>> ->
{V26@V7,V26@Buf8};
<<_:V26@Pad3,1:1,0:1,V26@V6:14,V26@V8:V26@V6/binary-unit:8,V26@Buf9/bitstring>> ->
{V26@V8,V26@Buf9};
<<_:V26@Pad3,1:1,1:1,V26@V6:6,V26@Buf7/bitstring>> ->
{V26@V8,V26@Buf9}  = decode_fragmented(V26@V6, V26@Buf7, 8),
{V26@V8,V26@Buf9}
end,
{TmpValx23,_} = begin
ignore,
{'NULL',V26@V0}
end,
{TmpValx23,V26@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes25}
end,

%% attribute number 24 with type RasUsageInfoTypes
{Term24,Bytes27} = case Extensions of
  <<_:13,1:1,_/bitstring>> ->
begin
V28@Pad3 = bit_size(Bytes26) band 7,
{V28@V0,V28@Buf1} = case Bytes26 of
<<_:V28@Pad3,0:1,V28@V5:7,V28@V7:V28@V5/binary-unit:8,V28@Buf8/bitstring>> ->
{V28@V7,V28@Buf8};
<<_:V28@Pad3,1:1,0:1,V28@V6:14,V28@V8:V28@V6/binary-unit:8,V28@Buf9/bitstring>> ->
{V28@V8,V28@Buf9};
<<_:V28@Pad3,1:1,1:1,V28@V6:6,V28@Buf7/bitstring>> ->
{V28@V8,V28@Buf9}  = decode_fragmented(V28@V6, V28@Buf7, 8),
{V28@V8,V28@Buf9}
end,
{TmpValx24,_} = dec_RasUsageInfoTypes(V28@V0),
{TmpValx24,V28@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes26}
end,

%% attribute number 25 with type BOOLEAN
{Term25,Bytes28} = case Extensions of
  <<_:14,1:1,_/bitstring>> ->
begin
V29@Pad3 = bit_size(Bytes27) band 7,
{V29@V0,V29@Buf1} = case Bytes27 of
<<_:V29@Pad3,0:1,V29@V5:7,V29@V7:V29@V5/binary-unit:8,V29@Buf8/bitstring>> ->
{V29@V7,V29@Buf8};
<<_:V29@Pad3,1:1,0:1,V29@V6:14,V29@V8:V29@V6/binary-unit:8,V29@Buf9/bitstring>> ->
{V29@V8,V29@Buf9};
<<_:V29@Pad3,1:1,1:1,V29@V6:6,V29@Buf7/bitstring>> ->
{V29@V8,V29@Buf9}  = decode_fragmented(V29@V6, V29@Buf7, 8),
{V29@V8,V29@Buf9}
end,
{TmpValx25,_} = begin
<<V30@V0:1,V30@Buf1/bitstring>> = V29@V0,
V30@Int2 = case V30@V0 of
0 -> false;
1 -> true
end,
{V30@Int2,V30@Buf1}
end,
{TmpValx25,V29@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes27}
end,

%% attribute number 26 with type SEQUENCE OF
{Term26,Bytes29} = case Extensions of
  <<_:15,1:1,_/bitstring>> ->
begin
V31@Pad3 = bit_size(Bytes28) band 7,
{V31@V0,V31@Buf1} = case Bytes28 of
<<_:V31@Pad3,0:1,V31@V5:7,V31@V7:V31@V5/binary-unit:8,V31@Buf8/bitstring>> ->
{V31@V7,V31@Buf8};
<<_:V31@Pad3,1:1,0:1,V31@V6:14,V31@V8:V31@V6/binary-unit:8,V31@Buf9/bitstring>> ->
{V31@V8,V31@Buf9};
<<_:V31@Pad3,1:1,1:1,V31@V6:6,V31@Buf7/bitstring>> ->
{V31@V8,V31@Buf9}  = decode_fragmented(V31@V6, V31@Buf7, 8),
{V31@V8,V31@Buf9}
end,
{TmpValx26,_} = 'dec_RegistrationRequest_supportedH248Packages'(V31@V0),
{TmpValx26,V31@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes28}
end,

%% attribute number 27 with type CallCreditCapability
{Term27,Bytes30} = case Extensions of
  <<_:16,1:1,_/bitstring>> ->
begin
V32@Pad3 = bit_size(Bytes29) band 7,
{V32@V0,V32@Buf1} = case Bytes29 of
<<_:V32@Pad3,0:1,V32@V5:7,V32@V7:V32@V5/binary-unit:8,V32@Buf8/bitstring>> ->
{V32@V7,V32@Buf8};
<<_:V32@Pad3,1:1,0:1,V32@V6:14,V32@V8:V32@V6/binary-unit:8,V32@Buf9/bitstring>> ->
{V32@V8,V32@Buf9};
<<_:V32@Pad3,1:1,1:1,V32@V6:6,V32@Buf7/bitstring>> ->
{V32@V8,V32@Buf9}  = decode_fragmented(V32@V6, V32@Buf7, 8),
{V32@V8,V32@Buf9}
end,
{TmpValx27,_} = dec_CallCreditCapability(V32@V0),
{TmpValx27,V32@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes29}
end,

%% attribute number 28 with type CapacityReportingCapability
{Term28,Bytes31} = case Extensions of
  <<_:17,1:1,_/bitstring>> ->
begin
V33@Pad3 = bit_size(Bytes30) band 7,
{V33@V0,V33@Buf1} = case Bytes30 of
<<_:V33@Pad3,0:1,V33@V5:7,V33@V7:V33@V5/binary-unit:8,V33@Buf8/bitstring>> ->
{V33@V7,V33@Buf8};
<<_:V33@Pad3,1:1,0:1,V33@V6:14,V33@V8:V33@V6/binary-unit:8,V33@Buf9/bitstring>> ->
{V33@V8,V33@Buf9};
<<_:V33@Pad3,1:1,1:1,V33@V6:6,V33@Buf7/bitstring>> ->
{V33@V8,V33@Buf9}  = decode_fragmented(V33@V6, V33@Buf7, 8),
{V33@V8,V33@Buf9}
end,
{TmpValx28,_} = dec_CapacityReportingCapability(V33@V0),
{TmpValx28,V33@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes30}
end,

%% attribute number 29 with type CallCapacity
{Term29,Bytes32} = case Extensions of
  <<_:18,1:1,_/bitstring>> ->
begin
V34@Pad3 = bit_size(Bytes31) band 7,
{V34@V0,V34@Buf1} = case Bytes31 of
<<_:V34@Pad3,0:1,V34@V5:7,V34@V7:V34@V5/binary-unit:8,V34@Buf8/bitstring>> ->
{V34@V7,V34@Buf8};
<<_:V34@Pad3,1:1,0:1,V34@V6:14,V34@V8:V34@V6/binary-unit:8,V34@Buf9/bitstring>> ->
{V34@V8,V34@Buf9};
<<_:V34@Pad3,1:1,1:1,V34@V6:6,V34@Buf7/bitstring>> ->
{V34@V8,V34@Buf9}  = decode_fragmented(V34@V6, V34@Buf7, 8),
{V34@V8,V34@Buf9}
end,
{TmpValx29,_} = dec_CallCapacity(V34@V0),
{TmpValx29,V34@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes31}
end,

%% attribute number 30 with type FeatureSet
{Term30,Bytes33} = case Extensions of
  <<_:19,1:1,_/bitstring>> ->
begin
V35@Pad3 = bit_size(Bytes32) band 7,
{V35@V0,V35@Buf1} = case Bytes32 of
<<_:V35@Pad3,0:1,V35@V5:7,V35@V7:V35@V5/binary-unit:8,V35@Buf8/bitstring>> ->
{V35@V7,V35@Buf8};
<<_:V35@Pad3,1:1,0:1,V35@V6:14,V35@V8:V35@V6/binary-unit:8,V35@Buf9/bitstring>> ->
{V35@V8,V35@Buf9};
<<_:V35@Pad3,1:1,1:1,V35@V6:6,V35@Buf7/bitstring>> ->
{V35@V8,V35@Buf9}  = decode_fragmented(V35@V6, V35@Buf7, 8),
{V35@V8,V35@Buf9}
end,
{TmpValx30,_} = dec_FeatureSet(V35@V0),
{TmpValx30,V35@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes32}
end,

%% attribute number 31 with type SEQUENCE OF
{Term31,Bytes34} = case Extensions of
  <<_:20,1:1,_/bitstring>> ->
begin
V36@Pad3 = bit_size(Bytes33) band 7,
{V36@V0,V36@Buf1} = case Bytes33 of
<<_:V36@Pad3,0:1,V36@V5:7,V36@V7:V36@V5/binary-unit:8,V36@Buf8/bitstring>> ->
{V36@V7,V36@Buf8};
<<_:V36@Pad3,1:1,0:1,V36@V6:14,V36@V8:V36@V6/binary-unit:8,V36@Buf9/bitstring>> ->
{V36@V8,V36@Buf9};
<<_:V36@Pad3,1:1,1:1,V36@V6:6,V36@Buf7/bitstring>> ->
{V36@V8,V36@Buf9}  = decode_fragmented(V36@V6, V36@Buf7, 8),
{V36@V8,V36@Buf9}
end,
{TmpValx31,_} = 'dec_RegistrationRequest_genericData'(V36@V0),
{TmpValx31,V36@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes33}
end,

%% attribute number 32 with type NULL
{Term32,Bytes35} = case Extensions of
  <<_:21,1:1,_/bitstring>> ->
begin
V37@Pad3 = bit_size(Bytes34) band 7,
{V37@V0,V37@Buf1} = case Bytes34 of
<<_:V37@Pad3,0:1,V37@V5:7,V37@V7:V37@V5/binary-unit:8,V37@Buf8/bitstring>> ->
{V37@V7,V37@Buf8};
<<_:V37@Pad3,1:1,0:1,V37@V6:14,V37@V8:V37@V6/binary-unit:8,V37@Buf9/bitstring>> ->
{V37@V8,V37@Buf9};
<<_:V37@Pad3,1:1,1:1,V37@V6:6,V37@Buf7/bitstring>> ->
{V37@V8,V37@Buf9}  = decode_fragmented(V37@V6, V37@Buf7, 8),
{V37@V8,V37@Buf9}
end,
{TmpValx32,_} = begin
ignore,
{'NULL',V37@V0}
end,
{TmpValx32,V37@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes34}
end,

%% attribute number 33 with type NULL
{Term33,Bytes36} = case Extensions of
  <<_:22,1:1,_/bitstring>> ->
begin
V39@Pad3 = bit_size(Bytes35) band 7,
{V39@V0,V39@Buf1} = case Bytes35 of
<<_:V39@Pad3,0:1,V39@V5:7,V39@V7:V39@V5/binary-unit:8,V39@Buf8/bitstring>> ->
{V39@V7,V39@Buf8};
<<_:V39@Pad3,1:1,0:1,V39@V6:14,V39@V8:V39@V6/binary-unit:8,V39@Buf9/bitstring>> ->
{V39@V8,V39@Buf9};
<<_:V39@Pad3,1:1,1:1,V39@V6:6,V39@Buf7/bitstring>> ->
{V39@V8,V39@Buf9}  = decode_fragmented(V39@V6, V39@Buf7, 8),
{V39@V8,V39@Buf9}
end,
{TmpValx33,_} = begin
ignore,
{'NULL',V39@V0}
end,
{TmpValx33,V39@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes35}
end,
Bytes37= skipextensions(Bytes36, 24, Extensions),
{{'RegistrationRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21,Term22,Term23,Term24,Term25,Term26,Term27,Term28,Term29,Term30,Term31,Term32,Term33},Bytes37}.

'enc_RegistrationConfirm'(Val) ->
Enc4@bitmap = extension_bitmap(Val, 9, 26),
Extensions = if Enc4@bitmap =:= 0 ->
[];
true ->
<<16:7,Enc4@bitmap:17>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(6, Val),
Enc3@element = element(7, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc6@element = element(2, Val),
Enc6@element@sub = Enc6@element - 1,
if 0 =< Enc6@element@sub, Enc6@element@sub < 65535 ->
<<Enc6@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end,
begin
Enc8@element = element(3, Val),
Enc9@bin = encode_oid(Enc8@element),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
encode_fragmented(Enc9@bin, 8)
end
end,
begin
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc10@element)
end
end,
begin
Enc12@element = element(5, Val),
enc_RegistrationConfirm_callSignalAddress(Enc12@element)
end,
begin
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_RegistrationConfirm_terminalAlias(Enc13@element)
end
end,
begin
Enc15@element = element(7, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@len = length(Enc15@element),
Enc16@bin = encode_chars_16bit(Enc15@element),
Enc16@len@sub = Enc16@len - 1,
if Enc16@len@sub bsr 7 =:= 0 ->
[<<Enc16@len@sub:7>>,
align|Enc16@bin]
end
end
end
end,
begin
Enc18@element = element(8, Val),
Enc19@len = length(Enc18@element),
Enc19@bin = encode_chars_16bit(Enc18@element),
Enc19@len@sub = Enc19@len - 1,
if Enc19@len@sub bsr 7 =:= 0 ->
[<<Enc19@len@sub:7>>,
align|Enc19@bin]
end
end,
Extensions,
begin
Enc20@element = element(9, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc21@output = enc_RegistrationConfirm_alternateGatekeeper(Enc20@element),
Enc21@bin = complete(Enc21@output),
Enc21@len = byte_size(Enc21@bin),
if Enc21@len < 128 ->
[align,
Enc21@len|Enc21@bin];
Enc21@len < 16384 ->
[align,
<<2:2,Enc21@len:14>>|Enc21@bin];
true ->
[align|encode_fragmented(Enc21@bin, 8)]
end
end
end
end,
begin
Enc23@element = element(10, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc25@output = begin
Enc23@element@sub = Enc23@element - 1,
if 0 =< Enc23@element@sub, Enc23@element@sub < 4294967295 ->
begin
Enc23@element@sub@bin = binary:encode_unsigned(Enc23@element@sub),
Enc23@element@sub@bin_size0 = byte_size(Enc23@element@sub@bin),
Enc23@element@sub@bin_size = Enc23@element@sub@bin_size0 - 1,
[<<Enc23@element@sub@bin_size:2,0:6>>|Enc23@element@sub@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc23@element}}})
end
end,
Enc25@bin = iolist_to_binary(Enc25@output),
Enc25@len = byte_size(Enc25@bin),
[align,
Enc25@len|Enc25@bin]
end
end
end,
begin
Enc27@element = element(11, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc28@output = enc_RegistrationConfirm_tokens(Enc27@element),
Enc28@bin = complete(Enc28@output),
Enc28@len = byte_size(Enc28@bin),
if Enc28@len < 128 ->
[align,
Enc28@len|Enc28@bin];
Enc28@len < 16384 ->
[align,
<<2:2,Enc28@len:14>>|Enc28@bin];
true ->
[align|encode_fragmented(Enc28@bin, 8)]
end
end
end
end,
begin
Enc30@element = element(12, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@output = enc_RegistrationConfirm_cryptoTokens(Enc30@element),
Enc31@bin = complete(Enc31@output),
Enc31@len = byte_size(Enc31@bin),
if Enc31@len < 128 ->
[align,
Enc31@len|Enc31@bin];
Enc31@len < 16384 ->
[align,
<<2:2,Enc31@len:14>>|Enc31@bin];
true ->
[align|encode_fragmented(Enc31@bin, 8)]
end
end
end
end,
begin
Enc33@element = element(13, Val),
if Enc33@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc34@output = enc_ICV(Enc33@element),
Enc34@bin = complete(Enc34@output),
Enc34@len = byte_size(Enc34@bin),
if Enc34@len < 128 ->
[align,
Enc34@len|Enc34@bin];
Enc34@len < 16384 ->
[align,
<<2:2,Enc34@len:14>>|Enc34@bin];
true ->
[align|encode_fragmented(Enc34@bin, 8)]
end
end
end
end,
begin
Enc36@element = element(14, Val),
if Enc36@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc38@output = if Enc36@element =:= false ->
<<0:1,0:7>>;
Enc36@element =:= true ->
<<1:1,0:7>>
end,
Enc38@bin = Enc38@output,
[align,
1|Enc38@bin]
end
end
end,
begin
Enc40@element = element(15, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc41@output = enc_RegistrationConfirm_preGrantedARQ(Enc40@element),
Enc41@bin = complete(Enc41@output),
Enc41@len = byte_size(Enc41@bin),
if Enc41@len < 128 ->
[align,
Enc41@len|Enc41@bin];
Enc41@len < 16384 ->
[align,
<<2:2,Enc41@len:14>>|Enc41@bin];
true ->
[align|encode_fragmented(Enc41@bin, 8)]
end
end
end
end,
begin
Enc43@element = element(16, Val),
if Enc43@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@output = if Enc43@element =:= false ->
<<0:1,0:7>>;
Enc43@element =:= true ->
<<1:1,0:7>>
end,
Enc45@bin = Enc45@output,
[align,
1|Enc45@bin]
end
end
end,
begin
Enc47@element = element(17, Val),
if Enc47@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc48@output = enc_RegistrationConfirm_serviceControl(Enc47@element),
Enc48@bin = complete(Enc48@output),
Enc48@len = byte_size(Enc48@bin),
if Enc48@len < 128 ->
[align,
Enc48@len|Enc48@bin];
Enc48@len < 16384 ->
[align,
<<2:2,Enc48@len:14>>|Enc48@bin];
true ->
[align|encode_fragmented(Enc48@bin, 8)]
end
end
end
end,
begin
Enc50@element = element(18, Val),
if Enc50@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc51@output = [],
Enc51@bin = <<0:8>>,
[align,
1|Enc51@bin]
end
end
end,
begin
Enc53@element = element(19, Val),
if Enc53@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc54@output = enc_RegistrationConfirm_terminalAliasPattern(Enc53@element),
Enc54@bin = complete(Enc54@output),
Enc54@len = byte_size(Enc54@bin),
if Enc54@len < 128 ->
[align,
Enc54@len|Enc54@bin];
Enc54@len < 16384 ->
[align,
<<2:2,Enc54@len:14>>|Enc54@bin];
true ->
[align|encode_fragmented(Enc54@bin, 8)]
end
end
end
end,
begin
Enc56@element = element(20, Val),
if Enc56@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc57@output = enc_RegistrationConfirm_supportedPrefixes(Enc56@element),
Enc57@bin = complete(Enc57@output),
Enc57@len = byte_size(Enc57@bin),
if Enc57@len < 128 ->
[align,
Enc57@len|Enc57@bin];
Enc57@len < 16384 ->
[align,
<<2:2,Enc57@len:14>>|Enc57@bin];
true ->
[align|encode_fragmented(Enc57@bin, 8)]
end
end
end
end,
begin
Enc59@element = element(21, Val),
if Enc59@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc60@output = enc_RegistrationConfirm_usageSpec(Enc59@element),
Enc60@bin = complete(Enc60@output),
Enc60@len = byte_size(Enc60@bin),
if Enc60@len < 128 ->
[align,
Enc60@len|Enc60@bin];
Enc60@len < 16384 ->
[align,
<<2:2,Enc60@len:14>>|Enc60@bin];
true ->
[align|encode_fragmented(Enc60@bin, 8)]
end
end
end
end,
begin
Enc62@element = element(22, Val),
if Enc62@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc63@output = enc_AliasAddress(Enc62@element),
Enc63@bin = complete(Enc63@output),
Enc63@len = byte_size(Enc63@bin),
if Enc63@len < 128 ->
[align,
Enc63@len|Enc63@bin];
Enc63@len < 16384 ->
[align,
<<2:2,Enc63@len:14>>|Enc63@bin];
true ->
[align|encode_fragmented(Enc63@bin, 8)]
end
end
end
end,
begin
Enc65@element = element(23, Val),
if Enc65@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc66@output = enc_CapacityReportingSpecification(Enc65@element),
Enc66@bin = complete(Enc66@output),
Enc66@len = byte_size(Enc66@bin),
if Enc66@len < 128 ->
[align,
Enc66@len|Enc66@bin];
Enc66@len < 16384 ->
[align,
<<2:2,Enc66@len:14>>|Enc66@bin];
true ->
[align|encode_fragmented(Enc66@bin, 8)]
end
end
end
end,
begin
Enc68@element = element(24, Val),
if Enc68@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc69@output = enc_FeatureSet(Enc68@element),
Enc69@bin = complete(Enc69@output),
Enc69@len = byte_size(Enc69@bin),
if Enc69@len < 128 ->
[align,
Enc69@len|Enc69@bin];
Enc69@len < 16384 ->
[align,
<<2:2,Enc69@len:14>>|Enc69@bin];
true ->
[align|encode_fragmented(Enc69@bin, 8)]
end
end
end
end|begin
Enc71@element = element(25, Val),
if Enc71@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc72@output = enc_RegistrationConfirm_genericData(Enc71@element),
Enc72@bin = complete(Enc72@output),
Enc72@len = byte_size(Enc72@bin),
if Enc72@len < 128 ->
[align,
Enc72@len|Enc72@bin];
Enc72@len < 16384 ->
[align,
<<2:2,Enc72@len:14>>|Enc72@bin];
true ->
[align|encode_fragmented(Enc72@bin, 8)]
end
end
end
end].
'enc_RegistrationConfirm_callSignalAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_TransportAddress(Comp) || Comp <- Val]].


dec_RegistrationConfirm_callSignalAddress(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components147(V1@V0, V1@Buf1, []).

'enc_RegistrationConfirm_terminalAlias'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_RegistrationConfirm_terminalAlias(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components148(V1@V0, V1@Buf1, []).

'enc_RegistrationConfirm_alternateGatekeeper'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AlternateGK(Comp) || Comp <- Val]].


dec_RegistrationConfirm_alternateGatekeeper(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components149(V1@V0, V1@Buf1, []).

'enc_RegistrationConfirm_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_RegistrationConfirm_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components150(V1@V0, V1@Buf1, []).

'enc_RegistrationConfirm_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_RegistrationConfirm_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components151(V1@V0, V1@Buf1, []).

'enc_RegistrationConfirm_preGrantedARQ'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 6, 10),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<3:7,Enc1@bitmap:4>>
end,
[begin
Enc3@element = element(2, Val),
if Extensions =:= [] ->
if Enc3@element =:= false ->
<<0:1,0:1>>;
Enc3@element =:= true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= false ->
<<1:1,0:1>>;
Enc3@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(3, Val),
Enc7@element = element(4, Val),
if Enc5@element =:= false ->
if Enc7@element =:= false ->
<<0:1,0:1>>;
Enc7@element =:= true ->
<<0:1,1:1>>
end;
Enc5@element =:= true ->
if Enc7@element =:= false ->
<<1:1,0:1>>;
Enc7@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(5, Val),
if Enc9@element =:= false ->
<<0:1>>;
Enc9@element =:= true ->
<<1:1>>
end
end,
Extensions,
begin
Enc11@element = element(6, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@output = begin
Enc11@element@sub = Enc11@element - 1,
if 0 =< Enc11@element@sub, Enc11@element@sub < 65535 ->
<<Enc11@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc11@element}}})
end
end,
Enc13@bin = Enc13@output,
[align,
2|Enc13@bin]
end
end
end,
begin
Enc15@element = element(7, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@output = if Enc15@element bsr 32 =:= 0 ->
begin
Enc15@element@bin = binary:encode_unsigned(Enc15@element),
Enc15@element@bin_size0 = byte_size(Enc15@element@bin),
Enc15@element@bin_size = Enc15@element@bin_size0 - 1,
[<<Enc15@element@bin_size:2,0:6>>|Enc15@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc15@element}}})
end,
Enc17@bin = iolist_to_binary(Enc17@output),
Enc17@len = byte_size(Enc17@bin),
[align,
Enc17@len|Enc17@bin]
end
end
end,
begin
Enc19@element = element(8, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@output = enc_AlternateTransportAddresses(Enc19@element),
Enc20@bin = complete(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[align,
Enc20@len|Enc20@bin];
Enc20@len < 16384 ->
[align,
<<2:2,Enc20@len:14>>|Enc20@bin];
true ->
[align|encode_fragmented(Enc20@bin, 8)]
end
end
end
end|begin
Enc22@element = element(9, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@output = enc_UseSpecifiedTransport(Enc22@element),
Enc23@bin = complete(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[align,
Enc23@len|Enc23@bin];
Enc23@len < 16384 ->
[align,
<<2:2,Enc23@len:14>>|Enc23@bin];
true ->
[align|encode_fragmented(Enc23@bin, 8)]
end
end
end
end].

dec_RegistrationConfirm_preGrantedARQ(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes6) band 7,
{V7@V0,V7@Buf1} = case Bytes6 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx5,_} = begin
V8@Pad2 = bit_size(V7@V0) band 7,
<<_:V8@Pad2,V8@V0:2/unsigned-unit:8,V8@Buf1/bitstring>> = V7@V0,
V8@Add4 = V8@V0 + 1,
{V8@Add4,V8@Buf1}
end,
{TmpValx5,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes7) band 7,
{V9@V0,V9@Buf1} = case Bytes7 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx6,_} = begin
<<V10@V0:2/unsigned-unit:1,V10@Buf1/bitstring>> = V9@V0,
V10@Add2 = V10@V0 + 1,
V10@Pad5 = bit_size(V10@Buf1) band 7,
<<_:V10@Pad5,V10@V3:V10@Add2/unsigned-unit:8,V10@Buf4/bitstring>> = V10@Buf1,
{V10@V3,V10@Buf4}
end,
{TmpValx6,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type AlternateTransportAddresses
{Term7,Bytes9} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes8) band 7,
{V11@V0,V11@Buf1} = case Bytes8 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx7,_} = dec_AlternateTransportAddresses(V11@V0),
{TmpValx7,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type UseSpecifiedTransport
{Term8,Bytes10} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes9) band 7,
{V12@V0,V12@Buf1} = case Bytes9 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx8,_} = dec_UseSpecifiedTransport(V12@V0),
{TmpValx8,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,
Bytes11= skipextensions(Bytes10, 5, Extensions),
{{'RegistrationConfirm_preGrantedARQ',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes11}.

'enc_RegistrationConfirm_serviceControl'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ServiceControlSession(Comp) || Comp <- Val]].


dec_RegistrationConfirm_serviceControl(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components152(V1@V0, V1@Buf1, []).

'enc_RegistrationConfirm_terminalAliasPattern'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AddressPattern(Comp) || Comp <- Val]].


dec_RegistrationConfirm_terminalAliasPattern(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components153(V1@V0, V1@Buf1, []).

'enc_RegistrationConfirm_supportedPrefixes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedPrefix(Comp) || Comp <- Val]].


dec_RegistrationConfirm_supportedPrefixes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components154(V1@V0, V1@Buf1, []).

'enc_RegistrationConfirm_usageSpec'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_RasUsageSpecification(Comp) || Comp <- Val]].


dec_RegistrationConfirm_usageSpec(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components155(V1@V0, V1@Buf1, []).

'enc_RegistrationConfirm_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_RegistrationConfirm_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components156(V1@V0, V1@Buf1, []).



dec_RegistrationConfirm(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type OBJECT IDENTIFIER
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:7,V4@Buf4/bitstring>> ->
{V4@V3,V4@Buf4};
<<1:1,0:1,V4@V4:14,V4@Buf5/bitstring>> ->
{V4@V4,V4@Buf5}
end,
<<V4@V6:V4@V0/binary-unit:8,V4@Buf7/bitstring>> = V4@Buf1,
V4@Conv8 = binary_to_list(V4@V6),
{V4@V9,V4@Buf10}  = {decode_oid(V4@Conv8),V4@Buf7},
{V4@V9,V4@Buf10}
end,

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = 'dec_RegistrationConfirm_callSignalAddress'(Bytes5),

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
'dec_RegistrationConfirm_terminalAlias'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type BMPString
{Term6,Bytes8} = case Opt band 1 of
1 ->
begin
<<V5@V0:7/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes7,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/binary-unit:16,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V7,V5@Buf8}  = {decode_chars_16bit(V5@V3),V5@Buf4},
{V5@V7,V5@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type BMPString
{Term7,Bytes9} = begin
<<V6@V0:7/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes8,
V6@Add2 = V6@V0 + 1,
V6@Pad5 = bit_size(V6@Buf1) band 7,
<<_:V6@Pad5,V6@V3:V6@Add2/binary-unit:16,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V7,V6@Buf8}  = {decode_chars_16bit(V6@V3),V6@Buf4},
{V6@V7,V6@Buf8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V7@V0,V7@Buf1} = case Bytes9 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:7,0:1,V7@V7:7,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<_:7,1:1,0:1,V7@V8:14,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes11} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes10) band 7,
{V8@V0,V8@Buf1} = case Bytes10 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx8,_} = 'dec_RegistrationConfirm_alternateGatekeeper'(V8@V0),
{TmpValx8,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type INTEGER
{Term9,Bytes12} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes11) band 7,
{V9@V0,V9@Buf1} = case Bytes11 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx9,_} = begin
<<V10@V0:2/unsigned-unit:1,V10@Buf1/bitstring>> = V9@V0,
V10@Add2 = V10@V0 + 1,
V10@Pad5 = bit_size(V10@Buf1) band 7,
<<_:V10@Pad5,V10@V3:V10@Add2/unsigned-unit:8,V10@Buf4/bitstring>> = V10@Buf1,
V10@Add7 = V10@V3 + 1,
{V10@Add7,V10@Buf4}
end,
{TmpValx9,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes13} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes12) band 7,
{V11@V0,V11@Buf1} = case Bytes12 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx10,_} = 'dec_RegistrationConfirm_tokens'(V11@V0),
{TmpValx10,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes14} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes13) band 7,
{V12@V0,V12@Buf1} = case Bytes13 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx11,_} = 'dec_RegistrationConfirm_cryptoTokens'(V12@V0),
{TmpValx11,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type ICV
{Term12,Bytes15} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes14) band 7,
{V13@V0,V13@Buf1} = case Bytes14 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx12,_} = dec_ICV(V13@V0),
{TmpValx12,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type BOOLEAN
{Term13,Bytes16} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes15) band 7,
{V14@V0,V14@Buf1} = case Bytes15 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx13,_} = begin
<<V15@V0:1,V15@Buf1/bitstring>> = V14@V0,
V15@Int2 = case V15@V0 of
0 -> false;
1 -> true
end,
{V15@Int2,V15@Buf1}
end,
{TmpValx13,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type SEQUENCE
{Term14,Bytes17} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes16) band 7,
{V16@V0,V16@Buf1} = case Bytes16 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx14,_} = 'dec_RegistrationConfirm_preGrantedARQ'(V16@V0),
{TmpValx14,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type BOOLEAN
{Term15,Bytes18} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V17@Pad3 = bit_size(Bytes17) band 7,
{V17@V0,V17@Buf1} = case Bytes17 of
<<_:V17@Pad3,0:1,V17@V5:7,V17@V7:V17@V5/binary-unit:8,V17@Buf8/bitstring>> ->
{V17@V7,V17@Buf8};
<<_:V17@Pad3,1:1,0:1,V17@V6:14,V17@V8:V17@V6/binary-unit:8,V17@Buf9/bitstring>> ->
{V17@V8,V17@Buf9};
<<_:V17@Pad3,1:1,1:1,V17@V6:6,V17@Buf7/bitstring>> ->
{V17@V8,V17@Buf9}  = decode_fragmented(V17@V6, V17@Buf7, 8),
{V17@V8,V17@Buf9}
end,
{TmpValx15,_} = begin
<<V18@V0:1,V18@Buf1/bitstring>> = V17@V0,
V18@Int2 = case V18@V0 of
0 -> false;
1 -> true
end,
{V18@Int2,V18@Buf1}
end,
{TmpValx15,V17@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type SEQUENCE OF
{Term16,Bytes19} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V19@Pad3 = bit_size(Bytes18) band 7,
{V19@V0,V19@Buf1} = case Bytes18 of
<<_:V19@Pad3,0:1,V19@V5:7,V19@V7:V19@V5/binary-unit:8,V19@Buf8/bitstring>> ->
{V19@V7,V19@Buf8};
<<_:V19@Pad3,1:1,0:1,V19@V6:14,V19@V8:V19@V6/binary-unit:8,V19@Buf9/bitstring>> ->
{V19@V8,V19@Buf9};
<<_:V19@Pad3,1:1,1:1,V19@V6:6,V19@Buf7/bitstring>> ->
{V19@V8,V19@Buf9}  = decode_fragmented(V19@V6, V19@Buf7, 8),
{V19@V8,V19@Buf9}
end,
{TmpValx16,_} = 'dec_RegistrationConfirm_serviceControl'(V19@V0),
{TmpValx16,V19@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type NULL
{Term17,Bytes20} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V20@Pad3 = bit_size(Bytes19) band 7,
{V20@V0,V20@Buf1} = case Bytes19 of
<<_:V20@Pad3,0:1,V20@V5:7,V20@V7:V20@V5/binary-unit:8,V20@Buf8/bitstring>> ->
{V20@V7,V20@Buf8};
<<_:V20@Pad3,1:1,0:1,V20@V6:14,V20@V8:V20@V6/binary-unit:8,V20@Buf9/bitstring>> ->
{V20@V8,V20@Buf9};
<<_:V20@Pad3,1:1,1:1,V20@V6:6,V20@Buf7/bitstring>> ->
{V20@V8,V20@Buf9}  = decode_fragmented(V20@V6, V20@Buf7, 8),
{V20@V8,V20@Buf9}
end,
{TmpValx17,_} = begin
ignore,
{'NULL',V20@V0}
end,
{TmpValx17,V20@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type SEQUENCE OF
{Term18,Bytes21} = case Extensions of
  <<_:10,1:1,_/bitstring>> ->
begin
V22@Pad3 = bit_size(Bytes20) band 7,
{V22@V0,V22@Buf1} = case Bytes20 of
<<_:V22@Pad3,0:1,V22@V5:7,V22@V7:V22@V5/binary-unit:8,V22@Buf8/bitstring>> ->
{V22@V7,V22@Buf8};
<<_:V22@Pad3,1:1,0:1,V22@V6:14,V22@V8:V22@V6/binary-unit:8,V22@Buf9/bitstring>> ->
{V22@V8,V22@Buf9};
<<_:V22@Pad3,1:1,1:1,V22@V6:6,V22@Buf7/bitstring>> ->
{V22@V8,V22@Buf9}  = decode_fragmented(V22@V6, V22@Buf7, 8),
{V22@V8,V22@Buf9}
end,
{TmpValx18,_} = 'dec_RegistrationConfirm_terminalAliasPattern'(V22@V0),
{TmpValx18,V22@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute number 19 with type SEQUENCE OF
{Term19,Bytes22} = case Extensions of
  <<_:11,1:1,_/bitstring>> ->
begin
V23@Pad3 = bit_size(Bytes21) band 7,
{V23@V0,V23@Buf1} = case Bytes21 of
<<_:V23@Pad3,0:1,V23@V5:7,V23@V7:V23@V5/binary-unit:8,V23@Buf8/bitstring>> ->
{V23@V7,V23@Buf8};
<<_:V23@Pad3,1:1,0:1,V23@V6:14,V23@V8:V23@V6/binary-unit:8,V23@Buf9/bitstring>> ->
{V23@V8,V23@Buf9};
<<_:V23@Pad3,1:1,1:1,V23@V6:6,V23@Buf7/bitstring>> ->
{V23@V8,V23@Buf9}  = decode_fragmented(V23@V6, V23@Buf7, 8),
{V23@V8,V23@Buf9}
end,
{TmpValx19,_} = 'dec_RegistrationConfirm_supportedPrefixes'(V23@V0),
{TmpValx19,V23@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes21}
end,

%% attribute number 20 with type SEQUENCE OF
{Term20,Bytes23} = case Extensions of
  <<_:12,1:1,_/bitstring>> ->
begin
V24@Pad3 = bit_size(Bytes22) band 7,
{V24@V0,V24@Buf1} = case Bytes22 of
<<_:V24@Pad3,0:1,V24@V5:7,V24@V7:V24@V5/binary-unit:8,V24@Buf8/bitstring>> ->
{V24@V7,V24@Buf8};
<<_:V24@Pad3,1:1,0:1,V24@V6:14,V24@V8:V24@V6/binary-unit:8,V24@Buf9/bitstring>> ->
{V24@V8,V24@Buf9};
<<_:V24@Pad3,1:1,1:1,V24@V6:6,V24@Buf7/bitstring>> ->
{V24@V8,V24@Buf9}  = decode_fragmented(V24@V6, V24@Buf7, 8),
{V24@V8,V24@Buf9}
end,
{TmpValx20,_} = 'dec_RegistrationConfirm_usageSpec'(V24@V0),
{TmpValx20,V24@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes22}
end,

%% attribute number 21 with type AliasAddress
{Term21,Bytes24} = case Extensions of
  <<_:13,1:1,_/bitstring>> ->
begin
V25@Pad3 = bit_size(Bytes23) band 7,
{V25@V0,V25@Buf1} = case Bytes23 of
<<_:V25@Pad3,0:1,V25@V5:7,V25@V7:V25@V5/binary-unit:8,V25@Buf8/bitstring>> ->
{V25@V7,V25@Buf8};
<<_:V25@Pad3,1:1,0:1,V25@V6:14,V25@V8:V25@V6/binary-unit:8,V25@Buf9/bitstring>> ->
{V25@V8,V25@Buf9};
<<_:V25@Pad3,1:1,1:1,V25@V6:6,V25@Buf7/bitstring>> ->
{V25@V8,V25@Buf9}  = decode_fragmented(V25@V6, V25@Buf7, 8),
{V25@V8,V25@Buf9}
end,
{TmpValx21,_} = dec_AliasAddress(V25@V0),
{TmpValx21,V25@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes23}
end,

%% attribute number 22 with type CapacityReportingSpecification
{Term22,Bytes25} = case Extensions of
  <<_:14,1:1,_/bitstring>> ->
begin
V26@Pad3 = bit_size(Bytes24) band 7,
{V26@V0,V26@Buf1} = case Bytes24 of
<<_:V26@Pad3,0:1,V26@V5:7,V26@V7:V26@V5/binary-unit:8,V26@Buf8/bitstring>> ->
{V26@V7,V26@Buf8};
<<_:V26@Pad3,1:1,0:1,V26@V6:14,V26@V8:V26@V6/binary-unit:8,V26@Buf9/bitstring>> ->
{V26@V8,V26@Buf9};
<<_:V26@Pad3,1:1,1:1,V26@V6:6,V26@Buf7/bitstring>> ->
{V26@V8,V26@Buf9}  = decode_fragmented(V26@V6, V26@Buf7, 8),
{V26@V8,V26@Buf9}
end,
{TmpValx22,_} = dec_CapacityReportingSpecification(V26@V0),
{TmpValx22,V26@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes24}
end,

%% attribute number 23 with type FeatureSet
{Term23,Bytes26} = case Extensions of
  <<_:15,1:1,_/bitstring>> ->
begin
V27@Pad3 = bit_size(Bytes25) band 7,
{V27@V0,V27@Buf1} = case Bytes25 of
<<_:V27@Pad3,0:1,V27@V5:7,V27@V7:V27@V5/binary-unit:8,V27@Buf8/bitstring>> ->
{V27@V7,V27@Buf8};
<<_:V27@Pad3,1:1,0:1,V27@V6:14,V27@V8:V27@V6/binary-unit:8,V27@Buf9/bitstring>> ->
{V27@V8,V27@Buf9};
<<_:V27@Pad3,1:1,1:1,V27@V6:6,V27@Buf7/bitstring>> ->
{V27@V8,V27@Buf9}  = decode_fragmented(V27@V6, V27@Buf7, 8),
{V27@V8,V27@Buf9}
end,
{TmpValx23,_} = dec_FeatureSet(V27@V0),
{TmpValx23,V27@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes25}
end,

%% attribute number 24 with type SEQUENCE OF
{Term24,Bytes27} = case Extensions of
  <<_:16,1:1,_/bitstring>> ->
begin
V28@Pad3 = bit_size(Bytes26) band 7,
{V28@V0,V28@Buf1} = case Bytes26 of
<<_:V28@Pad3,0:1,V28@V5:7,V28@V7:V28@V5/binary-unit:8,V28@Buf8/bitstring>> ->
{V28@V7,V28@Buf8};
<<_:V28@Pad3,1:1,0:1,V28@V6:14,V28@V8:V28@V6/binary-unit:8,V28@Buf9/bitstring>> ->
{V28@V8,V28@Buf9};
<<_:V28@Pad3,1:1,1:1,V28@V6:6,V28@Buf7/bitstring>> ->
{V28@V8,V28@Buf9}  = decode_fragmented(V28@V6, V28@Buf7, 8),
{V28@V8,V28@Buf9}
end,
{TmpValx24,_} = 'dec_RegistrationConfirm_genericData'(V28@V0),
{TmpValx24,V28@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes26}
end,
Bytes28= skipextensions(Bytes27, 18, Extensions),
{{'RegistrationConfirm',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21,Term22,Term23,Term24},Bytes28}.

'enc_RegistrationReject'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 7, 13),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<5:7,Enc3@bitmap:6>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(6, Val),
if Enc2@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc5@element = element(2, Val),
Enc5@element@sub = Enc5@element - 1,
if 0 =< Enc5@element@sub, Enc5@element@sub < 65535 ->
<<Enc5@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(3, Val),
Enc8@bin = encode_oid(Enc7@element),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
encode_fragmented(Enc8@bin, 8)
end
end,
begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc9@element)
end
end,
begin
Enc11@element = element(5, Val),
enc_RegistrationRejectReason(Enc11@element)
end,
begin
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@len = length(Enc12@element),
Enc13@bin = encode_chars_16bit(Enc12@element),
Enc13@len@sub = Enc13@len - 1,
if Enc13@len@sub bsr 7 =:= 0 ->
[<<Enc13@len@sub:7>>,
align|Enc13@bin]
end
end
end
end,
Extensions,
begin
Enc15@element = element(7, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = enc_AltGKInfo(Enc15@element),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[align|encode_fragmented(Enc16@bin, 8)]
end
end
end
end,
begin
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@output = enc_RegistrationReject_tokens(Enc18@element),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[align|encode_fragmented(Enc19@bin, 8)]
end
end
end
end,
begin
Enc21@element = element(9, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@output = enc_RegistrationReject_cryptoTokens(Enc21@element),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[align|encode_fragmented(Enc22@bin, 8)]
end
end
end
end,
begin
Enc24@element = element(10, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc25@output = enc_ICV(Enc24@element),
Enc25@bin = complete(Enc25@output),
Enc25@len = byte_size(Enc25@bin),
if Enc25@len < 128 ->
[align,
Enc25@len|Enc25@bin];
Enc25@len < 16384 ->
[align,
<<2:2,Enc25@len:14>>|Enc25@bin];
true ->
[align|encode_fragmented(Enc25@bin, 8)]
end
end
end
end,
begin
Enc27@element = element(11, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc28@output = enc_FeatureSet(Enc27@element),
Enc28@bin = complete(Enc28@output),
Enc28@len = byte_size(Enc28@bin),
if Enc28@len < 128 ->
[align,
Enc28@len|Enc28@bin];
Enc28@len < 16384 ->
[align,
<<2:2,Enc28@len:14>>|Enc28@bin];
true ->
[align|encode_fragmented(Enc28@bin, 8)]
end
end
end
end|begin
Enc30@element = element(12, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@output = enc_RegistrationReject_genericData(Enc30@element),
Enc31@bin = complete(Enc31@output),
Enc31@len = byte_size(Enc31@bin),
if Enc31@len < 128 ->
[align,
Enc31@len|Enc31@bin];
Enc31@len < 16384 ->
[align,
<<2:2,Enc31@len:14>>|Enc31@bin];
true ->
[align|encode_fragmented(Enc31@bin, 8)]
end
end
end
end].
'enc_RegistrationReject_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_RegistrationReject_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components157(V1@V0, V1@Buf1, []).

'enc_RegistrationReject_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_RegistrationReject_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components158(V1@V0, V1@Buf1, []).

'enc_RegistrationReject_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_RegistrationReject_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components159(V1@V0, V1@Buf1, []).



dec_RegistrationReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type OBJECT IDENTIFIER
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:7,V4@Buf4/bitstring>> ->
{V4@V3,V4@Buf4};
<<1:1,0:1,V4@V4:14,V4@Buf5/bitstring>> ->
{V4@V4,V4@Buf5}
end,
<<V4@V6:V4@V0/binary-unit:8,V4@Buf7/bitstring>> = V4@Buf1,
V4@Conv8 = binary_to_list(V4@V6),
{V4@V9,V4@Buf10}  = {decode_oid(V4@Conv8),V4@Buf7},
{V4@V9,V4@Buf10}
end,

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type RegistrationRejectReason
{Term4,Bytes6} = dec_RegistrationRejectReason(Bytes5),

%% attribute number 5 with type BMPString
{Term5,Bytes7} = case Opt band 1 of
1 ->
begin
<<V5@V0:7/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes6,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/binary-unit:16,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V7,V5@Buf8}  = {decode_chars_16bit(V5@V3),V5@Buf4},
{V5@V7,V5@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,

%% attribute number 6 with type AltGKInfo
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = dec_AltGKInfo(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes10} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = 'dec_RegistrationReject_tokens'(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes11} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = 'dec_RegistrationReject_cryptoTokens'(V9@V0),
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type ICV
{Term9,Bytes12} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes11) band 7,
{V10@V0,V10@Buf1} = case Bytes11 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx9,_} = dec_ICV(V10@V0),
{TmpValx9,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type FeatureSet
{Term10,Bytes13} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes12) band 7,
{V11@V0,V11@Buf1} = case Bytes12 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx10,_} = dec_FeatureSet(V11@V0),
{TmpValx10,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes14} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes13) band 7,
{V12@V0,V12@Buf1} = case Bytes13 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx11,_} = 'dec_RegistrationReject_genericData'(V12@V0),
{TmpValx11,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,
Bytes15= skipextensions(Bytes14, 7, Extensions),
{{'RegistrationReject',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},Bytes15}.

'enc_RegistrationRejectReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= discoveryRequired ->
<<0:1,0:3>>;
ChoiceTag =:= invalidRevision ->
<<0:1,1:3>>;
ChoiceTag =:= invalidCallSignalAddress ->
<<0:1,2:3>>;
ChoiceTag =:= invalidRASAddress ->
<<0:1,3:3>>;
ChoiceTag =:= duplicateAlias ->
[<<0:1,4:3>>|enc_RegistrationRejectReason_duplicateAlias(ChoiceVal)];
ChoiceTag =:= invalidTerminalType ->
<<0:1,5:3>>;
ChoiceTag =:= undefinedReason ->
<<0:1,6:3>>;
ChoiceTag =:= transportNotSupported ->
<<0:1,7:3>>;
ChoiceTag =:= transportQOSNotSupported ->
begin
Enc9@output = [],
Enc9@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc9@bin]
end;
ChoiceTag =:= resourceUnavailable ->
begin
Enc10@output = [],
Enc10@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc10@bin]
end;
ChoiceTag =:= invalidAlias ->
begin
Enc11@output = [],
Enc11@bin = <<0:8>>,
[<<1:1,2:7>>,
align,
1|Enc11@bin]
end;
ChoiceTag =:= securityDenial ->
begin
Enc12@output = [],
Enc12@bin = <<0:8>>,
[<<1:1,3:7>>,
align,
1|Enc12@bin]
end;
ChoiceTag =:= fullRegistrationRequired ->
begin
Enc13@output = [],
Enc13@bin = <<0:8>>,
[<<1:1,4:7>>,
align,
1|Enc13@bin]
end;
ChoiceTag =:= additiveRegistrationNotSupported ->
begin
Enc14@output = [],
Enc14@bin = <<0:8>>,
[<<1:1,5:7>>,
align,
1|Enc14@bin]
end;
ChoiceTag =:= invalidTerminalAliases ->
begin
Enc15@output = enc_RegistrationRejectReason_invalidTerminalAliases(ChoiceVal),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[<<1:1,6:7>>,
align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[<<1:1,6:7>>,
align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[<<1:1,6:7>>,
align|encode_fragmented(Enc15@bin, 8)]
end
end;
ChoiceTag =:= genericDataReason ->
begin
Enc16@output = [],
Enc16@bin = <<0:8>>,
[<<1:1,7:7>>,
align,
1|Enc16@bin]
end;
ChoiceTag =:= neededFeatureNotSupported ->
begin
Enc17@output = [],
Enc17@bin = <<0:8>>,
[<<1:1,8:7>>,
align,
1|Enc17@bin]
end;
ChoiceTag =:= securityError ->
begin
Enc18@output = enc_SecurityErrors(ChoiceVal),
Enc18@bin = complete(Enc18@output),
Enc18@len = byte_size(Enc18@bin),
if Enc18@len < 128 ->
[<<1:1,9:7>>,
align,
Enc18@len|Enc18@bin];
Enc18@len < 16384 ->
[<<1:1,9:7>>,
align,
<<2:2,Enc18@len:14>>|Enc18@bin];
true ->
[<<1:1,9:7>>,
align|encode_fragmented(Enc18@bin, 8)]
end
end
end.
'enc_RegistrationRejectReason_duplicateAlias'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_RegistrationRejectReason_duplicateAlias(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components160(V1@V0, V1@Buf1, []).

'enc_RegistrationRejectReason_invalidTerminalAliases'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_RegistrationRejectReason_invalidTerminalAliases_terminalAlias(Enc5@element)
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_RegistrationRejectReason_invalidTerminalAliases_terminalAliasPattern(Enc7@element)
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_RegistrationRejectReason_invalidTerminalAliases_supportedPrefixes(Enc9@element)
end
end].
'enc_RegistrationRejectReason_invalidTerminalAliases_terminalAlias'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_RegistrationRejectReason_invalidTerminalAliases_terminalAlias(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components161(V1@V0, V1@Buf1, []).

'enc_RegistrationRejectReason_invalidTerminalAliases_terminalAliasPattern'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AddressPattern(Comp) || Comp <- Val]].


dec_RegistrationRejectReason_invalidTerminalAliases_terminalAliasPattern(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components162(V1@V0, V1@Buf1, []).

'enc_RegistrationRejectReason_invalidTerminalAliases_supportedPrefixes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedPrefix(Comp) || Comp <- Val]].


dec_RegistrationRejectReason_invalidTerminalAliases_supportedPrefixes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components163(V1@V0, V1@Buf1, []).


dec_RegistrationRejectReason_invalidTerminalAliases(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
'dec_RegistrationRejectReason_invalidTerminalAliases_terminalAlias'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
'dec_RegistrationRejectReason_invalidTerminalAliases_terminalAliasPattern'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_RegistrationRejectReason_invalidTerminalAliases_supportedPrefixes'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'RegistrationRejectReason_invalidTerminalAliases',Term1,Term2,Term3},Bytes7}.



dec_RegistrationRejectReason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{discoveryRequired,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invalidRevision,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invalidCallSignalAddress,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invalidRASAddress,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
'dec_RegistrationRejectReason_duplicateAlias'(Bytes2)
end,
{{duplicateAlias,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invalidTerminalType,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefinedReason,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{transportNotSupported,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{transportQOSNotSupported,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{resourceUnavailable,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{invalidAlias,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{securityDenial,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{fullRegistrationRequired,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{additiveRegistrationNotSupported,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_RegistrationRejectReason_invalidTerminalAliases'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{invalidTerminalAliases,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{genericDataReason,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{neededFeatureNotSupported,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_SecurityErrors(V2@V0),
{TmpVal,V2@Buf1}
end,
{{securityError,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_UnregistrationRequest'(Val) ->
Enc4@bitmap = extension_bitmap(Val, 7, 17),
Extensions = if Enc4@bitmap =:= 0 ->
[];
true ->
<<9:7,Enc4@bitmap:10>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(5, Val),
Enc3@element = element(6, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc6@element = element(2, Val),
Enc6@element@sub = Enc6@element - 1,
if 0 =< Enc6@element@sub, Enc6@element@sub < 65535 ->
<<Enc6@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end,
begin
Enc8@element = element(3, Val),
enc_UnregistrationRequest_callSignalAddress(Enc8@element)
end,
begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_UnregistrationRequest_endpointAlias(Enc9@element)
end
end,
begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc11@element)
end
end,
begin
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@len = length(Enc13@element),
Enc14@bin = encode_chars_16bit(Enc13@element),
Enc14@len@sub = Enc14@len - 1,
if Enc14@len@sub bsr 7 =:= 0 ->
[<<Enc14@len@sub:7>>,
align|Enc14@bin]
end
end
end
end,
Extensions,
begin
Enc16@element = element(7, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@output = enc_UnregistrationRequest_alternateEndpoints(Enc16@element),
Enc17@bin = complete(Enc17@output),
Enc17@len = byte_size(Enc17@bin),
if Enc17@len < 128 ->
[align,
Enc17@len|Enc17@bin];
Enc17@len < 16384 ->
[align,
<<2:2,Enc17@len:14>>|Enc17@bin];
true ->
[align|encode_fragmented(Enc17@bin, 8)]
end
end
end
end,
begin
Enc19@element = element(8, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc21@output = begin
Enc20@len = length(Enc19@element),
Enc20@bin = encode_chars_16bit(Enc19@element),
Enc20@len@sub = Enc20@len - 1,
if Enc20@len@sub bsr 7 =:= 0 ->
[<<Enc20@len@sub:7,0:1>>|Enc20@bin]
end
end,
Enc21@bin = iolist_to_binary(Enc21@output),
Enc21@len = byte_size(Enc21@bin),
if Enc21@len < 128 ->
[align,
Enc21@len|Enc21@bin];
true ->
[align,
<<2:2,Enc21@len:14>>|Enc21@bin]
end
end
end
end,
begin
Enc23@element = element(9, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc24@output = enc_UnregistrationRequest_tokens(Enc23@element),
Enc24@bin = complete(Enc24@output),
Enc24@len = byte_size(Enc24@bin),
if Enc24@len < 128 ->
[align,
Enc24@len|Enc24@bin];
Enc24@len < 16384 ->
[align,
<<2:2,Enc24@len:14>>|Enc24@bin];
true ->
[align|encode_fragmented(Enc24@bin, 8)]
end
end
end
end,
begin
Enc26@element = element(10, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc27@output = enc_UnregistrationRequest_cryptoTokens(Enc26@element),
Enc27@bin = complete(Enc27@output),
Enc27@len = byte_size(Enc27@bin),
if Enc27@len < 128 ->
[align,
Enc27@len|Enc27@bin];
Enc27@len < 16384 ->
[align,
<<2:2,Enc27@len:14>>|Enc27@bin];
true ->
[align|encode_fragmented(Enc27@bin, 8)]
end
end
end
end,
begin
Enc29@element = element(11, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc30@output = enc_ICV(Enc29@element),
Enc30@bin = complete(Enc30@output),
Enc30@len = byte_size(Enc30@bin),
if Enc30@len < 128 ->
[align,
Enc30@len|Enc30@bin];
Enc30@len < 16384 ->
[align,
<<2:2,Enc30@len:14>>|Enc30@bin];
true ->
[align|encode_fragmented(Enc30@bin, 8)]
end
end
end
end,
begin
Enc32@element = element(12, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc33@output = enc_UnregRequestReason(Enc32@element),
Enc33@bin = complete(Enc33@output),
Enc33@len = byte_size(Enc33@bin),
if Enc33@len < 128 ->
[align,
Enc33@len|Enc33@bin];
Enc33@len < 16384 ->
[align,
<<2:2,Enc33@len:14>>|Enc33@bin];
true ->
[align|encode_fragmented(Enc33@bin, 8)]
end
end
end
end,
begin
Enc35@element = element(13, Val),
if Enc35@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc36@output = enc_UnregistrationRequest_endpointAliasPattern(Enc35@element),
Enc36@bin = complete(Enc36@output),
Enc36@len = byte_size(Enc36@bin),
if Enc36@len < 128 ->
[align,
Enc36@len|Enc36@bin];
Enc36@len < 16384 ->
[align,
<<2:2,Enc36@len:14>>|Enc36@bin];
true ->
[align|encode_fragmented(Enc36@bin, 8)]
end
end
end
end,
begin
Enc38@element = element(14, Val),
if Enc38@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc39@output = enc_UnregistrationRequest_supportedPrefixes(Enc38@element),
Enc39@bin = complete(Enc39@output),
Enc39@len = byte_size(Enc39@bin),
if Enc39@len < 128 ->
[align,
Enc39@len|Enc39@bin];
Enc39@len < 16384 ->
[align,
<<2:2,Enc39@len:14>>|Enc39@bin];
true ->
[align|encode_fragmented(Enc39@bin, 8)]
end
end
end
end,
begin
Enc41@element = element(15, Val),
if Enc41@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc42@output = enc_UnregistrationRequest_alternateGatekeeper(Enc41@element),
Enc42@bin = complete(Enc42@output),
Enc42@len = byte_size(Enc42@bin),
if Enc42@len < 128 ->
[align,
Enc42@len|Enc42@bin];
Enc42@len < 16384 ->
[align,
<<2:2,Enc42@len:14>>|Enc42@bin];
true ->
[align|encode_fragmented(Enc42@bin, 8)]
end
end
end
end|begin
Enc44@element = element(16, Val),
if Enc44@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@output = enc_UnregistrationRequest_genericData(Enc44@element),
Enc45@bin = complete(Enc45@output),
Enc45@len = byte_size(Enc45@bin),
if Enc45@len < 128 ->
[align,
Enc45@len|Enc45@bin];
Enc45@len < 16384 ->
[align,
<<2:2,Enc45@len:14>>|Enc45@bin];
true ->
[align|encode_fragmented(Enc45@bin, 8)]
end
end
end
end].
'enc_UnregistrationRequest_callSignalAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_TransportAddress(Comp) || Comp <- Val]].


dec_UnregistrationRequest_callSignalAddress(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components164(V1@V0, V1@Buf1, []).

'enc_UnregistrationRequest_endpointAlias'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_UnregistrationRequest_endpointAlias(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components165(V1@V0, V1@Buf1, []).

'enc_UnregistrationRequest_alternateEndpoints'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_Endpoint(Comp) || Comp <- Val]].


dec_UnregistrationRequest_alternateEndpoints(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components166(V1@V0, V1@Buf1, []).

'enc_UnregistrationRequest_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_UnregistrationRequest_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components167(V1@V0, V1@Buf1, []).

'enc_UnregistrationRequest_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_UnregistrationRequest_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components168(V1@V0, V1@Buf1, []).

'enc_UnregistrationRequest_endpointAliasPattern'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AddressPattern(Comp) || Comp <- Val]].


dec_UnregistrationRequest_endpointAliasPattern(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components169(V1@V0, V1@Buf1, []).

'enc_UnregistrationRequest_supportedPrefixes'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedPrefix(Comp) || Comp <- Val]].


dec_UnregistrationRequest_supportedPrefixes(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components170(V1@V0, V1@Buf1, []).

'enc_UnregistrationRequest_alternateGatekeeper'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AlternateGK(Comp) || Comp <- Val]].


dec_UnregistrationRequest_alternateGatekeeper(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components171(V1@V0, V1@Buf1, []).

'enc_UnregistrationRequest_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_UnregistrationRequest_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components172(V1@V0, V1@Buf1, []).



dec_UnregistrationRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = 'dec_UnregistrationRequest_callSignalAddress'(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
'dec_UnregistrationRequest_endpointAlias'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type NonStandardParameter
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
dec_NonStandardParameter(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type BMPString
{Term5,Bytes7} = case Opt band 1 of
1 ->
begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes6,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:16,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V7,V4@Buf8}  = {decode_chars_16bit(V4@V3),V4@Buf4},
{V4@V7,V4@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes8) band 7,
{V6@V0,V6@Buf1} = case Bytes8 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx6,_} = 'dec_UnregistrationRequest_alternateEndpoints'(V6@V0),
{TmpValx6,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type BMPString
{Term7,Bytes10} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes9) band 7,
{V7@V0,V7@Buf1} = case Bytes9 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx7,_} = begin
<<V8@V0:7/unsigned-unit:1,V8@Buf1/bitstring>> = V7@V0,
V8@Add2 = V8@V0 + 1,
V8@Pad5 = bit_size(V8@Buf1) band 7,
<<_:V8@Pad5,V8@V3:V8@Add2/binary-unit:16,V8@Buf4/bitstring>> = V8@Buf1,
{V8@V7,V8@Buf8}  = {decode_chars_16bit(V8@V3),V8@Buf4},
{V8@V7,V8@Buf8}
end,
{TmpValx7,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes11} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = 'dec_UnregistrationRequest_tokens'(V9@V0),
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes12} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes11) band 7,
{V10@V0,V10@Buf1} = case Bytes11 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx9,_} = 'dec_UnregistrationRequest_cryptoTokens'(V10@V0),
{TmpValx9,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type ICV
{Term10,Bytes13} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes12) band 7,
{V11@V0,V11@Buf1} = case Bytes12 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx10,_} = dec_ICV(V11@V0),
{TmpValx10,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type UnregRequestReason
{Term11,Bytes14} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes13) band 7,
{V12@V0,V12@Buf1} = case Bytes13 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx11,_} = dec_UnregRequestReason(V12@V0),
{TmpValx11,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type SEQUENCE OF
{Term12,Bytes15} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes14) band 7,
{V13@V0,V13@Buf1} = case Bytes14 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx12,_} = 'dec_UnregistrationRequest_endpointAliasPattern'(V13@V0),
{TmpValx12,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type SEQUENCE OF
{Term13,Bytes16} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes15) band 7,
{V14@V0,V14@Buf1} = case Bytes15 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx13,_} = 'dec_UnregistrationRequest_supportedPrefixes'(V14@V0),
{TmpValx13,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type SEQUENCE OF
{Term14,Bytes17} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V15@Pad3 = bit_size(Bytes16) band 7,
{V15@V0,V15@Buf1} = case Bytes16 of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
{TmpValx14,_} = 'dec_UnregistrationRequest_alternateGatekeeper'(V15@V0),
{TmpValx14,V15@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type SEQUENCE OF
{Term15,Bytes18} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes17) band 7,
{V16@V0,V16@Buf1} = case Bytes17 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx15,_} = 'dec_UnregistrationRequest_genericData'(V16@V0),
{TmpValx15,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,
Bytes19= skipextensions(Bytes18, 11, Extensions),
{{'UnregistrationRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15},Bytes19}.

'enc_UnregRequestReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= reregistrationRequired ->
<<0:1,0:2>>;
ChoiceTag =:= ttlExpired ->
<<0:1,1:2>>;
ChoiceTag =:= securityDenial ->
<<0:1,2:2>>;
ChoiceTag =:= undefinedReason ->
<<0:1,3:2>>;
ChoiceTag =:= maintenance ->
begin
Enc5@output = [],
Enc5@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc5@bin]
end;
ChoiceTag =:= securityError ->
begin
Enc6@output = enc_SecurityErrors2(ChoiceVal),
Enc6@bin = complete(Enc6@output),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[<<1:1,1:7>>,
align,
Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc6@bin, 8)]
end
end
end.


dec_UnregRequestReason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{reregistrationRequired,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{ttlExpired,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityDenial,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefinedReason,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{maintenance,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_SecurityErrors2(V2@V0),
{TmpVal,V2@Buf1}
end,
{{securityError,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_UnregistrationConfirm'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 4, 8),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<3:7,Enc2@bitmap:4>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc6@element)
end
end,
Extensions,
begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@output = enc_UnregistrationConfirm_tokens(Enc8@element),
Enc9@bin = complete(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[align,
Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[align,
<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
[align|encode_fragmented(Enc9@bin, 8)]
end
end
end
end,
begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@output = enc_UnregistrationConfirm_cryptoTokens(Enc11@element),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[align|encode_fragmented(Enc12@bin, 8)]
end
end
end
end,
begin
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@output = enc_ICV(Enc14@element),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[align|encode_fragmented(Enc15@bin, 8)]
end
end
end
end|begin
Enc17@element = element(7, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc18@output = enc_UnregistrationConfirm_genericData(Enc17@element),
Enc18@bin = complete(Enc18@output),
Enc18@len = byte_size(Enc18@bin),
if Enc18@len < 128 ->
[align,
Enc18@len|Enc18@bin];
Enc18@len < 16384 ->
[align,
<<2:2,Enc18@len:14>>|Enc18@bin];
true ->
[align|encode_fragmented(Enc18@bin, 8)]
end
end
end
end].
'enc_UnregistrationConfirm_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_UnregistrationConfirm_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components173(V1@V0, V1@Buf1, []).

'enc_UnregistrationConfirm_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_UnregistrationConfirm_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components174(V1@V0, V1@Buf1, []).

'enc_UnregistrationConfirm_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_UnregistrationConfirm_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components175(V1@V0, V1@Buf1, []).



dec_UnregistrationConfirm(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes5) band 7,
{V5@V0,V5@Buf1} = case Bytes5 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = 'dec_UnregistrationConfirm_tokens'(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes7} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes6) band 7,
{V6@V0,V6@Buf1} = case Bytes6 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx4,_} = 'dec_UnregistrationConfirm_cryptoTokens'(V6@V0),
{TmpValx4,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type ICV
{Term5,Bytes8} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes7) band 7,
{V7@V0,V7@Buf1} = case Bytes7 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx5,_} = dec_ICV(V7@V0),
{TmpValx5,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes8) band 7,
{V8@V0,V8@Buf1} = case Bytes8 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx6,_} = 'dec_UnregistrationConfirm_genericData'(V8@V0),
{TmpValx6,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,
Bytes10= skipextensions(Bytes9, 5, Extensions),
{{'UnregistrationConfirm',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_UnregistrationReject'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 5, 10),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<4:7,Enc2@bitmap:5>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
enc_UnregRejectReason(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc7@element)
end
end,
Extensions,
begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_AltGKInfo(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end,
begin
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@output = enc_UnregistrationReject_tokens(Enc12@element),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[align|encode_fragmented(Enc13@bin, 8)]
end
end
end
end,
begin
Enc15@element = element(7, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = enc_UnregistrationReject_cryptoTokens(Enc15@element),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[align|encode_fragmented(Enc16@bin, 8)]
end
end
end
end,
begin
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@output = enc_ICV(Enc18@element),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[align|encode_fragmented(Enc19@bin, 8)]
end
end
end
end|begin
Enc21@element = element(9, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@output = enc_UnregistrationReject_genericData(Enc21@element),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[align|encode_fragmented(Enc22@bin, 8)]
end
end
end
end].
'enc_UnregistrationReject_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_UnregistrationReject_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components176(V1@V0, V1@Buf1, []).

'enc_UnregistrationReject_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_UnregistrationReject_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components177(V1@V0, V1@Buf1, []).

'enc_UnregistrationReject_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_UnregistrationReject_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components178(V1@V0, V1@Buf1, []).



dec_UnregistrationReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type UnregRejectReason
{Term2,Bytes4} = dec_UnregRejectReason(Bytes3),

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 4 with type AltGKInfo
{Term4,Bytes7} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes6) band 7,
{V5@V0,V5@Buf1} = case Bytes6 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx4,_} = dec_AltGKInfo(V5@V0),
{TmpValx4,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes8} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes7) band 7,
{V6@V0,V6@Buf1} = case Bytes7 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx5,_} = 'dec_UnregistrationReject_tokens'(V6@V0),
{TmpValx5,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = 'dec_UnregistrationReject_cryptoTokens'(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type ICV
{Term7,Bytes10} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = dec_ICV(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes11} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = 'dec_UnregistrationReject_genericData'(V9@V0),
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,
Bytes12= skipextensions(Bytes11, 6, Extensions),
{{'UnregistrationReject',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes12}.

'enc_UnregRejectReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= notCurrentlyRegistered ->
<<0:1,0:2>>;
ChoiceTag =:= callInProgress ->
<<0:1,1:2>>;
ChoiceTag =:= undefinedReason ->
<<0:1,2:2>>;
ChoiceTag =:= permissionDenied ->
begin
Enc4@output = [],
Enc4@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc4@bin]
end;
ChoiceTag =:= securityDenial ->
begin
Enc5@output = [],
Enc5@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc5@bin]
end;
ChoiceTag =:= securityError ->
begin
Enc6@output = enc_SecurityErrors2(ChoiceVal),
Enc6@bin = complete(Enc6@output),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[<<1:1,2:7>>,
align,
Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc6@bin, 8)]
end
end
end.


dec_UnregRejectReason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{notCurrentlyRegistered,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{callInProgress,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefinedReason,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{permissionDenied,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{securityDenial,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_SecurityErrors2(V2@V0),
{TmpVal,V2@Buf1}
end,
{{securityError,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_AdmissionRequest'(Val) ->
Enc8@bitmap = extension_bitmap(Val, 18, 37),
Extensions = if Enc8@bitmap =:= 0 ->
[];
true ->
<<18:7,Enc8@bitmap:19>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(6, Val),
Enc3@element = element(7, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(8, Val),
Enc5@element = element(10, Val),
if Enc4@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@element = element(13, Val),
Enc7@element = element(14, Val),
if Enc6@element =:= asn1_NOVALUE ->
if Enc7@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc7@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc10@element = element(2, Val),
Enc10@element@sub = Enc10@element - 1,
if 0 =< Enc10@element@sub, Enc10@element@sub < 65535 ->
<<Enc10@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end,
begin
Enc12@element = element(3, Val),
enc_CallType(Enc12@element)
end,
begin
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallModel(Enc13@element)
end
end,
begin
Enc15@element = element(5, Val),
Enc16@len = length(Enc15@element),
Enc16@bin = encode_chars_16bit(Enc15@element),
Enc16@len@sub = Enc16@len - 1,
if Enc16@len@sub bsr 7 =:= 0 ->
[<<Enc16@len@sub:7>>,
align|Enc16@bin]
end
end,
begin
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_AdmissionRequest_destinationInfo(Enc17@element)
end
end,
begin
Enc19@element = element(7, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc19@element)
end
end,
begin
Enc21@element = element(8, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
enc_AdmissionRequest_destExtraCallInfo(Enc21@element)
end
end,
begin
Enc23@element = element(9, Val),
enc_AdmissionRequest_srcInfo(Enc23@element)
end,
begin
Enc24@element = element(10, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc24@element)
end
end,
begin
Enc26@element = element(11, Val),
if Enc26@element bsr 32 =:= 0 ->
begin
Enc26@element@bin = binary:encode_unsigned(Enc26@element),
Enc26@element@bin_size0 = byte_size(Enc26@element@bin),
Enc26@element@bin_size = Enc26@element@bin_size0 - 1,
[<<Enc26@element@bin_size:2>>,
align|Enc26@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc26@element}}})
end
end,
begin
Enc28@element = element(12, Val),
if Enc28@element bsr 16 =:= 0 ->
<<Enc28@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc28@element}}})
end
end,
begin
Enc30@element = element(13, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc30@element)
end
end,
begin
Enc32@element = element(14, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
enc_QseriesOptions(Enc32@element)
end
end,
align,
begin
Enc34@element = element(15, Val),
Enc35@len = byte_size(Enc34@element),
if Enc35@len =:= 16 ->
Enc34@element
end
end,
begin
Enc36@element = element(16, Val),
Enc38@element = element(17, Val),
if Enc36@element =:= false ->
if Enc38@element =:= false ->
<<0:1,0:1>>;
Enc38@element =:= true ->
<<0:1,1:1>>
end;
Enc36@element =:= true ->
if Enc38@element =:= false ->
<<1:1,0:1>>;
Enc38@element =:= true ->
<<1:1,1:1>>
end
end
end,
Extensions,
begin
Enc40@element = element(18, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc42@output = if Enc40@element =:= false ->
<<0:1,0:7>>;
Enc40@element =:= true ->
<<1:1,0:7>>
end,
Enc42@bin = Enc42@output,
[align,
1|Enc42@bin]
end
end
end,
begin
Enc44@element = element(19, Val),
if Enc44@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@output = enc_CallIdentifier(Enc44@element),
Enc45@bin = complete(Enc45@output),
Enc45@len = byte_size(Enc45@bin),
if Enc45@len < 128 ->
[align,
Enc45@len|Enc45@bin];
Enc45@len < 16384 ->
[align,
<<2:2,Enc45@len:14>>|Enc45@bin];
true ->
[align|encode_fragmented(Enc45@bin, 8)]
end
end
end
end,
begin
Enc47@element = element(20, Val),
if Enc47@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc48@output = enc_AdmissionRequest_srcAlternatives(Enc47@element),
Enc48@bin = complete(Enc48@output),
Enc48@len = byte_size(Enc48@bin),
if Enc48@len < 128 ->
[align,
Enc48@len|Enc48@bin];
Enc48@len < 16384 ->
[align,
<<2:2,Enc48@len:14>>|Enc48@bin];
true ->
[align|encode_fragmented(Enc48@bin, 8)]
end
end
end
end,
begin
Enc50@element = element(21, Val),
if Enc50@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc51@output = enc_AdmissionRequest_destAlternatives(Enc50@element),
Enc51@bin = complete(Enc51@output),
Enc51@len = byte_size(Enc51@bin),
if Enc51@len < 128 ->
[align,
Enc51@len|Enc51@bin];
Enc51@len < 16384 ->
[align,
<<2:2,Enc51@len:14>>|Enc51@bin];
true ->
[align|encode_fragmented(Enc51@bin, 8)]
end
end
end
end,
begin
Enc53@element = element(22, Val),
if Enc53@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc55@output = begin
Enc54@len = length(Enc53@element),
Enc54@bin = encode_chars_16bit(Enc53@element),
Enc54@len@sub = Enc54@len - 1,
if Enc54@len@sub bsr 7 =:= 0 ->
[<<Enc54@len@sub:7,0:1>>|Enc54@bin]
end
end,
Enc55@bin = iolist_to_binary(Enc55@output),
Enc55@len = byte_size(Enc55@bin),
if Enc55@len < 128 ->
[align,
Enc55@len|Enc55@bin];
true ->
[align,
<<2:2,Enc55@len:14>>|Enc55@bin]
end
end
end
end,
begin
Enc57@element = element(23, Val),
if Enc57@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc58@output = enc_AdmissionRequest_tokens(Enc57@element),
Enc58@bin = complete(Enc58@output),
Enc58@len = byte_size(Enc58@bin),
if Enc58@len < 128 ->
[align,
Enc58@len|Enc58@bin];
Enc58@len < 16384 ->
[align,
<<2:2,Enc58@len:14>>|Enc58@bin];
true ->
[align|encode_fragmented(Enc58@bin, 8)]
end
end
end
end,
begin
Enc60@element = element(24, Val),
if Enc60@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc61@output = enc_AdmissionRequest_cryptoTokens(Enc60@element),
Enc61@bin = complete(Enc61@output),
Enc61@len = byte_size(Enc61@bin),
if Enc61@len < 128 ->
[align,
Enc61@len|Enc61@bin];
Enc61@len < 16384 ->
[align,
<<2:2,Enc61@len:14>>|Enc61@bin];
true ->
[align|encode_fragmented(Enc61@bin, 8)]
end
end
end
end,
begin
Enc63@element = element(25, Val),
if Enc63@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc64@output = enc_ICV(Enc63@element),
Enc64@bin = complete(Enc64@output),
Enc64@len = byte_size(Enc64@bin),
if Enc64@len < 128 ->
[align,
Enc64@len|Enc64@bin];
Enc64@len < 16384 ->
[align,
<<2:2,Enc64@len:14>>|Enc64@bin];
true ->
[align|encode_fragmented(Enc64@bin, 8)]
end
end
end
end,
begin
Enc66@element = element(26, Val),
if Enc66@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc67@output = enc_TransportQOS(Enc66@element),
Enc67@bin = complete(Enc67@output),
Enc67@len = byte_size(Enc67@bin),
if Enc67@len < 128 ->
[align,
Enc67@len|Enc67@bin];
Enc67@len < 16384 ->
[align,
<<2:2,Enc67@len:14>>|Enc67@bin];
true ->
[align|encode_fragmented(Enc67@bin, 8)]
end
end
end
end,
begin
Enc69@element = element(27, Val),
if Enc69@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc71@output = if Enc69@element =:= false ->
<<0:1,0:7>>;
Enc69@element =:= true ->
<<1:1,0:7>>
end,
Enc71@bin = Enc71@output,
[align,
1|Enc71@bin]
end
end
end,
begin
Enc73@element = element(28, Val),
if Enc73@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc74@output = enc_CallLinkage(Enc73@element),
Enc74@bin = complete(Enc74@output),
Enc74@len = byte_size(Enc74@bin),
if Enc74@len < 128 ->
[align,
Enc74@len|Enc74@bin];
Enc74@len < 16384 ->
[align,
<<2:2,Enc74@len:14>>|Enc74@bin];
true ->
[align|encode_fragmented(Enc74@bin, 8)]
end
end
end
end,
begin
Enc76@element = element(29, Val),
if Enc76@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc77@output = enc_DataRate(Enc76@element),
Enc77@bin = complete(Enc77@output),
Enc77@len = byte_size(Enc77@bin),
if Enc77@len < 128 ->
[align,
Enc77@len|Enc77@bin];
Enc77@len < 16384 ->
[align,
<<2:2,Enc77@len:14>>|Enc77@bin];
true ->
[align|encode_fragmented(Enc77@bin, 8)]
end
end
end
end,
begin
Enc79@element = element(30, Val),
if Enc79@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc80@output = enc_CallCapacity(Enc79@element),
Enc80@bin = complete(Enc80@output),
Enc80@len = byte_size(Enc80@bin),
if Enc80@len < 128 ->
[align,
Enc80@len|Enc80@bin];
Enc80@len < 16384 ->
[align,
<<2:2,Enc80@len:14>>|Enc80@bin];
true ->
[align|encode_fragmented(Enc80@bin, 8)]
end
end
end
end,
begin
Enc82@element = element(31, Val),
if Enc82@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc83@output = enc_CircuitInfo(Enc82@element),
Enc83@bin = complete(Enc83@output),
Enc83@len = byte_size(Enc83@bin),
if Enc83@len < 128 ->
[align,
Enc83@len|Enc83@bin];
Enc83@len < 16384 ->
[align,
<<2:2,Enc83@len:14>>|Enc83@bin];
true ->
[align|encode_fragmented(Enc83@bin, 8)]
end
end
end
end,
begin
Enc85@element = element(32, Val),
if Enc85@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc86@output = enc_AdmissionRequest_desiredProtocols(Enc85@element),
Enc86@bin = complete(Enc86@output),
Enc86@len = byte_size(Enc86@bin),
if Enc86@len < 128 ->
[align,
Enc86@len|Enc86@bin];
Enc86@len < 16384 ->
[align,
<<2:2,Enc86@len:14>>|Enc86@bin];
true ->
[align|encode_fragmented(Enc86@bin, 8)]
end
end
end
end,
begin
Enc88@element = element(33, Val),
if Enc88@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc89@output = enc_TunnelledProtocol(Enc88@element),
Enc89@bin = complete(Enc89@output),
Enc89@len = byte_size(Enc89@bin),
if Enc89@len < 128 ->
[align,
Enc89@len|Enc89@bin];
Enc89@len < 16384 ->
[align,
<<2:2,Enc89@len:14>>|Enc89@bin];
true ->
[align|encode_fragmented(Enc89@bin, 8)]
end
end
end
end,
begin
Enc91@element = element(34, Val),
if Enc91@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc92@output = enc_FeatureSet(Enc91@element),
Enc92@bin = complete(Enc92@output),
Enc92@len = byte_size(Enc92@bin),
if Enc92@len < 128 ->
[align,
Enc92@len|Enc92@bin];
Enc92@len < 16384 ->
[align,
<<2:2,Enc92@len:14>>|Enc92@bin];
true ->
[align|encode_fragmented(Enc92@bin, 8)]
end
end
end
end,
begin
Enc94@element = element(35, Val),
if Enc94@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc95@output = enc_AdmissionRequest_genericData(Enc94@element),
Enc95@bin = complete(Enc95@output),
Enc95@len = byte_size(Enc95@bin),
if Enc95@len < 128 ->
[align,
Enc95@len|Enc95@bin];
Enc95@len < 16384 ->
[align,
<<2:2,Enc95@len:14>>|Enc95@bin];
true ->
[align|encode_fragmented(Enc95@bin, 8)]
end
end
end
end|begin
Enc97@element = element(36, Val),
if Enc97@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc99@output = if Enc97@element =:= false ->
<<0:1,0:7>>;
Enc97@element =:= true ->
<<1:1,0:7>>
end,
Enc99@bin = Enc99@output,
[align,
1|Enc99@bin]
end
end
end].
'enc_AdmissionRequest_destinationInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_AdmissionRequest_destinationInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components179(V1@V0, V1@Buf1, []).

'enc_AdmissionRequest_destExtraCallInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_AdmissionRequest_destExtraCallInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components180(V1@V0, V1@Buf1, []).

'enc_AdmissionRequest_srcInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_AdmissionRequest_srcInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components181(V1@V0, V1@Buf1, []).

'enc_AdmissionRequest_srcAlternatives'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_Endpoint(Comp) || Comp <- Val]].


dec_AdmissionRequest_srcAlternatives(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components182(V1@V0, V1@Buf1, []).

'enc_AdmissionRequest_destAlternatives'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_Endpoint(Comp) || Comp <- Val]].


dec_AdmissionRequest_destAlternatives(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components183(V1@V0, V1@Buf1, []).

'enc_AdmissionRequest_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_AdmissionRequest_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components184(V1@V0, V1@Buf1, []).

'enc_AdmissionRequest_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_AdmissionRequest_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components185(V1@V0, V1@Buf1, []).

'enc_AdmissionRequest_desiredProtocols'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedProtocols(Comp) || Comp <- Val]].


dec_AdmissionRequest_desiredProtocols(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components186(V1@V0, V1@Buf1, []).

'enc_AdmissionRequest_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_AdmissionRequest_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components187(V1@V0, V1@Buf1, []).



dec_AdmissionRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type CallType
{Term2,Bytes4} = dec_CallType(Bytes3),

%% attribute number 3 with type CallModel
{Term3,Bytes5} = case (Opt bsr 6) band 1 of
1 ->
dec_CallModel(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type BMPString
{Term4,Bytes6} = begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes5,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:16,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V7,V4@Buf8}  = {decode_chars_16bit(V4@V3),V4@Buf4},
{V4@V7,V4@Buf8}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case (Opt bsr 5) band 1 of
1 ->
'dec_AdmissionRequest_destinationInfo'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type TransportAddress
{Term6,Bytes8} = case (Opt bsr 4) band 1 of
1 ->
dec_TransportAddress(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes9} = case (Opt bsr 3) band 1 of
1 ->
'dec_AdmissionRequest_destExtraCallInfo'(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes10} = 'dec_AdmissionRequest_srcInfo'(Bytes9),

%% attribute number 9 with type TransportAddress
{Term9,Bytes11} = case (Opt bsr 2) band 1 of
1 ->
dec_TransportAddress(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type INTEGER
{Term10,Bytes12} = begin
<<V5@V0:2/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes11,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/unsigned-unit:8,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V3,V5@Buf4}
end,

%% attribute number 11 with type INTEGER
{Term11,Bytes13} = begin
<<V6@V0:2/unsigned-unit:8,V6@Buf1/bitstring>> = Bytes12,
{V6@V0,V6@Buf1}
end,

%% attribute number 12 with type NonStandardParameter
{Term12,Bytes14} = case (Opt bsr 1) band 1 of
1 ->
dec_NonStandardParameter(Bytes13);
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 13 with type QseriesOptions
{Term13,Bytes15} = case Opt band 1 of
1 ->
dec_QseriesOptions(Bytes14);
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 14 with type OCTET STRING
{Term14,Bytes16} = begin
V7@Pad2 = bit_size(Bytes15) band 7,
<<_:V7@Pad2,V7@V0:16/binary-unit:8,V7@Buf1/bitstring>> = Bytes15,
V7@Conv4 = binary:copy(V7@V0),
{V7@Conv4,V7@Buf1}
end,

%% attribute number 15 with type BOOLEAN
{Term15,Bytes17} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes16,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 16 with type BOOLEAN
{Term16,Bytes18} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes17,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% Extensions
{Extensions,Bytes19} = case Ext of
0 -> {<<>>,Bytes18};
1 ->
{V10@V0,V10@Buf1} = case Bytes18 of
<<0:1,V10@V3:6,V10@Buf4/bitstring>> ->
V10@Add5 = V10@V3 + 1,
{V10@Add5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<_:5,0:1,V10@V7:7,V10@Buf8/bitstring>> when V10@V7 =/= 0 ->
{V10@V7,V10@Buf8};
<<_:5,1:1,0:1,V10@V8:14,V10@Buf9/bitstring>> when V10@V8 =/= 0 ->
{V10@V8,V10@Buf9}
end,
{V10@V3,V10@Buf4}
end,
<<V10@V10:V10@V0/bitstring-unit:1,V10@Buf11/bitstring>> = V10@Buf1,
{V10@V10,V10@Buf11}
end,

%% attribute number 17 with type BOOLEAN
{Term17,Bytes20} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes19) band 7,
{V11@V0,V11@Buf1} = case Bytes19 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx17,_} = begin
<<V12@V0:1,V12@Buf1/bitstring>> = V11@V0,
V12@Int2 = case V12@V0 of
0 -> false;
1 -> true
end,
{V12@Int2,V12@Buf1}
end,
{TmpValx17,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type CallIdentifier
{Term18,Bytes21} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes20) band 7,
{V13@V0,V13@Buf1} = case Bytes20 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx18,_} = dec_CallIdentifier(V13@V0),
{TmpValx18,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute number 19 with type SEQUENCE OF
{Term19,Bytes22} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes21) band 7,
{V14@V0,V14@Buf1} = case Bytes21 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx19,_} = 'dec_AdmissionRequest_srcAlternatives'(V14@V0),
{TmpValx19,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes21}
end,

%% attribute number 20 with type SEQUENCE OF
{Term20,Bytes23} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V15@Pad3 = bit_size(Bytes22) band 7,
{V15@V0,V15@Buf1} = case Bytes22 of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
{TmpValx20,_} = 'dec_AdmissionRequest_destAlternatives'(V15@V0),
{TmpValx20,V15@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes22}
end,

%% attribute number 21 with type BMPString
{Term21,Bytes24} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes23) band 7,
{V16@V0,V16@Buf1} = case Bytes23 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx21,_} = begin
<<V17@V0:7/unsigned-unit:1,V17@Buf1/bitstring>> = V16@V0,
V17@Add2 = V17@V0 + 1,
V17@Pad5 = bit_size(V17@Buf1) band 7,
<<_:V17@Pad5,V17@V3:V17@Add2/binary-unit:16,V17@Buf4/bitstring>> = V17@Buf1,
{V17@V7,V17@Buf8}  = {decode_chars_16bit(V17@V3),V17@Buf4},
{V17@V7,V17@Buf8}
end,
{TmpValx21,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes23}
end,

%% attribute number 22 with type SEQUENCE OF
{Term22,Bytes25} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V18@Pad3 = bit_size(Bytes24) band 7,
{V18@V0,V18@Buf1} = case Bytes24 of
<<_:V18@Pad3,0:1,V18@V5:7,V18@V7:V18@V5/binary-unit:8,V18@Buf8/bitstring>> ->
{V18@V7,V18@Buf8};
<<_:V18@Pad3,1:1,0:1,V18@V6:14,V18@V8:V18@V6/binary-unit:8,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<_:V18@Pad3,1:1,1:1,V18@V6:6,V18@Buf7/bitstring>> ->
{V18@V8,V18@Buf9}  = decode_fragmented(V18@V6, V18@Buf7, 8),
{V18@V8,V18@Buf9}
end,
{TmpValx22,_} = 'dec_AdmissionRequest_tokens'(V18@V0),
{TmpValx22,V18@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes24}
end,

%% attribute number 23 with type SEQUENCE OF
{Term23,Bytes26} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V19@Pad3 = bit_size(Bytes25) band 7,
{V19@V0,V19@Buf1} = case Bytes25 of
<<_:V19@Pad3,0:1,V19@V5:7,V19@V7:V19@V5/binary-unit:8,V19@Buf8/bitstring>> ->
{V19@V7,V19@Buf8};
<<_:V19@Pad3,1:1,0:1,V19@V6:14,V19@V8:V19@V6/binary-unit:8,V19@Buf9/bitstring>> ->
{V19@V8,V19@Buf9};
<<_:V19@Pad3,1:1,1:1,V19@V6:6,V19@Buf7/bitstring>> ->
{V19@V8,V19@Buf9}  = decode_fragmented(V19@V6, V19@Buf7, 8),
{V19@V8,V19@Buf9}
end,
{TmpValx23,_} = 'dec_AdmissionRequest_cryptoTokens'(V19@V0),
{TmpValx23,V19@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes25}
end,

%% attribute number 24 with type ICV
{Term24,Bytes27} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V20@Pad3 = bit_size(Bytes26) band 7,
{V20@V0,V20@Buf1} = case Bytes26 of
<<_:V20@Pad3,0:1,V20@V5:7,V20@V7:V20@V5/binary-unit:8,V20@Buf8/bitstring>> ->
{V20@V7,V20@Buf8};
<<_:V20@Pad3,1:1,0:1,V20@V6:14,V20@V8:V20@V6/binary-unit:8,V20@Buf9/bitstring>> ->
{V20@V8,V20@Buf9};
<<_:V20@Pad3,1:1,1:1,V20@V6:6,V20@Buf7/bitstring>> ->
{V20@V8,V20@Buf9}  = decode_fragmented(V20@V6, V20@Buf7, 8),
{V20@V8,V20@Buf9}
end,
{TmpValx24,_} = dec_ICV(V20@V0),
{TmpValx24,V20@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes26}
end,

%% attribute number 25 with type TransportQOS
{Term25,Bytes28} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V21@Pad3 = bit_size(Bytes27) band 7,
{V21@V0,V21@Buf1} = case Bytes27 of
<<_:V21@Pad3,0:1,V21@V5:7,V21@V7:V21@V5/binary-unit:8,V21@Buf8/bitstring>> ->
{V21@V7,V21@Buf8};
<<_:V21@Pad3,1:1,0:1,V21@V6:14,V21@V8:V21@V6/binary-unit:8,V21@Buf9/bitstring>> ->
{V21@V8,V21@Buf9};
<<_:V21@Pad3,1:1,1:1,V21@V6:6,V21@Buf7/bitstring>> ->
{V21@V8,V21@Buf9}  = decode_fragmented(V21@V6, V21@Buf7, 8),
{V21@V8,V21@Buf9}
end,
{TmpValx25,_} = dec_TransportQOS(V21@V0),
{TmpValx25,V21@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes27}
end,

%% attribute number 26 with type BOOLEAN
{Term26,Bytes29} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V22@Pad3 = bit_size(Bytes28) band 7,
{V22@V0,V22@Buf1} = case Bytes28 of
<<_:V22@Pad3,0:1,V22@V5:7,V22@V7:V22@V5/binary-unit:8,V22@Buf8/bitstring>> ->
{V22@V7,V22@Buf8};
<<_:V22@Pad3,1:1,0:1,V22@V6:14,V22@V8:V22@V6/binary-unit:8,V22@Buf9/bitstring>> ->
{V22@V8,V22@Buf9};
<<_:V22@Pad3,1:1,1:1,V22@V6:6,V22@Buf7/bitstring>> ->
{V22@V8,V22@Buf9}  = decode_fragmented(V22@V6, V22@Buf7, 8),
{V22@V8,V22@Buf9}
end,
{TmpValx26,_} = begin
<<V23@V0:1,V23@Buf1/bitstring>> = V22@V0,
V23@Int2 = case V23@V0 of
0 -> false;
1 -> true
end,
{V23@Int2,V23@Buf1}
end,
{TmpValx26,V22@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes28}
end,

%% attribute number 27 with type CallLinkage
{Term27,Bytes30} = case Extensions of
  <<_:10,1:1,_/bitstring>> ->
begin
V24@Pad3 = bit_size(Bytes29) band 7,
{V24@V0,V24@Buf1} = case Bytes29 of
<<_:V24@Pad3,0:1,V24@V5:7,V24@V7:V24@V5/binary-unit:8,V24@Buf8/bitstring>> ->
{V24@V7,V24@Buf8};
<<_:V24@Pad3,1:1,0:1,V24@V6:14,V24@V8:V24@V6/binary-unit:8,V24@Buf9/bitstring>> ->
{V24@V8,V24@Buf9};
<<_:V24@Pad3,1:1,1:1,V24@V6:6,V24@Buf7/bitstring>> ->
{V24@V8,V24@Buf9}  = decode_fragmented(V24@V6, V24@Buf7, 8),
{V24@V8,V24@Buf9}
end,
{TmpValx27,_} = dec_CallLinkage(V24@V0),
{TmpValx27,V24@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes29}
end,

%% attribute number 28 with type DataRate
{Term28,Bytes31} = case Extensions of
  <<_:11,1:1,_/bitstring>> ->
begin
V25@Pad3 = bit_size(Bytes30) band 7,
{V25@V0,V25@Buf1} = case Bytes30 of
<<_:V25@Pad3,0:1,V25@V5:7,V25@V7:V25@V5/binary-unit:8,V25@Buf8/bitstring>> ->
{V25@V7,V25@Buf8};
<<_:V25@Pad3,1:1,0:1,V25@V6:14,V25@V8:V25@V6/binary-unit:8,V25@Buf9/bitstring>> ->
{V25@V8,V25@Buf9};
<<_:V25@Pad3,1:1,1:1,V25@V6:6,V25@Buf7/bitstring>> ->
{V25@V8,V25@Buf9}  = decode_fragmented(V25@V6, V25@Buf7, 8),
{V25@V8,V25@Buf9}
end,
{TmpValx28,_} = dec_DataRate(V25@V0),
{TmpValx28,V25@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes30}
end,

%% attribute number 29 with type CallCapacity
{Term29,Bytes32} = case Extensions of
  <<_:12,1:1,_/bitstring>> ->
begin
V26@Pad3 = bit_size(Bytes31) band 7,
{V26@V0,V26@Buf1} = case Bytes31 of
<<_:V26@Pad3,0:1,V26@V5:7,V26@V7:V26@V5/binary-unit:8,V26@Buf8/bitstring>> ->
{V26@V7,V26@Buf8};
<<_:V26@Pad3,1:1,0:1,V26@V6:14,V26@V8:V26@V6/binary-unit:8,V26@Buf9/bitstring>> ->
{V26@V8,V26@Buf9};
<<_:V26@Pad3,1:1,1:1,V26@V6:6,V26@Buf7/bitstring>> ->
{V26@V8,V26@Buf9}  = decode_fragmented(V26@V6, V26@Buf7, 8),
{V26@V8,V26@Buf9}
end,
{TmpValx29,_} = dec_CallCapacity(V26@V0),
{TmpValx29,V26@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes31}
end,

%% attribute number 30 with type CircuitInfo
{Term30,Bytes33} = case Extensions of
  <<_:13,1:1,_/bitstring>> ->
begin
V27@Pad3 = bit_size(Bytes32) band 7,
{V27@V0,V27@Buf1} = case Bytes32 of
<<_:V27@Pad3,0:1,V27@V5:7,V27@V7:V27@V5/binary-unit:8,V27@Buf8/bitstring>> ->
{V27@V7,V27@Buf8};
<<_:V27@Pad3,1:1,0:1,V27@V6:14,V27@V8:V27@V6/binary-unit:8,V27@Buf9/bitstring>> ->
{V27@V8,V27@Buf9};
<<_:V27@Pad3,1:1,1:1,V27@V6:6,V27@Buf7/bitstring>> ->
{V27@V8,V27@Buf9}  = decode_fragmented(V27@V6, V27@Buf7, 8),
{V27@V8,V27@Buf9}
end,
{TmpValx30,_} = dec_CircuitInfo(V27@V0),
{TmpValx30,V27@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes32}
end,

%% attribute number 31 with type SEQUENCE OF
{Term31,Bytes34} = case Extensions of
  <<_:14,1:1,_/bitstring>> ->
begin
V28@Pad3 = bit_size(Bytes33) band 7,
{V28@V0,V28@Buf1} = case Bytes33 of
<<_:V28@Pad3,0:1,V28@V5:7,V28@V7:V28@V5/binary-unit:8,V28@Buf8/bitstring>> ->
{V28@V7,V28@Buf8};
<<_:V28@Pad3,1:1,0:1,V28@V6:14,V28@V8:V28@V6/binary-unit:8,V28@Buf9/bitstring>> ->
{V28@V8,V28@Buf9};
<<_:V28@Pad3,1:1,1:1,V28@V6:6,V28@Buf7/bitstring>> ->
{V28@V8,V28@Buf9}  = decode_fragmented(V28@V6, V28@Buf7, 8),
{V28@V8,V28@Buf9}
end,
{TmpValx31,_} = 'dec_AdmissionRequest_desiredProtocols'(V28@V0),
{TmpValx31,V28@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes33}
end,

%% attribute number 32 with type TunnelledProtocol
{Term32,Bytes35} = case Extensions of
  <<_:15,1:1,_/bitstring>> ->
begin
V29@Pad3 = bit_size(Bytes34) band 7,
{V29@V0,V29@Buf1} = case Bytes34 of
<<_:V29@Pad3,0:1,V29@V5:7,V29@V7:V29@V5/binary-unit:8,V29@Buf8/bitstring>> ->
{V29@V7,V29@Buf8};
<<_:V29@Pad3,1:1,0:1,V29@V6:14,V29@V8:V29@V6/binary-unit:8,V29@Buf9/bitstring>> ->
{V29@V8,V29@Buf9};
<<_:V29@Pad3,1:1,1:1,V29@V6:6,V29@Buf7/bitstring>> ->
{V29@V8,V29@Buf9}  = decode_fragmented(V29@V6, V29@Buf7, 8),
{V29@V8,V29@Buf9}
end,
{TmpValx32,_} = dec_TunnelledProtocol(V29@V0),
{TmpValx32,V29@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes34}
end,

%% attribute number 33 with type FeatureSet
{Term33,Bytes36} = case Extensions of
  <<_:16,1:1,_/bitstring>> ->
begin
V30@Pad3 = bit_size(Bytes35) band 7,
{V30@V0,V30@Buf1} = case Bytes35 of
<<_:V30@Pad3,0:1,V30@V5:7,V30@V7:V30@V5/binary-unit:8,V30@Buf8/bitstring>> ->
{V30@V7,V30@Buf8};
<<_:V30@Pad3,1:1,0:1,V30@V6:14,V30@V8:V30@V6/binary-unit:8,V30@Buf9/bitstring>> ->
{V30@V8,V30@Buf9};
<<_:V30@Pad3,1:1,1:1,V30@V6:6,V30@Buf7/bitstring>> ->
{V30@V8,V30@Buf9}  = decode_fragmented(V30@V6, V30@Buf7, 8),
{V30@V8,V30@Buf9}
end,
{TmpValx33,_} = dec_FeatureSet(V30@V0),
{TmpValx33,V30@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes35}
end,

%% attribute number 34 with type SEQUENCE OF
{Term34,Bytes37} = case Extensions of
  <<_:17,1:1,_/bitstring>> ->
begin
V31@Pad3 = bit_size(Bytes36) band 7,
{V31@V0,V31@Buf1} = case Bytes36 of
<<_:V31@Pad3,0:1,V31@V5:7,V31@V7:V31@V5/binary-unit:8,V31@Buf8/bitstring>> ->
{V31@V7,V31@Buf8};
<<_:V31@Pad3,1:1,0:1,V31@V6:14,V31@V8:V31@V6/binary-unit:8,V31@Buf9/bitstring>> ->
{V31@V8,V31@Buf9};
<<_:V31@Pad3,1:1,1:1,V31@V6:6,V31@Buf7/bitstring>> ->
{V31@V8,V31@Buf9}  = decode_fragmented(V31@V6, V31@Buf7, 8),
{V31@V8,V31@Buf9}
end,
{TmpValx34,_} = 'dec_AdmissionRequest_genericData'(V31@V0),
{TmpValx34,V31@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes36}
end,

%% attribute number 35 with type BOOLEAN
{Term35,Bytes38} = case Extensions of
  <<_:18,1:1,_/bitstring>> ->
begin
V32@Pad3 = bit_size(Bytes37) band 7,
{V32@V0,V32@Buf1} = case Bytes37 of
<<_:V32@Pad3,0:1,V32@V5:7,V32@V7:V32@V5/binary-unit:8,V32@Buf8/bitstring>> ->
{V32@V7,V32@Buf8};
<<_:V32@Pad3,1:1,0:1,V32@V6:14,V32@V8:V32@V6/binary-unit:8,V32@Buf9/bitstring>> ->
{V32@V8,V32@Buf9};
<<_:V32@Pad3,1:1,1:1,V32@V6:6,V32@Buf7/bitstring>> ->
{V32@V8,V32@Buf9}  = decode_fragmented(V32@V6, V32@Buf7, 8),
{V32@V8,V32@Buf9}
end,
{TmpValx35,_} = begin
<<V33@V0:1,V33@Buf1/bitstring>> = V32@V0,
V33@Int2 = case V33@V0 of
0 -> false;
1 -> true
end,
{V33@Int2,V33@Buf1}
end,
{TmpValx35,V32@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes37}
end,
Bytes39= skipextensions(Bytes38, 20, Extensions),
{{'AdmissionRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21,Term22,Term23,Term24,Term25,Term26,Term27,Term28,Term29,Term30,Term31,Term32,Term33,Term34,Term35},Bytes39}.

'enc_CallType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= pointToPoint ->
<<0:1,0:2>>;
ChoiceTag =:= oneToN ->
<<0:1,1:2>>;
ChoiceTag =:= nToOne ->
<<0:1,2:2>>;
ChoiceTag =:= nToN ->
<<0:1,3:2>>
end.


dec_CallType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{pointToPoint,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{oneToN,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{nToOne,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{nToN,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_CallModel'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= direct ->
<<0:1,0:1>>;
ChoiceTag =:= gatekeeperRouted ->
<<0:1,1:1>>
end.


dec_CallModel(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{direct,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{gatekeeperRouted,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_TransportQOS'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= endpointControlled ->
<<0:1,0:2>>;
ChoiceTag =:= gatekeeperControlled ->
<<0:1,1:2>>;
ChoiceTag =:= noControl ->
<<0:1,2:2>>
end.


dec_TransportQOS(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{endpointControlled,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{gatekeeperControlled,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{noControl,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_AdmissionConfirm'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 8, 30),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<21:7,Enc3@bitmap:22>>
end,
[begin
Enc1@element = element(6, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(7, Val),
if Enc2@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc5@element = element(2, Val),
Enc5@element@sub = Enc5@element - 1,
if 0 =< Enc5@element@sub, Enc5@element@sub < 65535 ->
<<Enc5@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element bsr 32 =:= 0 ->
begin
Enc7@element@bin = binary:encode_unsigned(Enc7@element),
Enc7@element@bin_size0 = byte_size(Enc7@element@bin),
Enc7@element@bin_size = Enc7@element@bin_size0 - 1,
[<<Enc7@element@bin_size:2,0:6>>|Enc7@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc9@element = element(4, Val),
enc_CallModel(Enc9@element)
end,
begin
Enc10@element = element(5, Val),
enc_TransportAddress(Enc10@element)
end,
begin
Enc11@element = element(6, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@element@sub = Enc11@element - 1,
if 0 =< Enc11@element@sub, Enc11@element@sub < 65535 ->
[align|<<Enc11@element@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Enc11@element}}})
end
end
end
end,
begin
Enc14@element = element(7, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc14@element)
end
end,
Extensions,
begin
Enc16@element = element(8, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@output = enc_AdmissionConfirm_destinationInfo(Enc16@element),
Enc17@bin = complete(Enc17@output),
Enc17@len = byte_size(Enc17@bin),
if Enc17@len < 128 ->
[align,
Enc17@len|Enc17@bin];
Enc17@len < 16384 ->
[align,
<<2:2,Enc17@len:14>>|Enc17@bin];
true ->
[align|encode_fragmented(Enc17@bin, 8)]
end
end
end
end,
begin
Enc19@element = element(9, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@output = enc_AdmissionConfirm_destExtraCallInfo(Enc19@element),
Enc20@bin = complete(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[align,
Enc20@len|Enc20@bin];
Enc20@len < 16384 ->
[align,
<<2:2,Enc20@len:14>>|Enc20@bin];
true ->
[align|encode_fragmented(Enc20@bin, 8)]
end
end
end
end,
begin
Enc22@element = element(10, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@output = enc_EndpointType(Enc22@element),
Enc23@bin = complete(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[align,
Enc23@len|Enc23@bin];
Enc23@len < 16384 ->
[align,
<<2:2,Enc23@len:14>>|Enc23@bin];
true ->
[align|encode_fragmented(Enc23@bin, 8)]
end
end
end
end,
begin
Enc25@element = element(11, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@output = enc_AdmissionConfirm_remoteExtensionAddress(Enc25@element),
Enc26@bin = complete(Enc26@output),
Enc26@len = byte_size(Enc26@bin),
if Enc26@len < 128 ->
[align,
Enc26@len|Enc26@bin];
Enc26@len < 16384 ->
[align,
<<2:2,Enc26@len:14>>|Enc26@bin];
true ->
[align|encode_fragmented(Enc26@bin, 8)]
end
end
end
end,
begin
Enc28@element = element(12, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc29@output = enc_AdmissionConfirm_alternateEndpoints(Enc28@element),
Enc29@bin = complete(Enc29@output),
Enc29@len = byte_size(Enc29@bin),
if Enc29@len < 128 ->
[align,
Enc29@len|Enc29@bin];
Enc29@len < 16384 ->
[align,
<<2:2,Enc29@len:14>>|Enc29@bin];
true ->
[align|encode_fragmented(Enc29@bin, 8)]
end
end
end
end,
begin
Enc31@element = element(13, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc32@output = enc_AdmissionConfirm_tokens(Enc31@element),
Enc32@bin = complete(Enc32@output),
Enc32@len = byte_size(Enc32@bin),
if Enc32@len < 128 ->
[align,
Enc32@len|Enc32@bin];
Enc32@len < 16384 ->
[align,
<<2:2,Enc32@len:14>>|Enc32@bin];
true ->
[align|encode_fragmented(Enc32@bin, 8)]
end
end
end
end,
begin
Enc34@element = element(14, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc35@output = enc_AdmissionConfirm_cryptoTokens(Enc34@element),
Enc35@bin = complete(Enc35@output),
Enc35@len = byte_size(Enc35@bin),
if Enc35@len < 128 ->
[align,
Enc35@len|Enc35@bin];
Enc35@len < 16384 ->
[align,
<<2:2,Enc35@len:14>>|Enc35@bin];
true ->
[align|encode_fragmented(Enc35@bin, 8)]
end
end
end
end,
begin
Enc37@element = element(15, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc38@output = enc_ICV(Enc37@element),
Enc38@bin = complete(Enc38@output),
Enc38@len = byte_size(Enc38@bin),
if Enc38@len < 128 ->
[align,
Enc38@len|Enc38@bin];
Enc38@len < 16384 ->
[align,
<<2:2,Enc38@len:14>>|Enc38@bin];
true ->
[align|encode_fragmented(Enc38@bin, 8)]
end
end
end
end,
begin
Enc40@element = element(16, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc41@output = enc_TransportQOS(Enc40@element),
Enc41@bin = complete(Enc41@output),
Enc41@len = byte_size(Enc41@bin),
if Enc41@len < 128 ->
[align,
Enc41@len|Enc41@bin];
Enc41@len < 16384 ->
[align,
<<2:2,Enc41@len:14>>|Enc41@bin];
true ->
[align|encode_fragmented(Enc41@bin, 8)]
end
end
end
end,
begin
Enc43@element = element(17, Val),
if Enc43@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@output = if Enc43@element =:= false ->
<<0:1,0:7>>;
Enc43@element =:= true ->
<<1:1,0:7>>
end,
Enc45@bin = Enc45@output,
[align,
1|Enc45@bin]
end
end
end,
begin
Enc47@element = element(18, Val),
if Enc47@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc48@output = enc_UUIEsRequested(Enc47@element),
Enc48@bin = complete(Enc48@output),
Enc48@len = byte_size(Enc48@bin),
if Enc48@len < 128 ->
[align,
Enc48@len|Enc48@bin];
Enc48@len < 16384 ->
[align,
<<2:2,Enc48@len:14>>|Enc48@bin];
true ->
[align|encode_fragmented(Enc48@bin, 8)]
end
end
end
end,
begin
Enc50@element = element(19, Val),
if Enc50@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc51@output = enc_AdmissionConfirm_language(Enc50@element),
Enc51@bin = complete(Enc51@output),
Enc51@len = byte_size(Enc51@bin),
if Enc51@len < 128 ->
[align,
Enc51@len|Enc51@bin];
Enc51@len < 16384 ->
[align,
<<2:2,Enc51@len:14>>|Enc51@bin];
true ->
[align|encode_fragmented(Enc51@bin, 8)]
end
end
end
end,
begin
Enc53@element = element(20, Val),
if Enc53@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc54@output = enc_AlternateTransportAddresses(Enc53@element),
Enc54@bin = complete(Enc54@output),
Enc54@len = byte_size(Enc54@bin),
if Enc54@len < 128 ->
[align,
Enc54@len|Enc54@bin];
Enc54@len < 16384 ->
[align,
<<2:2,Enc54@len:14>>|Enc54@bin];
true ->
[align|encode_fragmented(Enc54@bin, 8)]
end
end
end
end,
begin
Enc56@element = element(21, Val),
if Enc56@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc57@output = enc_UseSpecifiedTransport(Enc56@element),
Enc57@bin = complete(Enc57@output),
Enc57@len = byte_size(Enc57@bin),
if Enc57@len < 128 ->
[align,
Enc57@len|Enc57@bin];
Enc57@len < 16384 ->
[align,
<<2:2,Enc57@len:14>>|Enc57@bin];
true ->
[align|encode_fragmented(Enc57@bin, 8)]
end
end
end
end,
begin
Enc59@element = element(22, Val),
if Enc59@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc60@output = enc_CircuitInfo(Enc59@element),
Enc60@bin = complete(Enc60@output),
Enc60@len = byte_size(Enc60@bin),
if Enc60@len < 128 ->
[align,
Enc60@len|Enc60@bin];
Enc60@len < 16384 ->
[align,
<<2:2,Enc60@len:14>>|Enc60@bin];
true ->
[align|encode_fragmented(Enc60@bin, 8)]
end
end
end
end,
begin
Enc62@element = element(23, Val),
if Enc62@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc63@output = enc_AdmissionConfirm_usageSpec(Enc62@element),
Enc63@bin = complete(Enc63@output),
Enc63@len = byte_size(Enc63@bin),
if Enc63@len < 128 ->
[align,
Enc63@len|Enc63@bin];
Enc63@len < 16384 ->
[align,
<<2:2,Enc63@len:14>>|Enc63@bin];
true ->
[align|encode_fragmented(Enc63@bin, 8)]
end
end
end
end,
begin
Enc65@element = element(24, Val),
if Enc65@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc66@output = enc_AdmissionConfirm_supportedProtocols(Enc65@element),
Enc66@bin = complete(Enc66@output),
Enc66@len = byte_size(Enc66@bin),
if Enc66@len < 128 ->
[align,
Enc66@len|Enc66@bin];
Enc66@len < 16384 ->
[align,
<<2:2,Enc66@len:14>>|Enc66@bin];
true ->
[align|encode_fragmented(Enc66@bin, 8)]
end
end
end
end,
begin
Enc68@element = element(25, Val),
if Enc68@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc69@output = enc_AdmissionConfirm_serviceControl(Enc68@element),
Enc69@bin = complete(Enc69@output),
Enc69@len = byte_size(Enc69@bin),
if Enc69@len < 128 ->
[align,
Enc69@len|Enc69@bin];
Enc69@len < 16384 ->
[align,
<<2:2,Enc69@len:14>>|Enc69@bin];
true ->
[align|encode_fragmented(Enc69@bin, 8)]
end
end
end
end,
begin
Enc71@element = element(26, Val),
if Enc71@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc73@output = if Enc71@element =:= false ->
<<0:1,0:7>>;
Enc71@element =:= true ->
<<1:1,0:7>>
end,
Enc73@bin = Enc73@output,
[align,
1|Enc73@bin]
end
end
end,
begin
Enc75@element = element(27, Val),
if Enc75@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc76@output = enc_FeatureSet(Enc75@element),
Enc76@bin = complete(Enc76@output),
Enc76@len = byte_size(Enc76@bin),
if Enc76@len < 128 ->
[align,
Enc76@len|Enc76@bin];
Enc76@len < 16384 ->
[align,
<<2:2,Enc76@len:14>>|Enc76@bin];
true ->
[align|encode_fragmented(Enc76@bin, 8)]
end
end
end
end,
begin
Enc78@element = element(28, Val),
if Enc78@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc79@output = enc_AdmissionConfirm_genericData(Enc78@element),
Enc79@bin = complete(Enc79@output),
Enc79@len = byte_size(Enc79@bin),
if Enc79@len < 128 ->
[align,
Enc79@len|Enc79@bin];
Enc79@len < 16384 ->
[align,
<<2:2,Enc79@len:14>>|Enc79@bin];
true ->
[align|encode_fragmented(Enc79@bin, 8)]
end
end
end
end|begin
Enc81@element = element(29, Val),
if Enc81@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc82@output = enc_AdmissionConfirm_modifiedSrcInfo(Enc81@element),
Enc82@bin = complete(Enc82@output),
Enc82@len = byte_size(Enc82@bin),
if Enc82@len < 128 ->
[align,
Enc82@len|Enc82@bin];
Enc82@len < 16384 ->
[align,
<<2:2,Enc82@len:14>>|Enc82@bin];
true ->
[align|encode_fragmented(Enc82@bin, 8)]
end
end
end
end].
'enc_AdmissionConfirm_destinationInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_AdmissionConfirm_destinationInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components188(V1@V0, V1@Buf1, []).

'enc_AdmissionConfirm_destExtraCallInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_AdmissionConfirm_destExtraCallInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components189(V1@V0, V1@Buf1, []).

'enc_AdmissionConfirm_remoteExtensionAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_AdmissionConfirm_remoteExtensionAddress(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components190(V1@V0, V1@Buf1, []).

'enc_AdmissionConfirm_alternateEndpoints'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_Endpoint(Comp) || Comp <- Val]].


dec_AdmissionConfirm_alternateEndpoints(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components191(V1@V0, V1@Buf1, []).

'enc_AdmissionConfirm_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_AdmissionConfirm_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components192(V1@V0, V1@Buf1, []).

'enc_AdmissionConfirm_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_AdmissionConfirm_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components193(V1@V0, V1@Buf1, []).

'enc_AdmissionConfirm_language'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@bin = list_to_binary(Comp),
Enc1@len = byte_size(Enc1@bin),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5,0:3>>|Enc1@bin]
end
end || Comp <- Val]].


dec_AdmissionConfirm_language(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components194(V1@V0, V1@Buf1, []).

'enc_AdmissionConfirm_usageSpec'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_RasUsageSpecification(Comp) || Comp <- Val]].


dec_AdmissionConfirm_usageSpec(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components195(V1@V0, V1@Buf1, []).

'enc_AdmissionConfirm_supportedProtocols'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedProtocols(Comp) || Comp <- Val]].


dec_AdmissionConfirm_supportedProtocols(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components196(V1@V0, V1@Buf1, []).

'enc_AdmissionConfirm_serviceControl'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ServiceControlSession(Comp) || Comp <- Val]].


dec_AdmissionConfirm_serviceControl(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components197(V1@V0, V1@Buf1, []).

'enc_AdmissionConfirm_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_AdmissionConfirm_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components198(V1@V0, V1@Buf1, []).

'enc_AdmissionConfirm_modifiedSrcInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_AdmissionConfirm_modifiedSrcInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components199(V1@V0, V1@Buf1, []).



dec_AdmissionConfirm(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:6,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% attribute number 3 with type CallModel
{Term3,Bytes5} = dec_CallModel(Bytes4),

%% attribute number 4 with type TransportAddress
{Term4,Bytes6} = dec_TransportAddress(Bytes5),

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
V5@Pad2 = bit_size(Bytes6) band 7,
<<_:V5@Pad2,V5@V0:2/unsigned-unit:8,V5@Buf1/bitstring>> = Bytes6,
V5@Add4 = V5@V0 + 1,
{V5@Add4,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type NonStandardParameter
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V6@V0,V6@Buf1} = case Bytes8 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes10} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes9) band 7,
{V7@V0,V7@Buf1} = case Bytes9 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx7,_} = 'dec_AdmissionConfirm_destinationInfo'(V7@V0),
{TmpValx7,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes11} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes10) band 7,
{V8@V0,V8@Buf1} = case Bytes10 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx8,_} = 'dec_AdmissionConfirm_destExtraCallInfo'(V8@V0),
{TmpValx8,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type EndpointType
{Term9,Bytes12} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes11) band 7,
{V9@V0,V9@Buf1} = case Bytes11 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx9,_} = dec_EndpointType(V9@V0),
{TmpValx9,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes13} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes12) band 7,
{V10@V0,V10@Buf1} = case Bytes12 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx10,_} = 'dec_AdmissionConfirm_remoteExtensionAddress'(V10@V0),
{TmpValx10,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes14} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes13) band 7,
{V11@V0,V11@Buf1} = case Bytes13 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx11,_} = 'dec_AdmissionConfirm_alternateEndpoints'(V11@V0),
{TmpValx11,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type SEQUENCE OF
{Term12,Bytes15} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes14) band 7,
{V12@V0,V12@Buf1} = case Bytes14 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx12,_} = 'dec_AdmissionConfirm_tokens'(V12@V0),
{TmpValx12,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type SEQUENCE OF
{Term13,Bytes16} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes15) band 7,
{V13@V0,V13@Buf1} = case Bytes15 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx13,_} = 'dec_AdmissionConfirm_cryptoTokens'(V13@V0),
{TmpValx13,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type ICV
{Term14,Bytes17} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes16) band 7,
{V14@V0,V14@Buf1} = case Bytes16 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx14,_} = dec_ICV(V14@V0),
{TmpValx14,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type TransportQOS
{Term15,Bytes18} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V15@Pad3 = bit_size(Bytes17) band 7,
{V15@V0,V15@Buf1} = case Bytes17 of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
{TmpValx15,_} = dec_TransportQOS(V15@V0),
{TmpValx15,V15@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type BOOLEAN
{Term16,Bytes19} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes18) band 7,
{V16@V0,V16@Buf1} = case Bytes18 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx16,_} = begin
<<V17@V0:1,V17@Buf1/bitstring>> = V16@V0,
V17@Int2 = case V17@V0 of
0 -> false;
1 -> true
end,
{V17@Int2,V17@Buf1}
end,
{TmpValx16,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type UUIEsRequested
{Term17,Bytes20} = case Extensions of
  <<_:10,1:1,_/bitstring>> ->
begin
V18@Pad3 = bit_size(Bytes19) band 7,
{V18@V0,V18@Buf1} = case Bytes19 of
<<_:V18@Pad3,0:1,V18@V5:7,V18@V7:V18@V5/binary-unit:8,V18@Buf8/bitstring>> ->
{V18@V7,V18@Buf8};
<<_:V18@Pad3,1:1,0:1,V18@V6:14,V18@V8:V18@V6/binary-unit:8,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<_:V18@Pad3,1:1,1:1,V18@V6:6,V18@Buf7/bitstring>> ->
{V18@V8,V18@Buf9}  = decode_fragmented(V18@V6, V18@Buf7, 8),
{V18@V8,V18@Buf9}
end,
{TmpValx17,_} = dec_UUIEsRequested(V18@V0),
{TmpValx17,V18@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type SEQUENCE OF
{Term18,Bytes21} = case Extensions of
  <<_:11,1:1,_/bitstring>> ->
begin
V19@Pad3 = bit_size(Bytes20) band 7,
{V19@V0,V19@Buf1} = case Bytes20 of
<<_:V19@Pad3,0:1,V19@V5:7,V19@V7:V19@V5/binary-unit:8,V19@Buf8/bitstring>> ->
{V19@V7,V19@Buf8};
<<_:V19@Pad3,1:1,0:1,V19@V6:14,V19@V8:V19@V6/binary-unit:8,V19@Buf9/bitstring>> ->
{V19@V8,V19@Buf9};
<<_:V19@Pad3,1:1,1:1,V19@V6:6,V19@Buf7/bitstring>> ->
{V19@V8,V19@Buf9}  = decode_fragmented(V19@V6, V19@Buf7, 8),
{V19@V8,V19@Buf9}
end,
{TmpValx18,_} = 'dec_AdmissionConfirm_language'(V19@V0),
{TmpValx18,V19@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute number 19 with type AlternateTransportAddresses
{Term19,Bytes22} = case Extensions of
  <<_:12,1:1,_/bitstring>> ->
begin
V20@Pad3 = bit_size(Bytes21) band 7,
{V20@V0,V20@Buf1} = case Bytes21 of
<<_:V20@Pad3,0:1,V20@V5:7,V20@V7:V20@V5/binary-unit:8,V20@Buf8/bitstring>> ->
{V20@V7,V20@Buf8};
<<_:V20@Pad3,1:1,0:1,V20@V6:14,V20@V8:V20@V6/binary-unit:8,V20@Buf9/bitstring>> ->
{V20@V8,V20@Buf9};
<<_:V20@Pad3,1:1,1:1,V20@V6:6,V20@Buf7/bitstring>> ->
{V20@V8,V20@Buf9}  = decode_fragmented(V20@V6, V20@Buf7, 8),
{V20@V8,V20@Buf9}
end,
{TmpValx19,_} = dec_AlternateTransportAddresses(V20@V0),
{TmpValx19,V20@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes21}
end,

%% attribute number 20 with type UseSpecifiedTransport
{Term20,Bytes23} = case Extensions of
  <<_:13,1:1,_/bitstring>> ->
begin
V21@Pad3 = bit_size(Bytes22) band 7,
{V21@V0,V21@Buf1} = case Bytes22 of
<<_:V21@Pad3,0:1,V21@V5:7,V21@V7:V21@V5/binary-unit:8,V21@Buf8/bitstring>> ->
{V21@V7,V21@Buf8};
<<_:V21@Pad3,1:1,0:1,V21@V6:14,V21@V8:V21@V6/binary-unit:8,V21@Buf9/bitstring>> ->
{V21@V8,V21@Buf9};
<<_:V21@Pad3,1:1,1:1,V21@V6:6,V21@Buf7/bitstring>> ->
{V21@V8,V21@Buf9}  = decode_fragmented(V21@V6, V21@Buf7, 8),
{V21@V8,V21@Buf9}
end,
{TmpValx20,_} = dec_UseSpecifiedTransport(V21@V0),
{TmpValx20,V21@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes22}
end,

%% attribute number 21 with type CircuitInfo
{Term21,Bytes24} = case Extensions of
  <<_:14,1:1,_/bitstring>> ->
begin
V22@Pad3 = bit_size(Bytes23) band 7,
{V22@V0,V22@Buf1} = case Bytes23 of
<<_:V22@Pad3,0:1,V22@V5:7,V22@V7:V22@V5/binary-unit:8,V22@Buf8/bitstring>> ->
{V22@V7,V22@Buf8};
<<_:V22@Pad3,1:1,0:1,V22@V6:14,V22@V8:V22@V6/binary-unit:8,V22@Buf9/bitstring>> ->
{V22@V8,V22@Buf9};
<<_:V22@Pad3,1:1,1:1,V22@V6:6,V22@Buf7/bitstring>> ->
{V22@V8,V22@Buf9}  = decode_fragmented(V22@V6, V22@Buf7, 8),
{V22@V8,V22@Buf9}
end,
{TmpValx21,_} = dec_CircuitInfo(V22@V0),
{TmpValx21,V22@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes23}
end,

%% attribute number 22 with type SEQUENCE OF
{Term22,Bytes25} = case Extensions of
  <<_:15,1:1,_/bitstring>> ->
begin
V23@Pad3 = bit_size(Bytes24) band 7,
{V23@V0,V23@Buf1} = case Bytes24 of
<<_:V23@Pad3,0:1,V23@V5:7,V23@V7:V23@V5/binary-unit:8,V23@Buf8/bitstring>> ->
{V23@V7,V23@Buf8};
<<_:V23@Pad3,1:1,0:1,V23@V6:14,V23@V8:V23@V6/binary-unit:8,V23@Buf9/bitstring>> ->
{V23@V8,V23@Buf9};
<<_:V23@Pad3,1:1,1:1,V23@V6:6,V23@Buf7/bitstring>> ->
{V23@V8,V23@Buf9}  = decode_fragmented(V23@V6, V23@Buf7, 8),
{V23@V8,V23@Buf9}
end,
{TmpValx22,_} = 'dec_AdmissionConfirm_usageSpec'(V23@V0),
{TmpValx22,V23@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes24}
end,

%% attribute number 23 with type SEQUENCE OF
{Term23,Bytes26} = case Extensions of
  <<_:16,1:1,_/bitstring>> ->
begin
V24@Pad3 = bit_size(Bytes25) band 7,
{V24@V0,V24@Buf1} = case Bytes25 of
<<_:V24@Pad3,0:1,V24@V5:7,V24@V7:V24@V5/binary-unit:8,V24@Buf8/bitstring>> ->
{V24@V7,V24@Buf8};
<<_:V24@Pad3,1:1,0:1,V24@V6:14,V24@V8:V24@V6/binary-unit:8,V24@Buf9/bitstring>> ->
{V24@V8,V24@Buf9};
<<_:V24@Pad3,1:1,1:1,V24@V6:6,V24@Buf7/bitstring>> ->
{V24@V8,V24@Buf9}  = decode_fragmented(V24@V6, V24@Buf7, 8),
{V24@V8,V24@Buf9}
end,
{TmpValx23,_} = 'dec_AdmissionConfirm_supportedProtocols'(V24@V0),
{TmpValx23,V24@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes25}
end,

%% attribute number 24 with type SEQUENCE OF
{Term24,Bytes27} = case Extensions of
  <<_:17,1:1,_/bitstring>> ->
begin
V25@Pad3 = bit_size(Bytes26) band 7,
{V25@V0,V25@Buf1} = case Bytes26 of
<<_:V25@Pad3,0:1,V25@V5:7,V25@V7:V25@V5/binary-unit:8,V25@Buf8/bitstring>> ->
{V25@V7,V25@Buf8};
<<_:V25@Pad3,1:1,0:1,V25@V6:14,V25@V8:V25@V6/binary-unit:8,V25@Buf9/bitstring>> ->
{V25@V8,V25@Buf9};
<<_:V25@Pad3,1:1,1:1,V25@V6:6,V25@Buf7/bitstring>> ->
{V25@V8,V25@Buf9}  = decode_fragmented(V25@V6, V25@Buf7, 8),
{V25@V8,V25@Buf9}
end,
{TmpValx24,_} = 'dec_AdmissionConfirm_serviceControl'(V25@V0),
{TmpValx24,V25@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes26}
end,

%% attribute number 25 with type BOOLEAN
{Term25,Bytes28} = case Extensions of
  <<_:18,1:1,_/bitstring>> ->
begin
V26@Pad3 = bit_size(Bytes27) band 7,
{V26@V0,V26@Buf1} = case Bytes27 of
<<_:V26@Pad3,0:1,V26@V5:7,V26@V7:V26@V5/binary-unit:8,V26@Buf8/bitstring>> ->
{V26@V7,V26@Buf8};
<<_:V26@Pad3,1:1,0:1,V26@V6:14,V26@V8:V26@V6/binary-unit:8,V26@Buf9/bitstring>> ->
{V26@V8,V26@Buf9};
<<_:V26@Pad3,1:1,1:1,V26@V6:6,V26@Buf7/bitstring>> ->
{V26@V8,V26@Buf9}  = decode_fragmented(V26@V6, V26@Buf7, 8),
{V26@V8,V26@Buf9}
end,
{TmpValx25,_} = begin
<<V27@V0:1,V27@Buf1/bitstring>> = V26@V0,
V27@Int2 = case V27@V0 of
0 -> false;
1 -> true
end,
{V27@Int2,V27@Buf1}
end,
{TmpValx25,V26@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes27}
end,

%% attribute number 26 with type FeatureSet
{Term26,Bytes29} = case Extensions of
  <<_:19,1:1,_/bitstring>> ->
begin
V28@Pad3 = bit_size(Bytes28) band 7,
{V28@V0,V28@Buf1} = case Bytes28 of
<<_:V28@Pad3,0:1,V28@V5:7,V28@V7:V28@V5/binary-unit:8,V28@Buf8/bitstring>> ->
{V28@V7,V28@Buf8};
<<_:V28@Pad3,1:1,0:1,V28@V6:14,V28@V8:V28@V6/binary-unit:8,V28@Buf9/bitstring>> ->
{V28@V8,V28@Buf9};
<<_:V28@Pad3,1:1,1:1,V28@V6:6,V28@Buf7/bitstring>> ->
{V28@V8,V28@Buf9}  = decode_fragmented(V28@V6, V28@Buf7, 8),
{V28@V8,V28@Buf9}
end,
{TmpValx26,_} = dec_FeatureSet(V28@V0),
{TmpValx26,V28@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes28}
end,

%% attribute number 27 with type SEQUENCE OF
{Term27,Bytes30} = case Extensions of
  <<_:20,1:1,_/bitstring>> ->
begin
V29@Pad3 = bit_size(Bytes29) band 7,
{V29@V0,V29@Buf1} = case Bytes29 of
<<_:V29@Pad3,0:1,V29@V5:7,V29@V7:V29@V5/binary-unit:8,V29@Buf8/bitstring>> ->
{V29@V7,V29@Buf8};
<<_:V29@Pad3,1:1,0:1,V29@V6:14,V29@V8:V29@V6/binary-unit:8,V29@Buf9/bitstring>> ->
{V29@V8,V29@Buf9};
<<_:V29@Pad3,1:1,1:1,V29@V6:6,V29@Buf7/bitstring>> ->
{V29@V8,V29@Buf9}  = decode_fragmented(V29@V6, V29@Buf7, 8),
{V29@V8,V29@Buf9}
end,
{TmpValx27,_} = 'dec_AdmissionConfirm_genericData'(V29@V0),
{TmpValx27,V29@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes29}
end,

%% attribute number 28 with type SEQUENCE OF
{Term28,Bytes31} = case Extensions of
  <<_:21,1:1,_/bitstring>> ->
begin
V30@Pad3 = bit_size(Bytes30) band 7,
{V30@V0,V30@Buf1} = case Bytes30 of
<<_:V30@Pad3,0:1,V30@V5:7,V30@V7:V30@V5/binary-unit:8,V30@Buf8/bitstring>> ->
{V30@V7,V30@Buf8};
<<_:V30@Pad3,1:1,0:1,V30@V6:14,V30@V8:V30@V6/binary-unit:8,V30@Buf9/bitstring>> ->
{V30@V8,V30@Buf9};
<<_:V30@Pad3,1:1,1:1,V30@V6:6,V30@Buf7/bitstring>> ->
{V30@V8,V30@Buf9}  = decode_fragmented(V30@V6, V30@Buf7, 8),
{V30@V8,V30@Buf9}
end,
{TmpValx28,_} = 'dec_AdmissionConfirm_modifiedSrcInfo'(V30@V0),
{TmpValx28,V30@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes30}
end,
Bytes32= skipextensions(Bytes31, 23, Extensions),
{{'AdmissionConfirm',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21,Term22,Term23,Term24,Term25,Term26,Term27,Term28},Bytes32}.

'enc_UUIEsRequested'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 11, 15),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<3:7,Enc1@bitmap:4>>
end,
[begin
Enc3@element = element(2, Val),
if Extensions =:= [] ->
if Enc3@element =:= false ->
<<0:1,0:1>>;
Enc3@element =:= true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= false ->
<<1:1,0:1>>;
Enc3@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(3, Val),
Enc7@element = element(4, Val),
if Enc5@element =:= false ->
if Enc7@element =:= false ->
<<0:1,0:1>>;
Enc7@element =:= true ->
<<0:1,1:1>>
end;
Enc5@element =:= true ->
if Enc7@element =:= false ->
<<1:1,0:1>>;
Enc7@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(5, Val),
Enc11@element = element(6, Val),
if Enc9@element =:= false ->
if Enc11@element =:= false ->
<<0:1,0:1>>;
Enc11@element =:= true ->
<<0:1,1:1>>
end;
Enc9@element =:= true ->
if Enc11@element =:= false ->
<<1:1,0:1>>;
Enc11@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@element = element(7, Val),
Enc15@element = element(8, Val),
if Enc13@element =:= false ->
if Enc15@element =:= false ->
<<0:1,0:1>>;
Enc15@element =:= true ->
<<0:1,1:1>>
end;
Enc13@element =:= true ->
if Enc15@element =:= false ->
<<1:1,0:1>>;
Enc15@element =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc17@element = element(9, Val),
Enc19@element = element(10, Val),
if Enc17@element =:= false ->
if Enc19@element =:= false ->
<<0:1,0:1>>;
Enc19@element =:= true ->
<<0:1,1:1>>
end;
Enc17@element =:= true ->
if Enc19@element =:= false ->
<<1:1,0:1>>;
Enc19@element =:= true ->
<<1:1,1:1>>
end
end
end,
Extensions,
begin
Enc21@element = element(11, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@output = if Enc21@element =:= false ->
<<0:1,0:7>>;
Enc21@element =:= true ->
<<1:1,0:7>>
end,
Enc23@bin = Enc23@output,
[align,
1|Enc23@bin]
end
end
end,
begin
Enc25@element = element(12, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc27@output = if Enc25@element =:= false ->
<<0:1,0:7>>;
Enc25@element =:= true ->
<<1:1,0:7>>
end,
Enc27@bin = Enc27@output,
[align,
1|Enc27@bin]
end
end
end,
begin
Enc29@element = element(13, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@output = if Enc29@element =:= false ->
<<0:1,0:7>>;
Enc29@element =:= true ->
<<1:1,0:7>>
end,
Enc31@bin = Enc31@output,
[align,
1|Enc31@bin]
end
end
end|begin
Enc33@element = element(14, Val),
if Enc33@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc35@output = if Enc33@element =:= false ->
<<0:1,0:7>>;
Enc33@element =:= true ->
<<1:1,0:7>>
end,
Enc35@bin = Enc35@output,
[align,
1|Enc35@bin]
end
end
end].


dec_UUIEsRequested(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes10} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes9,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V11@V0,V11@Buf1} = case Bytes10 of
<<0:1,V11@V3:6,V11@Buf4/bitstring>> ->
V11@Add5 = V11@V3 + 1,
{V11@Add5,V11@Buf4};
<<1:1,V11@Buf2/bitstring>> ->
V11@Pad6 = bit_size(V11@Buf2) band 7,
{V11@V3,V11@Buf4} = case V11@Buf2 of
<<_:V11@Pad6,0:1,V11@V8:7,V11@Buf9/bitstring>> when V11@V8 =/= 0 ->
{V11@V8,V11@Buf9};
<<_:V11@Pad6,1:1,0:1,V11@V9:14,V11@Buf10/bitstring>> when V11@V9 =/= 0 ->
{V11@V9,V11@Buf10}
end,
{V11@V3,V11@Buf4}
end,
<<V11@V11:V11@V0/bitstring-unit:1,V11@Buf12/bitstring>> = V11@Buf1,
{V11@V11,V11@Buf12}
end,

%% attribute number 10 with type BOOLEAN
{Term10,Bytes12} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes11) band 7,
{V12@V0,V12@Buf1} = case Bytes11 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx10,_} = begin
<<V13@V0:1,V13@Buf1/bitstring>> = V12@V0,
V13@Int2 = case V13@V0 of
0 -> false;
1 -> true
end,
{V13@Int2,V13@Buf1}
end,
{TmpValx10,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 11 with type BOOLEAN
{Term11,Bytes13} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes12) band 7,
{V14@V0,V14@Buf1} = case Bytes12 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx11,_} = begin
<<V15@V0:1,V15@Buf1/bitstring>> = V14@V0,
V15@Int2 = case V15@V0 of
0 -> false;
1 -> true
end,
{V15@Int2,V15@Buf1}
end,
{TmpValx11,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 12 with type BOOLEAN
{Term12,Bytes14} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes13) band 7,
{V16@V0,V16@Buf1} = case Bytes13 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx12,_} = begin
<<V17@V0:1,V17@Buf1/bitstring>> = V16@V0,
V17@Int2 = case V17@V0 of
0 -> false;
1 -> true
end,
{V17@Int2,V17@Buf1}
end,
{TmpValx12,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 13 with type BOOLEAN
{Term13,Bytes15} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V18@Pad3 = bit_size(Bytes14) band 7,
{V18@V0,V18@Buf1} = case Bytes14 of
<<_:V18@Pad3,0:1,V18@V5:7,V18@V7:V18@V5/binary-unit:8,V18@Buf8/bitstring>> ->
{V18@V7,V18@Buf8};
<<_:V18@Pad3,1:1,0:1,V18@V6:14,V18@V8:V18@V6/binary-unit:8,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<_:V18@Pad3,1:1,1:1,V18@V6:6,V18@Buf7/bitstring>> ->
{V18@V8,V18@Buf9}  = decode_fragmented(V18@V6, V18@Buf7, 8),
{V18@V8,V18@Buf9}
end,
{TmpValx13,_} = begin
<<V19@V0:1,V19@Buf1/bitstring>> = V18@V0,
V19@Int2 = case V19@V0 of
0 -> false;
1 -> true
end,
{V19@Int2,V19@Buf1}
end,
{TmpValx13,V18@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,
Bytes16= skipextensions(Bytes15, 5, Extensions),
{{'UUIEsRequested',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13},Bytes16}.

'enc_AdmissionReject'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 5, 13),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
[<<7:7,Enc2@bitmap:8>>]
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
enc_AdmissionRejectReason(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc7@element)
end
end,
Extensions,
begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_AltGKInfo(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end,
begin
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@output = enc_AdmissionReject_tokens(Enc12@element),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[align|encode_fragmented(Enc13@bin, 8)]
end
end
end
end,
begin
Enc15@element = element(7, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = enc_AdmissionReject_cryptoTokens(Enc15@element),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[align|encode_fragmented(Enc16@bin, 8)]
end
end
end
end,
begin
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@output = enc_AdmissionReject_callSignalAddress(Enc18@element),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[align|encode_fragmented(Enc19@bin, 8)]
end
end
end
end,
begin
Enc21@element = element(9, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@output = enc_ICV(Enc21@element),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[align|encode_fragmented(Enc22@bin, 8)]
end
end
end
end,
begin
Enc24@element = element(10, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc25@output = enc_AdmissionReject_serviceControl(Enc24@element),
Enc25@bin = complete(Enc25@output),
Enc25@len = byte_size(Enc25@bin),
if Enc25@len < 128 ->
[align,
Enc25@len|Enc25@bin];
Enc25@len < 16384 ->
[align,
<<2:2,Enc25@len:14>>|Enc25@bin];
true ->
[align|encode_fragmented(Enc25@bin, 8)]
end
end
end
end,
begin
Enc27@element = element(11, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc28@output = enc_FeatureSet(Enc27@element),
Enc28@bin = complete(Enc28@output),
Enc28@len = byte_size(Enc28@bin),
if Enc28@len < 128 ->
[align,
Enc28@len|Enc28@bin];
Enc28@len < 16384 ->
[align,
<<2:2,Enc28@len:14>>|Enc28@bin];
true ->
[align|encode_fragmented(Enc28@bin, 8)]
end
end
end
end|begin
Enc30@element = element(12, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@output = enc_AdmissionReject_genericData(Enc30@element),
Enc31@bin = complete(Enc31@output),
Enc31@len = byte_size(Enc31@bin),
if Enc31@len < 128 ->
[align,
Enc31@len|Enc31@bin];
Enc31@len < 16384 ->
[align,
<<2:2,Enc31@len:14>>|Enc31@bin];
true ->
[align|encode_fragmented(Enc31@bin, 8)]
end
end
end
end].
'enc_AdmissionReject_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_AdmissionReject_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components200(V1@V0, V1@Buf1, []).

'enc_AdmissionReject_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_AdmissionReject_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components201(V1@V0, V1@Buf1, []).

'enc_AdmissionReject_callSignalAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_TransportAddress(Comp) || Comp <- Val]].


dec_AdmissionReject_callSignalAddress(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components202(V1@V0, V1@Buf1, []).

'enc_AdmissionReject_serviceControl'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ServiceControlSession(Comp) || Comp <- Val]].


dec_AdmissionReject_serviceControl(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components203(V1@V0, V1@Buf1, []).

'enc_AdmissionReject_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_AdmissionReject_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components204(V1@V0, V1@Buf1, []).



dec_AdmissionReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type AdmissionRejectReason
{Term2,Bytes4} = dec_AdmissionRejectReason(Bytes3),

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 4 with type AltGKInfo
{Term4,Bytes7} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes6) band 7,
{V5@V0,V5@Buf1} = case Bytes6 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx4,_} = dec_AltGKInfo(V5@V0),
{TmpValx4,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes8} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes7) band 7,
{V6@V0,V6@Buf1} = case Bytes7 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx5,_} = 'dec_AdmissionReject_tokens'(V6@V0),
{TmpValx5,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = 'dec_AdmissionReject_cryptoTokens'(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes10} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = 'dec_AdmissionReject_callSignalAddress'(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type ICV
{Term8,Bytes11} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = dec_ICV(V9@V0),
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes12} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes11) band 7,
{V10@V0,V10@Buf1} = case Bytes11 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx9,_} = 'dec_AdmissionReject_serviceControl'(V10@V0),
{TmpValx9,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type FeatureSet
{Term10,Bytes13} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes12) band 7,
{V11@V0,V11@Buf1} = case Bytes12 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx10,_} = dec_FeatureSet(V11@V0),
{TmpValx10,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes14} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes13) band 7,
{V12@V0,V12@Buf1} = case Bytes13 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx11,_} = 'dec_AdmissionReject_genericData'(V12@V0),
{TmpValx11,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,
Bytes15= skipextensions(Bytes14, 9, Extensions),
{{'AdmissionReject',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},Bytes15}.

'enc_AdmissionRejectReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= calledPartyNotRegistered ->
<<0:1,0:3>>;
ChoiceTag =:= invalidPermission ->
<<0:1,1:3>>;
ChoiceTag =:= requestDenied ->
<<0:1,2:3>>;
ChoiceTag =:= undefinedReason ->
<<0:1,3:3>>;
ChoiceTag =:= callerNotRegistered ->
<<0:1,4:3>>;
ChoiceTag =:= routeCallToGatekeeper ->
<<0:1,5:3>>;
ChoiceTag =:= invalidEndpointIdentifier ->
<<0:1,6:3>>;
ChoiceTag =:= resourceUnavailable ->
<<0:1,7:3>>;
ChoiceTag =:= securityDenial ->
begin
Enc9@output = [],
Enc9@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc9@bin]
end;
ChoiceTag =:= qosControlNotSupported ->
begin
Enc10@output = [],
Enc10@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc10@bin]
end;
ChoiceTag =:= incompleteAddress ->
begin
Enc11@output = [],
Enc11@bin = <<0:8>>,
[<<1:1,2:7>>,
align,
1|Enc11@bin]
end;
ChoiceTag =:= aliasesInconsistent ->
begin
Enc12@output = [],
Enc12@bin = <<0:8>>,
[<<1:1,3:7>>,
align,
1|Enc12@bin]
end;
ChoiceTag =:= routeCallToSCN ->
begin
Enc13@output = enc_AdmissionRejectReason_routeCallToSCN(ChoiceVal),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[<<1:1,4:7>>,
align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[<<1:1,4:7>>,
align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[<<1:1,4:7>>,
align|encode_fragmented(Enc13@bin, 8)]
end
end;
ChoiceTag =:= exceedsCallCapacity ->
begin
Enc14@output = [],
Enc14@bin = <<0:8>>,
[<<1:1,5:7>>,
align,
1|Enc14@bin]
end;
ChoiceTag =:= collectDestination ->
begin
Enc15@output = [],
Enc15@bin = <<0:8>>,
[<<1:1,6:7>>,
align,
1|Enc15@bin]
end;
ChoiceTag =:= collectPIN ->
begin
Enc16@output = [],
Enc16@bin = <<0:8>>,
[<<1:1,7:7>>,
align,
1|Enc16@bin]
end;
ChoiceTag =:= genericDataReason ->
begin
Enc17@output = [],
Enc17@bin = <<0:8>>,
[<<1:1,8:7>>,
align,
1|Enc17@bin]
end;
ChoiceTag =:= neededFeatureNotSupported ->
begin
Enc18@output = [],
Enc18@bin = <<0:8>>,
[<<1:1,9:7>>,
align,
1|Enc18@bin]
end;
ChoiceTag =:= securityErrors ->
begin
Enc19@output = enc_SecurityErrors2(ChoiceVal),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[<<1:1,10:7>>,
align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[<<1:1,10:7>>,
align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[<<1:1,10:7>>,
align|encode_fragmented(Enc19@bin, 8)]
end
end;
ChoiceTag =:= securityDHmismatch ->
begin
Enc20@output = [],
Enc20@bin = <<0:8>>,
[<<1:1,11:7>>,
align,
1|Enc20@bin]
end;
ChoiceTag =:= noRouteToDestination ->
begin
Enc21@output = [],
Enc21@bin = <<0:8>>,
[<<1:1,12:7>>,
align,
1|Enc21@bin]
end;
ChoiceTag =:= unallocatedNumber ->
begin
Enc22@output = [],
Enc22@bin = <<0:8>>,
[<<1:1,13:7>>,
align,
1|Enc22@bin]
end
end.
'enc_AdmissionRejectReason_routeCallToSCN'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_PartyNumber(Comp) || Comp <- Val]].


dec_AdmissionRejectReason_routeCallToSCN(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components205(V1@V0, V1@Buf1, []).



dec_AdmissionRejectReason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{calledPartyNotRegistered,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invalidPermission,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{requestDenied,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefinedReason,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{callerNotRegistered,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{routeCallToGatekeeper,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invalidEndpointIdentifier,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{resourceUnavailable,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{securityDenial,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{qosControlNotSupported,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{incompleteAddress,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{aliasesInconsistent,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_AdmissionRejectReason_routeCallToSCN'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{routeCallToSCN,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{exceedsCallCapacity,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{collectDestination,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{collectPIN,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{genericDataReason,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{neededFeatureNotSupported,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_SecurityErrors2(V2@V0),
{TmpVal,V2@Buf1}
end,
{{securityErrors,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{securityDHmismatch,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{noRouteToDestination,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{unallocatedNumber,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_BandwidthRequest'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 9, 20),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<10:7,Enc3@bitmap:11>>
end,
[begin
Enc1@element = element(6, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(8, Val),
if Enc2@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc5@element = element(2, Val),
Enc5@element@sub = Enc5@element - 1,
if 0 =< Enc5@element@sub, Enc5@element@sub < 65535 ->
<<Enc5@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(3, Val),
Enc8@len = length(Enc7@element),
Enc8@bin = encode_chars_16bit(Enc7@element),
Enc8@len@sub = Enc8@len - 1,
if Enc8@len@sub bsr 7 =:= 0 ->
[<<Enc8@len@sub:7,0:1>>|Enc8@bin]
end
end,
begin
Enc9@element = element(4, Val),
Enc10@len = byte_size(Enc9@element),
if Enc10@len =:= 16 ->
Enc9@element
end
end,
begin
Enc11@element = element(5, Val),
if Enc11@element bsr 16 =:= 0 ->
<<Enc11@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc11@element}}})
end
end,
begin
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_CallType(Enc13@element)
end
end,
begin
Enc15@element = element(7, Val),
if Enc15@element bsr 32 =:= 0 ->
begin
Enc15@element@bin = binary:encode_unsigned(Enc15@element),
Enc15@element@bin_size0 = byte_size(Enc15@element@bin),
Enc15@element@bin_size = Enc15@element@bin_size0 - 1,
[<<Enc15@element@bin_size:2>>,
align|Enc15@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc15@element}}})
end
end,
begin
Enc17@element = element(8, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc17@element)
end
end,
Extensions,
begin
Enc19@element = element(9, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@output = enc_CallIdentifier(Enc19@element),
Enc20@bin = complete(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[align,
Enc20@len|Enc20@bin];
Enc20@len < 16384 ->
[align,
<<2:2,Enc20@len:14>>|Enc20@bin];
true ->
[align|encode_fragmented(Enc20@bin, 8)]
end
end
end
end,
begin
Enc22@element = element(10, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc24@output = begin
Enc23@len = length(Enc22@element),
Enc23@bin = encode_chars_16bit(Enc22@element),
Enc23@len@sub = Enc23@len - 1,
if Enc23@len@sub bsr 7 =:= 0 ->
[<<Enc23@len@sub:7,0:1>>|Enc23@bin]
end
end,
Enc24@bin = iolist_to_binary(Enc24@output),
Enc24@len = byte_size(Enc24@bin),
if Enc24@len < 128 ->
[align,
Enc24@len|Enc24@bin];
true ->
[align,
<<2:2,Enc24@len:14>>|Enc24@bin]
end
end
end
end,
begin
Enc26@element = element(11, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc27@output = enc_BandwidthRequest_tokens(Enc26@element),
Enc27@bin = complete(Enc27@output),
Enc27@len = byte_size(Enc27@bin),
if Enc27@len < 128 ->
[align,
Enc27@len|Enc27@bin];
Enc27@len < 16384 ->
[align,
<<2:2,Enc27@len:14>>|Enc27@bin];
true ->
[align|encode_fragmented(Enc27@bin, 8)]
end
end
end
end,
begin
Enc29@element = element(12, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc30@output = enc_BandwidthRequest_cryptoTokens(Enc29@element),
Enc30@bin = complete(Enc30@output),
Enc30@len = byte_size(Enc30@bin),
if Enc30@len < 128 ->
[align,
Enc30@len|Enc30@bin];
Enc30@len < 16384 ->
[align,
<<2:2,Enc30@len:14>>|Enc30@bin];
true ->
[align|encode_fragmented(Enc30@bin, 8)]
end
end
end
end,
begin
Enc32@element = element(13, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc33@output = enc_ICV(Enc32@element),
Enc33@bin = complete(Enc33@output),
Enc33@len = byte_size(Enc33@bin),
if Enc33@len < 128 ->
[align,
Enc33@len|Enc33@bin];
Enc33@len < 16384 ->
[align,
<<2:2,Enc33@len:14>>|Enc33@bin];
true ->
[align|encode_fragmented(Enc33@bin, 8)]
end
end
end
end,
begin
Enc35@element = element(14, Val),
if Enc35@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc37@output = if Enc35@element =:= false ->
<<0:1,0:7>>;
Enc35@element =:= true ->
<<1:1,0:7>>
end,
Enc37@bin = Enc37@output,
[align,
1|Enc37@bin]
end
end
end,
begin
Enc39@element = element(15, Val),
if Enc39@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc40@output = enc_CallLinkage(Enc39@element),
Enc40@bin = complete(Enc40@output),
Enc40@len = byte_size(Enc40@bin),
if Enc40@len < 128 ->
[align,
Enc40@len|Enc40@bin];
Enc40@len < 16384 ->
[align,
<<2:2,Enc40@len:14>>|Enc40@bin];
true ->
[align|encode_fragmented(Enc40@bin, 8)]
end
end
end
end,
begin
Enc42@element = element(16, Val),
if Enc42@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc43@output = enc_CallCapacity(Enc42@element),
Enc43@bin = complete(Enc43@output),
Enc43@len = byte_size(Enc43@bin),
if Enc43@len < 128 ->
[align,
Enc43@len|Enc43@bin];
Enc43@len < 16384 ->
[align,
<<2:2,Enc43@len:14>>|Enc43@bin];
true ->
[align|encode_fragmented(Enc43@bin, 8)]
end
end
end
end,
begin
Enc45@element = element(17, Val),
if Enc45@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc46@output = enc_RasUsageInformation(Enc45@element),
Enc46@bin = complete(Enc46@output),
Enc46@len = byte_size(Enc46@bin),
if Enc46@len < 128 ->
[align,
Enc46@len|Enc46@bin];
Enc46@len < 16384 ->
[align,
<<2:2,Enc46@len:14>>|Enc46@bin];
true ->
[align|encode_fragmented(Enc46@bin, 8)]
end
end
end
end,
begin
Enc48@element = element(18, Val),
if Enc48@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc49@output = enc_BandwidthRequest_bandwidthDetails(Enc48@element),
Enc49@bin = complete(Enc49@output),
Enc49@len = byte_size(Enc49@bin),
if Enc49@len < 128 ->
[align,
Enc49@len|Enc49@bin];
Enc49@len < 16384 ->
[align,
<<2:2,Enc49@len:14>>|Enc49@bin];
true ->
[align|encode_fragmented(Enc49@bin, 8)]
end
end
end
end|begin
Enc51@element = element(19, Val),
if Enc51@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc52@output = enc_BandwidthRequest_genericData(Enc51@element),
Enc52@bin = complete(Enc52@output),
Enc52@len = byte_size(Enc52@bin),
if Enc52@len < 128 ->
[align,
Enc52@len|Enc52@bin];
Enc52@len < 16384 ->
[align,
<<2:2,Enc52@len:14>>|Enc52@bin];
true ->
[align|encode_fragmented(Enc52@bin, 8)]
end
end
end
end].
'enc_BandwidthRequest_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_BandwidthRequest_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components206(V1@V0, V1@Buf1, []).

'enc_BandwidthRequest_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_BandwidthRequest_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components207(V1@V0, V1@Buf1, []).

'enc_BandwidthRequest_bandwidthDetails'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_BandwidthDetails(Comp) || Comp <- Val]].


dec_BandwidthRequest_bandwidthDetails(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components208(V1@V0, V1@Buf1, []).

'enc_BandwidthRequest_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_BandwidthRequest_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components209(V1@V0, V1@Buf1, []).



dec_BandwidthRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type BMPString
{Term2,Bytes4} = begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:1,V4@V3:V4@Add2/binary-unit:16,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V6,V4@Buf7}  = {decode_chars_16bit(V4@V3),V4@Buf4},
{V4@V6,V4@Buf7}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
<<V5@V0:16/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv2 = binary:copy(V5@V0),
{V5@Conv2,V5@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = begin
<<V6@V0:2/unsigned-unit:8,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end,

%% attribute number 5 with type CallType
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
dec_CallType(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = begin
<<V7@V0:2/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes7,
V7@Add2 = V7@V0 + 1,
V7@Pad5 = bit_size(V7@Buf1) band 7,
<<_:V7@Pad5,V7@V3:V7@Add2/unsigned-unit:8,V7@Buf4/bitstring>> = V7@Buf1,
{V7@V3,V7@Buf4}
end,

%% attribute number 7 with type NonStandardParameter
{Term7,Bytes9} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V8@V0,V8@Buf1} = case Bytes9 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
V8@Pad6 = bit_size(V8@Buf2) band 7,
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<_:V8@Pad6,0:1,V8@V8:7,V8@Buf9/bitstring>> when V8@V8 =/= 0 ->
{V8@V8,V8@Buf9};
<<_:V8@Pad6,1:1,0:1,V8@V9:14,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V11:V8@V0/bitstring-unit:1,V8@Buf12/bitstring>> = V8@Buf1,
{V8@V11,V8@Buf12}
end,

%% attribute number 8 with type CallIdentifier
{Term8,Bytes11} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = dec_CallIdentifier(V9@V0),
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type BMPString
{Term9,Bytes12} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes11) band 7,
{V10@V0,V10@Buf1} = case Bytes11 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx9,_} = begin
<<V11@V0:7/unsigned-unit:1,V11@Buf1/bitstring>> = V10@V0,
V11@Add2 = V11@V0 + 1,
V11@Pad5 = bit_size(V11@Buf1) band 7,
<<_:V11@Pad5,V11@V3:V11@Add2/binary-unit:16,V11@Buf4/bitstring>> = V11@Buf1,
{V11@V7,V11@Buf8}  = {decode_chars_16bit(V11@V3),V11@Buf4},
{V11@V7,V11@Buf8}
end,
{TmpValx9,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes13} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes12) band 7,
{V12@V0,V12@Buf1} = case Bytes12 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx10,_} = 'dec_BandwidthRequest_tokens'(V12@V0),
{TmpValx10,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes14} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes13) band 7,
{V13@V0,V13@Buf1} = case Bytes13 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx11,_} = 'dec_BandwidthRequest_cryptoTokens'(V13@V0),
{TmpValx11,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type ICV
{Term12,Bytes15} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes14) band 7,
{V14@V0,V14@Buf1} = case Bytes14 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx12,_} = dec_ICV(V14@V0),
{TmpValx12,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type BOOLEAN
{Term13,Bytes16} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V15@Pad3 = bit_size(Bytes15) band 7,
{V15@V0,V15@Buf1} = case Bytes15 of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
{TmpValx13,_} = begin
<<V16@V0:1,V16@Buf1/bitstring>> = V15@V0,
V16@Int2 = case V16@V0 of
0 -> false;
1 -> true
end,
{V16@Int2,V16@Buf1}
end,
{TmpValx13,V15@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type CallLinkage
{Term14,Bytes17} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V17@Pad3 = bit_size(Bytes16) band 7,
{V17@V0,V17@Buf1} = case Bytes16 of
<<_:V17@Pad3,0:1,V17@V5:7,V17@V7:V17@V5/binary-unit:8,V17@Buf8/bitstring>> ->
{V17@V7,V17@Buf8};
<<_:V17@Pad3,1:1,0:1,V17@V6:14,V17@V8:V17@V6/binary-unit:8,V17@Buf9/bitstring>> ->
{V17@V8,V17@Buf9};
<<_:V17@Pad3,1:1,1:1,V17@V6:6,V17@Buf7/bitstring>> ->
{V17@V8,V17@Buf9}  = decode_fragmented(V17@V6, V17@Buf7, 8),
{V17@V8,V17@Buf9}
end,
{TmpValx14,_} = dec_CallLinkage(V17@V0),
{TmpValx14,V17@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type CallCapacity
{Term15,Bytes18} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V18@Pad3 = bit_size(Bytes17) band 7,
{V18@V0,V18@Buf1} = case Bytes17 of
<<_:V18@Pad3,0:1,V18@V5:7,V18@V7:V18@V5/binary-unit:8,V18@Buf8/bitstring>> ->
{V18@V7,V18@Buf8};
<<_:V18@Pad3,1:1,0:1,V18@V6:14,V18@V8:V18@V6/binary-unit:8,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<_:V18@Pad3,1:1,1:1,V18@V6:6,V18@Buf7/bitstring>> ->
{V18@V8,V18@Buf9}  = decode_fragmented(V18@V6, V18@Buf7, 8),
{V18@V8,V18@Buf9}
end,
{TmpValx15,_} = dec_CallCapacity(V18@V0),
{TmpValx15,V18@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type RasUsageInformation
{Term16,Bytes19} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V19@Pad3 = bit_size(Bytes18) band 7,
{V19@V0,V19@Buf1} = case Bytes18 of
<<_:V19@Pad3,0:1,V19@V5:7,V19@V7:V19@V5/binary-unit:8,V19@Buf8/bitstring>> ->
{V19@V7,V19@Buf8};
<<_:V19@Pad3,1:1,0:1,V19@V6:14,V19@V8:V19@V6/binary-unit:8,V19@Buf9/bitstring>> ->
{V19@V8,V19@Buf9};
<<_:V19@Pad3,1:1,1:1,V19@V6:6,V19@Buf7/bitstring>> ->
{V19@V8,V19@Buf9}  = decode_fragmented(V19@V6, V19@Buf7, 8),
{V19@V8,V19@Buf9}
end,
{TmpValx16,_} = dec_RasUsageInformation(V19@V0),
{TmpValx16,V19@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type SEQUENCE OF
{Term17,Bytes20} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V20@Pad3 = bit_size(Bytes19) band 7,
{V20@V0,V20@Buf1} = case Bytes19 of
<<_:V20@Pad3,0:1,V20@V5:7,V20@V7:V20@V5/binary-unit:8,V20@Buf8/bitstring>> ->
{V20@V7,V20@Buf8};
<<_:V20@Pad3,1:1,0:1,V20@V6:14,V20@V8:V20@V6/binary-unit:8,V20@Buf9/bitstring>> ->
{V20@V8,V20@Buf9};
<<_:V20@Pad3,1:1,1:1,V20@V6:6,V20@Buf7/bitstring>> ->
{V20@V8,V20@Buf9}  = decode_fragmented(V20@V6, V20@Buf7, 8),
{V20@V8,V20@Buf9}
end,
{TmpValx17,_} = 'dec_BandwidthRequest_bandwidthDetails'(V20@V0),
{TmpValx17,V20@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type SEQUENCE OF
{Term18,Bytes21} = case Extensions of
  <<_:10,1:1,_/bitstring>> ->
begin
V21@Pad3 = bit_size(Bytes20) band 7,
{V21@V0,V21@Buf1} = case Bytes20 of
<<_:V21@Pad3,0:1,V21@V5:7,V21@V7:V21@V5/binary-unit:8,V21@Buf8/bitstring>> ->
{V21@V7,V21@Buf8};
<<_:V21@Pad3,1:1,0:1,V21@V6:14,V21@V8:V21@V6/binary-unit:8,V21@Buf9/bitstring>> ->
{V21@V8,V21@Buf9};
<<_:V21@Pad3,1:1,1:1,V21@V6:6,V21@Buf7/bitstring>> ->
{V21@V8,V21@Buf9}  = decode_fragmented(V21@V6, V21@Buf7, 8),
{V21@V8,V21@Buf9}
end,
{TmpValx18,_} = 'dec_BandwidthRequest_genericData'(V21@V0),
{TmpValx18,V21@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,
Bytes22= skipextensions(Bytes21, 12, Extensions),
{{'BandwidthRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18},Bytes22}.

'enc_BandwidthConfirm'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 5, 10),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<4:7,Enc2@bitmap:5>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element bsr 32 =:= 0 ->
begin
Enc6@element@bin = binary:encode_unsigned(Enc6@element),
Enc6@element@bin_size0 = byte_size(Enc6@element@bin),
Enc6@element@bin_size = Enc6@element@bin_size0 - 1,
[<<Enc6@element@bin_size:2,0:6>>|Enc6@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end,
begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc8@element)
end
end,
Extensions,
begin
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@output = enc_BandwidthConfirm_tokens(Enc10@element),
Enc11@bin = complete(Enc11@output),
Enc11@len = byte_size(Enc11@bin),
if Enc11@len < 128 ->
[align,
Enc11@len|Enc11@bin];
Enc11@len < 16384 ->
[align,
<<2:2,Enc11@len:14>>|Enc11@bin];
true ->
[align|encode_fragmented(Enc11@bin, 8)]
end
end
end
end,
begin
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@output = enc_BandwidthConfirm_cryptoTokens(Enc13@element),
Enc14@bin = complete(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[align|encode_fragmented(Enc14@bin, 8)]
end
end
end
end,
begin
Enc16@element = element(7, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@output = enc_ICV(Enc16@element),
Enc17@bin = complete(Enc17@output),
Enc17@len = byte_size(Enc17@bin),
if Enc17@len < 128 ->
[align,
Enc17@len|Enc17@bin];
Enc17@len < 16384 ->
[align,
<<2:2,Enc17@len:14>>|Enc17@bin];
true ->
[align|encode_fragmented(Enc17@bin, 8)]
end
end
end
end,
begin
Enc19@element = element(8, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@output = enc_CallCapacity(Enc19@element),
Enc20@bin = complete(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[align,
Enc20@len|Enc20@bin];
Enc20@len < 16384 ->
[align,
<<2:2,Enc20@len:14>>|Enc20@bin];
true ->
[align|encode_fragmented(Enc20@bin, 8)]
end
end
end
end|begin
Enc22@element = element(9, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@output = enc_BandwidthConfirm_genericData(Enc22@element),
Enc23@bin = complete(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[align,
Enc23@len|Enc23@bin];
Enc23@len < 16384 ->
[align,
<<2:2,Enc23@len:14>>|Enc23@bin];
true ->
[align|encode_fragmented(Enc23@bin, 8)]
end
end
end
end].
'enc_BandwidthConfirm_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_BandwidthConfirm_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components210(V1@V0, V1@Buf1, []).

'enc_BandwidthConfirm_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_BandwidthConfirm_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components211(V1@V0, V1@Buf1, []).

'enc_BandwidthConfirm_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_BandwidthConfirm_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components212(V1@V0, V1@Buf1, []).



dec_BandwidthConfirm(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:6,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes7} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes6) band 7,
{V6@V0,V6@Buf1} = case Bytes6 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx4,_} = 'dec_BandwidthConfirm_tokens'(V6@V0),
{TmpValx4,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes8} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes7) band 7,
{V7@V0,V7@Buf1} = case Bytes7 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx5,_} = 'dec_BandwidthConfirm_cryptoTokens'(V7@V0),
{TmpValx5,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type ICV
{Term6,Bytes9} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes8) band 7,
{V8@V0,V8@Buf1} = case Bytes8 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx6,_} = dec_ICV(V8@V0),
{TmpValx6,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type CallCapacity
{Term7,Bytes10} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes9) band 7,
{V9@V0,V9@Buf1} = case Bytes9 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx7,_} = dec_CallCapacity(V9@V0),
{TmpValx7,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes11} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes10) band 7,
{V10@V0,V10@Buf1} = case Bytes10 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx8,_} = 'dec_BandwidthConfirm_genericData'(V10@V0),
{TmpValx8,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,
Bytes12= skipextensions(Bytes11, 6, Extensions),
{{'BandwidthConfirm',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes12}.

'enc_BandwidthReject'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 6, 11),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<4:7,Enc2@bitmap:5>>
end,
[begin
Enc1@element = element(5, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
enc_BandRejectReason(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
if Enc7@element bsr 32 =:= 0 ->
begin
Enc7@element@bin = binary:encode_unsigned(Enc7@element),
Enc7@element@bin_size0 = byte_size(Enc7@element@bin),
Enc7@element@bin_size = Enc7@element@bin_size0 - 1,
[<<Enc7@element@bin_size:2>>,
align|Enc7@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc9@element)
end
end,
Extensions,
begin
Enc11@element = element(6, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@output = enc_AltGKInfo(Enc11@element),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[align|encode_fragmented(Enc12@bin, 8)]
end
end
end
end,
begin
Enc14@element = element(7, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@output = enc_BandwidthReject_tokens(Enc14@element),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[align|encode_fragmented(Enc15@bin, 8)]
end
end
end
end,
begin
Enc17@element = element(8, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc18@output = enc_BandwidthReject_cryptoTokens(Enc17@element),
Enc18@bin = complete(Enc18@output),
Enc18@len = byte_size(Enc18@bin),
if Enc18@len < 128 ->
[align,
Enc18@len|Enc18@bin];
Enc18@len < 16384 ->
[align,
<<2:2,Enc18@len:14>>|Enc18@bin];
true ->
[align|encode_fragmented(Enc18@bin, 8)]
end
end
end
end,
begin
Enc20@element = element(9, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc21@output = enc_ICV(Enc20@element),
Enc21@bin = complete(Enc21@output),
Enc21@len = byte_size(Enc21@bin),
if Enc21@len < 128 ->
[align,
Enc21@len|Enc21@bin];
Enc21@len < 16384 ->
[align,
<<2:2,Enc21@len:14>>|Enc21@bin];
true ->
[align|encode_fragmented(Enc21@bin, 8)]
end
end
end
end|begin
Enc23@element = element(10, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc24@output = enc_BandwidthReject_genericData(Enc23@element),
Enc24@bin = complete(Enc24@output),
Enc24@len = byte_size(Enc24@bin),
if Enc24@len < 128 ->
[align,
Enc24@len|Enc24@bin];
Enc24@len < 16384 ->
[align,
<<2:2,Enc24@len:14>>|Enc24@bin];
true ->
[align|encode_fragmented(Enc24@bin, 8)]
end
end
end
end].
'enc_BandwidthReject_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_BandwidthReject_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components213(V1@V0, V1@Buf1, []).

'enc_BandwidthReject_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_BandwidthReject_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components214(V1@V0, V1@Buf1, []).

'enc_BandwidthReject_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_BandwidthReject_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components215(V1@V0, V1@Buf1, []).



dec_BandwidthReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type BandRejectReason
{Term2,Bytes4} = dec_BandRejectReason(Bytes3),

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% attribute number 4 with type NonStandardParameter
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 5 with type AltGKInfo
{Term5,Bytes8} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes7) band 7,
{V6@V0,V6@Buf1} = case Bytes7 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx5,_} = dec_AltGKInfo(V6@V0),
{TmpValx5,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = 'dec_BandwidthReject_tokens'(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes10} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = 'dec_BandwidthReject_cryptoTokens'(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type ICV
{Term8,Bytes11} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = dec_ICV(V9@V0),
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes12} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes11) band 7,
{V10@V0,V10@Buf1} = case Bytes11 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx9,_} = 'dec_BandwidthReject_genericData'(V10@V0),
{TmpValx9,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,
Bytes13= skipextensions(Bytes12, 6, Extensions),
{{'BandwidthReject',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},Bytes13}.

'enc_BandRejectReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= notBound ->
<<0:1,0:3>>;
ChoiceTag =:= invalidConferenceID ->
<<0:1,1:3>>;
ChoiceTag =:= invalidPermission ->
<<0:1,2:3>>;
ChoiceTag =:= insufficientResources ->
<<0:1,3:3>>;
ChoiceTag =:= invalidRevision ->
<<0:1,4:3>>;
ChoiceTag =:= undefinedReason ->
<<0:1,5:3>>;
ChoiceTag =:= securityDenial ->
begin
Enc7@output = [],
Enc7@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc7@bin]
end;
ChoiceTag =:= securityError ->
begin
Enc8@output = enc_SecurityErrors2(ChoiceVal),
Enc8@bin = complete(Enc8@output),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[<<1:1,1:7>>,
align,
Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc8@bin, 8)]
end
end
end.


dec_BandRejectReason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{notBound,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invalidConferenceID,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invalidPermission,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{insufficientResources,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invalidRevision,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefinedReason,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{securityDenial,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_SecurityErrors2(V2@V0),
{TmpVal,V2@Buf1}
end,
{{securityError,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_LocationRequest'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 7, 23),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<15:7,Enc3@bitmap:16>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(5, Val),
if Enc2@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc5@element = element(2, Val),
Enc5@element@sub = Enc5@element - 1,
if 0 =< Enc5@element@sub, Enc5@element@sub < 65535 ->
<<Enc5@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@len = length(Enc7@element),
Enc8@bin = encode_chars_16bit(Enc7@element),
Enc8@len@sub = Enc8@len - 1,
if Enc8@len@sub bsr 7 =:= 0 ->
[<<Enc8@len@sub:7,0:1>>|Enc8@bin]
end
end
end
end,
begin
Enc10@element = element(4, Val),
enc_LocationRequest_destinationInfo(Enc10@element)
end,
begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc11@element)
end
end,
begin
Enc13@element = element(6, Val),
enc_TransportAddress(Enc13@element)
end,
Extensions,
begin
Enc14@element = element(7, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@output = enc_LocationRequest_sourceInfo(Enc14@element),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[align|encode_fragmented(Enc15@bin, 8)]
end
end
end
end,
begin
Enc17@element = element(8, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@output = if Enc17@element =:= false ->
<<0:1,0:7>>;
Enc17@element =:= true ->
<<1:1,0:7>>
end,
Enc19@bin = Enc19@output,
[align,
1|Enc19@bin]
end
end
end,
begin
Enc21@element = element(9, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@output = begin
Enc22@len = length(Enc21@element),
Enc22@bin = encode_chars_16bit(Enc21@element),
Enc22@len@sub = Enc22@len - 1,
if Enc22@len@sub bsr 7 =:= 0 ->
[<<Enc22@len@sub:7,0:1>>|Enc22@bin]
end
end,
Enc23@bin = iolist_to_binary(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[align,
Enc23@len|Enc23@bin];
true ->
[align,
<<2:2,Enc23@len:14>>|Enc23@bin]
end
end
end
end,
begin
Enc25@element = element(10, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@output = enc_LocationRequest_tokens(Enc25@element),
Enc26@bin = complete(Enc26@output),
Enc26@len = byte_size(Enc26@bin),
if Enc26@len < 128 ->
[align,
Enc26@len|Enc26@bin];
Enc26@len < 16384 ->
[align,
<<2:2,Enc26@len:14>>|Enc26@bin];
true ->
[align|encode_fragmented(Enc26@bin, 8)]
end
end
end
end,
begin
Enc28@element = element(11, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc29@output = enc_LocationRequest_cryptoTokens(Enc28@element),
Enc29@bin = complete(Enc29@output),
Enc29@len = byte_size(Enc29@bin),
if Enc29@len < 128 ->
[align,
Enc29@len|Enc29@bin];
Enc29@len < 16384 ->
[align,
<<2:2,Enc29@len:14>>|Enc29@bin];
true ->
[align|encode_fragmented(Enc29@bin, 8)]
end
end
end
end,
begin
Enc31@element = element(12, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc32@output = enc_ICV(Enc31@element),
Enc32@bin = complete(Enc32@output),
Enc32@len = byte_size(Enc32@bin),
if Enc32@len < 128 ->
[align,
Enc32@len|Enc32@bin];
Enc32@len < 16384 ->
[align,
<<2:2,Enc32@len:14>>|Enc32@bin];
true ->
[align|encode_fragmented(Enc32@bin, 8)]
end
end
end
end,
begin
Enc34@element = element(13, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc35@output = enc_LocationRequest_desiredProtocols(Enc34@element),
Enc35@bin = complete(Enc35@output),
Enc35@len = byte_size(Enc35@bin),
if Enc35@len < 128 ->
[align,
Enc35@len|Enc35@bin];
Enc35@len < 16384 ->
[align,
<<2:2,Enc35@len:14>>|Enc35@bin];
true ->
[align|encode_fragmented(Enc35@bin, 8)]
end
end
end
end,
begin
Enc37@element = element(14, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc38@output = enc_TunnelledProtocol(Enc37@element),
Enc38@bin = complete(Enc38@output),
Enc38@len = byte_size(Enc38@bin),
if Enc38@len < 128 ->
[align,
Enc38@len|Enc38@bin];
Enc38@len < 16384 ->
[align,
<<2:2,Enc38@len:14>>|Enc38@bin];
true ->
[align|encode_fragmented(Enc38@bin, 8)]
end
end
end
end,
begin
Enc40@element = element(15, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc41@output = enc_FeatureSet(Enc40@element),
Enc41@bin = complete(Enc41@output),
Enc41@len = byte_size(Enc41@bin),
if Enc41@len < 128 ->
[align,
Enc41@len|Enc41@bin];
Enc41@len < 16384 ->
[align,
<<2:2,Enc41@len:14>>|Enc41@bin];
true ->
[align|encode_fragmented(Enc41@bin, 8)]
end
end
end
end,
begin
Enc43@element = element(16, Val),
if Enc43@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc44@output = enc_LocationRequest_genericData(Enc43@element),
Enc44@bin = complete(Enc44@output),
Enc44@len = byte_size(Enc44@bin),
if Enc44@len < 128 ->
[align,
Enc44@len|Enc44@bin];
Enc44@len < 16384 ->
[align,
<<2:2,Enc44@len:14>>|Enc44@bin];
true ->
[align|encode_fragmented(Enc44@bin, 8)]
end
end
end
end,
begin
Enc46@element = element(17, Val),
if Enc46@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc48@output = begin
Enc46@element@sub = Enc46@element - 1,
if 0 =< Enc46@element@sub, Enc46@element@sub < 255 ->
[Enc46@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc46@element}}})
end
end,
Enc48@bin = iolist_to_binary(Enc48@output),
[align,
1|Enc48@bin]
end
end
end,
begin
Enc50@element = element(18, Val),
if Enc50@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc51@output = enc_CircuitInfo(Enc50@element),
Enc51@bin = complete(Enc51@output),
Enc51@len = byte_size(Enc51@bin),
if Enc51@len < 128 ->
[align,
Enc51@len|Enc51@bin];
Enc51@len < 16384 ->
[align,
<<2:2,Enc51@len:14>>|Enc51@bin];
true ->
[align|encode_fragmented(Enc51@bin, 8)]
end
end
end
end,
begin
Enc53@element = element(19, Val),
if Enc53@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc54@output = enc_CallIdentifier(Enc53@element),
Enc54@bin = complete(Enc54@output),
Enc54@len = byte_size(Enc54@bin),
if Enc54@len < 128 ->
[align,
Enc54@len|Enc54@bin];
Enc54@len < 16384 ->
[align,
<<2:2,Enc54@len:14>>|Enc54@bin];
true ->
[align|encode_fragmented(Enc54@bin, 8)]
end
end
end
end,
begin
Enc56@element = element(20, Val),
if Enc56@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc58@output = if Enc56@element bsr 32 =:= 0 ->
begin
Enc56@element@bin = binary:encode_unsigned(Enc56@element),
Enc56@element@bin_size0 = byte_size(Enc56@element@bin),
Enc56@element@bin_size = Enc56@element@bin_size0 - 1,
[<<Enc56@element@bin_size:2,0:6>>|Enc56@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc56@element}}})
end,
Enc58@bin = iolist_to_binary(Enc58@output),
Enc58@len = byte_size(Enc58@bin),
[align,
Enc58@len|Enc58@bin]
end
end
end,
begin
Enc60@element = element(21, Val),
if Enc60@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc61@output = enc_LocationRequest_sourceEndpointInfo(Enc60@element),
Enc61@bin = complete(Enc61@output),
Enc61@len = byte_size(Enc61@bin),
if Enc61@len < 128 ->
[align,
Enc61@len|Enc61@bin];
Enc61@len < 16384 ->
[align,
<<2:2,Enc61@len:14>>|Enc61@bin];
true ->
[align|encode_fragmented(Enc61@bin, 8)]
end
end
end
end|begin
Enc63@element = element(22, Val),
if Enc63@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc65@output = if Enc63@element =:= false ->
<<0:1,0:7>>;
Enc63@element =:= true ->
<<1:1,0:7>>
end,
Enc65@bin = Enc65@output,
[align,
1|Enc65@bin]
end
end
end].
'enc_LocationRequest_destinationInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_LocationRequest_destinationInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components216(V1@V0, V1@Buf1, []).

'enc_LocationRequest_sourceInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_LocationRequest_sourceInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components217(V1@V0, V1@Buf1, []).

'enc_LocationRequest_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_LocationRequest_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components218(V1@V0, V1@Buf1, []).

'enc_LocationRequest_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_LocationRequest_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components219(V1@V0, V1@Buf1, []).

'enc_LocationRequest_desiredProtocols'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedProtocols(Comp) || Comp <- Val]].


dec_LocationRequest_desiredProtocols(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components220(V1@V0, V1@Buf1, []).

'enc_LocationRequest_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_LocationRequest_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components221(V1@V0, V1@Buf1, []).

'enc_LocationRequest_sourceEndpointInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_LocationRequest_sourceEndpointInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components222(V1@V0, V1@Buf1, []).



dec_LocationRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type BMPString
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:16,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V7,V4@Buf8}  = {decode_chars_16bit(V4@V3),V4@Buf4},
{V4@V7,V4@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = 'dec_LocationRequest_destinationInfo'(Bytes4),

%% attribute number 4 with type NonStandardParameter
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type TransportAddress
{Term5,Bytes7} = dec_TransportAddress(Bytes6),

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes8) band 7,
{V6@V0,V6@Buf1} = case Bytes8 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx6,_} = 'dec_LocationRequest_sourceInfo'(V6@V0),
{TmpValx6,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes10} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes9) band 7,
{V7@V0,V7@Buf1} = case Bytes9 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx7,_} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = V7@V0,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,
{TmpValx7,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type BMPString
{Term8,Bytes11} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = begin
<<V10@V0:7/unsigned-unit:1,V10@Buf1/bitstring>> = V9@V0,
V10@Add2 = V10@V0 + 1,
V10@Pad5 = bit_size(V10@Buf1) band 7,
<<_:V10@Pad5,V10@V3:V10@Add2/binary-unit:16,V10@Buf4/bitstring>> = V10@Buf1,
{V10@V7,V10@Buf8}  = {decode_chars_16bit(V10@V3),V10@Buf4},
{V10@V7,V10@Buf8}
end,
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes12} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes11) band 7,
{V11@V0,V11@Buf1} = case Bytes11 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx9,_} = 'dec_LocationRequest_tokens'(V11@V0),
{TmpValx9,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes13} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes12) band 7,
{V12@V0,V12@Buf1} = case Bytes12 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx10,_} = 'dec_LocationRequest_cryptoTokens'(V12@V0),
{TmpValx10,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type ICV
{Term11,Bytes14} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes13) band 7,
{V13@V0,V13@Buf1} = case Bytes13 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx11,_} = dec_ICV(V13@V0),
{TmpValx11,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type SEQUENCE OF
{Term12,Bytes15} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes14) band 7,
{V14@V0,V14@Buf1} = case Bytes14 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx12,_} = 'dec_LocationRequest_desiredProtocols'(V14@V0),
{TmpValx12,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type TunnelledProtocol
{Term13,Bytes16} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V15@Pad3 = bit_size(Bytes15) band 7,
{V15@V0,V15@Buf1} = case Bytes15 of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
{TmpValx13,_} = dec_TunnelledProtocol(V15@V0),
{TmpValx13,V15@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type FeatureSet
{Term14,Bytes17} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes16) band 7,
{V16@V0,V16@Buf1} = case Bytes16 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx14,_} = dec_FeatureSet(V16@V0),
{TmpValx14,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type SEQUENCE OF
{Term15,Bytes18} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V17@Pad3 = bit_size(Bytes17) band 7,
{V17@V0,V17@Buf1} = case Bytes17 of
<<_:V17@Pad3,0:1,V17@V5:7,V17@V7:V17@V5/binary-unit:8,V17@Buf8/bitstring>> ->
{V17@V7,V17@Buf8};
<<_:V17@Pad3,1:1,0:1,V17@V6:14,V17@V8:V17@V6/binary-unit:8,V17@Buf9/bitstring>> ->
{V17@V8,V17@Buf9};
<<_:V17@Pad3,1:1,1:1,V17@V6:6,V17@Buf7/bitstring>> ->
{V17@V8,V17@Buf9}  = decode_fragmented(V17@V6, V17@Buf7, 8),
{V17@V8,V17@Buf9}
end,
{TmpValx15,_} = 'dec_LocationRequest_genericData'(V17@V0),
{TmpValx15,V17@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type INTEGER
{Term16,Bytes19} = case Extensions of
  <<_:10,1:1,_/bitstring>> ->
begin
V18@Pad3 = bit_size(Bytes18) band 7,
{V18@V0,V18@Buf1} = case Bytes18 of
<<_:V18@Pad3,0:1,V18@V5:7,V18@V7:V18@V5/binary-unit:8,V18@Buf8/bitstring>> ->
{V18@V7,V18@Buf8};
<<_:V18@Pad3,1:1,0:1,V18@V6:14,V18@V8:V18@V6/binary-unit:8,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<_:V18@Pad3,1:1,1:1,V18@V6:6,V18@Buf7/bitstring>> ->
{V18@V8,V18@Buf9}  = decode_fragmented(V18@V6, V18@Buf7, 8),
{V18@V8,V18@Buf9}
end,
{TmpValx16,_} = begin
<<V19@V0:8/unsigned-unit:1,V19@Buf1/bitstring>> = V18@V0,
V19@Add2 = V19@V0 + 1,
{V19@Add2,V19@Buf1}
end,
{TmpValx16,V18@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type CircuitInfo
{Term17,Bytes20} = case Extensions of
  <<_:11,1:1,_/bitstring>> ->
begin
V20@Pad3 = bit_size(Bytes19) band 7,
{V20@V0,V20@Buf1} = case Bytes19 of
<<_:V20@Pad3,0:1,V20@V5:7,V20@V7:V20@V5/binary-unit:8,V20@Buf8/bitstring>> ->
{V20@V7,V20@Buf8};
<<_:V20@Pad3,1:1,0:1,V20@V6:14,V20@V8:V20@V6/binary-unit:8,V20@Buf9/bitstring>> ->
{V20@V8,V20@Buf9};
<<_:V20@Pad3,1:1,1:1,V20@V6:6,V20@Buf7/bitstring>> ->
{V20@V8,V20@Buf9}  = decode_fragmented(V20@V6, V20@Buf7, 8),
{V20@V8,V20@Buf9}
end,
{TmpValx17,_} = dec_CircuitInfo(V20@V0),
{TmpValx17,V20@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type CallIdentifier
{Term18,Bytes21} = case Extensions of
  <<_:12,1:1,_/bitstring>> ->
begin
V21@Pad3 = bit_size(Bytes20) band 7,
{V21@V0,V21@Buf1} = case Bytes20 of
<<_:V21@Pad3,0:1,V21@V5:7,V21@V7:V21@V5/binary-unit:8,V21@Buf8/bitstring>> ->
{V21@V7,V21@Buf8};
<<_:V21@Pad3,1:1,0:1,V21@V6:14,V21@V8:V21@V6/binary-unit:8,V21@Buf9/bitstring>> ->
{V21@V8,V21@Buf9};
<<_:V21@Pad3,1:1,1:1,V21@V6:6,V21@Buf7/bitstring>> ->
{V21@V8,V21@Buf9}  = decode_fragmented(V21@V6, V21@Buf7, 8),
{V21@V8,V21@Buf9}
end,
{TmpValx18,_} = dec_CallIdentifier(V21@V0),
{TmpValx18,V21@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute number 19 with type INTEGER
{Term19,Bytes22} = case Extensions of
  <<_:13,1:1,_/bitstring>> ->
begin
V22@Pad3 = bit_size(Bytes21) band 7,
{V22@V0,V22@Buf1} = case Bytes21 of
<<_:V22@Pad3,0:1,V22@V5:7,V22@V7:V22@V5/binary-unit:8,V22@Buf8/bitstring>> ->
{V22@V7,V22@Buf8};
<<_:V22@Pad3,1:1,0:1,V22@V6:14,V22@V8:V22@V6/binary-unit:8,V22@Buf9/bitstring>> ->
{V22@V8,V22@Buf9};
<<_:V22@Pad3,1:1,1:1,V22@V6:6,V22@Buf7/bitstring>> ->
{V22@V8,V22@Buf9}  = decode_fragmented(V22@V6, V22@Buf7, 8),
{V22@V8,V22@Buf9}
end,
{TmpValx19,_} = begin
<<V23@V0:2/unsigned-unit:1,V23@Buf1/bitstring>> = V22@V0,
V23@Add2 = V23@V0 + 1,
V23@Pad5 = bit_size(V23@Buf1) band 7,
<<_:V23@Pad5,V23@V3:V23@Add2/unsigned-unit:8,V23@Buf4/bitstring>> = V23@Buf1,
{V23@V3,V23@Buf4}
end,
{TmpValx19,V22@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes21}
end,

%% attribute number 20 with type SEQUENCE OF
{Term20,Bytes23} = case Extensions of
  <<_:14,1:1,_/bitstring>> ->
begin
V24@Pad3 = bit_size(Bytes22) band 7,
{V24@V0,V24@Buf1} = case Bytes22 of
<<_:V24@Pad3,0:1,V24@V5:7,V24@V7:V24@V5/binary-unit:8,V24@Buf8/bitstring>> ->
{V24@V7,V24@Buf8};
<<_:V24@Pad3,1:1,0:1,V24@V6:14,V24@V8:V24@V6/binary-unit:8,V24@Buf9/bitstring>> ->
{V24@V8,V24@Buf9};
<<_:V24@Pad3,1:1,1:1,V24@V6:6,V24@Buf7/bitstring>> ->
{V24@V8,V24@Buf9}  = decode_fragmented(V24@V6, V24@Buf7, 8),
{V24@V8,V24@Buf9}
end,
{TmpValx20,_} = 'dec_LocationRequest_sourceEndpointInfo'(V24@V0),
{TmpValx20,V24@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes22}
end,

%% attribute number 21 with type BOOLEAN
{Term21,Bytes24} = case Extensions of
  <<_:15,1:1,_/bitstring>> ->
begin
V25@Pad3 = bit_size(Bytes23) band 7,
{V25@V0,V25@Buf1} = case Bytes23 of
<<_:V25@Pad3,0:1,V25@V5:7,V25@V7:V25@V5/binary-unit:8,V25@Buf8/bitstring>> ->
{V25@V7,V25@Buf8};
<<_:V25@Pad3,1:1,0:1,V25@V6:14,V25@V8:V25@V6/binary-unit:8,V25@Buf9/bitstring>> ->
{V25@V8,V25@Buf9};
<<_:V25@Pad3,1:1,1:1,V25@V6:6,V25@Buf7/bitstring>> ->
{V25@V8,V25@Buf9}  = decode_fragmented(V25@V6, V25@Buf7, 8),
{V25@V8,V25@Buf9}
end,
{TmpValx21,_} = begin
<<V26@V0:1,V26@Buf1/bitstring>> = V25@V0,
V26@Int2 = case V26@V0 of
0 -> false;
1 -> true
end,
{V26@Int2,V26@Buf1}
end,
{TmpValx21,V25@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes23}
end,
Bytes25= skipextensions(Bytes24, 17, Extensions),
{{'LocationRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21},Bytes25}.

'enc_LocationConfirm'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 6, 23),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<16:7,Enc2@bitmap:17>>
end,
[begin
Enc1@element = element(5, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
enc_TransportAddress(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
enc_TransportAddress(Enc7@element)
end,
begin
Enc8@element = element(5, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc8@element)
end
end,
Extensions,
begin
Enc10@element = element(6, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@output = enc_LocationConfirm_destinationInfo(Enc10@element),
Enc11@bin = complete(Enc11@output),
Enc11@len = byte_size(Enc11@bin),
if Enc11@len < 128 ->
[align,
Enc11@len|Enc11@bin];
Enc11@len < 16384 ->
[align,
<<2:2,Enc11@len:14>>|Enc11@bin];
true ->
[align|encode_fragmented(Enc11@bin, 8)]
end
end
end
end,
begin
Enc13@element = element(7, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@output = enc_LocationConfirm_destExtraCallInfo(Enc13@element),
Enc14@bin = complete(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[align|encode_fragmented(Enc14@bin, 8)]
end
end
end
end,
begin
Enc16@element = element(8, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@output = enc_EndpointType(Enc16@element),
Enc17@bin = complete(Enc17@output),
Enc17@len = byte_size(Enc17@bin),
if Enc17@len < 128 ->
[align,
Enc17@len|Enc17@bin];
Enc17@len < 16384 ->
[align,
<<2:2,Enc17@len:14>>|Enc17@bin];
true ->
[align|encode_fragmented(Enc17@bin, 8)]
end
end
end
end,
begin
Enc19@element = element(9, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@output = enc_LocationConfirm_remoteExtensionAddress(Enc19@element),
Enc20@bin = complete(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[align,
Enc20@len|Enc20@bin];
Enc20@len < 16384 ->
[align,
<<2:2,Enc20@len:14>>|Enc20@bin];
true ->
[align|encode_fragmented(Enc20@bin, 8)]
end
end
end
end,
begin
Enc22@element = element(10, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@output = enc_LocationConfirm_alternateEndpoints(Enc22@element),
Enc23@bin = complete(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[align,
Enc23@len|Enc23@bin];
Enc23@len < 16384 ->
[align,
<<2:2,Enc23@len:14>>|Enc23@bin];
true ->
[align|encode_fragmented(Enc23@bin, 8)]
end
end
end
end,
begin
Enc25@element = element(11, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@output = enc_LocationConfirm_tokens(Enc25@element),
Enc26@bin = complete(Enc26@output),
Enc26@len = byte_size(Enc26@bin),
if Enc26@len < 128 ->
[align,
Enc26@len|Enc26@bin];
Enc26@len < 16384 ->
[align,
<<2:2,Enc26@len:14>>|Enc26@bin];
true ->
[align|encode_fragmented(Enc26@bin, 8)]
end
end
end
end,
begin
Enc28@element = element(12, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc29@output = enc_LocationConfirm_cryptoTokens(Enc28@element),
Enc29@bin = complete(Enc29@output),
Enc29@len = byte_size(Enc29@bin),
if Enc29@len < 128 ->
[align,
Enc29@len|Enc29@bin];
Enc29@len < 16384 ->
[align,
<<2:2,Enc29@len:14>>|Enc29@bin];
true ->
[align|encode_fragmented(Enc29@bin, 8)]
end
end
end
end,
begin
Enc31@element = element(13, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc32@output = enc_ICV(Enc31@element),
Enc32@bin = complete(Enc32@output),
Enc32@len = byte_size(Enc32@bin),
if Enc32@len < 128 ->
[align,
Enc32@len|Enc32@bin];
Enc32@len < 16384 ->
[align,
<<2:2,Enc32@len:14>>|Enc32@bin];
true ->
[align|encode_fragmented(Enc32@bin, 8)]
end
end
end
end,
begin
Enc34@element = element(14, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc35@output = enc_AlternateTransportAddresses(Enc34@element),
Enc35@bin = complete(Enc35@output),
Enc35@len = byte_size(Enc35@bin),
if Enc35@len < 128 ->
[align,
Enc35@len|Enc35@bin];
Enc35@len < 16384 ->
[align,
<<2:2,Enc35@len:14>>|Enc35@bin];
true ->
[align|encode_fragmented(Enc35@bin, 8)]
end
end
end
end,
begin
Enc37@element = element(15, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc38@output = enc_LocationConfirm_supportedProtocols(Enc37@element),
Enc38@bin = complete(Enc38@output),
Enc38@len = byte_size(Enc38@bin),
if Enc38@len < 128 ->
[align,
Enc38@len|Enc38@bin];
Enc38@len < 16384 ->
[align,
<<2:2,Enc38@len:14>>|Enc38@bin];
true ->
[align|encode_fragmented(Enc38@bin, 8)]
end
end
end
end,
begin
Enc40@element = element(16, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc42@output = if Enc40@element =:= false ->
<<0:1,0:7>>;
Enc40@element =:= true ->
<<1:1,0:7>>
end,
Enc42@bin = Enc42@output,
[align,
1|Enc42@bin]
end
end
end,
begin
Enc44@element = element(17, Val),
if Enc44@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@output = enc_FeatureSet(Enc44@element),
Enc45@bin = complete(Enc45@output),
Enc45@len = byte_size(Enc45@bin),
if Enc45@len < 128 ->
[align,
Enc45@len|Enc45@bin];
Enc45@len < 16384 ->
[align,
<<2:2,Enc45@len:14>>|Enc45@bin];
true ->
[align|encode_fragmented(Enc45@bin, 8)]
end
end
end
end,
begin
Enc47@element = element(18, Val),
if Enc47@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc48@output = enc_LocationConfirm_genericData(Enc47@element),
Enc48@bin = complete(Enc48@output),
Enc48@len = byte_size(Enc48@bin),
if Enc48@len < 128 ->
[align,
Enc48@len|Enc48@bin];
Enc48@len < 16384 ->
[align,
<<2:2,Enc48@len:14>>|Enc48@bin];
true ->
[align|encode_fragmented(Enc48@bin, 8)]
end
end
end
end,
begin
Enc50@element = element(19, Val),
if Enc50@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc51@output = enc_CircuitInfo(Enc50@element),
Enc51@bin = complete(Enc51@output),
Enc51@len = byte_size(Enc51@bin),
if Enc51@len < 128 ->
[align,
Enc51@len|Enc51@bin];
Enc51@len < 16384 ->
[align,
<<2:2,Enc51@len:14>>|Enc51@bin];
true ->
[align|encode_fragmented(Enc51@bin, 8)]
end
end
end
end,
begin
Enc53@element = element(20, Val),
if Enc53@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc54@output = enc_LocationConfirm_serviceControl(Enc53@element),
Enc54@bin = complete(Enc54@output),
Enc54@len = byte_size(Enc54@bin),
if Enc54@len < 128 ->
[align,
Enc54@len|Enc54@bin];
Enc54@len < 16384 ->
[align,
<<2:2,Enc54@len:14>>|Enc54@bin];
true ->
[align|encode_fragmented(Enc54@bin, 8)]
end
end
end
end,
begin
Enc56@element = element(21, Val),
if Enc56@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc57@output = enc_LocationConfirm_modifiedSrcInfo(Enc56@element),
Enc57@bin = complete(Enc57@output),
Enc57@len = byte_size(Enc57@bin),
if Enc57@len < 128 ->
[align,
Enc57@len|Enc57@bin];
Enc57@len < 16384 ->
[align,
<<2:2,Enc57@len:14>>|Enc57@bin];
true ->
[align|encode_fragmented(Enc57@bin, 8)]
end
end
end
end|begin
Enc59@element = element(22, Val),
if Enc59@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc61@output = if Enc59@element bsr 32 =:= 0 ->
begin
Enc59@element@bin = binary:encode_unsigned(Enc59@element),
Enc59@element@bin_size0 = byte_size(Enc59@element@bin),
Enc59@element@bin_size = Enc59@element@bin_size0 - 1,
[<<Enc59@element@bin_size:2,0:6>>|Enc59@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc59@element}}})
end,
Enc61@bin = iolist_to_binary(Enc61@output),
Enc61@len = byte_size(Enc61@bin),
[align,
Enc61@len|Enc61@bin]
end
end
end].
'enc_LocationConfirm_destinationInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_LocationConfirm_destinationInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components223(V1@V0, V1@Buf1, []).

'enc_LocationConfirm_destExtraCallInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_LocationConfirm_destExtraCallInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components224(V1@V0, V1@Buf1, []).

'enc_LocationConfirm_remoteExtensionAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_LocationConfirm_remoteExtensionAddress(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components225(V1@V0, V1@Buf1, []).

'enc_LocationConfirm_alternateEndpoints'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_Endpoint(Comp) || Comp <- Val]].


dec_LocationConfirm_alternateEndpoints(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components226(V1@V0, V1@Buf1, []).

'enc_LocationConfirm_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_LocationConfirm_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components227(V1@V0, V1@Buf1, []).

'enc_LocationConfirm_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_LocationConfirm_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components228(V1@V0, V1@Buf1, []).

'enc_LocationConfirm_supportedProtocols'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedProtocols(Comp) || Comp <- Val]].


dec_LocationConfirm_supportedProtocols(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components229(V1@V0, V1@Buf1, []).

'enc_LocationConfirm_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_LocationConfirm_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components230(V1@V0, V1@Buf1, []).

'enc_LocationConfirm_serviceControl'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ServiceControlSession(Comp) || Comp <- Val]].


dec_LocationConfirm_serviceControl(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components231(V1@V0, V1@Buf1, []).

'enc_LocationConfirm_modifiedSrcInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_LocationConfirm_modifiedSrcInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components232(V1@V0, V1@Buf1, []).



dec_LocationConfirm(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type TransportAddress
{Term2,Bytes4} = dec_TransportAddress(Bytes3),

%% attribute number 3 with type TransportAddress
{Term3,Bytes5} = dec_TransportAddress(Bytes4),

%% attribute number 4 with type NonStandardParameter
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes8} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes7) band 7,
{V5@V0,V5@Buf1} = case Bytes7 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx5,_} = 'dec_LocationConfirm_destinationInfo'(V5@V0),
{TmpValx5,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes8) band 7,
{V6@V0,V6@Buf1} = case Bytes8 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx6,_} = 'dec_LocationConfirm_destExtraCallInfo'(V6@V0),
{TmpValx6,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type EndpointType
{Term7,Bytes10} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes9) band 7,
{V7@V0,V7@Buf1} = case Bytes9 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx7,_} = dec_EndpointType(V7@V0),
{TmpValx7,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes11} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes10) band 7,
{V8@V0,V8@Buf1} = case Bytes10 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx8,_} = 'dec_LocationConfirm_remoteExtensionAddress'(V8@V0),
{TmpValx8,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes12} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes11) band 7,
{V9@V0,V9@Buf1} = case Bytes11 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx9,_} = 'dec_LocationConfirm_alternateEndpoints'(V9@V0),
{TmpValx9,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes13} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes12) band 7,
{V10@V0,V10@Buf1} = case Bytes12 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx10,_} = 'dec_LocationConfirm_tokens'(V10@V0),
{TmpValx10,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes14} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes13) band 7,
{V11@V0,V11@Buf1} = case Bytes13 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx11,_} = 'dec_LocationConfirm_cryptoTokens'(V11@V0),
{TmpValx11,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type ICV
{Term12,Bytes15} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes14) band 7,
{V12@V0,V12@Buf1} = case Bytes14 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx12,_} = dec_ICV(V12@V0),
{TmpValx12,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type AlternateTransportAddresses
{Term13,Bytes16} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes15) band 7,
{V13@V0,V13@Buf1} = case Bytes15 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx13,_} = dec_AlternateTransportAddresses(V13@V0),
{TmpValx13,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type SEQUENCE OF
{Term14,Bytes17} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes16) band 7,
{V14@V0,V14@Buf1} = case Bytes16 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx14,_} = 'dec_LocationConfirm_supportedProtocols'(V14@V0),
{TmpValx14,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type BOOLEAN
{Term15,Bytes18} = case Extensions of
  <<_:10,1:1,_/bitstring>> ->
begin
V15@Pad3 = bit_size(Bytes17) band 7,
{V15@V0,V15@Buf1} = case Bytes17 of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
{TmpValx15,_} = begin
<<V16@V0:1,V16@Buf1/bitstring>> = V15@V0,
V16@Int2 = case V16@V0 of
0 -> false;
1 -> true
end,
{V16@Int2,V16@Buf1}
end,
{TmpValx15,V15@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type FeatureSet
{Term16,Bytes19} = case Extensions of
  <<_:11,1:1,_/bitstring>> ->
begin
V17@Pad3 = bit_size(Bytes18) band 7,
{V17@V0,V17@Buf1} = case Bytes18 of
<<_:V17@Pad3,0:1,V17@V5:7,V17@V7:V17@V5/binary-unit:8,V17@Buf8/bitstring>> ->
{V17@V7,V17@Buf8};
<<_:V17@Pad3,1:1,0:1,V17@V6:14,V17@V8:V17@V6/binary-unit:8,V17@Buf9/bitstring>> ->
{V17@V8,V17@Buf9};
<<_:V17@Pad3,1:1,1:1,V17@V6:6,V17@Buf7/bitstring>> ->
{V17@V8,V17@Buf9}  = decode_fragmented(V17@V6, V17@Buf7, 8),
{V17@V8,V17@Buf9}
end,
{TmpValx16,_} = dec_FeatureSet(V17@V0),
{TmpValx16,V17@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type SEQUENCE OF
{Term17,Bytes20} = case Extensions of
  <<_:12,1:1,_/bitstring>> ->
begin
V18@Pad3 = bit_size(Bytes19) band 7,
{V18@V0,V18@Buf1} = case Bytes19 of
<<_:V18@Pad3,0:1,V18@V5:7,V18@V7:V18@V5/binary-unit:8,V18@Buf8/bitstring>> ->
{V18@V7,V18@Buf8};
<<_:V18@Pad3,1:1,0:1,V18@V6:14,V18@V8:V18@V6/binary-unit:8,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<_:V18@Pad3,1:1,1:1,V18@V6:6,V18@Buf7/bitstring>> ->
{V18@V8,V18@Buf9}  = decode_fragmented(V18@V6, V18@Buf7, 8),
{V18@V8,V18@Buf9}
end,
{TmpValx17,_} = 'dec_LocationConfirm_genericData'(V18@V0),
{TmpValx17,V18@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type CircuitInfo
{Term18,Bytes21} = case Extensions of
  <<_:13,1:1,_/bitstring>> ->
begin
V19@Pad3 = bit_size(Bytes20) band 7,
{V19@V0,V19@Buf1} = case Bytes20 of
<<_:V19@Pad3,0:1,V19@V5:7,V19@V7:V19@V5/binary-unit:8,V19@Buf8/bitstring>> ->
{V19@V7,V19@Buf8};
<<_:V19@Pad3,1:1,0:1,V19@V6:14,V19@V8:V19@V6/binary-unit:8,V19@Buf9/bitstring>> ->
{V19@V8,V19@Buf9};
<<_:V19@Pad3,1:1,1:1,V19@V6:6,V19@Buf7/bitstring>> ->
{V19@V8,V19@Buf9}  = decode_fragmented(V19@V6, V19@Buf7, 8),
{V19@V8,V19@Buf9}
end,
{TmpValx18,_} = dec_CircuitInfo(V19@V0),
{TmpValx18,V19@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute number 19 with type SEQUENCE OF
{Term19,Bytes22} = case Extensions of
  <<_:14,1:1,_/bitstring>> ->
begin
V20@Pad3 = bit_size(Bytes21) band 7,
{V20@V0,V20@Buf1} = case Bytes21 of
<<_:V20@Pad3,0:1,V20@V5:7,V20@V7:V20@V5/binary-unit:8,V20@Buf8/bitstring>> ->
{V20@V7,V20@Buf8};
<<_:V20@Pad3,1:1,0:1,V20@V6:14,V20@V8:V20@V6/binary-unit:8,V20@Buf9/bitstring>> ->
{V20@V8,V20@Buf9};
<<_:V20@Pad3,1:1,1:1,V20@V6:6,V20@Buf7/bitstring>> ->
{V20@V8,V20@Buf9}  = decode_fragmented(V20@V6, V20@Buf7, 8),
{V20@V8,V20@Buf9}
end,
{TmpValx19,_} = 'dec_LocationConfirm_serviceControl'(V20@V0),
{TmpValx19,V20@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes21}
end,

%% attribute number 20 with type SEQUENCE OF
{Term20,Bytes23} = case Extensions of
  <<_:15,1:1,_/bitstring>> ->
begin
V21@Pad3 = bit_size(Bytes22) band 7,
{V21@V0,V21@Buf1} = case Bytes22 of
<<_:V21@Pad3,0:1,V21@V5:7,V21@V7:V21@V5/binary-unit:8,V21@Buf8/bitstring>> ->
{V21@V7,V21@Buf8};
<<_:V21@Pad3,1:1,0:1,V21@V6:14,V21@V8:V21@V6/binary-unit:8,V21@Buf9/bitstring>> ->
{V21@V8,V21@Buf9};
<<_:V21@Pad3,1:1,1:1,V21@V6:6,V21@Buf7/bitstring>> ->
{V21@V8,V21@Buf9}  = decode_fragmented(V21@V6, V21@Buf7, 8),
{V21@V8,V21@Buf9}
end,
{TmpValx20,_} = 'dec_LocationConfirm_modifiedSrcInfo'(V21@V0),
{TmpValx20,V21@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes22}
end,

%% attribute number 21 with type INTEGER
{Term21,Bytes24} = case Extensions of
  <<_:16,1:1,_/bitstring>> ->
begin
V22@Pad3 = bit_size(Bytes23) band 7,
{V22@V0,V22@Buf1} = case Bytes23 of
<<_:V22@Pad3,0:1,V22@V5:7,V22@V7:V22@V5/binary-unit:8,V22@Buf8/bitstring>> ->
{V22@V7,V22@Buf8};
<<_:V22@Pad3,1:1,0:1,V22@V6:14,V22@V8:V22@V6/binary-unit:8,V22@Buf9/bitstring>> ->
{V22@V8,V22@Buf9};
<<_:V22@Pad3,1:1,1:1,V22@V6:6,V22@Buf7/bitstring>> ->
{V22@V8,V22@Buf9}  = decode_fragmented(V22@V6, V22@Buf7, 8),
{V22@V8,V22@Buf9}
end,
{TmpValx21,_} = begin
<<V23@V0:2/unsigned-unit:1,V23@Buf1/bitstring>> = V22@V0,
V23@Add2 = V23@V0 + 1,
V23@Pad5 = bit_size(V23@Buf1) band 7,
<<_:V23@Pad5,V23@V3:V23@Add2/unsigned-unit:8,V23@Buf4/bitstring>> = V23@Buf1,
{V23@V3,V23@Buf4}
end,
{TmpValx21,V22@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes23}
end,
Bytes25= skipextensions(Bytes24, 18, Extensions),
{{'LocationConfirm',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21},Bytes25}.

'enc_LocationReject'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 5, 12),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<6:7,Enc2@bitmap:7>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
enc_LocationRejectReason(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc7@element)
end
end,
Extensions,
begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_AltGKInfo(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end,
begin
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@output = enc_LocationReject_tokens(Enc12@element),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[align|encode_fragmented(Enc13@bin, 8)]
end
end
end
end,
begin
Enc15@element = element(7, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = enc_LocationReject_cryptoTokens(Enc15@element),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[align|encode_fragmented(Enc16@bin, 8)]
end
end
end
end,
begin
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@output = enc_ICV(Enc18@element),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[align|encode_fragmented(Enc19@bin, 8)]
end
end
end
end,
begin
Enc21@element = element(9, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@output = enc_FeatureSet(Enc21@element),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[align|encode_fragmented(Enc22@bin, 8)]
end
end
end
end,
begin
Enc24@element = element(10, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc25@output = enc_LocationReject_genericData(Enc24@element),
Enc25@bin = complete(Enc25@output),
Enc25@len = byte_size(Enc25@bin),
if Enc25@len < 128 ->
[align,
Enc25@len|Enc25@bin];
Enc25@len < 16384 ->
[align,
<<2:2,Enc25@len:14>>|Enc25@bin];
true ->
[align|encode_fragmented(Enc25@bin, 8)]
end
end
end
end|begin
Enc27@element = element(11, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc28@output = enc_LocationReject_serviceControl(Enc27@element),
Enc28@bin = complete(Enc28@output),
Enc28@len = byte_size(Enc28@bin),
if Enc28@len < 128 ->
[align,
Enc28@len|Enc28@bin];
Enc28@len < 16384 ->
[align,
<<2:2,Enc28@len:14>>|Enc28@bin];
true ->
[align|encode_fragmented(Enc28@bin, 8)]
end
end
end
end].
'enc_LocationReject_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_LocationReject_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components233(V1@V0, V1@Buf1, []).

'enc_LocationReject_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_LocationReject_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components234(V1@V0, V1@Buf1, []).

'enc_LocationReject_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_LocationReject_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components235(V1@V0, V1@Buf1, []).

'enc_LocationReject_serviceControl'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ServiceControlSession(Comp) || Comp <- Val]].


dec_LocationReject_serviceControl(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components236(V1@V0, V1@Buf1, []).



dec_LocationReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type LocationRejectReason
{Term2,Bytes4} = dec_LocationRejectReason(Bytes3),

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 4 with type AltGKInfo
{Term4,Bytes7} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes6) band 7,
{V5@V0,V5@Buf1} = case Bytes6 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx4,_} = dec_AltGKInfo(V5@V0),
{TmpValx4,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes8} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes7) band 7,
{V6@V0,V6@Buf1} = case Bytes7 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx5,_} = 'dec_LocationReject_tokens'(V6@V0),
{TmpValx5,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = 'dec_LocationReject_cryptoTokens'(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type ICV
{Term7,Bytes10} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = dec_ICV(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type FeatureSet
{Term8,Bytes11} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = dec_FeatureSet(V9@V0),
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes12} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes11) band 7,
{V10@V0,V10@Buf1} = case Bytes11 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx9,_} = 'dec_LocationReject_genericData'(V10@V0),
{TmpValx9,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes13} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes12) band 7,
{V11@V0,V11@Buf1} = case Bytes12 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx10,_} = 'dec_LocationReject_serviceControl'(V11@V0),
{TmpValx10,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,
Bytes14= skipextensions(Bytes13, 8, Extensions),
{{'LocationReject',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},Bytes14}.

'enc_LocationRejectReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= notRegistered ->
<<0:1,0:2>>;
ChoiceTag =:= invalidPermission ->
<<0:1,1:2>>;
ChoiceTag =:= requestDenied ->
<<0:1,2:2>>;
ChoiceTag =:= undefinedReason ->
<<0:1,3:2>>;
ChoiceTag =:= securityDenial ->
begin
Enc5@output = [],
Enc5@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc5@bin]
end;
ChoiceTag =:= aliasesInconsistent ->
begin
Enc6@output = [],
Enc6@bin = <<0:8>>,
[<<1:1,1:7>>,
align,
1|Enc6@bin]
end;
ChoiceTag =:= routeCalltoSCN ->
begin
Enc7@output = enc_LocationRejectReason_routeCalltoSCN(ChoiceVal),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[<<1:1,2:7>>,
align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<1:1,2:7>>,
align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[<<1:1,2:7>>,
align|encode_fragmented(Enc7@bin, 8)]
end
end;
ChoiceTag =:= resourceUnavailable ->
begin
Enc8@output = [],
Enc8@bin = <<0:8>>,
[<<1:1,3:7>>,
align,
1|Enc8@bin]
end;
ChoiceTag =:= genericDataReason ->
begin
Enc9@output = [],
Enc9@bin = <<0:8>>,
[<<1:1,4:7>>,
align,
1|Enc9@bin]
end;
ChoiceTag =:= neededFeatureNotSupported ->
begin
Enc10@output = [],
Enc10@bin = <<0:8>>,
[<<1:1,5:7>>,
align,
1|Enc10@bin]
end;
ChoiceTag =:= hopCountExceeded ->
begin
Enc11@output = [],
Enc11@bin = <<0:8>>,
[<<1:1,6:7>>,
align,
1|Enc11@bin]
end;
ChoiceTag =:= incompleteAddress ->
begin
Enc12@output = [],
Enc12@bin = <<0:8>>,
[<<1:1,7:7>>,
align,
1|Enc12@bin]
end;
ChoiceTag =:= securityError ->
begin
Enc13@output = enc_SecurityErrors2(ChoiceVal),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[<<1:1,8:7>>,
align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[<<1:1,8:7>>,
align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[<<1:1,8:7>>,
align|encode_fragmented(Enc13@bin, 8)]
end
end;
ChoiceTag =:= securityDHmismatch ->
begin
Enc14@output = [],
Enc14@bin = <<0:8>>,
[<<1:1,9:7>>,
align,
1|Enc14@bin]
end;
ChoiceTag =:= noRouteToDestination ->
begin
Enc15@output = [],
Enc15@bin = <<0:8>>,
[<<1:1,10:7>>,
align,
1|Enc15@bin]
end;
ChoiceTag =:= unallocatedNumber ->
begin
Enc16@output = [],
Enc16@bin = <<0:8>>,
[<<1:1,11:7>>,
align,
1|Enc16@bin]
end
end.
'enc_LocationRejectReason_routeCalltoSCN'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_PartyNumber(Comp) || Comp <- Val]].


dec_LocationRejectReason_routeCalltoSCN(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components237(V1@V0, V1@Buf1, []).



dec_LocationRejectReason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{notRegistered,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invalidPermission,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{requestDenied,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefinedReason,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{securityDenial,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{aliasesInconsistent,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
{TmpVal,_} = 'dec_LocationRejectReason_routeCalltoSCN'(V2@V0),
{TmpVal,V2@Buf1}
end,
{{routeCalltoSCN,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{resourceUnavailable,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{genericDataReason,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{neededFeatureNotSupported,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{hopCountExceeded,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{incompleteAddress,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_SecurityErrors2(V2@V0),
{TmpVal,V2@Buf1}
end,
{{securityError,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{securityDHmismatch,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{noRouteToDestination,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{unallocatedNumber,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_DisengageRequest'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 8, 21),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<12:7,Enc2@bitmap:13>>
end,
[begin
Enc1@element = element(7, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
Enc7@len = length(Enc6@element),
Enc7@bin = encode_chars_16bit(Enc6@element),
Enc7@len@sub = Enc7@len - 1,
if Enc7@len@sub bsr 7 =:= 0 ->
[<<Enc7@len@sub:7,0:1>>|Enc7@bin]
end
end,
begin
Enc8@element = element(4, Val),
Enc9@len = byte_size(Enc8@element),
if Enc9@len =:= 16 ->
Enc8@element
end
end,
begin
Enc10@element = element(5, Val),
if Enc10@element bsr 16 =:= 0 ->
<<Enc10@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end,
begin
Enc12@element = element(6, Val),
enc_DisengageReason(Enc12@element)
end,
begin
Enc13@element = element(7, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc13@element)
end
end,
Extensions,
begin
Enc15@element = element(8, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = enc_CallIdentifier(Enc15@element),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[align|encode_fragmented(Enc16@bin, 8)]
end
end
end
end,
begin
Enc18@element = element(9, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@output = begin
Enc19@len = length(Enc18@element),
Enc19@bin = encode_chars_16bit(Enc18@element),
Enc19@len@sub = Enc19@len - 1,
if Enc19@len@sub bsr 7 =:= 0 ->
[<<Enc19@len@sub:7,0:1>>|Enc19@bin]
end
end,
Enc20@bin = iolist_to_binary(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[align,
Enc20@len|Enc20@bin];
true ->
[align,
<<2:2,Enc20@len:14>>|Enc20@bin]
end
end
end
end,
begin
Enc22@element = element(10, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@output = enc_DisengageRequest_tokens(Enc22@element),
Enc23@bin = complete(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[align,
Enc23@len|Enc23@bin];
Enc23@len < 16384 ->
[align,
<<2:2,Enc23@len:14>>|Enc23@bin];
true ->
[align|encode_fragmented(Enc23@bin, 8)]
end
end
end
end,
begin
Enc25@element = element(11, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@output = enc_DisengageRequest_cryptoTokens(Enc25@element),
Enc26@bin = complete(Enc26@output),
Enc26@len = byte_size(Enc26@bin),
if Enc26@len < 128 ->
[align,
Enc26@len|Enc26@bin];
Enc26@len < 16384 ->
[align,
<<2:2,Enc26@len:14>>|Enc26@bin];
true ->
[align|encode_fragmented(Enc26@bin, 8)]
end
end
end
end,
begin
Enc28@element = element(12, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc29@output = enc_ICV(Enc28@element),
Enc29@bin = complete(Enc29@output),
Enc29@len = byte_size(Enc29@bin),
if Enc29@len < 128 ->
[align,
Enc29@len|Enc29@bin];
Enc29@len < 16384 ->
[align,
<<2:2,Enc29@len:14>>|Enc29@bin];
true ->
[align|encode_fragmented(Enc29@bin, 8)]
end
end
end
end,
begin
Enc31@element = element(13, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc33@output = if Enc31@element =:= false ->
<<0:1,0:7>>;
Enc31@element =:= true ->
<<1:1,0:7>>
end,
Enc33@bin = Enc33@output,
[align,
1|Enc33@bin]
end
end
end,
begin
Enc35@element = element(14, Val),
if Enc35@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc36@output = enc_CallLinkage(Enc35@element),
Enc36@bin = complete(Enc36@output),
Enc36@len = byte_size(Enc36@bin),
if Enc36@len < 128 ->
[align,
Enc36@len|Enc36@bin];
Enc36@len < 16384 ->
[align,
<<2:2,Enc36@len:14>>|Enc36@bin];
true ->
[align|encode_fragmented(Enc36@bin, 8)]
end
end
end
end,
begin
Enc38@element = element(15, Val),
if Enc38@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc39@output = enc_CallCapacity(Enc38@element),
Enc39@bin = complete(Enc39@output),
Enc39@len = byte_size(Enc39@bin),
if Enc39@len < 128 ->
[align,
Enc39@len|Enc39@bin];
Enc39@len < 16384 ->
[align,
<<2:2,Enc39@len:14>>|Enc39@bin];
true ->
[align|encode_fragmented(Enc39@bin, 8)]
end
end
end
end,
begin
Enc41@element = element(16, Val),
if Enc41@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc42@output = enc_CircuitInfo(Enc41@element),
Enc42@bin = complete(Enc42@output),
Enc42@len = byte_size(Enc42@bin),
if Enc42@len < 128 ->
[align,
Enc42@len|Enc42@bin];
Enc42@len < 16384 ->
[align,
<<2:2,Enc42@len:14>>|Enc42@bin];
true ->
[align|encode_fragmented(Enc42@bin, 8)]
end
end
end
end,
begin
Enc44@element = element(17, Val),
if Enc44@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@output = enc_RasUsageInformation(Enc44@element),
Enc45@bin = complete(Enc45@output),
Enc45@len = byte_size(Enc45@bin),
if Enc45@len < 128 ->
[align,
Enc45@len|Enc45@bin];
Enc45@len < 16384 ->
[align,
<<2:2,Enc45@len:14>>|Enc45@bin];
true ->
[align|encode_fragmented(Enc45@bin, 8)]
end
end
end
end,
begin
Enc47@element = element(18, Val),
if Enc47@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc48@output = enc_CallTerminationCause(Enc47@element),
Enc48@bin = complete(Enc48@output),
Enc48@len = byte_size(Enc48@bin),
if Enc48@len < 128 ->
[align,
Enc48@len|Enc48@bin];
Enc48@len < 16384 ->
[align,
<<2:2,Enc48@len:14>>|Enc48@bin];
true ->
[align|encode_fragmented(Enc48@bin, 8)]
end
end
end
end,
begin
Enc50@element = element(19, Val),
if Enc50@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc51@output = enc_DisengageRequest_serviceControl(Enc50@element),
Enc51@bin = complete(Enc51@output),
Enc51@len = byte_size(Enc51@bin),
if Enc51@len < 128 ->
[align,
Enc51@len|Enc51@bin];
Enc51@len < 16384 ->
[align,
<<2:2,Enc51@len:14>>|Enc51@bin];
true ->
[align|encode_fragmented(Enc51@bin, 8)]
end
end
end
end|begin
Enc53@element = element(20, Val),
if Enc53@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc54@output = enc_DisengageRequest_genericData(Enc53@element),
Enc54@bin = complete(Enc54@output),
Enc54@len = byte_size(Enc54@bin),
if Enc54@len < 128 ->
[align,
Enc54@len|Enc54@bin];
Enc54@len < 16384 ->
[align,
<<2:2,Enc54@len:14>>|Enc54@bin];
true ->
[align|encode_fragmented(Enc54@bin, 8)]
end
end
end
end].
'enc_DisengageRequest_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_DisengageRequest_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components238(V1@V0, V1@Buf1, []).

'enc_DisengageRequest_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_DisengageRequest_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components239(V1@V0, V1@Buf1, []).

'enc_DisengageRequest_serviceControl'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ServiceControlSession(Comp) || Comp <- Val]].


dec_DisengageRequest_serviceControl(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components240(V1@V0, V1@Buf1, []).

'enc_DisengageRequest_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_DisengageRequest_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components241(V1@V0, V1@Buf1, []).



dec_DisengageRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type BMPString
{Term2,Bytes4} = begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:1,V4@V3:V4@Add2/binary-unit:16,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V6,V4@Buf7}  = {decode_chars_16bit(V4@V3),V4@Buf4},
{V4@V6,V4@Buf7}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
<<V5@V0:16/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv2 = binary:copy(V5@V0),
{V5@Conv2,V5@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = begin
<<V6@V0:2/unsigned-unit:8,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end,

%% attribute number 5 with type DisengageReason
{Term5,Bytes7} = dec_DisengageReason(Bytes6),

%% attribute number 6 with type NonStandardParameter
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V7@V0,V7@Buf1} = case Bytes8 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,

%% attribute number 7 with type CallIdentifier
{Term7,Bytes10} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = dec_CallIdentifier(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type BMPString
{Term8,Bytes11} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = begin
<<V10@V0:7/unsigned-unit:1,V10@Buf1/bitstring>> = V9@V0,
V10@Add2 = V10@V0 + 1,
V10@Pad5 = bit_size(V10@Buf1) band 7,
<<_:V10@Pad5,V10@V3:V10@Add2/binary-unit:16,V10@Buf4/bitstring>> = V10@Buf1,
{V10@V7,V10@Buf8}  = {decode_chars_16bit(V10@V3),V10@Buf4},
{V10@V7,V10@Buf8}
end,
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes12} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes11) band 7,
{V11@V0,V11@Buf1} = case Bytes11 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx9,_} = 'dec_DisengageRequest_tokens'(V11@V0),
{TmpValx9,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes13} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes12) band 7,
{V12@V0,V12@Buf1} = case Bytes12 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx10,_} = 'dec_DisengageRequest_cryptoTokens'(V12@V0),
{TmpValx10,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type ICV
{Term11,Bytes14} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes13) band 7,
{V13@V0,V13@Buf1} = case Bytes13 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx11,_} = dec_ICV(V13@V0),
{TmpValx11,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type BOOLEAN
{Term12,Bytes15} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes14) band 7,
{V14@V0,V14@Buf1} = case Bytes14 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx12,_} = begin
<<V15@V0:1,V15@Buf1/bitstring>> = V14@V0,
V15@Int2 = case V15@V0 of
0 -> false;
1 -> true
end,
{V15@Int2,V15@Buf1}
end,
{TmpValx12,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type CallLinkage
{Term13,Bytes16} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V16@Pad3 = bit_size(Bytes15) band 7,
{V16@V0,V16@Buf1} = case Bytes15 of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
{TmpValx13,_} = dec_CallLinkage(V16@V0),
{TmpValx13,V16@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type CallCapacity
{Term14,Bytes17} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V17@Pad3 = bit_size(Bytes16) band 7,
{V17@V0,V17@Buf1} = case Bytes16 of
<<_:V17@Pad3,0:1,V17@V5:7,V17@V7:V17@V5/binary-unit:8,V17@Buf8/bitstring>> ->
{V17@V7,V17@Buf8};
<<_:V17@Pad3,1:1,0:1,V17@V6:14,V17@V8:V17@V6/binary-unit:8,V17@Buf9/bitstring>> ->
{V17@V8,V17@Buf9};
<<_:V17@Pad3,1:1,1:1,V17@V6:6,V17@Buf7/bitstring>> ->
{V17@V8,V17@Buf9}  = decode_fragmented(V17@V6, V17@Buf7, 8),
{V17@V8,V17@Buf9}
end,
{TmpValx14,_} = dec_CallCapacity(V17@V0),
{TmpValx14,V17@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type CircuitInfo
{Term15,Bytes18} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V18@Pad3 = bit_size(Bytes17) band 7,
{V18@V0,V18@Buf1} = case Bytes17 of
<<_:V18@Pad3,0:1,V18@V5:7,V18@V7:V18@V5/binary-unit:8,V18@Buf8/bitstring>> ->
{V18@V7,V18@Buf8};
<<_:V18@Pad3,1:1,0:1,V18@V6:14,V18@V8:V18@V6/binary-unit:8,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<_:V18@Pad3,1:1,1:1,V18@V6:6,V18@Buf7/bitstring>> ->
{V18@V8,V18@Buf9}  = decode_fragmented(V18@V6, V18@Buf7, 8),
{V18@V8,V18@Buf9}
end,
{TmpValx15,_} = dec_CircuitInfo(V18@V0),
{TmpValx15,V18@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type RasUsageInformation
{Term16,Bytes19} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V19@Pad3 = bit_size(Bytes18) band 7,
{V19@V0,V19@Buf1} = case Bytes18 of
<<_:V19@Pad3,0:1,V19@V5:7,V19@V7:V19@V5/binary-unit:8,V19@Buf8/bitstring>> ->
{V19@V7,V19@Buf8};
<<_:V19@Pad3,1:1,0:1,V19@V6:14,V19@V8:V19@V6/binary-unit:8,V19@Buf9/bitstring>> ->
{V19@V8,V19@Buf9};
<<_:V19@Pad3,1:1,1:1,V19@V6:6,V19@Buf7/bitstring>> ->
{V19@V8,V19@Buf9}  = decode_fragmented(V19@V6, V19@Buf7, 8),
{V19@V8,V19@Buf9}
end,
{TmpValx16,_} = dec_RasUsageInformation(V19@V0),
{TmpValx16,V19@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type CallTerminationCause
{Term17,Bytes20} = case Extensions of
  <<_:10,1:1,_/bitstring>> ->
begin
V20@Pad3 = bit_size(Bytes19) band 7,
{V20@V0,V20@Buf1} = case Bytes19 of
<<_:V20@Pad3,0:1,V20@V5:7,V20@V7:V20@V5/binary-unit:8,V20@Buf8/bitstring>> ->
{V20@V7,V20@Buf8};
<<_:V20@Pad3,1:1,0:1,V20@V6:14,V20@V8:V20@V6/binary-unit:8,V20@Buf9/bitstring>> ->
{V20@V8,V20@Buf9};
<<_:V20@Pad3,1:1,1:1,V20@V6:6,V20@Buf7/bitstring>> ->
{V20@V8,V20@Buf9}  = decode_fragmented(V20@V6, V20@Buf7, 8),
{V20@V8,V20@Buf9}
end,
{TmpValx17,_} = dec_CallTerminationCause(V20@V0),
{TmpValx17,V20@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type SEQUENCE OF
{Term18,Bytes21} = case Extensions of
  <<_:11,1:1,_/bitstring>> ->
begin
V21@Pad3 = bit_size(Bytes20) band 7,
{V21@V0,V21@Buf1} = case Bytes20 of
<<_:V21@Pad3,0:1,V21@V5:7,V21@V7:V21@V5/binary-unit:8,V21@Buf8/bitstring>> ->
{V21@V7,V21@Buf8};
<<_:V21@Pad3,1:1,0:1,V21@V6:14,V21@V8:V21@V6/binary-unit:8,V21@Buf9/bitstring>> ->
{V21@V8,V21@Buf9};
<<_:V21@Pad3,1:1,1:1,V21@V6:6,V21@Buf7/bitstring>> ->
{V21@V8,V21@Buf9}  = decode_fragmented(V21@V6, V21@Buf7, 8),
{V21@V8,V21@Buf9}
end,
{TmpValx18,_} = 'dec_DisengageRequest_serviceControl'(V21@V0),
{TmpValx18,V21@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute number 19 with type SEQUENCE OF
{Term19,Bytes22} = case Extensions of
  <<_:12,1:1,_/bitstring>> ->
begin
V22@Pad3 = bit_size(Bytes21) band 7,
{V22@V0,V22@Buf1} = case Bytes21 of
<<_:V22@Pad3,0:1,V22@V5:7,V22@V7:V22@V5/binary-unit:8,V22@Buf8/bitstring>> ->
{V22@V7,V22@Buf8};
<<_:V22@Pad3,1:1,0:1,V22@V6:14,V22@V8:V22@V6/binary-unit:8,V22@Buf9/bitstring>> ->
{V22@V8,V22@Buf9};
<<_:V22@Pad3,1:1,1:1,V22@V6:6,V22@Buf7/bitstring>> ->
{V22@V8,V22@Buf9}  = decode_fragmented(V22@V6, V22@Buf7, 8),
{V22@V8,V22@Buf9}
end,
{TmpValx19,_} = 'dec_DisengageRequest_genericData'(V22@V0),
{TmpValx19,V22@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes21}
end,
Bytes23= skipextensions(Bytes22, 14, Extensions),
{{'DisengageRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19},Bytes23}.

'enc_DisengageReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= forcedDrop ->
<<0:1,0:2>>;
ChoiceTag =:= normalDrop ->
<<0:1,1:2>>;
ChoiceTag =:= undefinedReason ->
<<0:1,2:2>>
end.


dec_DisengageReason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{forcedDrop,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{normalDrop,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefinedReason,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_DisengageConfirm'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 4, 11),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<6:7,Enc2@bitmap:7>>
end,
[begin
Enc1@element = element(3, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc6@element)
end
end,
Extensions,
begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@output = enc_DisengageConfirm_tokens(Enc8@element),
Enc9@bin = complete(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[align,
Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[align,
<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
[align|encode_fragmented(Enc9@bin, 8)]
end
end
end
end,
begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@output = enc_DisengageConfirm_cryptoTokens(Enc11@element),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[align|encode_fragmented(Enc12@bin, 8)]
end
end
end
end,
begin
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@output = enc_ICV(Enc14@element),
Enc15@bin = complete(Enc15@output),
Enc15@len = byte_size(Enc15@bin),
if Enc15@len < 128 ->
[align,
Enc15@len|Enc15@bin];
Enc15@len < 16384 ->
[align,
<<2:2,Enc15@len:14>>|Enc15@bin];
true ->
[align|encode_fragmented(Enc15@bin, 8)]
end
end
end
end,
begin
Enc17@element = element(7, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc18@output = enc_CallCapacity(Enc17@element),
Enc18@bin = complete(Enc18@output),
Enc18@len = byte_size(Enc18@bin),
if Enc18@len < 128 ->
[align,
Enc18@len|Enc18@bin];
Enc18@len < 16384 ->
[align,
<<2:2,Enc18@len:14>>|Enc18@bin];
true ->
[align|encode_fragmented(Enc18@bin, 8)]
end
end
end
end,
begin
Enc20@element = element(8, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc21@output = enc_CircuitInfo(Enc20@element),
Enc21@bin = complete(Enc21@output),
Enc21@len = byte_size(Enc21@bin),
if Enc21@len < 128 ->
[align,
Enc21@len|Enc21@bin];
Enc21@len < 16384 ->
[align,
<<2:2,Enc21@len:14>>|Enc21@bin];
true ->
[align|encode_fragmented(Enc21@bin, 8)]
end
end
end
end,
begin
Enc23@element = element(9, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc24@output = enc_RasUsageInformation(Enc23@element),
Enc24@bin = complete(Enc24@output),
Enc24@len = byte_size(Enc24@bin),
if Enc24@len < 128 ->
[align,
Enc24@len|Enc24@bin];
Enc24@len < 16384 ->
[align,
<<2:2,Enc24@len:14>>|Enc24@bin];
true ->
[align|encode_fragmented(Enc24@bin, 8)]
end
end
end
end|begin
Enc26@element = element(10, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc27@output = enc_DisengageConfirm_genericData(Enc26@element),
Enc27@bin = complete(Enc27@output),
Enc27@len = byte_size(Enc27@bin),
if Enc27@len < 128 ->
[align,
Enc27@len|Enc27@bin];
Enc27@len < 16384 ->
[align,
<<2:2,Enc27@len:14>>|Enc27@bin];
true ->
[align|encode_fragmented(Enc27@bin, 8)]
end
end
end
end].
'enc_DisengageConfirm_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_DisengageConfirm_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components242(V1@V0, V1@Buf1, []).

'enc_DisengageConfirm_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_DisengageConfirm_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components243(V1@V0, V1@Buf1, []).

'enc_DisengageConfirm_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_DisengageConfirm_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components244(V1@V0, V1@Buf1, []).



dec_DisengageConfirm(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes6} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes5) band 7,
{V5@V0,V5@Buf1} = case Bytes5 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = 'dec_DisengageConfirm_tokens'(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes7} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes6) band 7,
{V6@V0,V6@Buf1} = case Bytes6 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx4,_} = 'dec_DisengageConfirm_cryptoTokens'(V6@V0),
{TmpValx4,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type ICV
{Term5,Bytes8} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes7) band 7,
{V7@V0,V7@Buf1} = case Bytes7 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx5,_} = dec_ICV(V7@V0),
{TmpValx5,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type CallCapacity
{Term6,Bytes9} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes8) band 7,
{V8@V0,V8@Buf1} = case Bytes8 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx6,_} = dec_CallCapacity(V8@V0),
{TmpValx6,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type CircuitInfo
{Term7,Bytes10} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes9) band 7,
{V9@V0,V9@Buf1} = case Bytes9 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx7,_} = dec_CircuitInfo(V9@V0),
{TmpValx7,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type RasUsageInformation
{Term8,Bytes11} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes10) band 7,
{V10@V0,V10@Buf1} = case Bytes10 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx8,_} = dec_RasUsageInformation(V10@V0),
{TmpValx8,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes12} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes11) band 7,
{V11@V0,V11@Buf1} = case Bytes11 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx9,_} = 'dec_DisengageConfirm_genericData'(V11@V0),
{TmpValx9,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,
Bytes13= skipextensions(Bytes12, 8, Extensions),
{{'DisengageConfirm',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},Bytes13}.

'enc_DisengageReject'(Val) ->
Enc2@bitmap = extension_bitmap(Val, 5, 10),
Extensions = if Enc2@bitmap =:= 0 ->
[];
true ->
<<4:7,Enc2@bitmap:5>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
enc_DisengageRejectReason(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc7@element)
end
end,
Extensions,
begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_AltGKInfo(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end,
begin
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@output = enc_DisengageReject_tokens(Enc12@element),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[align|encode_fragmented(Enc13@bin, 8)]
end
end
end
end,
begin
Enc15@element = element(7, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = enc_DisengageReject_cryptoTokens(Enc15@element),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[align|encode_fragmented(Enc16@bin, 8)]
end
end
end
end,
begin
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@output = enc_ICV(Enc18@element),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[align|encode_fragmented(Enc19@bin, 8)]
end
end
end
end|begin
Enc21@element = element(9, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@output = enc_DisengageReject_genericData(Enc21@element),
Enc22@bin = complete(Enc22@output),
Enc22@len = byte_size(Enc22@bin),
if Enc22@len < 128 ->
[align,
Enc22@len|Enc22@bin];
Enc22@len < 16384 ->
[align,
<<2:2,Enc22@len:14>>|Enc22@bin];
true ->
[align|encode_fragmented(Enc22@bin, 8)]
end
end
end
end].
'enc_DisengageReject_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_DisengageReject_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components245(V1@V0, V1@Buf1, []).

'enc_DisengageReject_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_DisengageReject_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components246(V1@V0, V1@Buf1, []).

'enc_DisengageReject_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_DisengageReject_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components247(V1@V0, V1@Buf1, []).



dec_DisengageReject(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type DisengageRejectReason
{Term2,Bytes4} = dec_DisengageRejectReason(Bytes3),

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,

%% attribute number 4 with type AltGKInfo
{Term4,Bytes7} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes6) band 7,
{V5@V0,V5@Buf1} = case Bytes6 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx4,_} = dec_AltGKInfo(V5@V0),
{TmpValx4,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes8} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes7) band 7,
{V6@V0,V6@Buf1} = case Bytes7 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx5,_} = 'dec_DisengageReject_tokens'(V6@V0),
{TmpValx5,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = 'dec_DisengageReject_cryptoTokens'(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type ICV
{Term7,Bytes10} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = dec_ICV(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes11} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = 'dec_DisengageReject_genericData'(V9@V0),
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,
Bytes12= skipextensions(Bytes11, 6, Extensions),
{{'DisengageReject',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes12}.

'enc_DisengageRejectReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= notRegistered ->
<<0:1,0:1>>;
ChoiceTag =:= requestToDropOther ->
<<0:1,1:1>>;
ChoiceTag =:= securityDenial ->
begin
Enc3@output = [],
Enc3@bin = <<0:8>>,
[<<1:1,0:7>>,
align,
1|Enc3@bin]
end;
ChoiceTag =:= securityError ->
begin
Enc4@output = enc_SecurityErrors2(ChoiceVal),
Enc4@bin = complete(Enc4@output),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[<<1:1,1:7>>,
align,
Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<1:1,1:7>>,
align,
<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
[<<1:1,1:7>>,
align|encode_fragmented(Enc4@bin, 8)]
end
end
end.


dec_DisengageRejectReason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{notRegistered,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{requestToDropOther,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = begin
ignore,
{'NULL',V2@V0}
end,
{TmpVal,V2@Buf1}
end,
{{securityDenial,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_SecurityErrors2(V2@V0),
{TmpVal,V2@Buf1}
end,
{{securityError,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_InfoRequest'(Val) ->
Enc3@bitmap = extension_bitmap(Val, 6, 17),
Extensions = if Enc3@bitmap =:= 0 ->
[];
true ->
<<10:7,Enc3@bitmap:11>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(5, Val),
if Enc2@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc5@element = element(2, Val),
Enc5@element@sub = Enc5@element - 1,
if 0 =< Enc5@element@sub, Enc5@element@sub < 65535 ->
<<Enc5@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element bsr 16 =:= 0 ->
<<Enc7@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc9@element)
end
end,
begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransportAddress(Enc11@element)
end
end,
Extensions,
begin
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@output = enc_CallIdentifier(Enc13@element),
Enc14@bin = complete(Enc14@output),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len < 128 ->
[align,
Enc14@len|Enc14@bin];
Enc14@len < 16384 ->
[align,
<<2:2,Enc14@len:14>>|Enc14@bin];
true ->
[align|encode_fragmented(Enc14@bin, 8)]
end
end
end
end,
begin
Enc16@element = element(7, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@output = enc_InfoRequest_tokens(Enc16@element),
Enc17@bin = complete(Enc17@output),
Enc17@len = byte_size(Enc17@bin),
if Enc17@len < 128 ->
[align,
Enc17@len|Enc17@bin];
Enc17@len < 16384 ->
[align,
<<2:2,Enc17@len:14>>|Enc17@bin];
true ->
[align|encode_fragmented(Enc17@bin, 8)]
end
end
end
end,
begin
Enc19@element = element(8, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@output = enc_InfoRequest_cryptoTokens(Enc19@element),
Enc20@bin = complete(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[align,
Enc20@len|Enc20@bin];
Enc20@len < 16384 ->
[align,
<<2:2,Enc20@len:14>>|Enc20@bin];
true ->
[align|encode_fragmented(Enc20@bin, 8)]
end
end
end
end,
begin
Enc22@element = element(9, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@output = enc_ICV(Enc22@element),
Enc23@bin = complete(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[align,
Enc23@len|Enc23@bin];
Enc23@len < 16384 ->
[align,
<<2:2,Enc23@len:14>>|Enc23@bin];
true ->
[align|encode_fragmented(Enc23@bin, 8)]
end
end
end
end,
begin
Enc25@element = element(10, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@output = enc_UUIEsRequested(Enc25@element),
Enc26@bin = complete(Enc26@output),
Enc26@len = byte_size(Enc26@bin),
if Enc26@len < 128 ->
[align,
Enc26@len|Enc26@bin];
Enc26@len < 16384 ->
[align,
<<2:2,Enc26@len:14>>|Enc26@bin];
true ->
[align|encode_fragmented(Enc26@bin, 8)]
end
end
end
end,
begin
Enc28@element = element(11, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc29@output = enc_CallLinkage(Enc28@element),
Enc29@bin = complete(Enc29@output),
Enc29@len = byte_size(Enc29@bin),
if Enc29@len < 128 ->
[align,
Enc29@len|Enc29@bin];
Enc29@len < 16384 ->
[align,
<<2:2,Enc29@len:14>>|Enc29@bin];
true ->
[align|encode_fragmented(Enc29@bin, 8)]
end
end
end
end,
begin
Enc31@element = element(12, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc32@output = enc_RasUsageInfoTypes(Enc31@element),
Enc32@bin = complete(Enc32@output),
Enc32@len = byte_size(Enc32@bin),
if Enc32@len < 128 ->
[align,
Enc32@len|Enc32@bin];
Enc32@len < 16384 ->
[align,
<<2:2,Enc32@len:14>>|Enc32@bin];
true ->
[align|encode_fragmented(Enc32@bin, 8)]
end
end
end
end,
begin
Enc34@element = element(13, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc35@output = [],
Enc35@bin = <<0:8>>,
[align,
1|Enc35@bin]
end
end
end,
begin
Enc37@element = element(14, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc39@output = if Enc37@element bsr 16 =:= 0 ->
<<Enc37@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc37@element}}})
end,
Enc39@bin = Enc39@output,
[align,
2|Enc39@bin]
end
end
end,
begin
Enc41@element = element(15, Val),
if Enc41@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc42@output = [],
Enc42@bin = <<0:8>>,
[align,
1|Enc42@bin]
end
end
end|begin
Enc44@element = element(16, Val),
if Enc44@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@output = enc_InfoRequest_genericData(Enc44@element),
Enc45@bin = complete(Enc45@output),
Enc45@len = byte_size(Enc45@bin),
if Enc45@len < 128 ->
[align,
Enc45@len|Enc45@bin];
Enc45@len < 16384 ->
[align,
<<2:2,Enc45@len:14>>|Enc45@bin];
true ->
[align|encode_fragmented(Enc45@bin, 8)]
end
end
end
end].
'enc_InfoRequest_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_InfoRequest_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components248(V1@V0, V1@Buf1, []).

'enc_InfoRequest_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_InfoRequest_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components249(V1@V0, V1@Buf1, []).

'enc_InfoRequest_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_InfoRequest_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components250(V1@V0, V1@Buf1, []).



dec_InfoRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type TransportAddress
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_TransportAddress(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 5 with type CallIdentifier
{Term5,Bytes8} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes7) band 7,
{V6@V0,V6@Buf1} = case Bytes7 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx5,_} = dec_CallIdentifier(V6@V0),
{TmpValx5,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes9} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes8) band 7,
{V7@V0,V7@Buf1} = case Bytes8 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = 'dec_InfoRequest_tokens'(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes10} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes9) band 7,
{V8@V0,V8@Buf1} = case Bytes9 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = 'dec_InfoRequest_cryptoTokens'(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 8 with type ICV
{Term8,Bytes11} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes10) band 7,
{V9@V0,V9@Buf1} = case Bytes10 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx8,_} = dec_ICV(V9@V0),
{TmpValx8,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 9 with type UUIEsRequested
{Term9,Bytes12} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes11) band 7,
{V10@V0,V10@Buf1} = case Bytes11 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx9,_} = dec_UUIEsRequested(V10@V0),
{TmpValx9,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type CallLinkage
{Term10,Bytes13} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes12) band 7,
{V11@V0,V11@Buf1} = case Bytes12 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx10,_} = dec_CallLinkage(V11@V0),
{TmpValx10,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type RasUsageInfoTypes
{Term11,Bytes14} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes13) band 7,
{V12@V0,V12@Buf1} = case Bytes13 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx11,_} = dec_RasUsageInfoTypes(V12@V0),
{TmpValx11,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type NULL
{Term12,Bytes15} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes14) band 7,
{V13@V0,V13@Buf1} = case Bytes14 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx12,_} = begin
ignore,
{'NULL',V13@V0}
end,
{TmpValx12,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type INTEGER
{Term13,Bytes16} = case Extensions of
  <<_:8,1:1,_/bitstring>> ->
begin
V15@Pad3 = bit_size(Bytes15) band 7,
{V15@V0,V15@Buf1} = case Bytes15 of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
{TmpValx13,_} = begin
V16@Pad2 = bit_size(V15@V0) band 7,
<<_:V16@Pad2,V16@V0:2/unsigned-unit:8,V16@Buf1/bitstring>> = V15@V0,
{V16@V0,V16@Buf1}
end,
{TmpValx13,V15@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type NULL
{Term14,Bytes17} = case Extensions of
  <<_:9,1:1,_/bitstring>> ->
begin
V17@Pad3 = bit_size(Bytes16) band 7,
{V17@V0,V17@Buf1} = case Bytes16 of
<<_:V17@Pad3,0:1,V17@V5:7,V17@V7:V17@V5/binary-unit:8,V17@Buf8/bitstring>> ->
{V17@V7,V17@Buf8};
<<_:V17@Pad3,1:1,0:1,V17@V6:14,V17@V8:V17@V6/binary-unit:8,V17@Buf9/bitstring>> ->
{V17@V8,V17@Buf9};
<<_:V17@Pad3,1:1,1:1,V17@V6:6,V17@Buf7/bitstring>> ->
{V17@V8,V17@Buf9}  = decode_fragmented(V17@V6, V17@Buf7, 8),
{V17@V8,V17@Buf9}
end,
{TmpValx14,_} = begin
ignore,
{'NULL',V17@V0}
end,
{TmpValx14,V17@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type SEQUENCE OF
{Term15,Bytes18} = case Extensions of
  <<_:10,1:1,_/bitstring>> ->
begin
V19@Pad3 = bit_size(Bytes17) band 7,
{V19@V0,V19@Buf1} = case Bytes17 of
<<_:V19@Pad3,0:1,V19@V5:7,V19@V7:V19@V5/binary-unit:8,V19@Buf8/bitstring>> ->
{V19@V7,V19@Buf8};
<<_:V19@Pad3,1:1,0:1,V19@V6:14,V19@V8:V19@V6/binary-unit:8,V19@Buf9/bitstring>> ->
{V19@V8,V19@Buf9};
<<_:V19@Pad3,1:1,1:1,V19@V6:6,V19@Buf7/bitstring>> ->
{V19@V8,V19@Buf9}  = decode_fragmented(V19@V6, V19@Buf7, 8),
{V19@V8,V19@Buf9}
end,
{TmpValx15,_} = 'dec_InfoRequest_genericData'(V19@V0),
{TmpValx15,V19@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,
Bytes19= skipextensions(Bytes18, 12, Extensions),
{{'InfoRequest',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15},Bytes19}.

'enc_InfoRequestResponse'(Val) ->
Enc4@bitmap = extension_bitmap(Val, 10, 18),
Extensions = if Enc4@bitmap =:= 0 ->
[];
true ->
[<<7:7,Enc4@bitmap:8>>]
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(8, Val),
Enc3@element = element(9, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc6@element)
end
end,
align,
begin
Enc8@element = element(3, Val),
Enc8@element@sub = Enc8@element - 1,
if 0 =< Enc8@element@sub, Enc8@element@sub < 65535 ->
<<Enc8@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@element}}})
end
end,
begin
Enc10@element = element(4, Val),
enc_EndpointType(Enc10@element)
end,
begin
Enc11@element = element(5, Val),
Enc12@len = length(Enc11@element),
Enc12@bin = encode_chars_16bit(Enc11@element),
Enc12@len@sub = Enc12@len - 1,
if Enc12@len@sub bsr 7 =:= 0 ->
[<<Enc12@len@sub:7>>,
align|Enc12@bin]
end
end,
begin
Enc13@element = element(6, Val),
enc_TransportAddress(Enc13@element)
end,
begin
Enc14@element = element(7, Val),
enc_InfoRequestResponse_callSignalAddress(Enc14@element)
end,
begin
Enc15@element = element(8, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_InfoRequestResponse_endpointAlias(Enc15@element)
end
end,
begin
Enc17@element = element(9, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_InfoRequestResponse_perCallInfo(Enc17@element)
end
end,
Extensions,
begin
Enc19@element = element(10, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@output = enc_InfoRequestResponse_tokens(Enc19@element),
Enc20@bin = complete(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[align,
Enc20@len|Enc20@bin];
Enc20@len < 16384 ->
[align,
<<2:2,Enc20@len:14>>|Enc20@bin];
true ->
[align|encode_fragmented(Enc20@bin, 8)]
end
end
end
end,
begin
Enc22@element = element(11, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@output = enc_InfoRequestResponse_cryptoTokens(Enc22@element),
Enc23@bin = complete(Enc23@output),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len < 128 ->
[align,
Enc23@len|Enc23@bin];
Enc23@len < 16384 ->
[align,
<<2:2,Enc23@len:14>>|Enc23@bin];
true ->
[align|encode_fragmented(Enc23@bin, 8)]
end
end
end
end,
begin
Enc25@element = element(12, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@output = enc_ICV(Enc25@element),
Enc26@bin = complete(Enc26@output),
Enc26@len = byte_size(Enc26@bin),
if Enc26@len < 128 ->
[align,
Enc26@len|Enc26@bin];
Enc26@len < 16384 ->
[align,
<<2:2,Enc26@len:14>>|Enc26@bin];
true ->
[align|encode_fragmented(Enc26@bin, 8)]
end
end
end
end,
begin
Enc28@element = element(13, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc30@output = if Enc28@element =:= false ->
<<0:1,0:7>>;
Enc28@element =:= true ->
<<1:1,0:7>>
end,
Enc30@bin = Enc30@output,
[align,
1|Enc30@bin]
end
end
end,
begin
Enc32@element = element(14, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc33@output = enc_CallCapacity(Enc32@element),
Enc33@bin = complete(Enc33@output),
Enc33@len = byte_size(Enc33@bin),
if Enc33@len < 128 ->
[align,
Enc33@len|Enc33@bin];
Enc33@len < 16384 ->
[align,
<<2:2,Enc33@len:14>>|Enc33@bin];
true ->
[align|encode_fragmented(Enc33@bin, 8)]
end
end
end
end,
begin
Enc35@element = element(15, Val),
if Enc35@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc36@output = enc_InfoRequestResponseStatus(Enc35@element),
Enc36@bin = complete(Enc36@output),
Enc36@len = byte_size(Enc36@bin),
if Enc36@len < 128 ->
[align,
Enc36@len|Enc36@bin];
Enc36@len < 16384 ->
[align,
<<2:2,Enc36@len:14>>|Enc36@bin];
true ->
[align|encode_fragmented(Enc36@bin, 8)]
end
end
end
end,
begin
Enc38@element = element(16, Val),
if Enc38@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc40@output = if Enc38@element =:= false ->
<<0:1,0:7>>;
Enc38@element =:= true ->
<<1:1,0:7>>
end,
Enc40@bin = Enc40@output,
[align,
1|Enc40@bin]
end
end
end|begin
Enc42@element = element(17, Val),
if Enc42@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc43@output = enc_InfoRequestResponse_genericData(Enc42@element),
Enc43@bin = complete(Enc43@output),
Enc43@len = byte_size(Enc43@bin),
if Enc43@len < 128 ->
[align,
Enc43@len|Enc43@bin];
Enc43@len < 16384 ->
[align,
<<2:2,Enc43@len:14>>|Enc43@bin];
true ->
[align|encode_fragmented(Enc43@bin, 8)]
end
end
end
end].
'enc_InfoRequestResponse_callSignalAddress'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_TransportAddress(Comp) || Comp <- Val]].


dec_InfoRequestResponse_callSignalAddress(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components251(V1@V0, V1@Buf1, []).

'enc_InfoRequestResponse_endpointAlias'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_AliasAddress(Comp) || Comp <- Val]].


dec_InfoRequestResponse_endpointAlias(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components252(V1@V0, V1@Buf1, []).

'enc_InfoRequestResponse_perCallInfo'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_InfoRequestResponse_perCallInfo_SEQOF(Comp) || Comp <- Val]].

'enc_InfoRequestResponse_perCallInfo_SEQOF'(Val) ->
Enc6@bitmap = extension_bitmap(Val, 14, 22),
Extensions = if Enc6@bitmap =:= 0 ->
[];
true ->
[<<7:7,Enc6@bitmap:8>>]
end,
[begin
Enc1@element = element(2, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(5, Val),
Enc3@element = element(6, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(7, Val),
Enc5@element = element(8, Val),
if Enc4@element =:= asn1_NOVALUE ->
if Enc5@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc5@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@element = element(2, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc8@element)
end
end,
align,
begin
Enc10@element = element(3, Val),
if Enc10@element bsr 16 =:= 0 ->
<<Enc10@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end,
begin
Enc12@element = element(4, Val),
Enc13@len = byte_size(Enc12@element),
if Enc13@len =:= 16 ->
Enc12@element
end
end,
begin
Enc14@element = element(5, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
Enc14@element =:= false ->
<<0:1>>;
Enc14@element =:= true ->
<<1:1>>
end
end,
begin
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_InfoRequestResponse_perCallInfo_SEQOF_audio(Enc17@element)
end
end,
begin
Enc19@element = element(7, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
enc_InfoRequestResponse_perCallInfo_SEQOF_video(Enc19@element)
end
end,
begin
Enc21@element = element(8, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
enc_InfoRequestResponse_perCallInfo_SEQOF_data(Enc21@element)
end
end,
begin
Enc23@element = element(9, Val),
enc_TransportChannelInfo(Enc23@element)
end,
begin
Enc24@element = element(10, Val),
enc_TransportChannelInfo(Enc24@element)
end,
begin
Enc25@element = element(11, Val),
enc_CallType(Enc25@element)
end,
begin
Enc26@element = element(12, Val),
if Enc26@element bsr 32 =:= 0 ->
begin
Enc26@element@bin = binary:encode_unsigned(Enc26@element),
Enc26@element@bin_size0 = byte_size(Enc26@element@bin),
Enc26@element@bin_size = Enc26@element@bin_size0 - 1,
[<<Enc26@element@bin_size:2>>,
align|Enc26@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc26@element}}})
end
end,
begin
Enc28@element = element(13, Val),
enc_CallModel(Enc28@element)
end,
Extensions,
begin
Enc29@element = element(14, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc30@output = enc_CallIdentifier(Enc29@element),
Enc30@bin = complete(Enc30@output),
Enc30@len = byte_size(Enc30@bin),
if Enc30@len < 128 ->
[align,
Enc30@len|Enc30@bin];
Enc30@len < 16384 ->
[align,
<<2:2,Enc30@len:14>>|Enc30@bin];
true ->
[align|encode_fragmented(Enc30@bin, 8)]
end
end
end
end,
begin
Enc32@element = element(15, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc33@output = enc_InfoRequestResponse_perCallInfo_SEQOF_tokens(Enc32@element),
Enc33@bin = complete(Enc33@output),
Enc33@len = byte_size(Enc33@bin),
if Enc33@len < 128 ->
[align,
Enc33@len|Enc33@bin];
Enc33@len < 16384 ->
[align,
<<2:2,Enc33@len:14>>|Enc33@bin];
true ->
[align|encode_fragmented(Enc33@bin, 8)]
end
end
end
end,
begin
Enc35@element = element(16, Val),
if Enc35@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc36@output = enc_InfoRequestResponse_perCallInfo_SEQOF_cryptoTokens(Enc35@element),
Enc36@bin = complete(Enc36@output),
Enc36@len = byte_size(Enc36@bin),
if Enc36@len < 128 ->
[align,
Enc36@len|Enc36@bin];
Enc36@len < 16384 ->
[align,
<<2:2,Enc36@len:14>>|Enc36@bin];
true ->
[align|encode_fragmented(Enc36@bin, 8)]
end
end
end
end,
begin
Enc38@element = element(17, Val),
if Enc38@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc39@output = enc_InfoRequestResponse_perCallInfo_SEQOF_substituteConfIDs(Enc38@element),
Enc39@bin = complete(Enc39@output),
Enc39@len = byte_size(Enc39@bin),
if Enc39@len < 128 ->
[align,
Enc39@len|Enc39@bin];
Enc39@len < 16384 ->
[align,
<<2:2,Enc39@len:14>>|Enc39@bin];
true ->
[align|encode_fragmented(Enc39@bin, 8)]
end
end
end
end,
begin
Enc41@element = element(18, Val),
if Enc41@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc42@output = enc_InfoRequestResponse_perCallInfo_SEQOF_pdu(Enc41@element),
Enc42@bin = complete(Enc42@output),
Enc42@len = byte_size(Enc42@bin),
if Enc42@len < 128 ->
[align,
Enc42@len|Enc42@bin];
Enc42@len < 16384 ->
[align,
<<2:2,Enc42@len:14>>|Enc42@bin];
true ->
[align|encode_fragmented(Enc42@bin, 8)]
end
end
end
end,
begin
Enc44@element = element(19, Val),
if Enc44@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@output = enc_CallLinkage(Enc44@element),
Enc45@bin = complete(Enc45@output),
Enc45@len = byte_size(Enc45@bin),
if Enc45@len < 128 ->
[align,
Enc45@len|Enc45@bin];
Enc45@len < 16384 ->
[align,
<<2:2,Enc45@len:14>>|Enc45@bin];
true ->
[align|encode_fragmented(Enc45@bin, 8)]
end
end
end
end,
begin
Enc47@element = element(20, Val),
if Enc47@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc48@output = enc_RasUsageInformation(Enc47@element),
Enc48@bin = complete(Enc48@output),
Enc48@len = byte_size(Enc48@bin),
if Enc48@len < 128 ->
[align,
Enc48@len|Enc48@bin];
Enc48@len < 16384 ->
[align,
<<2:2,Enc48@len:14>>|Enc48@bin];
true ->
[align|encode_fragmented(Enc48@bin, 8)]
end
end
end
end|begin
Enc50@element = element(21, Val),
if Enc50@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc51@output = enc_CircuitInfo(Enc50@element),
Enc51@bin = complete(Enc51@output),
Enc51@len = byte_size(Enc51@bin),
if Enc51@len < 128 ->
[align,
Enc51@len|Enc51@bin];
Enc51@len < 16384 ->
[align,
<<2:2,Enc51@len:14>>|Enc51@bin];
true ->
[align|encode_fragmented(Enc51@bin, 8)]
end
end
end
end].
'enc_InfoRequestResponse_perCallInfo_SEQOF_audio'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_RTPSession(Comp) || Comp <- Val]].


dec_InfoRequestResponse_perCallInfo_SEQOF_audio(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components253(V1@V0, V1@Buf1, []).

'enc_InfoRequestResponse_perCallInfo_SEQOF_video'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_RTPSession(Comp) || Comp <- Val]].


dec_InfoRequestResponse_perCallInfo_SEQOF_video(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components254(V1@V0, V1@Buf1, []).

'enc_InfoRequestResponse_perCallInfo_SEQOF_data'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_TransportChannelInfo(Comp) || Comp <- Val]].


dec_InfoRequestResponse_perCallInfo_SEQOF_data(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components255(V1@V0, V1@Buf1, []).

'enc_InfoRequestResponse_perCallInfo_SEQOF_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_InfoRequestResponse_perCallInfo_SEQOF_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components256(V1@V0, V1@Buf1, []).

'enc_InfoRequestResponse_perCallInfo_SEQOF_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_InfoRequestResponse_perCallInfo_SEQOF_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components257(V1@V0, V1@Buf1, []).

'enc_InfoRequestResponse_perCallInfo_SEQOF_substituteConfIDs'(Val) ->
Enc2@len = length(Val),
[if Enc2@len < 128 ->
[align,
Enc2@len];
Enc2@len < 16384 ->
[align|<<2:2,Enc2@len:14>>]
end|[begin
Enc1@len = byte_size(Comp),
if Enc1@len =:= 16 ->
Comp
end
end || Comp <- Val]].


dec_InfoRequestResponse_perCallInfo_SEQOF_substituteConfIDs(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components258(V1@V0, V1@Buf1, []).

'enc_InfoRequestResponse_perCallInfo_SEQOF_pdu'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_InfoRequestResponse_perCallInfo_SEQOF_pdu_SEQOF(Comp) || Comp <- Val]].

'enc_InfoRequestResponse_perCallInfo_SEQOF_pdu_SEQOF'(Val) ->
[begin
Enc1@element = element(2, Val),
'enc_H323-UU-PDU'(Enc1@element)
end|begin
Enc2@element = element(3, Val),
if Enc2@element =:= false ->
<<0:1>>;
Enc2@element =:= true ->
<<1:1>>
end
end].

dec_InfoRequestResponse_perCallInfo_SEQOF_pdu_SEQOF(Bytes) ->

%% attribute number 1 with type H323-UU-PDU
{Term1,Bytes1} = 'dec_H323-UU-PDU'(Bytes),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes2} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes1,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end,
{{'InfoRequestResponse_perCallInfo_SEQOF_pdu_SEQOF',Term1,Term2},Bytes2}.


dec_InfoRequestResponse_perCallInfo_SEQOF_pdu(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components259(V1@V0, V1@Buf1, []).


dec_InfoRequestResponse_perCallInfo_SEQOF(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case (Opt bsr 4) band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
V3@Pad2 = bit_size(Bytes3) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
<<V4@V0:16/binary-unit:8,V4@Buf1/bitstring>> = Bytes4,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes5,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
'dec_InfoRequestResponse_perCallInfo_SEQOF_audio'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
'dec_InfoRequestResponse_perCallInfo_SEQOF_video'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes9} = case Opt band 1 of
1 ->
'dec_InfoRequestResponse_perCallInfo_SEQOF_data'(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type TransportChannelInfo
{Term8,Bytes10} = dec_TransportChannelInfo(Bytes9),

%% attribute number 9 with type TransportChannelInfo
{Term9,Bytes11} = dec_TransportChannelInfo(Bytes10),

%% attribute number 10 with type CallType
{Term10,Bytes12} = dec_CallType(Bytes11),

%% attribute number 11 with type INTEGER
{Term11,Bytes13} = begin
<<V6@V0:2/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes12,
V6@Add2 = V6@V0 + 1,
V6@Pad5 = bit_size(V6@Buf1) band 7,
<<_:V6@Pad5,V6@V3:V6@Add2/unsigned-unit:8,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V3,V6@Buf4}
end,

%% attribute number 12 with type CallModel
{Term12,Bytes14} = dec_CallModel(Bytes13),

%% Extensions
{Extensions,Bytes15} = case Ext of
0 -> {<<>>,Bytes14};
1 ->
{V7@V0,V7@Buf1} = case Bytes14 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,

%% attribute number 13 with type CallIdentifier
{Term13,Bytes16} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes15) band 7,
{V8@V0,V8@Buf1} = case Bytes15 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx13,_} = dec_CallIdentifier(V8@V0),
{TmpValx13,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type SEQUENCE OF
{Term14,Bytes17} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes16) band 7,
{V9@V0,V9@Buf1} = case Bytes16 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx14,_} = 'dec_InfoRequestResponse_perCallInfo_SEQOF_tokens'(V9@V0),
{TmpValx14,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type SEQUENCE OF
{Term15,Bytes18} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V10@Pad3 = bit_size(Bytes17) band 7,
{V10@V0,V10@Buf1} = case Bytes17 of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
{TmpValx15,_} = 'dec_InfoRequestResponse_perCallInfo_SEQOF_cryptoTokens'(V10@V0),
{TmpValx15,V10@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type SEQUENCE OF
{Term16,Bytes19} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes18) band 7,
{V11@V0,V11@Buf1} = case Bytes18 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx16,_} = 'dec_InfoRequestResponse_perCallInfo_SEQOF_substituteConfIDs'(V11@V0),
{TmpValx16,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute number 17 with type SEQUENCE OF
{Term17,Bytes20} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes19) band 7,
{V12@V0,V12@Buf1} = case Bytes19 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx17,_} = 'dec_InfoRequestResponse_perCallInfo_SEQOF_pdu'(V12@V0),
{TmpValx17,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute number 18 with type CallLinkage
{Term18,Bytes21} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes20) band 7,
{V13@V0,V13@Buf1} = case Bytes20 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx18,_} = dec_CallLinkage(V13@V0),
{TmpValx18,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute number 19 with type RasUsageInformation
{Term19,Bytes22} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V14@Pad3 = bit_size(Bytes21) band 7,
{V14@V0,V14@Buf1} = case Bytes21 of
<<_:V14@Pad3,0:1,V14@V5:7,V14@V7:V14@V5/binary-unit:8,V14@Buf8/bitstring>> ->
{V14@V7,V14@Buf8};
<<_:V14@Pad3,1:1,0:1,V14@V6:14,V14@V8:V14@V6/binary-unit:8,V14@Buf9/bitstring>> ->
{V14@V8,V14@Buf9};
<<_:V14@Pad3,1:1,1:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V8,V14@Buf9}  = decode_fragmented(V14@V6, V14@Buf7, 8),
{V14@V8,V14@Buf9}
end,
{TmpValx19,_} = dec_RasUsageInformation(V14@V0),
{TmpValx19,V14@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes21}
end,

%% attribute number 20 with type CircuitInfo
{Term20,Bytes23} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V15@Pad3 = bit_size(Bytes22) band 7,
{V15@V0,V15@Buf1} = case Bytes22 of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
{TmpValx20,_} = dec_CircuitInfo(V15@V0),
{TmpValx20,V15@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes22}
end,
Bytes24= skipextensions(Bytes23, 9, Extensions),
{{'InfoRequestResponse_perCallInfo_SEQOF',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20},Bytes24}.


dec_InfoRequestResponse_perCallInfo(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components260(V1@V0, V1@Buf1, []).

'enc_InfoRequestResponse_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_InfoRequestResponse_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components261(V1@V0, V1@Buf1, []).

'enc_InfoRequestResponse_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_InfoRequestResponse_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components262(V1@V0, V1@Buf1, []).

'enc_InfoRequestResponse_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_InfoRequestResponse_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components263(V1@V0, V1@Buf1, []).



dec_InfoRequestResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type NonStandardParameter
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
dec_NonStandardParameter(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
V3@Pad2 = bit_size(Bytes3) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes3,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 3 with type EndpointType
{Term3,Bytes5} = dec_EndpointType(Bytes4),

%% attribute number 4 with type BMPString
{Term4,Bytes6} = begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes5,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:16,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V7,V4@Buf8}  = {decode_chars_16bit(V4@V3),V4@Buf4},
{V4@V7,V4@Buf8}
end,

%% attribute number 5 with type TransportAddress
{Term5,Bytes7} = dec_TransportAddress(Bytes6),

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = 'dec_InfoRequestResponse_callSignalAddress'(Bytes7),

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes9} = case (Opt bsr 1) band 1 of
1 ->
'dec_InfoRequestResponse_endpointAlias'(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes10} = case Opt band 1 of
1 ->
'dec_InfoRequestResponse_perCallInfo'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V5@V0,V5@Buf1} = case Bytes10 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 9 with type SEQUENCE OF
{Term9,Bytes12} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes11) band 7,
{V6@V0,V6@Buf1} = case Bytes11 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx9,_} = 'dec_InfoRequestResponse_tokens'(V6@V0),
{TmpValx9,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes13} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes12) band 7,
{V7@V0,V7@Buf1} = case Bytes12 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx10,_} = 'dec_InfoRequestResponse_cryptoTokens'(V7@V0),
{TmpValx10,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type ICV
{Term11,Bytes14} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes13) band 7,
{V8@V0,V8@Buf1} = case Bytes13 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx11,_} = dec_ICV(V8@V0),
{TmpValx11,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute number 12 with type BOOLEAN
{Term12,Bytes15} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes14) band 7,
{V9@V0,V9@Buf1} = case Bytes14 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx12,_} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = V9@V0,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,
{TmpValx12,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 13 with type CallCapacity
{Term13,Bytes16} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V11@Pad3 = bit_size(Bytes15) band 7,
{V11@V0,V11@Buf1} = case Bytes15 of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
{TmpValx13,_} = dec_CallCapacity(V11@V0),
{TmpValx13,V11@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute number 14 with type InfoRequestResponseStatus
{Term14,Bytes17} = case Extensions of
  <<_:5,1:1,_/bitstring>> ->
begin
V12@Pad3 = bit_size(Bytes16) band 7,
{V12@V0,V12@Buf1} = case Bytes16 of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
{TmpValx14,_} = dec_InfoRequestResponseStatus(V12@V0),
{TmpValx14,V12@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute number 15 with type BOOLEAN
{Term15,Bytes18} = case Extensions of
  <<_:6,1:1,_/bitstring>> ->
begin
V13@Pad3 = bit_size(Bytes17) band 7,
{V13@V0,V13@Buf1} = case Bytes17 of
<<_:V13@Pad3,0:1,V13@V5:7,V13@V7:V13@V5/binary-unit:8,V13@Buf8/bitstring>> ->
{V13@V7,V13@Buf8};
<<_:V13@Pad3,1:1,0:1,V13@V6:14,V13@V8:V13@V6/binary-unit:8,V13@Buf9/bitstring>> ->
{V13@V8,V13@Buf9};
<<_:V13@Pad3,1:1,1:1,V13@V6:6,V13@Buf7/bitstring>> ->
{V13@V8,V13@Buf9}  = decode_fragmented(V13@V6, V13@Buf7, 8),
{V13@V8,V13@Buf9}
end,
{TmpValx15,_} = begin
<<V14@V0:1,V14@Buf1/bitstring>> = V13@V0,
V14@Int2 = case V14@V0 of
0 -> false;
1 -> true
end,
{V14@Int2,V14@Buf1}
end,
{TmpValx15,V13@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute number 16 with type SEQUENCE OF
{Term16,Bytes19} = case Extensions of
  <<_:7,1:1,_/bitstring>> ->
begin
V15@Pad3 = bit_size(Bytes18) band 7,
{V15@V0,V15@Buf1} = case Bytes18 of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
{TmpValx16,_} = 'dec_InfoRequestResponse_genericData'(V15@V0),
{TmpValx16,V15@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes18}
end,
Bytes20= skipextensions(Bytes19, 9, Extensions),
{{'InfoRequestResponse',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16},Bytes20}.

'enc_InfoRequestResponseStatus'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= complete ->
<<0:1,0:2>>;
ChoiceTag =:= incomplete ->
<<0:1,1:2>>;
ChoiceTag =:= segment ->
if ChoiceVal bsr 16 =:= 0 ->
[<<0:1,2:2>>,
align|<<ChoiceVal:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= invalidCall ->
<<0:1,3:2>>
end.


dec_InfoRequestResponseStatus(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{complete,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{incomplete,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
V4@Pad2 = bit_size(Bytes2) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes2,
{V4@V0,V4@Buf1}
end
end,
{{segment,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{invalidCall,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_InfoRequestAck'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc6@element = element(2, Val),
Enc6@element@sub = Enc6@element - 1,
if 0 =< Enc6@element@sub, Enc6@element@sub < 65535 ->
<<Enc6@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end,
begin
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc8@element)
end
end,
begin
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_InfoRequestAck_tokens(Enc10@element)
end
end,
begin
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_InfoRequestAck_cryptoTokens(Enc12@element)
end
end|begin
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_ICV(Enc14@element)
end
end].
'enc_InfoRequestAck_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_InfoRequestAck_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components264(V1@V0, V1@Buf1, []).

'enc_InfoRequestAck_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_InfoRequestAck_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components265(V1@V0, V1@Buf1, []).



dec_InfoRequestAck(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
dec_NonStandardParameter(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
'dec_InfoRequestAck_tokens'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
'dec_InfoRequestAck_cryptoTokens'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type ICV
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_ICV(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V4@V0,V4@Buf1} = case Bytes7 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'InfoRequestAck',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_InfoRequestNak'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
Enc4@element = element(7, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(8, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc7@element = element(2, Val),
Enc7@element@sub = Enc7@element - 1,
if 0 =< Enc7@element@sub, Enc7@element@sub < 65535 ->
<<Enc7@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc9@element)
end
end,
begin
Enc11@element = element(4, Val),
enc_InfoRequestNakReason(Enc11@element)
end,
begin
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_AltGKInfo(Enc12@element)
end
end,
begin
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_InfoRequestNak_tokens(Enc14@element)
end
end,
begin
Enc16@element = element(7, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
enc_InfoRequestNak_cryptoTokens(Enc16@element)
end
end|begin
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
enc_ICV(Enc18@element)
end
end].
'enc_InfoRequestNak_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_InfoRequestNak_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components266(V1@V0, V1@Buf1, []).

'enc_InfoRequestNak_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_InfoRequestNak_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components267(V1@V0, V1@Buf1, []).



dec_InfoRequestNak(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
dec_NonStandardParameter(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type InfoRequestNakReason
{Term3,Bytes5} = dec_InfoRequestNakReason(Bytes4),

%% attribute number 4 with type AltGKInfo
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
dec_AltGKInfo(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
'dec_InfoRequestNak_tokens'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
'dec_InfoRequestNak_cryptoTokens'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type ICV
{Term7,Bytes9} = case Opt band 1 of
1 ->
dec_ICV(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V4@V0,V4@Buf1} = case Bytes9 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
{{'InfoRequestNak',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_InfoRequestNakReason'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= notRegistered ->
<<0:1,0:2>>;
ChoiceTag =:= securityDenial ->
<<0:1,1:2>>;
ChoiceTag =:= undefinedReason ->
<<0:1,2:2>>;
ChoiceTag =:= securityError ->
begin
Enc4@output = enc_SecurityErrors2(ChoiceVal),
Enc4@bin = complete(Enc4@output),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[<<1:1,0:7>>,
align,
Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<1:1,0:7>>,
align,
<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
[<<1:1,0:7>>,
align|encode_fragmented(Enc4@bin, 8)]
end
end
end.


dec_InfoRequestNakReason(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{notRegistered,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{securityDenial,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefinedReason,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
0 ->
{Val,NewBytes} = begin
{TmpVal,_} = dec_SecurityErrors2(V2@V0),
{TmpVal,V2@Buf1}
end,
{{securityError,Val},NewBytes};
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_NonStandardMessage'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 4, 9),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<4:7,Enc1@bitmap:5>>
end,
[if Extensions =:= [] ->
<<0:1>>;
true ->
<<1:1>>
end,
align,
begin
Enc3@element = element(2, Val),
Enc3@element@sub = Enc3@element - 1,
if 0 =< Enc3@element@sub, Enc3@element@sub < 65535 ->
<<Enc3@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
begin
Enc5@element = element(3, Val),
enc_NonStandardParameter(Enc5@element)
end,
Extensions,
begin
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@output = enc_NonStandardMessage_tokens(Enc6@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[align,
Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[align,
<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
[align|encode_fragmented(Enc7@bin, 8)]
end
end
end
end,
begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@output = enc_NonStandardMessage_cryptoTokens(Enc9@element),
Enc10@bin = complete(Enc10@output),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[align,
Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[align,
<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
[align|encode_fragmented(Enc10@bin, 8)]
end
end
end
end,
begin
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@output = enc_ICV(Enc12@element),
Enc13@bin = complete(Enc13@output),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[align,
Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[align,
<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
[align|encode_fragmented(Enc13@bin, 8)]
end
end
end
end,
begin
Enc15@element = element(7, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = enc_FeatureSet(Enc15@element),
Enc16@bin = complete(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[align|encode_fragmented(Enc16@bin, 8)]
end
end
end
end|begin
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@output = enc_NonStandardMessage_genericData(Enc18@element),
Enc19@bin = complete(Enc19@output),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len < 128 ->
[align,
Enc19@len|Enc19@bin];
Enc19@len < 16384 ->
[align,
<<2:2,Enc19@len:14>>|Enc19@bin];
true ->
[align|encode_fragmented(Enc19@bin, 8)]
end
end
end
end].
'enc_NonStandardMessage_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_NonStandardMessage_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components268(V1@V0, V1@Buf1, []).

'enc_NonStandardMessage_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_NonStandardMessage_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components269(V1@V0, V1@Buf1, []).

'enc_NonStandardMessage_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_NonStandardMessage_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components270(V1@V0, V1@Buf1, []).



dec_NonStandardMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% attribute number 2 with type NonStandardParameter
{Term2,Bytes3} = dec_NonStandardParameter(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx3,_} = 'dec_NonStandardMessage_tokens'(V4@V0),
{TmpValx3,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes5) band 7,
{V5@V0,V5@Buf1} = case Bytes5 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx4,_} = 'dec_NonStandardMessage_cryptoTokens'(V5@V0),
{TmpValx4,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type ICV
{Term5,Bytes7} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes6) band 7,
{V6@V0,V6@Buf1} = case Bytes6 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx5,_} = dec_ICV(V6@V0),
{TmpValx5,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type FeatureSet
{Term6,Bytes8} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes7) band 7,
{V7@V0,V7@Buf1} = case Bytes7 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx6,_} = dec_FeatureSet(V7@V0),
{TmpValx6,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes9} = case Extensions of
  <<_:4,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes8) band 7,
{V8@V0,V8@Buf1} = case Bytes8 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx7,_} = 'dec_NonStandardMessage_genericData'(V8@V0),
{TmpValx7,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes8}
end,
Bytes10= skipextensions(Bytes9, 6, Extensions),
{{'NonStandardMessage',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes10}.

'enc_UnknownMessageResponse'(Val) ->
Enc1@bitmap = extension_bitmap(Val, 3, 7),
Extensions = if Enc1@bitmap =:= 0 ->
[];
true ->
<<3:7,Enc1@bitmap:4>>
end,
[if Extensions =:= [] ->
<<0:1>>;
true ->
<<1:1>>
end,
align,
begin
Enc3@element = element(2, Val),
Enc3@element@sub = Enc3@element - 1,
if 0 =< Enc3@element@sub, Enc3@element@sub < 65535 ->
<<Enc3@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
Extensions,
begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@output = enc_UnknownMessageResponse_tokens(Enc5@element),
Enc6@bin = complete(Enc6@output),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[align,
Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[align,
<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
[align|encode_fragmented(Enc6@bin, 8)]
end
end
end
end,
begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@output = enc_UnknownMessageResponse_cryptoTokens(Enc8@element),
Enc9@bin = complete(Enc9@output),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[align,
Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[align,
<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
[align|encode_fragmented(Enc9@bin, 8)]
end
end
end
end,
begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@output = enc_ICV(Enc11@element),
Enc12@bin = complete(Enc12@output),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[align,
Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[align,
<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
[align|encode_fragmented(Enc12@bin, 8)]
end
end
end
end|begin
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@output = begin
Enc15@len = byte_size(Enc14@element),
if Enc15@len < 128 ->
[Enc15@len|Enc14@element];
Enc15@len < 16384 ->
[<<2:2,Enc15@len:14>>|Enc14@element];
true ->
encode_fragmented(Enc14@element, 8)
end
end,
Enc16@bin = iolist_to_binary(Enc16@output),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[align,
Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[align,
<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
[align|encode_fragmented(Enc16@bin, 8)]
end
end
end
end].
'enc_UnknownMessageResponse_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_UnknownMessageResponse_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components271(V1@V0, V1@Buf1, []).

'enc_UnknownMessageResponse_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_UnknownMessageResponse_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components272(V1@V0, V1@Buf1, []).



dec_UnknownMessageResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add4 = V2@V0 + 1,
{V2@Add4,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:7,0:1,V3@V7:7,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<_:7,1:1,0:1,V3@V8:14,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V4@Pad3 = bit_size(Bytes3) band 7,
{V4@V0,V4@Buf1} = case Bytes3 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
{TmpValx2,_} = 'dec_UnknownMessageResponse_tokens'(V4@V0),
{TmpValx2,V4@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V5@Pad3 = bit_size(Bytes4) band 7,
{V5@V0,V5@Buf1} = case Bytes4 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
{TmpValx3,_} = 'dec_UnknownMessageResponse_cryptoTokens'(V5@V0),
{TmpValx3,V5@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type ICV
{Term4,Bytes6} = case Extensions of
  <<_:2,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes5) band 7,
{V6@V0,V6@Buf1} = case Bytes5 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx4,_} = dec_ICV(V6@V0),
{TmpValx4,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes7} = case Extensions of
  <<_:3,1:1,_/bitstring>> ->
begin
V7@Pad3 = bit_size(Bytes6) band 7,
{V7@V0,V7@Buf1} = case Bytes6 of
<<_:V7@Pad3,0:1,V7@V5:7,V7@V7:V7@V5/binary-unit:8,V7@Buf8/bitstring>> ->
{V7@V7,V7@Buf8};
<<_:V7@Pad3,1:1,0:1,V7@V6:14,V7@V8:V7@V6/binary-unit:8,V7@Buf9/bitstring>> ->
{V7@V8,V7@Buf9};
<<_:V7@Pad3,1:1,1:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V8,V7@Buf9}  = decode_fragmented(V7@V6, V7@Buf7, 8),
{V7@V8,V7@Buf9}
end,
{TmpValx5,_} = begin
V8@Pad3 = bit_size(V7@V0) band 7,
{V8@V0,V8@Buf1} = case V7@V0 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
V8@Conv10 = binary:copy(V8@V0),
{V8@Conv10,V8@Buf1}
end,
{TmpValx5,V7@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes6}
end,
Bytes8= skipextensions(Bytes7, 5, Extensions),
{{'UnknownMessageResponse',Term1,Term2,Term3,Term4,Term5},Bytes8}.

'enc_RequestInProgress'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc6@element = element(2, Val),
Enc6@element@sub = Enc6@element - 1,
if 0 =< Enc6@element@sub, Enc6@element@sub < 65535 ->
<<Enc6@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end,
begin
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc8@element)
end
end,
begin
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_RequestInProgress_tokens(Enc10@element)
end
end,
begin
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_RequestInProgress_cryptoTokens(Enc12@element)
end
end,
begin
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_ICV(Enc14@element)
end
end,
align|begin
Enc16@element = element(7, Val),
Enc16@element@sub = Enc16@element - 1,
if 0 =< Enc16@element@sub, Enc16@element@sub < 65535 ->
<<Enc16@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc16@element}}})
end
end].
'enc_RequestInProgress_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_RequestInProgress_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components273(V1@V0, V1@Buf1, []).

'enc_RequestInProgress_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_RequestInProgress_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components274(V1@V0, V1@Buf1, []).



dec_RequestInProgress(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
dec_NonStandardParameter(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
'dec_RequestInProgress_tokens'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
'dec_RequestInProgress_cryptoTokens'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type ICV
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_ICV(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = begin
V4@Pad2 = bit_size(Bytes7) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes7,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V5@V0,V5@Buf1} = case Bytes8 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:7,0:1,V5@V7:7,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<_:7,1:1,0:1,V5@V8:14,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'RequestInProgress',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_ResourcesAvailableIndicate'(Val) ->
Enc5@bitmap = extension_bitmap(Val, 11, 13),
Extensions = if Enc5@bitmap =:= 0 ->
[];
true ->
<<1:7,Enc5@bitmap:2>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(8, Val),
Enc3@element = element(9, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(10, Val),
if Enc4@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc7@element = element(2, Val),
Enc7@element@sub = Enc7@element - 1,
if 0 =< Enc7@element@sub, Enc7@element@sub < 65535 ->
<<Enc7@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc9@element = element(3, Val),
Enc10@bin = encode_oid(Enc9@element),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
encode_fragmented(Enc10@bin, 8)
end
end,
begin
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc11@element)
end
end,
begin
Enc13@element = element(5, Val),
Enc14@len = length(Enc13@element),
Enc14@bin = encode_chars_16bit(Enc13@element),
Enc14@len@sub = Enc14@len - 1,
if Enc14@len@sub bsr 7 =:= 0 ->
[<<Enc14@len@sub:7>>,
align|Enc14@bin]
end
end,
begin
Enc15@element = element(6, Val),
enc_ResourcesAvailableIndicate_protocols(Enc15@element)
end,
begin
Enc16@element = element(7, Val),
if Enc16@element =:= false ->
<<0:1>>;
Enc16@element =:= true ->
<<1:1>>
end
end,
begin
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
enc_ResourcesAvailableIndicate_tokens(Enc18@element)
end
end,
begin
Enc20@element = element(9, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
enc_ResourcesAvailableIndicate_cryptoTokens(Enc20@element)
end
end,
begin
Enc22@element = element(10, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
enc_ICV(Enc22@element)
end
end,
Extensions,
begin
Enc24@element = element(11, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc25@output = enc_CallCapacity(Enc24@element),
Enc25@bin = complete(Enc25@output),
Enc25@len = byte_size(Enc25@bin),
if Enc25@len < 128 ->
[align,
Enc25@len|Enc25@bin];
Enc25@len < 16384 ->
[align,
<<2:2,Enc25@len:14>>|Enc25@bin];
true ->
[align|encode_fragmented(Enc25@bin, 8)]
end
end
end
end|begin
Enc27@element = element(12, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc28@output = enc_ResourcesAvailableIndicate_genericData(Enc27@element),
Enc28@bin = complete(Enc28@output),
Enc28@len = byte_size(Enc28@bin),
if Enc28@len < 128 ->
[align,
Enc28@len|Enc28@bin];
Enc28@len < 16384 ->
[align,
<<2:2,Enc28@len:14>>|Enc28@bin];
true ->
[align|encode_fragmented(Enc28@bin, 8)]
end
end
end
end].
'enc_ResourcesAvailableIndicate_protocols'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_SupportedProtocols(Comp) || Comp <- Val]].


dec_ResourcesAvailableIndicate_protocols(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components275(V1@V0, V1@Buf1, []).

'enc_ResourcesAvailableIndicate_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_ResourcesAvailableIndicate_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components276(V1@V0, V1@Buf1, []).

'enc_ResourcesAvailableIndicate_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_ResourcesAvailableIndicate_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components277(V1@V0, V1@Buf1, []).

'enc_ResourcesAvailableIndicate_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_ResourcesAvailableIndicate_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components278(V1@V0, V1@Buf1, []).



dec_ResourcesAvailableIndicate(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type OBJECT IDENTIFIER
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:7,V4@Buf4/bitstring>> ->
{V4@V3,V4@Buf4};
<<1:1,0:1,V4@V4:14,V4@Buf5/bitstring>> ->
{V4@V4,V4@Buf5}
end,
<<V4@V6:V4@V0/binary-unit:8,V4@Buf7/bitstring>> = V4@Buf1,
V4@Conv8 = binary_to_list(V4@V6),
{V4@V9,V4@Buf10}  = {decode_oid(V4@Conv8),V4@Buf7},
{V4@V9,V4@Buf10}
end,

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type BMPString
{Term4,Bytes6} = begin
<<V5@V0:7/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes5,
V5@Add2 = V5@V0 + 1,
V5@Pad5 = bit_size(V5@Buf1) band 7,
<<_:V5@Pad5,V5@V3:V5@Add2/binary-unit:16,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V7,V5@Buf8}  = {decode_chars_16bit(V5@V3),V5@Buf4},
{V5@V7,V5@Buf8}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = 'dec_ResourcesAvailableIndicate_protocols'(Bytes6),

%% attribute number 6 with type BOOLEAN
{Term6,Bytes8} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes7,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes9} = case (Opt bsr 2) band 1 of
1 ->
'dec_ResourcesAvailableIndicate_tokens'(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes10} = case (Opt bsr 1) band 1 of
1 ->
'dec_ResourcesAvailableIndicate_cryptoTokens'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type ICV
{Term9,Bytes11} = case Opt band 1 of
1 ->
dec_ICV(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% Extensions
{Extensions,Bytes12} = case Ext of
0 -> {<<>>,Bytes11};
1 ->
{V7@V0,V7@Buf1} = case Bytes11 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,

%% attribute number 10 with type CallCapacity
{Term10,Bytes13} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V8@Pad3 = bit_size(Bytes12) band 7,
{V8@V0,V8@Buf1} = case Bytes12 of
<<_:V8@Pad3,0:1,V8@V5:7,V8@V7:V8@V5/binary-unit:8,V8@Buf8/bitstring>> ->
{V8@V7,V8@Buf8};
<<_:V8@Pad3,1:1,0:1,V8@V6:14,V8@V8:V8@V6/binary-unit:8,V8@Buf9/bitstring>> ->
{V8@V8,V8@Buf9};
<<_:V8@Pad3,1:1,1:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V8,V8@Buf9}  = decode_fragmented(V8@V6, V8@Buf7, 8),
{V8@V8,V8@Buf9}
end,
{TmpValx10,_} = dec_CallCapacity(V8@V0),
{TmpValx10,V8@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 11 with type SEQUENCE OF
{Term11,Bytes14} = case Extensions of
  <<_:1,1:1,_/bitstring>> ->
begin
V9@Pad3 = bit_size(Bytes13) band 7,
{V9@V0,V9@Buf1} = case Bytes13 of
<<_:V9@Pad3,0:1,V9@V5:7,V9@V7:V9@V5/binary-unit:8,V9@Buf8/bitstring>> ->
{V9@V7,V9@Buf8};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@V8:V9@V6/binary-unit:8,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<_:V9@Pad3,1:1,1:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V8,V9@Buf9}  = decode_fragmented(V9@V6, V9@Buf7, 8),
{V9@V8,V9@Buf9}
end,
{TmpValx11,_} = 'dec_ResourcesAvailableIndicate_genericData'(V9@V0),
{TmpValx11,V9@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes13}
end,
Bytes15= skipextensions(Bytes14, 3, Extensions),
{{'ResourcesAvailableIndicate',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},Bytes15}.

'enc_ResourcesAvailableConfirm'(Val) ->
Enc5@bitmap = extension_bitmap(Val, 8, 9),
Extensions = if Enc5@bitmap =:= 0 ->
[];
true ->
<<0:7,1:1>>
end,
[begin
Enc1@element = element(4, Val),
if Extensions =:= [] ->
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc1@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc2@element = element(5, Val),
Enc3@element = element(6, Val),
if Enc2@element =:= asn1_NOVALUE ->
if Enc3@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc3@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@element = element(7, Val),
if Enc4@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc7@element = element(2, Val),
Enc7@element@sub = Enc7@element - 1,
if 0 =< Enc7@element@sub, Enc7@element@sub < 65535 ->
<<Enc7@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc9@element = element(3, Val),
Enc10@bin = encode_oid(Enc9@element),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
encode_fragmented(Enc10@bin, 8)
end
end,
begin
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc11@element)
end
end,
begin
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_ResourcesAvailableConfirm_tokens(Enc13@element)
end
end,
begin
Enc15@element = element(6, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_ResourcesAvailableConfirm_cryptoTokens(Enc15@element)
end
end,
begin
Enc17@element = element(7, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_ICV(Enc17@element)
end
end,
Extensions|begin
Enc19@element = element(8, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@output = enc_ResourcesAvailableConfirm_genericData(Enc19@element),
Enc20@bin = complete(Enc20@output),
Enc20@len = byte_size(Enc20@bin),
if Enc20@len < 128 ->
[align,
Enc20@len|Enc20@bin];
Enc20@len < 16384 ->
[align,
<<2:2,Enc20@len:14>>|Enc20@bin];
true ->
[align|encode_fragmented(Enc20@bin, 8)]
end
end
end
end].
'enc_ResourcesAvailableConfirm_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_ResourcesAvailableConfirm_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components279(V1@V0, V1@Buf1, []).

'enc_ResourcesAvailableConfirm_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_ResourcesAvailableConfirm_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components280(V1@V0, V1@Buf1, []).

'enc_ResourcesAvailableConfirm_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_ResourcesAvailableConfirm_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components281(V1@V0, V1@Buf1, []).



dec_ResourcesAvailableConfirm(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type OBJECT IDENTIFIER
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:7,V4@Buf4/bitstring>> ->
{V4@V3,V4@Buf4};
<<1:1,0:1,V4@V4:14,V4@Buf5/bitstring>> ->
{V4@V4,V4@Buf5}
end,
<<V4@V6:V4@V0/binary-unit:8,V4@Buf7/bitstring>> = V4@Buf1,
V4@Conv8 = binary_to_list(V4@V6),
{V4@V9,V4@Buf10}  = {decode_oid(V4@Conv8),V4@Buf7},
{V4@V9,V4@Buf10}
end,

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
'dec_ResourcesAvailableConfirm_tokens'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
'dec_ResourcesAvailableConfirm_cryptoTokens'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type ICV
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_ICV(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V5@V0,V5@Buf1} = case Bytes8 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes10} = case Extensions of
  <<_:0,1:1,_/bitstring>> ->
begin
V6@Pad3 = bit_size(Bytes9) band 7,
{V6@V0,V6@Buf1} = case Bytes9 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
{TmpValx7,_} = 'dec_ResourcesAvailableConfirm_genericData'(V6@V0),
{TmpValx7,V6@Buf1}
end;
_  ->
{asn1_NOVALUE,Bytes9}
end,
Bytes11= skipextensions(Bytes10, 2, Extensions),
{{'ResourcesAvailableConfirm',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_ServiceControlIndication'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
Enc4@element = element(7, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(8, Val),
Enc6@element = element(9, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(10, Val),
Enc8@element = element(11, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
align,
begin
Enc10@element = element(2, Val),
Enc10@element@sub = Enc10@element - 1,
if 0 =< Enc10@element@sub, Enc10@element@sub < 65535 ->
<<Enc10@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end,
begin
Enc12@element = element(3, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc12@element)
end
end,
begin
Enc14@element = element(4, Val),
enc_ServiceControlIndication_serviceControl(Enc14@element)
end,
begin
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@len = length(Enc15@element),
Enc16@bin = encode_chars_16bit(Enc15@element),
Enc16@len@sub = Enc16@len - 1,
if Enc16@len@sub bsr 7 =:= 0 ->
[<<Enc16@len@sub:7>>,
align|Enc16@bin]
end
end
end
end,
begin
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
enc_ServiceControlIndication_callSpecific(Enc18@element)
end
end,
begin
Enc20@element = element(7, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
enc_ServiceControlIndication_tokens(Enc20@element)
end
end,
begin
Enc22@element = element(8, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
enc_ServiceControlIndication_cryptoTokens(Enc22@element)
end
end,
begin
Enc24@element = element(9, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
enc_ICV(Enc24@element)
end
end,
begin
Enc26@element = element(10, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
enc_FeatureSet(Enc26@element)
end
end|begin
Enc28@element = element(11, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
enc_ServiceControlIndication_genericData(Enc28@element)
end
end].
'enc_ServiceControlIndication_serviceControl'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_ServiceControlSession(Comp) || Comp <- Val]].


dec_ServiceControlIndication_serviceControl(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components282(V1@V0, V1@Buf1, []).

'enc_ServiceControlIndication_callSpecific'(Val) ->
[<<0:1>>,
begin
Enc2@element = element(2, Val),
enc_CallIdentifier(Enc2@element)
end,
align,
begin
Enc3@element = element(3, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 16 ->
Enc3@element
end
end|begin
Enc5@element = element(4, Val),
if Enc5@element =:= false ->
<<0:1>>;
Enc5@element =:= true ->
<<1:1>>
end
end].

dec_ServiceControlIndication_callSpecific(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CallIdentifier
{Term1,Bytes2} = dec_CallIdentifier(Bytes1),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:16/binary-unit:8,V2@Buf1/bitstring>> = Bytes2,
V2@Conv4 = binary:copy(V2@V0),
{V2@Conv4,V2@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes3,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:6,0:1,V4@V7:7,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<_:6,1:1,0:1,V4@V8:14,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'ServiceControlIndication_callSpecific',Term1,Term2,Term3},Bytes6}.

'enc_ServiceControlIndication_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_ServiceControlIndication_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components283(V1@V0, V1@Buf1, []).

'enc_ServiceControlIndication_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_ServiceControlIndication_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components284(V1@V0, V1@Buf1, []).

'enc_ServiceControlIndication_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_ServiceControlIndication_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components285(V1@V0, V1@Buf1, []).



dec_ServiceControlIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type NonStandardParameter
{Term2,Bytes4} = case (Opt bsr 7) band 1 of
1 ->
dec_NonStandardParameter(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = 'dec_ServiceControlIndication_serviceControl'(Bytes4),

%% attribute number 4 with type BMPString
{Term4,Bytes6} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes5,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/binary-unit:16,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V7,V4@Buf8}  = {decode_chars_16bit(V4@V3),V4@Buf4},
{V4@V7,V4@Buf8}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE
{Term5,Bytes7} = case (Opt bsr 5) band 1 of
1 ->
'dec_ServiceControlIndication_callSpecific'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case (Opt bsr 4) band 1 of
1 ->
'dec_ServiceControlIndication_tokens'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes9} = case (Opt bsr 3) band 1 of
1 ->
'dec_ServiceControlIndication_cryptoTokens'(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type ICV
{Term8,Bytes10} = case (Opt bsr 2) band 1 of
1 ->
dec_ICV(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type FeatureSet
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
dec_FeatureSet(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes12} = case Opt band 1 of
1 ->
'dec_ServiceControlIndication_genericData'(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V5@V0,V5@Buf1} = case Bytes12 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
{{'ServiceControlIndication',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},Bytes14}.

'enc_ServiceControlResponse'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
Enc6@element = element(8, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(9, Val),
if Enc7@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc9@element = element(2, Val),
Enc9@element@sub = Enc9@element - 1,
if 0 =< Enc9@element@sub, Enc9@element@sub < 65535 ->
<<Enc9@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@element}}})
end
end,
begin
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_ServiceControlResponse_result(Enc11@element)
end
end,
begin
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_NonStandardParameter(Enc13@element)
end
end,
begin
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_ServiceControlResponse_tokens(Enc15@element)
end
end,
begin
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_ServiceControlResponse_cryptoTokens(Enc17@element)
end
end,
begin
Enc19@element = element(7, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
enc_ICV(Enc19@element)
end
end,
begin
Enc21@element = element(8, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
enc_FeatureSet(Enc21@element)
end
end|begin
Enc23@element = element(9, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
enc_ServiceControlResponse_genericData(Enc23@element)
end
end].
'enc_ServiceControlResponse_result'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= started ->
<<0:1,0:3>>;
ChoiceTag =:= failed ->
<<0:1,1:3>>;
ChoiceTag =:= stopped ->
<<0:1,2:3>>;
ChoiceTag =:= notAvailable ->
<<0:1,3:3>>;
ChoiceTag =:= neededFeatureNotSupported ->
<<0:1,4:3>>
end.

dec_ServiceControlResponse_result(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{started,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{failed,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{stopped,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{notAvailable,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{neededFeatureNotSupported,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ServiceControlResponse_tokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|['H235-SECURITY-MESSAGES':enc_ClearToken(Comp) || Comp <- Val]].


dec_ServiceControlResponse_tokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components286(V1@V0, V1@Buf1, []).

'enc_ServiceControlResponse_cryptoTokens'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_CryptoH323Token(Comp) || Comp <- Val]].


dec_ServiceControlResponse_cryptoTokens(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components287(V1@V0, V1@Buf1, []).

'enc_ServiceControlResponse_genericData'(Val) ->
Enc1@len = length(Val),
[if Enc1@len < 128 ->
[align,
Enc1@len];
Enc1@len < 16384 ->
[align|<<2:2,Enc1@len:14>>]
end|[enc_GenericData(Comp) || Comp <- Val]].


dec_ServiceControlResponse_genericData(Bytes) ->
%% Length with constraint no
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7}
end,
dec_components288(V1@V0, V1@Buf1, []).



dec_ServiceControlResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add4 = V3@V0 + 1,
{V3@Add4,V3@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes4} = case (Opt bsr 6) band 1 of
1 ->
'dec_ServiceControlResponse_result'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type NonStandardParameter
{Term3,Bytes5} = case (Opt bsr 5) band 1 of
1 ->
dec_NonStandardParameter(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case (Opt bsr 4) band 1 of
1 ->
'dec_ServiceControlResponse_tokens'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case (Opt bsr 3) band 1 of
1 ->
'dec_ServiceControlResponse_cryptoTokens'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type ICV
{Term6,Bytes8} = case (Opt bsr 2) band 1 of
1 ->
dec_ICV(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type FeatureSet
{Term7,Bytes9} = case (Opt bsr 1) band 1 of
1 ->
dec_FeatureSet(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes10} = case Opt band 1 of
1 ->
'dec_ServiceControlResponse_genericData'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V4@V0,V4@Buf1} = case Bytes10 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes12= skipextensions(Bytes11, 1, Extensions),
{{'ServiceControlResponse',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes12}.


%%%
%%% Run-time functions.
%%%

dec_components1(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components1(Num, Bytes, Acc) ->
{Term,Remain} = begin
V5@Pad3 = bit_size(Bytes) band 7,
{V5@V0,V5@Buf1} = case Bytes of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
V5@Conv10 = binary:copy(V5@V0),
{V5@Conv10,V5@Buf1}
end,
dec_components1(Num-1, Remain, [Term|Acc]).

dec_components10(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components10(Num, Bytes, Acc) ->
{Term,Remain} = dec_ServiceControlSession(Bytes),
dec_components10(Num-1, Remain, [Term|Acc]).

dec_components100(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components100(Num, Bytes, Acc) ->
{Term,Remain} = dec_CallsAvailable(Bytes),
dec_components100(Num-1, Remain, [Term|Acc]).

dec_components101(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components101(Num, Bytes, Acc) ->
{Term,Remain} = dec_CallsAvailable(Bytes),
dec_components101(Num-1, Remain, [Term|Acc]).

dec_components102(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components102(Num, Bytes, Acc) ->
{Term,Remain} = dec_CallsAvailable(Bytes),
dec_components102(Num-1, Remain, [Term|Acc]).

dec_components103(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components103(Num, Bytes, Acc) ->
{Term,Remain} = dec_CallsAvailable(Bytes),
dec_components103(Num-1, Remain, [Term|Acc]).

dec_components104(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components104(Num, Bytes, Acc) ->
{Term,Remain} = dec_CallsAvailable(Bytes),
dec_components104(Num-1, Remain, [Term|Acc]).

dec_components105(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components105(Num, Bytes, Acc) ->
{Term,Remain} = dec_CallsAvailable(Bytes),
dec_components105(Num-1, Remain, [Term|Acc]).

dec_components106(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components106(Num, Bytes, Acc) ->
{Term,Remain} = dec_CallsAvailable(Bytes),
dec_components106(Num-1, Remain, [Term|Acc]).

dec_components107(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components107(Num, Bytes, Acc) ->
{Term,Remain} = dec_CallsAvailable(Bytes),
dec_components107(Num-1, Remain, [Term|Acc]).

dec_components108(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components108(Num, Bytes, Acc) ->
{Term,Remain} = dec_CallsAvailable(Bytes),
dec_components108(Num-1, Remain, [Term|Acc]).

dec_components109(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components109(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components109(Num-1, Remain, [Term|Acc]).

dec_components11(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components11(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components11(Num-1, Remain, [Term|Acc]).

dec_components110(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components110(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V6@V0:2/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes,
V6@Add2 = V6@V0 + 2,
V6@Pad5 = bit_size(V6@Buf1) band 7,
<<_:V6@Pad5,V6@V3:V6@Add2/binary-unit:8,V6@Buf4/bitstring>> = V6@Buf1,
V6@Conv7 = binary:copy(V6@V3),
{V6@Conv7,V6@Buf4}
end,
dec_components110(Num-1, Remain, [Term|Acc]).

dec_components111(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components111(Num, Bytes, Acc) ->
{Term,Remain} = begin
V7@Pad2 = bit_size(Bytes) band 7,
<<_:V7@Pad2,V7@V0:2/unsigned-unit:8,V7@Buf1/bitstring>> = Bytes,
{V7@V0,V7@Buf1}
end,
dec_components111(Num-1, Remain, [Term|Acc]).

dec_components112(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components112(Num, Bytes, Acc) ->
{Term,Remain} = dec_NonStandardParameter(Bytes),
dec_components112(Num-1, Remain, [Term|Acc]).

dec_components113(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components113(Num, Bytes, Acc) ->
{Term,Remain} = dec_NonStandardParameter(Bytes),
dec_components113(Num-1, Remain, [Term|Acc]).

dec_components114(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components114(Num, Bytes, Acc) ->
{Term,Remain} = dec_EnumeratedParameter(Bytes),
dec_components114(Num-1, Remain, [Term|Acc]).

dec_components115(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components115(Num, Bytes, Acc) ->
{Term,Remain} = dec_EnumeratedParameter(Bytes),
dec_components115(Num-1, Remain, [Term|Acc]).

dec_components116(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components116(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components116(Num-1, Remain, [Term|Acc]).

dec_components117(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components117(Num, Bytes, Acc) ->
{Term,Remain} = dec_FeatureDescriptor(Bytes),
dec_components117(Num-1, Remain, [Term|Acc]).

dec_components118(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components118(Num, Bytes, Acc) ->
{Term,Remain} = dec_FeatureDescriptor(Bytes),
dec_components118(Num-1, Remain, [Term|Acc]).

dec_components119(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components119(Num, Bytes, Acc) ->
{Term,Remain} = dec_FeatureDescriptor(Bytes),
dec_components119(Num-1, Remain, [Term|Acc]).

dec_components12(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components12(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components12(Num-1, Remain, [Term|Acc]).

dec_components120(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components120(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V8@V0:8/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes,
V8@Add2 = V8@V0 + 1,
{V8@Add2,V8@Buf1}
end,
dec_components120(Num-1, Remain, [Term|Acc]).

dec_components121(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components121(Num, Bytes, Acc) ->
{Term,Remain} = dec_AdmissionConfirm(Bytes),
dec_components121(Num-1, Remain, [Term|Acc]).

dec_components122(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components122(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components122(Num-1, Remain, [Term|Acc]).

dec_components123(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components123(Num, Bytes, Acc) ->
{Term,Remain} = dec_Endpoint(Bytes),
dec_components123(Num-1, Remain, [Term|Acc]).

dec_components124(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components124(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components124(Num-1, Remain, [Term|Acc]).

dec_components125(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components125(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components125(Num-1, Remain, [Term|Acc]).

dec_components126(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components126(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_AuthenticationMechanism(Bytes),
dec_components126(Num-1, Remain, [Term|Acc]).

dec_components127(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components127(Num, Bytes, Acc) ->
{Term,Remain} = begin
V9@Pad3 = bit_size(Bytes) band 7,
{V9@V0,V9@Buf1} = case Bytes of
<<_:V9@Pad3,0:1,V9@V5:7,V9@Buf6/bitstring>> ->
{V9@V5,V9@Buf6};
<<_:V9@Pad3,1:1,0:1,V9@V6:14,V9@Buf7/bitstring>> ->
{V9@V6,V9@Buf7}
end,
<<V9@V8:V9@V0/binary-unit:8,V9@Buf9/bitstring>> = V9@Buf1,
V9@Conv10 = binary_to_list(V9@V8),
{V9@V11,V9@Buf12}  = {decode_oid(V9@Conv10),V9@Buf9},
{V9@V11,V9@Buf12}
end,
dec_components127(Num-1, Remain, [Term|Acc]).

dec_components128(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components128(Num, Bytes, Acc) ->
{Term,Remain} = dec_IntegrityMechanism(Bytes),
dec_components128(Num-1, Remain, [Term|Acc]).

dec_components129(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components129(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components129(Num-1, Remain, [Term|Acc]).

dec_components13(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components13(Num, Bytes, Acc) ->
{Term,Remain} = begin
V10@Pad3 = bit_size(Bytes) band 7,
{V10@V0,V10@Buf1} = case Bytes of
<<_:V10@Pad3,0:1,V10@V5:7,V10@V7:V10@V5/binary-unit:8,V10@Buf8/bitstring>> ->
{V10@V7,V10@Buf8};
<<_:V10@Pad3,1:1,0:1,V10@V6:14,V10@V8:V10@V6/binary-unit:8,V10@Buf9/bitstring>> ->
{V10@V8,V10@Buf9};
<<_:V10@Pad3,1:1,1:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V8,V10@Buf9}  = decode_fragmented(V10@V6, V10@Buf7, 8),
{V10@V8,V10@Buf9}
end,
V10@Conv10 = binary:copy(V10@V0),
{V10@Conv10,V10@Buf1}
end,
dec_components13(Num-1, Remain, [Term|Acc]).

dec_components130(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components130(Num, Bytes, Acc) ->
{Term,Remain} = dec_AlternateGK(Bytes),
dec_components130(Num-1, Remain, [Term|Acc]).

dec_components131(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components131(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components131(Num-1, Remain, [Term|Acc]).

dec_components132(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components132(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components132(Num-1, Remain, [Term|Acc]).

dec_components133(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components133(Num, Bytes, Acc) ->
{Term,Remain} = dec_IntegrityMechanism(Bytes),
dec_components133(Num-1, Remain, [Term|Acc]).

dec_components134(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components134(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components134(Num-1, Remain, [Term|Acc]).

dec_components135(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components135(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components135(Num-1, Remain, [Term|Acc]).

dec_components136(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components136(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components136(Num-1, Remain, [Term|Acc]).

dec_components137(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components137(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components137(Num-1, Remain, [Term|Acc]).

dec_components138(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components138(Num, Bytes, Acc) ->
{Term,Remain} = dec_TransportAddress(Bytes),
dec_components138(Num-1, Remain, [Term|Acc]).

dec_components139(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components139(Num, Bytes, Acc) ->
{Term,Remain} = dec_TransportAddress(Bytes),
dec_components139(Num-1, Remain, [Term|Acc]).

dec_components14(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components14(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components14(Num-1, Remain, [Term|Acc]).

dec_components140(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components140(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components140(Num-1, Remain, [Term|Acc]).

dec_components141(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components141(Num, Bytes, Acc) ->
{Term,Remain} = dec_Endpoint(Bytes),
dec_components141(Num-1, Remain, [Term|Acc]).

dec_components142(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components142(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components142(Num-1, Remain, [Term|Acc]).

dec_components143(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components143(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components143(Num-1, Remain, [Term|Acc]).

dec_components144(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components144(Num, Bytes, Acc) ->
{Term,Remain} = dec_AddressPattern(Bytes),
dec_components144(Num-1, Remain, [Term|Acc]).

dec_components145(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components145(Num, Bytes, Acc) ->
{Term,Remain} = begin
V11@Pad3 = bit_size(Bytes) band 7,
{V11@V0,V11@Buf1} = case Bytes of
<<_:V11@Pad3,0:1,V11@V5:7,V11@V7:V11@V5/binary-unit:8,V11@Buf8/bitstring>> ->
{V11@V7,V11@Buf8};
<<_:V11@Pad3,1:1,0:1,V11@V6:14,V11@V8:V11@V6/binary-unit:8,V11@Buf9/bitstring>> ->
{V11@V8,V11@Buf9};
<<_:V11@Pad3,1:1,1:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V8,V11@Buf9}  = decode_fragmented(V11@V6, V11@Buf7, 8),
{V11@V8,V11@Buf9}
end,
V11@Conv10 = binary:copy(V11@V0),
{V11@Conv10,V11@Buf1}
end,
dec_components145(Num-1, Remain, [Term|Acc]).

dec_components146(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components146(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components146(Num-1, Remain, [Term|Acc]).

dec_components147(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components147(Num, Bytes, Acc) ->
{Term,Remain} = dec_TransportAddress(Bytes),
dec_components147(Num-1, Remain, [Term|Acc]).

dec_components148(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components148(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components148(Num-1, Remain, [Term|Acc]).

dec_components149(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components149(Num, Bytes, Acc) ->
{Term,Remain} = dec_AlternateGK(Bytes),
dec_components149(Num-1, Remain, [Term|Acc]).

dec_components15(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components15(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components15(Num-1, Remain, [Term|Acc]).

dec_components150(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components150(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components150(Num-1, Remain, [Term|Acc]).

dec_components151(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components151(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components151(Num-1, Remain, [Term|Acc]).

dec_components152(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components152(Num, Bytes, Acc) ->
{Term,Remain} = dec_ServiceControlSession(Bytes),
dec_components152(Num-1, Remain, [Term|Acc]).

dec_components153(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components153(Num, Bytes, Acc) ->
{Term,Remain} = dec_AddressPattern(Bytes),
dec_components153(Num-1, Remain, [Term|Acc]).

dec_components154(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components154(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedPrefix(Bytes),
dec_components154(Num-1, Remain, [Term|Acc]).

dec_components155(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components155(Num, Bytes, Acc) ->
{Term,Remain} = dec_RasUsageSpecification(Bytes),
dec_components155(Num-1, Remain, [Term|Acc]).

dec_components156(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components156(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components156(Num-1, Remain, [Term|Acc]).

dec_components157(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components157(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components157(Num-1, Remain, [Term|Acc]).

dec_components158(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components158(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components158(Num-1, Remain, [Term|Acc]).

dec_components159(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components159(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components159(Num-1, Remain, [Term|Acc]).

dec_components16(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components16(Num, Bytes, Acc) ->
{Term,Remain} = begin
V12@Pad3 = bit_size(Bytes) band 7,
{V12@V0,V12@Buf1} = case Bytes of
<<_:V12@Pad3,0:1,V12@V5:7,V12@V7:V12@V5/binary-unit:8,V12@Buf8/bitstring>> ->
{V12@V7,V12@Buf8};
<<_:V12@Pad3,1:1,0:1,V12@V6:14,V12@V8:V12@V6/binary-unit:8,V12@Buf9/bitstring>> ->
{V12@V8,V12@Buf9};
<<_:V12@Pad3,1:1,1:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V8,V12@Buf9}  = decode_fragmented(V12@V6, V12@Buf7, 8),
{V12@V8,V12@Buf9}
end,
V12@Conv10 = binary:copy(V12@V0),
{V12@Conv10,V12@Buf1}
end,
dec_components16(Num-1, Remain, [Term|Acc]).

dec_components160(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components160(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components160(Num-1, Remain, [Term|Acc]).

dec_components161(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components161(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components161(Num-1, Remain, [Term|Acc]).

dec_components162(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components162(Num, Bytes, Acc) ->
{Term,Remain} = dec_AddressPattern(Bytes),
dec_components162(Num-1, Remain, [Term|Acc]).

dec_components163(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components163(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedPrefix(Bytes),
dec_components163(Num-1, Remain, [Term|Acc]).

dec_components164(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components164(Num, Bytes, Acc) ->
{Term,Remain} = dec_TransportAddress(Bytes),
dec_components164(Num-1, Remain, [Term|Acc]).

dec_components165(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components165(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components165(Num-1, Remain, [Term|Acc]).

dec_components166(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components166(Num, Bytes, Acc) ->
{Term,Remain} = dec_Endpoint(Bytes),
dec_components166(Num-1, Remain, [Term|Acc]).

dec_components167(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components167(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components167(Num-1, Remain, [Term|Acc]).

dec_components168(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components168(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components168(Num-1, Remain, [Term|Acc]).

dec_components169(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components169(Num, Bytes, Acc) ->
{Term,Remain} = dec_AddressPattern(Bytes),
dec_components169(Num-1, Remain, [Term|Acc]).

dec_components17(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components17(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V13@V0:5/unsigned-unit:1,V13@Buf1/bitstring>> = Bytes,
V13@Add2 = V13@V0 + 1,
V13@Pad5 = bit_size(V13@Buf1) band 7,
<<_:V13@Pad5,V13@V3:V13@Add2/binary-unit:8,V13@Buf4/bitstring>> = V13@Buf1,
V13@Conv7 = binary_to_list(V13@V3),
{V13@Conv7,V13@Buf4}
end,
dec_components17(Num-1, Remain, [Term|Acc]).

dec_components170(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components170(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedPrefix(Bytes),
dec_components170(Num-1, Remain, [Term|Acc]).

dec_components171(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components171(Num, Bytes, Acc) ->
{Term,Remain} = dec_AlternateGK(Bytes),
dec_components171(Num-1, Remain, [Term|Acc]).

dec_components172(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components172(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components172(Num-1, Remain, [Term|Acc]).

dec_components173(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components173(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components173(Num-1, Remain, [Term|Acc]).

dec_components174(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components174(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components174(Num-1, Remain, [Term|Acc]).

dec_components175(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components175(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components175(Num-1, Remain, [Term|Acc]).

dec_components176(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components176(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components176(Num-1, Remain, [Term|Acc]).

dec_components177(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components177(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components177(Num-1, Remain, [Term|Acc]).

dec_components178(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components178(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components178(Num-1, Remain, [Term|Acc]).

dec_components179(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components179(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components179(Num-1, Remain, [Term|Acc]).

dec_components18(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components18(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components18(Num-1, Remain, [Term|Acc]).

dec_components180(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components180(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components180(Num-1, Remain, [Term|Acc]).

dec_components181(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components181(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components181(Num-1, Remain, [Term|Acc]).

dec_components182(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components182(Num, Bytes, Acc) ->
{Term,Remain} = dec_Endpoint(Bytes),
dec_components182(Num-1, Remain, [Term|Acc]).

dec_components183(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components183(Num, Bytes, Acc) ->
{Term,Remain} = dec_Endpoint(Bytes),
dec_components183(Num-1, Remain, [Term|Acc]).

dec_components184(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components184(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components184(Num-1, Remain, [Term|Acc]).

dec_components185(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components185(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components185(Num-1, Remain, [Term|Acc]).

dec_components186(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components186(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedProtocols(Bytes),
dec_components186(Num-1, Remain, [Term|Acc]).

dec_components187(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components187(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components187(Num-1, Remain, [Term|Acc]).

dec_components188(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components188(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components188(Num-1, Remain, [Term|Acc]).

dec_components189(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components189(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components189(Num-1, Remain, [Term|Acc]).

dec_components19(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components19(Num, Bytes, Acc) ->
{Term,Remain} = dec_ServiceControlSession(Bytes),
dec_components19(Num-1, Remain, [Term|Acc]).

dec_components190(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components190(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components190(Num-1, Remain, [Term|Acc]).

dec_components191(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components191(Num, Bytes, Acc) ->
{Term,Remain} = dec_Endpoint(Bytes),
dec_components191(Num-1, Remain, [Term|Acc]).

dec_components192(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components192(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components192(Num-1, Remain, [Term|Acc]).

dec_components193(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components193(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components193(Num-1, Remain, [Term|Acc]).

dec_components194(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components194(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V14@V0:5/unsigned-unit:1,V14@Buf1/bitstring>> = Bytes,
V14@Add2 = V14@V0 + 1,
V14@Pad5 = bit_size(V14@Buf1) band 7,
<<_:V14@Pad5,V14@V3:V14@Add2/binary-unit:8,V14@Buf4/bitstring>> = V14@Buf1,
V14@Conv7 = binary_to_list(V14@V3),
{V14@Conv7,V14@Buf4}
end,
dec_components194(Num-1, Remain, [Term|Acc]).

dec_components195(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components195(Num, Bytes, Acc) ->
{Term,Remain} = dec_RasUsageSpecification(Bytes),
dec_components195(Num-1, Remain, [Term|Acc]).

dec_components196(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components196(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedProtocols(Bytes),
dec_components196(Num-1, Remain, [Term|Acc]).

dec_components197(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components197(Num, Bytes, Acc) ->
{Term,Remain} = dec_ServiceControlSession(Bytes),
dec_components197(Num-1, Remain, [Term|Acc]).

dec_components198(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components198(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components198(Num-1, Remain, [Term|Acc]).

dec_components199(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components199(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components199(Num-1, Remain, [Term|Acc]).

dec_components2(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components2(Num, Bytes, Acc) ->
{Term,Remain} = begin
V15@Pad3 = bit_size(Bytes) band 7,
{V15@V0,V15@Buf1} = case Bytes of
<<_:V15@Pad3,0:1,V15@V5:7,V15@V7:V15@V5/binary-unit:8,V15@Buf8/bitstring>> ->
{V15@V7,V15@Buf8};
<<_:V15@Pad3,1:1,0:1,V15@V6:14,V15@V8:V15@V6/binary-unit:8,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<_:V15@Pad3,1:1,1:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V8,V15@Buf9}  = decode_fragmented(V15@V6, V15@Buf7, 8),
{V15@V8,V15@Buf9}
end,
V15@Conv10 = binary:copy(V15@V0),
{V15@Conv10,V15@Buf1}
end,
dec_components2(Num-1, Remain, [Term|Acc]).

dec_components20(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components20(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components20(Num-1, Remain, [Term|Acc]).

dec_components200(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components200(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components200(Num-1, Remain, [Term|Acc]).

dec_components201(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components201(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components201(Num-1, Remain, [Term|Acc]).

dec_components202(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components202(Num, Bytes, Acc) ->
{Term,Remain} = dec_TransportAddress(Bytes),
dec_components202(Num-1, Remain, [Term|Acc]).

dec_components203(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components203(Num, Bytes, Acc) ->
{Term,Remain} = dec_ServiceControlSession(Bytes),
dec_components203(Num-1, Remain, [Term|Acc]).

dec_components204(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components204(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components204(Num-1, Remain, [Term|Acc]).

dec_components205(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components205(Num, Bytes, Acc) ->
{Term,Remain} = dec_PartyNumber(Bytes),
dec_components205(Num-1, Remain, [Term|Acc]).

dec_components206(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components206(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components206(Num-1, Remain, [Term|Acc]).

dec_components207(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components207(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components207(Num-1, Remain, [Term|Acc]).

dec_components208(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components208(Num, Bytes, Acc) ->
{Term,Remain} = dec_BandwidthDetails(Bytes),
dec_components208(Num-1, Remain, [Term|Acc]).

dec_components209(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components209(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components209(Num-1, Remain, [Term|Acc]).

dec_components21(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components21(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components21(Num-1, Remain, [Term|Acc]).

dec_components210(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components210(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components210(Num-1, Remain, [Term|Acc]).

dec_components211(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components211(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components211(Num-1, Remain, [Term|Acc]).

dec_components212(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components212(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components212(Num-1, Remain, [Term|Acc]).

dec_components213(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components213(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components213(Num-1, Remain, [Term|Acc]).

dec_components214(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components214(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components214(Num-1, Remain, [Term|Acc]).

dec_components215(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components215(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components215(Num-1, Remain, [Term|Acc]).

dec_components216(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components216(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components216(Num-1, Remain, [Term|Acc]).

dec_components217(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components217(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components217(Num-1, Remain, [Term|Acc]).

dec_components218(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components218(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components218(Num-1, Remain, [Term|Acc]).

dec_components219(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components219(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components219(Num-1, Remain, [Term|Acc]).

dec_components22(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components22(Num, Bytes, Acc) ->
{Term,Remain} = begin
V16@Pad3 = bit_size(Bytes) band 7,
{V16@V0,V16@Buf1} = case Bytes of
<<_:V16@Pad3,0:1,V16@V5:7,V16@V7:V16@V5/binary-unit:8,V16@Buf8/bitstring>> ->
{V16@V7,V16@Buf8};
<<_:V16@Pad3,1:1,0:1,V16@V6:14,V16@V8:V16@V6/binary-unit:8,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<_:V16@Pad3,1:1,1:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V8,V16@Buf9}  = decode_fragmented(V16@V6, V16@Buf7, 8),
{V16@V8,V16@Buf9}
end,
V16@Conv10 = binary:copy(V16@V0),
{V16@Conv10,V16@Buf1}
end,
dec_components22(Num-1, Remain, [Term|Acc]).

dec_components220(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components220(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedProtocols(Bytes),
dec_components220(Num-1, Remain, [Term|Acc]).

dec_components221(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components221(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components221(Num-1, Remain, [Term|Acc]).

dec_components222(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components222(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components222(Num-1, Remain, [Term|Acc]).

dec_components223(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components223(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components223(Num-1, Remain, [Term|Acc]).

dec_components224(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components224(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components224(Num-1, Remain, [Term|Acc]).

dec_components225(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components225(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components225(Num-1, Remain, [Term|Acc]).

dec_components226(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components226(Num, Bytes, Acc) ->
{Term,Remain} = dec_Endpoint(Bytes),
dec_components226(Num-1, Remain, [Term|Acc]).

dec_components227(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components227(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components227(Num-1, Remain, [Term|Acc]).

dec_components228(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components228(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components228(Num-1, Remain, [Term|Acc]).

dec_components229(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components229(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedProtocols(Bytes),
dec_components229(Num-1, Remain, [Term|Acc]).

dec_components23(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components23(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components23(Num-1, Remain, [Term|Acc]).

dec_components230(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components230(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components230(Num-1, Remain, [Term|Acc]).

dec_components231(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components231(Num, Bytes, Acc) ->
{Term,Remain} = dec_ServiceControlSession(Bytes),
dec_components231(Num-1, Remain, [Term|Acc]).

dec_components232(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components232(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components232(Num-1, Remain, [Term|Acc]).

dec_components233(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components233(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components233(Num-1, Remain, [Term|Acc]).

dec_components234(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components234(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components234(Num-1, Remain, [Term|Acc]).

dec_components235(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components235(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components235(Num-1, Remain, [Term|Acc]).

dec_components236(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components236(Num, Bytes, Acc) ->
{Term,Remain} = dec_ServiceControlSession(Bytes),
dec_components236(Num-1, Remain, [Term|Acc]).

dec_components237(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components237(Num, Bytes, Acc) ->
{Term,Remain} = dec_PartyNumber(Bytes),
dec_components237(Num-1, Remain, [Term|Acc]).

dec_components238(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components238(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components238(Num-1, Remain, [Term|Acc]).

dec_components239(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components239(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components239(Num-1, Remain, [Term|Acc]).

dec_components24(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components24(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components24(Num-1, Remain, [Term|Acc]).

dec_components240(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components240(Num, Bytes, Acc) ->
{Term,Remain} = dec_ServiceControlSession(Bytes),
dec_components240(Num-1, Remain, [Term|Acc]).

dec_components241(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components241(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components241(Num-1, Remain, [Term|Acc]).

dec_components242(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components242(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components242(Num-1, Remain, [Term|Acc]).

dec_components243(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components243(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components243(Num-1, Remain, [Term|Acc]).

dec_components244(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components244(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components244(Num-1, Remain, [Term|Acc]).

dec_components245(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components245(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components245(Num-1, Remain, [Term|Acc]).

dec_components246(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components246(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components246(Num-1, Remain, [Term|Acc]).

dec_components247(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components247(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components247(Num-1, Remain, [Term|Acc]).

dec_components248(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components248(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components248(Num-1, Remain, [Term|Acc]).

dec_components249(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components249(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components249(Num-1, Remain, [Term|Acc]).

dec_components25(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components25(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components25(Num-1, Remain, [Term|Acc]).

dec_components250(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components250(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components250(Num-1, Remain, [Term|Acc]).

dec_components251(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components251(Num, Bytes, Acc) ->
{Term,Remain} = dec_TransportAddress(Bytes),
dec_components251(Num-1, Remain, [Term|Acc]).

dec_components252(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components252(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components252(Num-1, Remain, [Term|Acc]).

dec_components253(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components253(Num, Bytes, Acc) ->
{Term,Remain} = dec_RTPSession(Bytes),
dec_components253(Num-1, Remain, [Term|Acc]).

dec_components254(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components254(Num, Bytes, Acc) ->
{Term,Remain} = dec_RTPSession(Bytes),
dec_components254(Num-1, Remain, [Term|Acc]).

dec_components255(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components255(Num, Bytes, Acc) ->
{Term,Remain} = dec_TransportChannelInfo(Bytes),
dec_components255(Num-1, Remain, [Term|Acc]).

dec_components256(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components256(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components256(Num-1, Remain, [Term|Acc]).

dec_components257(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components257(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components257(Num-1, Remain, [Term|Acc]).

dec_components258(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components258(Num, Bytes, Acc) ->
{Term,Remain} = begin
V17@Pad2 = bit_size(Bytes) band 7,
<<_:V17@Pad2,V17@V0:16/binary-unit:8,V17@Buf1/bitstring>> = Bytes,
V17@Conv4 = binary:copy(V17@V0),
{V17@Conv4,V17@Buf1}
end,
dec_components258(Num-1, Remain, [Term|Acc]).

dec_components259(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components259(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_InfoRequestResponse_perCallInfo_SEQOF_pdu_SEQOF'(Bytes),
dec_components259(Num-1, Remain, [Term|Acc]).

dec_components26(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components26(Num, Bytes, Acc) ->
{Term,Remain} = dec_ServiceControlSession(Bytes),
dec_components26(Num-1, Remain, [Term|Acc]).

dec_components260(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components260(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_InfoRequestResponse_perCallInfo_SEQOF'(Bytes),
dec_components260(Num-1, Remain, [Term|Acc]).

dec_components261(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components261(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components261(Num-1, Remain, [Term|Acc]).

dec_components262(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components262(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components262(Num-1, Remain, [Term|Acc]).

dec_components263(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components263(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components263(Num-1, Remain, [Term|Acc]).

dec_components264(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components264(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components264(Num-1, Remain, [Term|Acc]).

dec_components265(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components265(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components265(Num-1, Remain, [Term|Acc]).

dec_components266(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components266(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components266(Num-1, Remain, [Term|Acc]).

dec_components267(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components267(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components267(Num-1, Remain, [Term|Acc]).

dec_components268(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components268(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components268(Num-1, Remain, [Term|Acc]).

dec_components269(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components269(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components269(Num-1, Remain, [Term|Acc]).

dec_components27(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components27(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components27(Num-1, Remain, [Term|Acc]).

dec_components270(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components270(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components270(Num-1, Remain, [Term|Acc]).

dec_components271(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components271(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components271(Num-1, Remain, [Term|Acc]).

dec_components272(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components272(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components272(Num-1, Remain, [Term|Acc]).

dec_components273(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components273(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components273(Num-1, Remain, [Term|Acc]).

dec_components274(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components274(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components274(Num-1, Remain, [Term|Acc]).

dec_components275(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components275(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedProtocols(Bytes),
dec_components275(Num-1, Remain, [Term|Acc]).

dec_components276(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components276(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components276(Num-1, Remain, [Term|Acc]).

dec_components277(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components277(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components277(Num-1, Remain, [Term|Acc]).

dec_components278(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components278(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components278(Num-1, Remain, [Term|Acc]).

dec_components279(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components279(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components279(Num-1, Remain, [Term|Acc]).

dec_components28(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components28(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components28(Num-1, Remain, [Term|Acc]).

dec_components280(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components280(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components280(Num-1, Remain, [Term|Acc]).

dec_components281(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components281(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components281(Num-1, Remain, [Term|Acc]).

dec_components282(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components282(Num, Bytes, Acc) ->
{Term,Remain} = dec_ServiceControlSession(Bytes),
dec_components282(Num-1, Remain, [Term|Acc]).

dec_components283(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components283(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components283(Num-1, Remain, [Term|Acc]).

dec_components284(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components284(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components284(Num-1, Remain, [Term|Acc]).

dec_components285(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components285(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components285(Num-1, Remain, [Term|Acc]).

dec_components286(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components286(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components286(Num-1, Remain, [Term|Acc]).

dec_components287(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components287(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components287(Num-1, Remain, [Term|Acc]).

dec_components288(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components288(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components288(Num-1, Remain, [Term|Acc]).

dec_components29(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components29(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components29(Num-1, Remain, [Term|Acc]).

dec_components3(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components3(Num, Bytes, Acc) ->
{Term,Remain} = dec_NonStandardParameter(Bytes),
dec_components3(Num-1, Remain, [Term|Acc]).

dec_components30(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components30(Num, Bytes, Acc) ->
{Term,Remain} = begin
V18@Pad2 = bit_size(Bytes) band 7,
<<_:V18@Pad2,V18@V0:2/unsigned-unit:8,V18@Buf1/bitstring>> = Bytes,
{V18@V0,V18@Buf1}
end,
dec_components30(Num-1, Remain, [Term|Acc]).

dec_components31(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components31(Num, Bytes, Acc) ->
{Term,Remain} = dec_H245Security(Bytes),
dec_components31(Num-1, Remain, [Term|Acc]).

dec_components32(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components32(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components32(Num-1, Remain, [Term|Acc]).

dec_components33(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components33(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components33(Num-1, Remain, [Term|Acc]).

dec_components34(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components34(Num, Bytes, Acc) ->
{Term,Remain} = begin
V19@Pad3 = bit_size(Bytes) band 7,
{V19@V0,V19@Buf1} = case Bytes of
<<_:V19@Pad3,0:1,V19@V5:7,V19@V7:V19@V5/binary-unit:8,V19@Buf8/bitstring>> ->
{V19@V7,V19@Buf8};
<<_:V19@Pad3,1:1,0:1,V19@V6:14,V19@V8:V19@V6/binary-unit:8,V19@Buf9/bitstring>> ->
{V19@V8,V19@Buf9};
<<_:V19@Pad3,1:1,1:1,V19@V6:6,V19@Buf7/bitstring>> ->
{V19@V8,V19@Buf9}  = decode_fragmented(V19@V6, V19@Buf7, 8),
{V19@V8,V19@Buf9}
end,
V19@Conv10 = binary:copy(V19@V0),
{V19@Conv10,V19@Buf1}
end,
dec_components34(Num-1, Remain, [Term|Acc]).

dec_components35(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components35(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V20@V0:5/unsigned-unit:1,V20@Buf1/bitstring>> = Bytes,
V20@Add2 = V20@V0 + 1,
V20@Pad5 = bit_size(V20@Buf1) band 7,
<<_:V20@Pad5,V20@V3:V20@Add2/binary-unit:8,V20@Buf4/bitstring>> = V20@Buf1,
V20@Conv7 = binary_to_list(V20@V3),
{V20@Conv7,V20@Buf4}
end,
dec_components35(Num-1, Remain, [Term|Acc]).

dec_components36(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components36(Num, Bytes, Acc) ->
{Term,Remain} = dec_ServiceControlSession(Bytes),
dec_components36(Num-1, Remain, [Term|Acc]).

dec_components37(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components37(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedProtocols(Bytes),
dec_components37(Num-1, Remain, [Term|Acc]).

dec_components38(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components38(Num, Bytes, Acc) ->
{Term,Remain} = dec_FeatureDescriptor(Bytes),
dec_components38(Num-1, Remain, [Term|Acc]).

dec_components39(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components39(Num, Bytes, Acc) ->
{Term,Remain} = dec_FeatureDescriptor(Bytes),
dec_components39(Num-1, Remain, [Term|Acc]).

dec_components4(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components4(Num, Bytes, Acc) ->
{Term,Remain} = begin
V21@Pad3 = bit_size(Bytes) band 7,
{V21@V0,V21@Buf1} = case Bytes of
<<_:V21@Pad3,0:1,V21@V5:7,V21@V7:V21@V5/binary-unit:8,V21@Buf8/bitstring>> ->
{V21@V7,V21@Buf8};
<<_:V21@Pad3,1:1,0:1,V21@V6:14,V21@V8:V21@V6/binary-unit:8,V21@Buf9/bitstring>> ->
{V21@V8,V21@Buf9};
<<_:V21@Pad3,1:1,1:1,V21@V6:6,V21@Buf7/bitstring>> ->
{V21@V8,V21@Buf9}  = decode_fragmented(V21@V6, V21@Buf7, 8),
{V21@V8,V21@Buf9}
end,
V21@Conv10 = binary:copy(V21@V0),
{V21@Conv10,V21@Buf1}
end,
dec_components4(Num-1, Remain, [Term|Acc]).

dec_components40(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components40(Num, Bytes, Acc) ->
{Term,Remain} = dec_FeatureDescriptor(Bytes),
dec_components40(Num-1, Remain, [Term|Acc]).

dec_components41(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components41(Num, Bytes, Acc) ->
{Term,Remain} = begin
V22@Pad3 = bit_size(Bytes) band 7,
{V22@V0,V22@Buf1} = case Bytes of
<<_:V22@Pad3,0:1,V22@V5:7,V22@V7:V22@V5/binary-unit:8,V22@Buf8/bitstring>> ->
{V22@V7,V22@Buf8};
<<_:V22@Pad3,1:1,0:1,V22@V6:14,V22@V8:V22@V6/binary-unit:8,V22@Buf9/bitstring>> ->
{V22@V8,V22@Buf9};
<<_:V22@Pad3,1:1,1:1,V22@V6:6,V22@Buf7/bitstring>> ->
{V22@V8,V22@Buf9}  = decode_fragmented(V22@V6, V22@Buf7, 8),
{V22@V8,V22@Buf9}
end,
V22@Conv10 = binary:copy(V22@V0),
{V22@Conv10,V22@Buf1}
end,
dec_components41(Num-1, Remain, [Term|Acc]).

dec_components42(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components42(Num, Bytes, Acc) ->
{Term,Remain} = dec_ExtendedAliasAddress(Bytes),
dec_components42(Num-1, Remain, [Term|Acc]).

dec_components43(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components43(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components43(Num-1, Remain, [Term|Acc]).

dec_components44(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components44(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components44(Num-1, Remain, [Term|Acc]).

dec_components45(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components45(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components45(Num-1, Remain, [Term|Acc]).

dec_components46(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components46(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components46(Num-1, Remain, [Term|Acc]).

dec_components47(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components47(Num, Bytes, Acc) ->
{Term,Remain} = dec_ConferenceList(Bytes),
dec_components47(Num-1, Remain, [Term|Acc]).

dec_components48(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components48(Num, Bytes, Acc) ->
{Term,Remain} = begin
V23@Pad3 = bit_size(Bytes) band 7,
{V23@V0,V23@Buf1} = case Bytes of
<<_:V23@Pad3,0:1,V23@V5:7,V23@V7:V23@V5/binary-unit:8,V23@Buf8/bitstring>> ->
{V23@V7,V23@Buf8};
<<_:V23@Pad3,1:1,0:1,V23@V6:14,V23@V8:V23@V6/binary-unit:8,V23@Buf9/bitstring>> ->
{V23@V8,V23@Buf9};
<<_:V23@Pad3,1:1,1:1,V23@V6:6,V23@Buf7/bitstring>> ->
{V23@V8,V23@Buf9}  = decode_fragmented(V23@V6, V23@Buf7, 8),
{V23@V8,V23@Buf9}
end,
V23@Conv10 = binary:copy(V23@V0),
{V23@Conv10,V23@Buf1}
end,
dec_components48(Num-1, Remain, [Term|Acc]).

dec_components49(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components49(Num, Bytes, Acc) ->
{Term,Remain} = dec_ServiceControlSession(Bytes),
dec_components49(Num-1, Remain, [Term|Acc]).

dec_components5(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components5(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericData(Bytes),
dec_components5(Num-1, Remain, [Term|Acc]).

dec_components50(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components50(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components50(Num-1, Remain, [Term|Acc]).

dec_components51(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components51(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components51(Num-1, Remain, [Term|Acc]).

dec_components52(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components52(Num, Bytes, Acc) ->
{Term,Remain} = begin
V24@Pad3 = bit_size(Bytes) band 7,
{V24@V0,V24@Buf1} = case Bytes of
<<_:V24@Pad3,0:1,V24@V5:7,V24@V7:V24@V5/binary-unit:8,V24@Buf8/bitstring>> ->
{V24@V7,V24@Buf8};
<<_:V24@Pad3,1:1,0:1,V24@V6:14,V24@V8:V24@V6/binary-unit:8,V24@Buf9/bitstring>> ->
{V24@V8,V24@Buf9};
<<_:V24@Pad3,1:1,1:1,V24@V6:6,V24@Buf7/bitstring>> ->
{V24@V8,V24@Buf9}  = decode_fragmented(V24@V6, V24@Buf7, 8),
{V24@V8,V24@Buf9}
end,
V24@Conv10 = binary:copy(V24@V0),
{V24@Conv10,V24@Buf1}
end,
dec_components52(Num-1, Remain, [Term|Acc]).

dec_components53(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components53(Num, Bytes, Acc) ->
{Term,Remain} = begin
V25@Pad2 = bit_size(Bytes) band 7,
<<_:V25@Pad2,V25@V0:4/binary-unit:8,V25@Buf1/bitstring>> = Bytes,
V25@Conv4 = binary:copy(V25@V0),
{V25@Conv4,V25@Buf1}
end,
dec_components53(Num-1, Remain, [Term|Acc]).

dec_components54(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components54(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components54(Num-1, Remain, [Term|Acc]).

dec_components55(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components55(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components55(Num-1, Remain, [Term|Acc]).

dec_components56(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components56(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components56(Num-1, Remain, [Term|Acc]).

dec_components57(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components57(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components57(Num-1, Remain, [Term|Acc]).

dec_components58(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components58(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components58(Num-1, Remain, [Term|Acc]).

dec_components59(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components59(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components59(Num-1, Remain, [Term|Acc]).

dec_components6(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components6(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components6(Num-1, Remain, [Term|Acc]).

dec_components60(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components60(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components60(Num-1, Remain, [Term|Acc]).

dec_components61(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components61(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components61(Num-1, Remain, [Term|Acc]).

dec_components62(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components62(Num, Bytes, Acc) ->
{Term,Remain} = dec_TunnelledProtocol(Bytes),
dec_components62(Num-1, Remain, [Term|Acc]).

dec_components63(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components63(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedProtocols(Bytes),
dec_components63(Num-1, Remain, [Term|Acc]).

dec_components64(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components64(Num, Bytes, Acc) ->
{Term,Remain} = dec_DataRate(Bytes),
dec_components64(Num-1, Remain, [Term|Acc]).

dec_components65(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components65(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedPrefix(Bytes),
dec_components65(Num-1, Remain, [Term|Acc]).

dec_components66(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components66(Num, Bytes, Acc) ->
{Term,Remain} = dec_DataRate(Bytes),
dec_components66(Num-1, Remain, [Term|Acc]).

dec_components67(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components67(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedPrefix(Bytes),
dec_components67(Num-1, Remain, [Term|Acc]).

dec_components68(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components68(Num, Bytes, Acc) ->
{Term,Remain} = dec_DataRate(Bytes),
dec_components68(Num-1, Remain, [Term|Acc]).

dec_components69(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components69(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedPrefix(Bytes),
dec_components69(Num-1, Remain, [Term|Acc]).

dec_components7(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components7(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components7(Num-1, Remain, [Term|Acc]).

dec_components70(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components70(Num, Bytes, Acc) ->
{Term,Remain} = dec_DataRate(Bytes),
dec_components70(Num-1, Remain, [Term|Acc]).

dec_components71(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components71(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedPrefix(Bytes),
dec_components71(Num-1, Remain, [Term|Acc]).

dec_components72(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components72(Num, Bytes, Acc) ->
{Term,Remain} = dec_DataRate(Bytes),
dec_components72(Num-1, Remain, [Term|Acc]).

dec_components73(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components73(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedPrefix(Bytes),
dec_components73(Num-1, Remain, [Term|Acc]).

dec_components74(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components74(Num, Bytes, Acc) ->
{Term,Remain} = dec_DataRate(Bytes),
dec_components74(Num-1, Remain, [Term|Acc]).

dec_components75(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components75(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedPrefix(Bytes),
dec_components75(Num-1, Remain, [Term|Acc]).

dec_components76(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components76(Num, Bytes, Acc) ->
{Term,Remain} = dec_DataRate(Bytes),
dec_components76(Num-1, Remain, [Term|Acc]).

dec_components77(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components77(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedPrefix(Bytes),
dec_components77(Num-1, Remain, [Term|Acc]).

dec_components78(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components78(Num, Bytes, Acc) ->
{Term,Remain} = dec_DataRate(Bytes),
dec_components78(Num-1, Remain, [Term|Acc]).

dec_components79(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components79(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedPrefix(Bytes),
dec_components79(Num-1, Remain, [Term|Acc]).

dec_components8(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components8(Num, Bytes, Acc) ->
{Term,Remain} = begin
V26@Pad3 = bit_size(Bytes) band 7,
{V26@V0,V26@Buf1} = case Bytes of
<<_:V26@Pad3,0:1,V26@V5:7,V26@V7:V26@V5/binary-unit:8,V26@Buf8/bitstring>> ->
{V26@V7,V26@Buf8};
<<_:V26@Pad3,1:1,0:1,V26@V6:14,V26@V8:V26@V6/binary-unit:8,V26@Buf9/bitstring>> ->
{V26@V8,V26@Buf9};
<<_:V26@Pad3,1:1,1:1,V26@V6:6,V26@Buf7/bitstring>> ->
{V26@V8,V26@Buf9}  = decode_fragmented(V26@V6, V26@Buf7, 8),
{V26@V8,V26@Buf9}
end,
V26@Conv10 = binary:copy(V26@V0),
{V26@Conv10,V26@Buf1}
end,
dec_components8(Num-1, Remain, [Term|Acc]).

dec_components80(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components80(Num, Bytes, Acc) ->
{Term,Remain} = dec_DataRate(Bytes),
dec_components80(Num-1, Remain, [Term|Acc]).

dec_components81(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components81(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedPrefix(Bytes),
dec_components81(Num-1, Remain, [Term|Acc]).

dec_components82(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components82(Num, Bytes, Acc) ->
{Term,Remain} = dec_DataRate(Bytes),
dec_components82(Num-1, Remain, [Term|Acc]).

dec_components83(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components83(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedPrefix(Bytes),
dec_components83(Num-1, Remain, [Term|Acc]).

dec_components84(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components84(Num, Bytes, Acc) ->
{Term,Remain} = dec_DataRate(Bytes),
dec_components84(Num-1, Remain, [Term|Acc]).

dec_components85(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components85(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedPrefix(Bytes),
dec_components85(Num-1, Remain, [Term|Acc]).

dec_components86(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components86(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedProtocols(Bytes),
dec_components86(Num-1, Remain, [Term|Acc]).

dec_components87(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components87(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components87(Num-1, Remain, [Term|Acc]).

dec_components88(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components88(Num, Bytes, Acc) ->
{Term,Remain} = dec_TransportAddress(Bytes),
dec_components88(Num-1, Remain, [Term|Acc]).

dec_components89(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components89(Num, Bytes, Acc) ->
{Term,Remain} = dec_TransportAddress(Bytes),
dec_components89(Num-1, Remain, [Term|Acc]).

dec_components9(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components9(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components9(Num-1, Remain, [Term|Acc]).

dec_components90(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components90(Num, Bytes, Acc) ->
{Term,Remain} = 'H235-SECURITY-MESSAGES':dec_ClearToken(Bytes),
dec_components90(Num-1, Remain, [Term|Acc]).

dec_components91(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components91(Num, Bytes, Acc) ->
{Term,Remain} = dec_CryptoH323Token(Bytes),
dec_components91(Num-1, Remain, [Term|Acc]).

dec_components92(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components92(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components92(Num-1, Remain, [Term|Acc]).

dec_components93(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components93(Num, Bytes, Acc) ->
{Term,Remain} = dec_AliasAddress(Bytes),
dec_components93(Num-1, Remain, [Term|Acc]).

dec_components94(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components94(Num, Bytes, Acc) ->
{Term,Remain} = dec_TransportAddress(Bytes),
dec_components94(Num-1, Remain, [Term|Acc]).

dec_components95(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components95(Num, Bytes, Acc) ->
{Term,Remain} = dec_TransportAddress(Bytes),
dec_components95(Num-1, Remain, [Term|Acc]).

dec_components96(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components96(Num, Bytes, Acc) ->
{Term,Remain} = dec_AlternateGK(Bytes),
dec_components96(Num-1, Remain, [Term|Acc]).

dec_components97(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components97(Num, Bytes, Acc) ->
{Term,Remain} = dec_CallsAvailable(Bytes),
dec_components97(Num-1, Remain, [Term|Acc]).

dec_components98(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components98(Num, Bytes, Acc) ->
{Term,Remain} = dec_CallsAvailable(Bytes),
dec_components98(Num-1, Remain, [Term|Acc]).

dec_components99(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components99(Num, Bytes, Acc) ->
{Term,Remain} = dec_CallsAvailable(Bytes),
dec_components99(Num-1, Remain, [Term|Acc]).

align(Bin) when is_binary(Bin) ->
    Bin;
align(BitStr) when is_bitstring(BitStr) ->
    AlignBits = bit_size(BitStr) rem 8,
    <<_:AlignBits,Rest/binary>> = BitStr,
    Rest.

complete(L0) ->
    L = complete(L0, []),
    case list_to_bitstring(L) of
        <<>> ->
            <<0>>;
        Bin ->
            Bin
    end.

complete([], Bits, []) ->
    case Bits band 7 of
        0 ->
            [];
        N ->
            [<<0:(8 - N)>>]
    end;
complete([], Bits, [H|More]) ->
    complete(H, Bits, More);
complete([align|T], Bits, More) ->
    case Bits band 7 of
        0 ->
            complete(T, More);
        1 ->
            [<<0:7>>|complete(T, More)];
        2 ->
            [<<0:6>>|complete(T, More)];
        3 ->
            [<<0:5>>|complete(T, More)];
        4 ->
            [<<0:4>>|complete(T, More)];
        5 ->
            [<<0:3>>|complete(T, More)];
        6 ->
            [<<0:2>>|complete(T, More)];
        7 ->
            [<<0:1>>|complete(T, More)]
    end;
complete([[]|T], Bits, More) ->
    complete(T, Bits, More);
complete([[_|_] = H], Bits, More) ->
    complete(H, Bits, More);
complete([[_|_] = H|T], Bits, More) ->
    complete(H, Bits, [T|More]);
complete([H|T], Bits, More) when is_integer(H); is_binary(H) ->
    [H|complete(T, Bits, More)];
complete([H|T], Bits, More) ->
    [H|complete(T, Bits + bit_size(H), More)];
complete(Bin, Bits, More) when is_binary(Bin) ->
    [Bin|complete([], Bits, More)];
complete(Bin, Bits, More) ->
    [Bin|complete([], Bits + bit_size(Bin), More)].

complete([], []) ->
    [];
complete([], [H|More]) ->
    complete(H, More);
complete([align|T], More) ->
    complete(T, More);
complete([[]|T], More) ->
    complete(T, More);
complete([[_|_] = H], More) ->
    complete(H, More);
complete([[_|_] = H|T], More) ->
    complete(H, [T|More]);
complete([H|T], More) when is_integer(H); is_binary(H) ->
    [H|complete(T, More)];
complete([H|T], More) ->
    [H|complete(T, bit_size(H), More)];
complete(Bin, More) when is_binary(Bin) ->
    [Bin|complete([], More)];
complete(Bin, More) ->
    [Bin|complete([], bit_size(Bin), More)].

dec_subidentifiers([H|T], Av, Al) when H >= 128 ->
    dec_subidentifiers(T, Av bsl 7 bor H band 127, Al);
dec_subidentifiers([H|T], Av, Al) ->
    dec_subidentifiers(T, 0, [Av bsl 7 bor H|Al]);
dec_subidentifiers([], _Av, Al) ->
    lists:reverse(Al).

decode_chars(Val, N, Chars) ->
    [ 
     element(C + 1, Chars) ||
         <<C:N>> <= Val
    ].

decode_chars_16bit(Val) ->
    Cs =
        [ 
         C ||
             <<C:16>> <= Val
        ],
    decode_chars_16bit_1(Cs).

decode_chars_16bit_1([H|T]) when H < 256 ->
    [H|decode_chars_16bit_1(T)];
decode_chars_16bit_1([H|T]) ->
    [{0,0,H bsr 8,H band 255}|decode_chars_16bit_1(T)];
decode_chars_16bit_1([]) ->
    [].

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_length(Buffer) ->
    case align(Buffer) of
        <<0:1,Oct:7,Rest/binary>> ->
            {Oct,Rest};
        <<2:2,Val:14,Rest/binary>> ->
            {Val,Rest};
        <<3:2,_Val:14,_Rest/binary>> ->
            exit({error,{asn1,{decode_length,{nyi,above_16k}}}})
    end.

decode_oid(Octets) ->
    [First|Rest] = dec_subidentifiers(Octets, 0, []),
    Idlist =
        if
            First < 40 ->
                [0,First|Rest];
            First < 80 ->
                [1,First - 40|Rest];
            true ->
                [2,First - 80|Rest]
        end,
    list_to_tuple(Idlist).

e_o_e(Num) when Num < 128 ->
    Num bor 128;
e_o_e(Num) ->
    [e_o_e(Num bsr 7),Num band 127 bor 128].

e_object_element(Num) when Num < 128 ->
    [Num];
e_object_element(Num) ->
    [e_o_e(Num bsr 7),Num band 127].

e_object_elements([], Acc) ->
    lists:reverse(Acc);
e_object_elements([H|T], Acc) ->
    e_object_elements(T, [e_object_element(H)|Acc]).

e_object_identifier([E1,E2|Tail])
    when E1 >= 0, E1 < 2, E2 < 40; E1 =:= 2 ->
    Head = 40 * E1 + E2,
    e_object_elements([Head|Tail], []);
e_object_identifier([_,_|_Tail] = Oid) ->
    exit({error,{asn1,{illegal_value,Oid}}}).

enc_char(C0, Lb, Tab) ->
    try element(C0 - Lb, Tab) of
        ill ->
            illegal_char_error();
        C ->
            C
    catch
        error:badarg ->
            illegal_char_error()
    end.

encode_chars(Val, NumBits, {Lb,Tab}) ->
    << 
      <<(enc_char(C, Lb, Tab)):NumBits>> ||
          C <- Val
    >>.

encode_chars_16bit(Val) ->
    L = [ 
         case C of
             {0,0,A,B} ->
                 [A,B];
             C when is_integer(C) ->
                 [0,C]
         end ||
             C <- Val
        ],
    iolist_to_binary(L).

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>,B|encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len,Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>,Bin]
            end
    end.

encode_oid(Val) when is_tuple(Val) ->
    encode_oid(tuple_to_list(Val));
encode_oid(Val) ->
    iolist_to_binary(e_object_identifier(Val)).

encode_unconstrained_number(Val) when Val >= 0 ->
    if
        Val < 128 ->
            [1,Val];
        Val < 256 ->
            [<<2,0>>,Val];
        true ->
            case binary:encode_unsigned(Val) of
                <<0:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) of
                        Sz when Sz < 128 ->
                            [Sz,Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14>>,Bin]
                    end;
                <<1:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) + 1 of
                        Sz when Sz < 128 ->
                            [Sz,0,Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14,0:8>>,Bin]
                    end
            end
    end;
encode_unconstrained_number(Val) ->
    Oct = enint(Val, []),
    Len = length(Oct),
    if
        Len < 128 ->
            [Len|Oct];
        Len < 16384 ->
            [<<2:2,Len:14>>|Oct]
    end.

enint(- 1, [B1|T]) when B1 > 127 ->
    [B1|T];
enint(N, Acc) ->
    enint(N bsr 8, [N band 255|Acc]).

extension_bitmap(Val, Pos, Limit) ->
    extension_bitmap(Val, Pos, Limit, 0).

extension_bitmap(_Val, Pos, Limit, Acc) when Pos >= Limit ->
    Acc;
extension_bitmap(Val, Pos, Limit, Acc) ->
    Bit =
        case element(Pos, Val) of
            asn1_NOVALUE ->
                0;
            _ ->
                1
        end,
    extension_bitmap(Val, Pos + 1, Limit, Acc bsl 1 bor Bit).

illegal_char_error() ->
    error({error,{asn1,"value forbidden by FROM constraint"}}).

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len,Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
