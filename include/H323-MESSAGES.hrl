%% Generated by the Erlang ASN.1 compiler version:3.0
%% Purpose: Erlang record definitions for each named and unnamed
%% SEQUENCE and SET, and macro definitions for each value
%% definition,in module H323-MESSAGES



-ifndef(_H323_MESSAGES_HRL_).
-define(_H323_MESSAGES_HRL_, true).

-record('H323-UserInformation',{
'h323-uu-pdu', 'user-data' = asn1_NOVALUE}). % with extension mark

-record('H323-UserInformation_user-data',{
'protocol-discriminator', 'user-information'}). % with extension mark

-record('H323-UU-PDU',{
'h323-message-body', nonStandardData = asn1_NOVALUE,
%% with extensions
h4501SupplementaryService = asn1_NOVALUE, h245Tunneling, h245Control = asn1_NOVALUE, nonStandardControl = asn1_NOVALUE, callLinkage = asn1_NOVALUE, tunnelledSignallingMessage = asn1_NOVALUE, provisionalRespToH245Tunneling = asn1_NOVALUE, stimulusControl = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('H323-UU-PDU_tunnelledSignallingMessage',{
tunnelledProtocolID, messageContent, tunnellingRequired = asn1_NOVALUE, nonStandardData = asn1_NOVALUE}). % with extension mark

-record('StimulusControl',{
nonStandard = asn1_NOVALUE, isText = asn1_NOVALUE, h248Message = asn1_NOVALUE}). % with extension mark

-record('Alerting-UUIE',{
protocolIdentifier, destinationInfo, h245Address = asn1_NOVALUE,
%% with extensions
callIdentifier, h245SecurityMode = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, fastStart = asn1_NOVALUE, multipleCalls, maintainConnection, alertingAddress = asn1_NOVALUE, presentationIndicator = asn1_NOVALUE, screeningIndicator = asn1_NOVALUE, fastConnectRefused = asn1_NOVALUE, serviceControl = asn1_NOVALUE, capacity = asn1_NOVALUE, featureSet = asn1_NOVALUE}).

-record('CallProceeding-UUIE',{
protocolIdentifier, destinationInfo, h245Address = asn1_NOVALUE,
%% with extensions
callIdentifier, h245SecurityMode = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, fastStart = asn1_NOVALUE, multipleCalls, maintainConnection, fastConnectRefused = asn1_NOVALUE, featureSet = asn1_NOVALUE}).

-record('Connect-UUIE',{
protocolIdentifier, h245Address = asn1_NOVALUE, destinationInfo, conferenceID,
%% with extensions
callIdentifier, h245SecurityMode = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, fastStart = asn1_NOVALUE, multipleCalls, maintainConnection, language = asn1_NOVALUE, connectedAddress = asn1_NOVALUE, presentationIndicator = asn1_NOVALUE, screeningIndicator = asn1_NOVALUE, fastConnectRefused = asn1_NOVALUE, serviceControl = asn1_NOVALUE, capacity = asn1_NOVALUE, featureSet = asn1_NOVALUE}).

-record('Information-UUIE',{
protocolIdentifier,
%% with extensions
callIdentifier, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, fastStart = asn1_NOVALUE, fastConnectRefused = asn1_NOVALUE, circuitInfo = asn1_NOVALUE}).

-record('ReleaseComplete-UUIE',{
protocolIdentifier, reason = asn1_NOVALUE,
%% with extensions
callIdentifier, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, busyAddress = asn1_NOVALUE, presentationIndicator = asn1_NOVALUE, screeningIndicator = asn1_NOVALUE, capacity = asn1_NOVALUE, serviceControl = asn1_NOVALUE, featureSet = asn1_NOVALUE}).

-record('Setup-UUIE',{
protocolIdentifier, h245Address = asn1_NOVALUE, sourceAddress = asn1_NOVALUE, sourceInfo, destinationAddress = asn1_NOVALUE, destCallSignalAddress = asn1_NOVALUE, destExtraCallInfo = asn1_NOVALUE, destExtraCRV = asn1_NOVALUE, activeMC, conferenceID, conferenceGoal, callServices = asn1_NOVALUE, callType,
%% with extensions
sourceCallSignalAddress = asn1_NOVALUE, remoteExtensionAddress = asn1_NOVALUE, callIdentifier, h245SecurityCapability = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, fastStart = asn1_NOVALUE, mediaWaitForConnect, canOverlapSend, endpointIdentifier = asn1_NOVALUE, multipleCalls, maintainConnection, connectionParameters = asn1_NOVALUE, language = asn1_NOVALUE, presentationIndicator = asn1_NOVALUE, screeningIndicator = asn1_NOVALUE, serviceControl = asn1_NOVALUE, symmetricOperationRequired = asn1_NOVALUE, capacity = asn1_NOVALUE, circuitInfo = asn1_NOVALUE, desiredProtocols = asn1_NOVALUE, neededFeatures = asn1_NOVALUE, desiredFeatures = asn1_NOVALUE, supportedFeatures = asn1_NOVALUE, parallelH245Control = asn1_NOVALUE, additionalSourceAddresses = asn1_NOVALUE, hopCount = asn1_NOVALUE}).

-record('Setup-UUIE_connectionParameters',{
connectionType, numberOfScnConnections, connectionAggregation}). % with extension mark

-record('Facility-UUIE',{
protocolIdentifier, alternativeAddress = asn1_NOVALUE, alternativeAliasAddress = asn1_NOVALUE, conferenceID = asn1_NOVALUE, reason,
%% with extensions
callIdentifier, destExtraCallInfo = asn1_NOVALUE, remoteExtensionAddress = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, conferences = asn1_NOVALUE, h245Address = asn1_NOVALUE, fastStart = asn1_NOVALUE, multipleCalls, maintainConnection, fastConnectRefused = asn1_NOVALUE, serviceControl = asn1_NOVALUE, circuitInfo = asn1_NOVALUE, featureSet = asn1_NOVALUE, destinationInfo = asn1_NOVALUE, h245SecurityMode = asn1_NOVALUE}).

-record('ConferenceList',{
conferenceID = asn1_NOVALUE, conferenceAlias = asn1_NOVALUE, nonStandardData = asn1_NOVALUE}). % with extension mark

-record('Progress-UUIE',{
protocolIdentifier, destinationInfo, h245Address = asn1_NOVALUE, callIdentifier, h245SecurityMode = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, fastStart = asn1_NOVALUE,
%% with extensions
multipleCalls, maintainConnection, fastConnectRefused = asn1_NOVALUE}).

-record('TransportAddress_ipAddress',{
ip, port}).

-record('TransportAddress_ipSourceRoute',{
ip, port, route, routing}). % with extension mark

-record('TransportAddress_ipxAddress',{
node, netnum, port}).

-record('TransportAddress_ip6Address',{
ip, port}). % with extension mark

-record('Status-UUIE',{
protocolIdentifier, callIdentifier, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE}). % with extension mark

-record('StatusInquiry-UUIE',{
protocolIdentifier, callIdentifier, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE}). % with extension mark

-record('SetupAcknowledge-UUIE',{
protocolIdentifier, callIdentifier, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE}). % with extension mark

-record('Notify-UUIE',{
protocolIdentifier, callIdentifier, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE}). % with extension mark

-record('EndpointType',{
nonStandardData = asn1_NOVALUE, vendor = asn1_NOVALUE, gatekeeper = asn1_NOVALUE, gateway = asn1_NOVALUE, mcu = asn1_NOVALUE, terminal = asn1_NOVALUE, mc, undefinedNode,
%% with extensions
set = asn1_NOVALUE, supportedTunnelledProtocols = asn1_NOVALUE}).

-record('GatewayInfo',{
protocol = asn1_NOVALUE, nonStandardData = asn1_NOVALUE}). % with extension mark

-record('H310Caps',{
nonStandardData = asn1_NOVALUE,
%% with extensions
dataRatesSupported = asn1_NOVALUE, supportedPrefixes}).

-record('H320Caps',{
nonStandardData = asn1_NOVALUE,
%% with extensions
dataRatesSupported = asn1_NOVALUE, supportedPrefixes}).

-record('H321Caps',{
nonStandardData = asn1_NOVALUE,
%% with extensions
dataRatesSupported = asn1_NOVALUE, supportedPrefixes}).

-record('H322Caps',{
nonStandardData = asn1_NOVALUE,
%% with extensions
dataRatesSupported = asn1_NOVALUE, supportedPrefixes}).

-record('H323Caps',{
nonStandardData = asn1_NOVALUE,
%% with extensions
dataRatesSupported = asn1_NOVALUE, supportedPrefixes}).

-record('H324Caps',{
nonStandardData = asn1_NOVALUE,
%% with extensions
dataRatesSupported = asn1_NOVALUE, supportedPrefixes}).

-record('VoiceCaps',{
nonStandardData = asn1_NOVALUE,
%% with extensions
dataRatesSupported = asn1_NOVALUE, supportedPrefixes}).

-record('T120OnlyCaps',{
nonStandardData = asn1_NOVALUE,
%% with extensions
dataRatesSupported = asn1_NOVALUE, supportedPrefixes}).

-record('NonStandardProtocol',{
nonStandardData = asn1_NOVALUE, dataRatesSupported = asn1_NOVALUE, supportedPrefixes}). % with extension mark

-record('T38FaxAnnexbOnlyCaps',{
nonStandardData = asn1_NOVALUE, dataRatesSupported = asn1_NOVALUE, supportedPrefixes, t38FaxProtocol, t38FaxProfile}). % with extension mark

-record('SIPCaps',{
nonStandardData = asn1_NOVALUE, dataRatesSupported = asn1_NOVALUE, supportedPrefixes = asn1_NOVALUE}). % with extension mark

-record('McuInfo',{
nonStandardData = asn1_NOVALUE,
%% with extensions
protocol = asn1_NOVALUE}).

-record('TerminalInfo',{
nonStandardData = asn1_NOVALUE}). % with extension mark

-record('GatekeeperInfo',{
nonStandardData = asn1_NOVALUE}). % with extension mark

-record('VendorIdentifier',{
vendor, productId = asn1_NOVALUE, versionId = asn1_NOVALUE,
%% with extensions
enterpriseNumber = asn1_NOVALUE}).

-record('H221NonStandard',{
t35CountryCode, t35Extension, manufacturerCode}). % with extension mark

-record('TunnelledProtocol',{
id, subIdentifier = asn1_NOVALUE}). % with extension mark

-record('TunnelledProtocolAlternateIdentifier',{
protocolType, protocolVariant = asn1_NOVALUE}). % with extension mark

-record('NonStandardParameter',{
nonStandardIdentifier, data}).

-record('AddressPattern_range',{
startOfRange, endOfRange}).

-record('PublicPartyNumber',{
publicTypeOfNumber, publicNumberDigits}).

-record('PrivatePartyNumber',{
privateTypeOfNumber, privateNumberDigits}).

-record('ANSI-41-UIM',{
imsi = asn1_NOVALUE, min = asn1_NOVALUE, mdn = asn1_NOVALUE, msisdn = asn1_NOVALUE, esn = asn1_NOVALUE, mscid = asn1_NOVALUE, 'system-id', systemMyTypeCode = asn1_NOVALUE, systemAccessType = asn1_NOVALUE, qualificationInformationCode = asn1_NOVALUE, sesn = asn1_NOVALUE, soc = asn1_NOVALUE}). % with extension mark

-record('GSM-UIM',{
imsi = asn1_NOVALUE, tmsi = asn1_NOVALUE, msisdn = asn1_NOVALUE, imei = asn1_NOVALUE, hplmn = asn1_NOVALUE, vplmn = asn1_NOVALUE}). % with extension mark

-record('ExtendedAliasAddress',{
address, presentationIndicator = asn1_NOVALUE, screeningIndicator = asn1_NOVALUE}). % with extension mark

-record('Endpoint',{
nonStandardData = asn1_NOVALUE, aliasAddress = asn1_NOVALUE, callSignalAddress = asn1_NOVALUE, rasAddress = asn1_NOVALUE, endpointType = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, priority = asn1_NOVALUE, remoteExtensionAddress = asn1_NOVALUE, destExtraCallInfo = asn1_NOVALUE,
%% with extensions
alternateTransportAddresses = asn1_NOVALUE, circuitInfo = asn1_NOVALUE, featureSet = asn1_NOVALUE}).

-record('AlternateTransportAddresses',{
annexE = asn1_NOVALUE,
%% with extensions
sctp = asn1_NOVALUE}).

-record('AlternateGK',{
rasAddress, gatekeeperIdentifier = asn1_NOVALUE, needToRegister, priority}). % with extension mark

-record('AltGKInfo',{
alternateGatekeeper, altGKisPermanent}). % with extension mark

-record('SecurityCapabilities',{
nonStandard = asn1_NOVALUE, encryption, authenticaton, integrity}). % with extension mark

-record('QseriesOptions',{
q932Full, q951Full, q952Full, q953Full, q955Full, q956Full, q957Full, q954Info}). % with extension mark

-record('Q954Details',{
conferenceCalling, threePartyService}). % with extension mark

-record('CallIdentifier',{
guid}). % with extension mark

-record('ICV',{
algorithmOID, icv}).

-record('CryptoH323Token_cryptoEPPwdHash',{
alias, timeStamp, token}).

-record('CryptoH323Token_cryptoEPPwdHash_token',{
algorithmOID, paramS, hash}).

-record('CryptoH323Token_cryptoGKPwdHash',{
gatekeeperId, timeStamp, token}).

-record('CryptoH323Token_cryptoGKPwdHash_token',{
algorithmOID, paramS, hash}).

-record('CryptoH323Token_cryptoEPPwdEncr',{
algorithmOID, paramS, encryptedData}).

-record('CryptoH323Token_cryptoGKPwdEncr',{
algorithmOID, paramS, encryptedData}).

-record('CryptoH323Token_cryptoEPCert',{
toBeSigned, algorithmOID, paramS, signature}).

-record('CryptoH323Token_cryptoGKCert',{
toBeSigned, algorithmOID, paramS, signature}).

-record('CryptoH323Token_cryptoFastStart',{
toBeSigned, algorithmOID, paramS, signature}).

-record('DataRate',{
nonStandardData = asn1_NOVALUE, channelRate, channelMultiplier = asn1_NOVALUE}). % with extension mark

-record('CallLinkage',{
globalCallId = asn1_NOVALUE, threadId = asn1_NOVALUE}). % with extension mark

-record('SupportedPrefix',{
nonStandardData = asn1_NOVALUE, prefix}). % with extension mark

-record('CapacityReportingCapability',{
canReportCallCapacity}). % with extension mark

-record('CapacityReportingSpecification',{
'when'}). % with extension mark

-record('CapacityReportingSpecification_when',{
callStart = asn1_NOVALUE, callEnd = asn1_NOVALUE}). % with extension mark

-record('CallCapacity',{
maximumCallCapacity = asn1_NOVALUE, currentCallCapacity = asn1_NOVALUE}). % with extension mark

-record('CallCapacityInfo',{
voiceGwCallsAvailable = asn1_NOVALUE, h310GwCallsAvailable = asn1_NOVALUE, h320GwCallsAvailable = asn1_NOVALUE, h321GwCallsAvailable = asn1_NOVALUE, h322GwCallsAvailable = asn1_NOVALUE, h323GwCallsAvailable = asn1_NOVALUE, h324GwCallsAvailable = asn1_NOVALUE, t120OnlyGwCallsAvailable = asn1_NOVALUE, t38FaxAnnexbOnlyGwCallsAvailable = asn1_NOVALUE, terminalCallsAvailable = asn1_NOVALUE, mcuCallsAvailable = asn1_NOVALUE,
%% with extensions
sipGwCallsAvailable = asn1_NOVALUE}).

-record('CallsAvailable',{
calls, group = asn1_NOVALUE,
%% with extensions
carrier = asn1_NOVALUE}).

-record('CircuitInfo',{
sourceCircuitID = asn1_NOVALUE, destinationCircuitID = asn1_NOVALUE, genericData = asn1_NOVALUE}). % with extension mark

-record('CircuitIdentifier',{
cic = asn1_NOVALUE, group = asn1_NOVALUE,
%% with extensions
carrier = asn1_NOVALUE}).

-record('CicInfo',{
cic, pointCode}). % with extension mark

-record('GroupID',{
member = asn1_NOVALUE, group}). % with extension mark

-record('CarrierInfo',{
carrierIdentificationCode = asn1_NOVALUE, carrierName = asn1_NOVALUE}). % with extension mark

-record('ServiceControlSession',{
sessionId, contents = asn1_NOVALUE, reason}). % with extension mark

-record('RasUsageInfoTypes',{
nonStandardUsageTypes, startTime = asn1_NOVALUE, endTime = asn1_NOVALUE, terminationCause = asn1_NOVALUE}). % with extension mark

-record('RasUsageSpecification',{
'when', callStartingPoint = asn1_NOVALUE, required}). % with extension mark

-record('RasUsageSpecification_when',{
start = asn1_NOVALUE, 'end' = asn1_NOVALUE, inIrr = asn1_NOVALUE}). % with extension mark

-record('RasUsageSpecification_callStartingPoint',{
alerting = asn1_NOVALUE, connect = asn1_NOVALUE}). % with extension mark

-record('RasUsageInformation',{
nonStandardUsageFields, alertingTime = asn1_NOVALUE, connectTime = asn1_NOVALUE, endTime = asn1_NOVALUE}). % with extension mark

-record('BandwidthDetails',{
sender, multicast, bandwidth, rtcpAddresses}). % with extension mark

-record('CallCreditCapability',{
canDisplayAmountString = asn1_NOVALUE, canEnforceDurationLimit = asn1_NOVALUE}). % with extension mark

-record('CallCreditServiceControl',{
amountString = asn1_NOVALUE, billingMode = asn1_NOVALUE, callDurationLimit = asn1_NOVALUE, enforceCallDurationLimit = asn1_NOVALUE, callStartingPoint = asn1_NOVALUE}). % with extension mark

-record('GenericData',{
id, parameters = asn1_NOVALUE}). % with extension mark

-record('EnumeratedParameter',{
id, content = asn1_NOVALUE}). % with extension mark

-record('FeatureSet',{
replacementFeatureSet, neededFeatures = asn1_NOVALUE, desiredFeatures = asn1_NOVALUE, supportedFeatures = asn1_NOVALUE}). % with extension mark

-record('TransportChannelInfo',{
sendAddress = asn1_NOVALUE, recvAddress = asn1_NOVALUE}). % with extension mark

-record('RTPSession',{
rtpAddress, rtcpAddress, cname, ssrc, sessionId, associatedSessionIds,
%% with extensions
multicast = asn1_NOVALUE, bandwidth = asn1_NOVALUE}).

-record('GatekeeperRequest',{
requestSeqNum, protocolIdentifier, nonStandardData = asn1_NOVALUE, rasAddress, endpointType, gatekeeperIdentifier = asn1_NOVALUE, callServices = asn1_NOVALUE, endpointAlias = asn1_NOVALUE,
%% with extensions
alternateEndpoints = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, authenticationCapability = asn1_NOVALUE, algorithmOIDs = asn1_NOVALUE, integrity = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, supportsAltGK = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('GatekeeperConfirm',{
requestSeqNum, protocolIdentifier, nonStandardData = asn1_NOVALUE, gatekeeperIdentifier = asn1_NOVALUE, rasAddress,
%% with extensions
alternateGatekeeper = asn1_NOVALUE, authenticationMode = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, algorithmOID = asn1_NOVALUE, integrity = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('GatekeeperReject',{
requestSeqNum, protocolIdentifier, nonStandardData = asn1_NOVALUE, gatekeeperIdentifier = asn1_NOVALUE, rejectReason,
%% with extensions
altGKInfo = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('RegistrationRequest',{
requestSeqNum, protocolIdentifier, nonStandardData = asn1_NOVALUE, discoveryComplete, callSignalAddress, rasAddress, terminalType, terminalAlias = asn1_NOVALUE, gatekeeperIdentifier = asn1_NOVALUE, endpointVendor,
%% with extensions
alternateEndpoints = asn1_NOVALUE, timeToLive = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, keepAlive, endpointIdentifier = asn1_NOVALUE, willSupplyUUIEs, maintainConnection, alternateTransportAddresses = asn1_NOVALUE, additiveRegistration = asn1_NOVALUE, terminalAliasPattern = asn1_NOVALUE, supportsAltGK = asn1_NOVALUE, usageReportingCapability = asn1_NOVALUE, multipleCalls = asn1_NOVALUE, supportedH248Packages = asn1_NOVALUE, callCreditCapability = asn1_NOVALUE, capacityReportingCapability = asn1_NOVALUE, capacity = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE, restart = asn1_NOVALUE, supportsACFSequences = asn1_NOVALUE}).

-record('RegistrationConfirm',{
requestSeqNum, protocolIdentifier, nonStandardData = asn1_NOVALUE, callSignalAddress, terminalAlias = asn1_NOVALUE, gatekeeperIdentifier = asn1_NOVALUE, endpointIdentifier,
%% with extensions
alternateGatekeeper = asn1_NOVALUE, timeToLive = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, willRespondToIRR, preGrantedARQ = asn1_NOVALUE, maintainConnection, serviceControl = asn1_NOVALUE, supportsAdditiveRegistration = asn1_NOVALUE, terminalAliasPattern = asn1_NOVALUE, supportedPrefixes = asn1_NOVALUE, usageSpec = asn1_NOVALUE, featureServerAlias = asn1_NOVALUE, capacityReportingSpec = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('RegistrationConfirm_preGrantedARQ',{
makeCall, useGKCallSignalAddressToMakeCall, answerCall, useGKCallSignalAddressToAnswer,
%% with extensions
irrFrequencyInCall = asn1_NOVALUE, totalBandwidthRestriction = asn1_NOVALUE, alternateTransportAddresses = asn1_NOVALUE, useSpecifiedTransport = asn1_NOVALUE}).

-record('RegistrationReject',{
requestSeqNum, protocolIdentifier, nonStandardData = asn1_NOVALUE, rejectReason, gatekeeperIdentifier = asn1_NOVALUE,
%% with extensions
altGKInfo = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('RegistrationRejectReason_invalidTerminalAliases',{
terminalAlias = asn1_NOVALUE, terminalAliasPattern = asn1_NOVALUE, supportedPrefixes = asn1_NOVALUE}). % with extension mark

-record('UnregistrationRequest',{
requestSeqNum, callSignalAddress, endpointAlias = asn1_NOVALUE, nonStandardData = asn1_NOVALUE, endpointIdentifier = asn1_NOVALUE,
%% with extensions
alternateEndpoints = asn1_NOVALUE, gatekeeperIdentifier = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, reason = asn1_NOVALUE, endpointAliasPattern = asn1_NOVALUE, supportedPrefixes = asn1_NOVALUE, alternateGatekeeper = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('UnregistrationConfirm',{
requestSeqNum, nonStandardData = asn1_NOVALUE,
%% with extensions
tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('UnregistrationReject',{
requestSeqNum, rejectReason, nonStandardData = asn1_NOVALUE,
%% with extensions
altGKInfo = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('AdmissionRequest',{
requestSeqNum, callType, callModel = asn1_NOVALUE, endpointIdentifier, destinationInfo = asn1_NOVALUE, destCallSignalAddress = asn1_NOVALUE, destExtraCallInfo = asn1_NOVALUE, srcInfo, srcCallSignalAddress = asn1_NOVALUE, bandWidth, callReferenceValue, nonStandardData = asn1_NOVALUE, callServices = asn1_NOVALUE, conferenceID, activeMC, answerCall,
%% with extensions
canMapAlias, callIdentifier, srcAlternatives = asn1_NOVALUE, destAlternatives = asn1_NOVALUE, gatekeeperIdentifier = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, transportQOS = asn1_NOVALUE, willSupplyUUIEs, callLinkage = asn1_NOVALUE, gatewayDataRate = asn1_NOVALUE, capacity = asn1_NOVALUE, circuitInfo = asn1_NOVALUE, desiredProtocols = asn1_NOVALUE, desiredTunnelledProtocol = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE, canMapSrcAlias}).

-record('AdmissionConfirm',{
requestSeqNum, bandWidth, callModel, destCallSignalAddress, irrFrequency = asn1_NOVALUE, nonStandardData = asn1_NOVALUE,
%% with extensions
destinationInfo = asn1_NOVALUE, destExtraCallInfo = asn1_NOVALUE, destinationType = asn1_NOVALUE, remoteExtensionAddress = asn1_NOVALUE, alternateEndpoints = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, transportQOS = asn1_NOVALUE, willRespondToIRR, uuiesRequested, language = asn1_NOVALUE, alternateTransportAddresses = asn1_NOVALUE, useSpecifiedTransport = asn1_NOVALUE, circuitInfo = asn1_NOVALUE, usageSpec = asn1_NOVALUE, supportedProtocols = asn1_NOVALUE, serviceControl = asn1_NOVALUE, multipleCalls = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE, modifiedSrcInfo = asn1_NOVALUE}).

-record('UUIEsRequested',{
setup, callProceeding, connect, alerting, information, releaseComplete, facility, progress, empty,
%% with extensions
status, statusInquiry, setupAcknowledge, notify}).

-record('AdmissionReject',{
requestSeqNum, rejectReason, nonStandardData = asn1_NOVALUE,
%% with extensions
altGKInfo = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, callSignalAddress = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, serviceControl = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('BandwidthRequest',{
requestSeqNum, endpointIdentifier, conferenceID, callReferenceValue, callType = asn1_NOVALUE, bandWidth, nonStandardData = asn1_NOVALUE,
%% with extensions
callIdentifier, gatekeeperIdentifier = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, answeredCall, callLinkage = asn1_NOVALUE, capacity = asn1_NOVALUE, usageInformation = asn1_NOVALUE, bandwidthDetails = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('BandwidthConfirm',{
requestSeqNum, bandWidth, nonStandardData = asn1_NOVALUE,
%% with extensions
tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, capacity = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('BandwidthReject',{
requestSeqNum, rejectReason, allowedBandWidth, nonStandardData = asn1_NOVALUE,
%% with extensions
altGKInfo = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('LocationRequest',{
requestSeqNum, endpointIdentifier = asn1_NOVALUE, destinationInfo, nonStandardData = asn1_NOVALUE, replyAddress,
%% with extensions
sourceInfo = asn1_NOVALUE, canMapAlias, gatekeeperIdentifier = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, desiredProtocols = asn1_NOVALUE, desiredTunnelledProtocol = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE, hopCount = asn1_NOVALUE, circuitInfo = asn1_NOVALUE, callIdentifier = asn1_NOVALUE, bandWidth = asn1_NOVALUE, sourceEndpointInfo = asn1_NOVALUE, canMapSrcAlias}).

-record('LocationConfirm',{
requestSeqNum, callSignalAddress, rasAddress, nonStandardData = asn1_NOVALUE,
%% with extensions
destinationInfo = asn1_NOVALUE, destExtraCallInfo = asn1_NOVALUE, destinationType = asn1_NOVALUE, remoteExtensionAddress = asn1_NOVALUE, alternateEndpoints = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, alternateTransportAddresses = asn1_NOVALUE, supportedProtocols = asn1_NOVALUE, multipleCalls = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE, circuitInfo = asn1_NOVALUE, serviceControl = asn1_NOVALUE, modifiedSrcInfo = asn1_NOVALUE, bandWidth = asn1_NOVALUE}).

-record('LocationReject',{
requestSeqNum, rejectReason, nonStandardData = asn1_NOVALUE,
%% with extensions
altGKInfo = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE, serviceControl = asn1_NOVALUE}).

-record('DisengageRequest',{
requestSeqNum, endpointIdentifier, conferenceID, callReferenceValue, disengageReason, nonStandardData = asn1_NOVALUE,
%% with extensions
callIdentifier, gatekeeperIdentifier = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, answeredCall, callLinkage = asn1_NOVALUE, capacity = asn1_NOVALUE, circuitInfo = asn1_NOVALUE, usageInformation = asn1_NOVALUE, terminationCause = asn1_NOVALUE, serviceControl = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('DisengageConfirm',{
requestSeqNum, nonStandardData = asn1_NOVALUE,
%% with extensions
tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, capacity = asn1_NOVALUE, circuitInfo = asn1_NOVALUE, usageInformation = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('DisengageReject',{
requestSeqNum, rejectReason, nonStandardData = asn1_NOVALUE,
%% with extensions
altGKInfo = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('InfoRequest',{
requestSeqNum, callReferenceValue, nonStandardData = asn1_NOVALUE, replyAddress = asn1_NOVALUE,
%% with extensions
callIdentifier, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, uuiesRequested = asn1_NOVALUE, callLinkage = asn1_NOVALUE, usageInfoRequested = asn1_NOVALUE, segmentedResponseSupported = asn1_NOVALUE, nextSegmentRequested = asn1_NOVALUE, capacityInfoRequested = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('InfoRequestResponse',{
nonStandardData = asn1_NOVALUE, requestSeqNum, endpointType, endpointIdentifier, rasAddress, callSignalAddress, endpointAlias = asn1_NOVALUE, perCallInfo = asn1_NOVALUE,
%% with extensions
tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, needResponse, capacity = asn1_NOVALUE, irrStatus = asn1_NOVALUE, unsolicited, genericData = asn1_NOVALUE}).

-record('InfoRequestResponse_perCallInfo_SEQOF',{
nonStandardData = asn1_NOVALUE, callReferenceValue, conferenceID, originator = asn1_NOVALUE, audio = asn1_NOVALUE, video = asn1_NOVALUE, data = asn1_NOVALUE, h245, callSignaling, callType, bandWidth, callModel,
%% with extensions
callIdentifier, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, substituteConfIDs, pdu = asn1_NOVALUE, callLinkage = asn1_NOVALUE, usageInformation = asn1_NOVALUE, circuitInfo = asn1_NOVALUE}).

-record('InfoRequestResponse_perCallInfo_SEQOF_pdu_SEQOF',{
h323pdu, sent}).

-record('InfoRequestAck',{
requestSeqNum, nonStandardData = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE}). % with extension mark

-record('InfoRequestNak',{
requestSeqNum, nonStandardData = asn1_NOVALUE, nakReason, altGKInfo = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE}). % with extension mark

-record('NonStandardMessage',{
requestSeqNum, nonStandardData,
%% with extensions
tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('UnknownMessageResponse',{
requestSeqNum,
%% with extensions
tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, messageNotUnderstood}).

-record('RequestInProgress',{
requestSeqNum, nonStandardData = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, delay}). % with extension mark

-record('ResourcesAvailableIndicate',{
requestSeqNum, protocolIdentifier, nonStandardData = asn1_NOVALUE, endpointIdentifier, protocols, almostOutOfResources, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE,
%% with extensions
capacity = asn1_NOVALUE, genericData = asn1_NOVALUE}).

-record('ResourcesAvailableConfirm',{
requestSeqNum, protocolIdentifier, nonStandardData = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE,
%% with extensions
genericData = asn1_NOVALUE}).

-record('ServiceControlIndication',{
requestSeqNum, nonStandardData = asn1_NOVALUE, serviceControl, endpointIdentifier = asn1_NOVALUE, callSpecific = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE}). % with extension mark

-record('ServiceControlIndication_callSpecific',{
callIdentifier, conferenceID, answeredCall}). % with extension mark

-record('ServiceControlResponse',{
requestSeqNum, result = asn1_NOVALUE, nonStandardData = asn1_NOVALUE, tokens = asn1_NOVALUE, cryptoTokens = asn1_NOVALUE, integrityCheckValue = asn1_NOVALUE, featureSet = asn1_NOVALUE, genericData = asn1_NOVALUE}). % with extension mark

-endif. %% _H323_MESSAGES_HRL_
