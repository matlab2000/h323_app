%% Generated by the Erlang ASN.1 compiler version:3.0
%% Purpose: Erlang record definitions for each named and unnamed
%% SEQUENCE and SET, and macro definitions for each value
%% definition,in module MULTIMEDIA-SYSTEM-CONTROL



-ifndef(_MULTIMEDIA_SYSTEM_CONTROL_HRL_).
-define(_MULTIMEDIA_SYSTEM_CONTROL_HRL_, true).


-record('NonStandardIdentifier_h221NonStandard',{
t35CountryCode, t35Extension, manufacturerCode}).

-record('MasterSlaveDetermination',{
terminalType, statusDeterminationNumber}). % with extension mark

-record('MasterSlaveDeterminationAck',{
decision}). % with extension mark

-record('MasterSlaveDeterminationReject',{
cause}). % with extension mark

-record('MasterSlaveDeterminationRelease',{
}). % with extension mark

-record('TerminalCapabilitySet',{
sequenceNumber, protocolIdentifier, multiplexCapability = asn1_NOVALUE, capabilityTable = asn1_NOVALUE, capabilityDescriptors = asn1_NOVALUE}). % with extension mark

-record('CapabilityTableEntry',{
capabilityTableEntryNumber, capability = asn1_NOVALUE}).

-record('CapabilityDescriptor',{
capabilityDescriptorNumber, simultaneousCapabilities = asn1_NOVALUE}).

-record('TerminalCapabilitySetAck',{
sequenceNumber}). % with extension mark

-record('TerminalCapabilitySetReject',{
sequenceNumber, cause}). % with extension mark

-record('TerminalCapabilitySetRelease',{
}). % with extension mark

-record('Capability_h233EncryptionReceiveCapability',{
h233IVResponseTime}). % with extension mark

-record('H235SecurityCapability',{
encryptionAuthenticationAndIntegrity, mediaCapability}). % with extension mark

-record('H222Capability',{
numberOfVCs, vcCapability}). % with extension mark

-record('VCCapability',{
aal1 = asn1_NOVALUE, aal5 = asn1_NOVALUE, transportStream, programStream, availableBitRates,
%% with extensions
aal1ViaGateway = asn1_NOVALUE}).

-record('VCCapability_aal1',{
nullClockRecovery, srtsClockRecovery, adaptiveClockRecovery, nullErrorCorrection, longInterleaver, shortInterleaver, errorCorrectionOnly, structuredDataTransfer, partiallyFilledCells}). % with extension mark

-record('VCCapability_aal5',{
forwardMaximumSDUSize, backwardMaximumSDUSize}). % with extension mark

-record('VCCapability_availableBitRates',{
type}). % with extension mark

-record('VCCapability_availableBitRates_type_rangeOfBitRates',{
lowerBitRate, higherBitRate}).

-record('VCCapability_aal1ViaGateway',{
gatewayAddress, nullClockRecovery, srtsClockRecovery, adaptiveClockRecovery, nullErrorCorrection, longInterleaver, shortInterleaver, errorCorrectionOnly, structuredDataTransfer, partiallyFilledCells}). % with extension mark

-record('H223Capability',{
'transportWithI-frames', videoWithAL1, videoWithAL2, videoWithAL3, audioWithAL1, audioWithAL2, audioWithAL3, dataWithAL1, dataWithAL2, dataWithAL3, maximumAl2SDUSize, maximumAl3SDUSize, maximumDelayJitter, h223MultiplexTableCapability,
%% with extensions
maxMUXPDUSizeCapability, nsrpSupport, mobileOperationTransmitCapability = asn1_NOVALUE, h223AnnexCCapability = asn1_NOVALUE, bitRate = asn1_NOVALUE, mobileMultilinkFrameCapability = asn1_NOVALUE}).

-record('H223Capability_h223MultiplexTableCapability_enhanced',{
maximumNestingDepth, maximumElementListSize, maximumSubElementListSize}). % with extension mark

-record('H223Capability_mobileOperationTransmitCapability',{
modeChangeCapability, h223AnnexA, h223AnnexADoubleFlag, h223AnnexB, h223AnnexBwithHeader}). % with extension mark

-record('H223Capability_mobileMultilinkFrameCapability',{
maximumSampleSize, maximumPayloadLength}). % with extension mark

-record('H223AnnexCCapability',{
videoWithAL1M, videoWithAL2M, videoWithAL3M, audioWithAL1M, audioWithAL2M, audioWithAL3M, dataWithAL1M, dataWithAL2M, dataWithAL3M, alpduInterleaving, maximumAL1MPDUSize, maximumAL2MSDUSize, maximumAL3MSDUSize,
%% with extensions
rsCodeCapability = asn1_NOVALUE}).

-record('V76Capability',{
suspendResumeCapabilitywAddress, suspendResumeCapabilitywoAddress, rejCapability, sREJCapability, mREJCapability, crc8bitCapability, crc16bitCapability, crc32bitCapability, uihCapability, numOfDLCS, twoOctetAddressFieldCapability, loopBackTestCapability, n401Capability, maxWindowSizeCapability, v75Capability}). % with extension mark

-record('V75Capability',{
audioHeader}). % with extension mark

-record('H2250Capability',{
maximumAudioDelayJitter, receiveMultipointCapability, transmitMultipointCapability, receiveAndTransmitMultipointCapability, mcCapability, rtcpVideoControlCapability, mediaPacketizationCapability,
%% with extensions
transportCapability = asn1_NOVALUE, redundancyEncodingCapability = asn1_NOVALUE, logicalChannelSwitchingCapability, t120DynamicPortCapability}).

-record('H2250Capability_mcCapability',{
centralizedConferenceMC, decentralizedConferenceMC}). % with extension mark

-record('MediaPacketizationCapability',{
h261aVideoPacketization,
%% with extensions
rtpPayloadType = asn1_NOVALUE}).

-record('RSVPParameters',{
qosMode = asn1_NOVALUE, tokenRate = asn1_NOVALUE, bucketSize = asn1_NOVALUE, peakRate = asn1_NOVALUE, minPoliced = asn1_NOVALUE, maxPktSize = asn1_NOVALUE}). % with extension mark

-record('ATMParameters',{
maxNTUSize, atmUBR, atmrtVBR, atmnrtVBR, atmABR, atmCBR}). % with extension mark

-record('QOSCapability',{
nonStandardData = asn1_NOVALUE, rsvpParameters = asn1_NOVALUE, atmParameters = asn1_NOVALUE}). % with extension mark

-record('MediaTransportType_atm-AAL5-compressed',{
'variable-delta'}). % with extension mark

-record('MediaChannelCapability',{
mediaTransport = asn1_NOVALUE}). % with extension mark

-record('TransportCapability',{
nonStandard = asn1_NOVALUE, qOSCapabilities = asn1_NOVALUE, mediaChannelCapabilities = asn1_NOVALUE}). % with extension mark

-record('RedundancyEncodingCapability',{
redundancyEncodingMethod, primaryEncoding, secondaryEncoding = asn1_NOVALUE}). % with extension mark

-record('RTPH263VideoRedundancyEncoding',{
numberOfThreads, framesBetweenSyncPoints, frameToThreadMapping, containedThreads = asn1_NOVALUE}). % with extension mark

-record('RTPH263VideoRedundancyFrameMapping',{
threadNumber, frameSequence}). % with extension mark

-record('MultipointCapability',{
multicastCapability, multiUniCastConference, mediaDistributionCapability}). % with extension mark

-record('MediaDistributionCapability',{
centralizedControl, distributedControl, centralizedAudio, distributedAudio, centralizedVideo, distributedVideo, centralizedData = asn1_NOVALUE, distributedData = asn1_NOVALUE}). % with extension mark

-record('H261VideoCapability',{
qcifMPI = asn1_NOVALUE, cifMPI = asn1_NOVALUE, temporalSpatialTradeOffCapability, maxBitRate, stillImageTransmission,
%% with extensions
videoBadMBsCap}).

-record('H262VideoCapability',{
'profileAndLevel-SPatML', 'profileAndLevel-MPatLL', 'profileAndLevel-MPatML', 'profileAndLevel-MPatH-14', 'profileAndLevel-MPatHL', 'profileAndLevel-SNRatLL', 'profileAndLevel-SNRatML', 'profileAndLevel-SpatialatH-14', 'profileAndLevel-HPatML', 'profileAndLevel-HPatH-14', 'profileAndLevel-HPatHL', videoBitRate = asn1_NOVALUE, vbvBufferSize = asn1_NOVALUE, samplesPerLine = asn1_NOVALUE, linesPerFrame = asn1_NOVALUE, framesPerSecond = asn1_NOVALUE, luminanceSampleRate = asn1_NOVALUE,
%% with extensions
videoBadMBsCap}).

-record('H263VideoCapability',{
sqcifMPI = asn1_NOVALUE, qcifMPI = asn1_NOVALUE, cifMPI = asn1_NOVALUE, cif4MPI = asn1_NOVALUE, cif16MPI = asn1_NOVALUE, maxBitRate, unrestrictedVector, arithmeticCoding, advancedPrediction, pbFrames, temporalSpatialTradeOffCapability, 'hrd-B' = asn1_NOVALUE, bppMaxKb = asn1_NOVALUE,
%% with extensions
slowSqcifMPI = asn1_NOVALUE, slowQcifMPI = asn1_NOVALUE, slowCifMPI = asn1_NOVALUE, slowCif4MPI = asn1_NOVALUE, slowCif16MPI = asn1_NOVALUE, errorCompensation, enhancementLayerInfo = asn1_NOVALUE, h263Options = asn1_NOVALUE}).

-record('EnhancementLayerInfo',{
baseBitRateConstrained, snrEnhancement = asn1_NOVALUE, spatialEnhancement = asn1_NOVALUE, bPictureEnhancement = asn1_NOVALUE}). % with extension mark

-record('BEnhancementParameters',{
enhancementOptions, numberOfBPictures}). % with extension mark

-record('EnhancementOptions',{
sqcifMPI = asn1_NOVALUE, qcifMPI = asn1_NOVALUE, cifMPI = asn1_NOVALUE, cif4MPI = asn1_NOVALUE, cif16MPI = asn1_NOVALUE, maxBitRate, unrestrictedVector, arithmeticCoding, temporalSpatialTradeOffCapability, slowSqcifMPI = asn1_NOVALUE, slowQcifMPI = asn1_NOVALUE, slowCifMPI = asn1_NOVALUE, slowCif4MPI = asn1_NOVALUE, slowCif16MPI = asn1_NOVALUE, errorCompensation, h263Options = asn1_NOVALUE}). % with extension mark

-record('H263Options',{
advancedIntraCodingMode, deblockingFilterMode, improvedPBFramesMode, unlimitedMotionVectors, fullPictureFreeze, partialPictureFreezeAndRelease, resizingPartPicFreezeAndRelease, fullPictureSnapshot, partialPictureSnapshot, videoSegmentTagging, progressiveRefinement, dynamicPictureResizingByFour, dynamicPictureResizingSixteenthPel, dynamicWarpingHalfPel, dynamicWarpingSixteenthPel, independentSegmentDecoding, 'slicesInOrder-NonRect', 'slicesInOrder-Rect', 'slicesNoOrder-NonRect', 'slicesNoOrder-Rect', alternateInterVLCMode, modifiedQuantizationMode, reducedResolutionUpdate, transparencyParameters = asn1_NOVALUE, separateVideoBackChannel, refPictureSelection = asn1_NOVALUE, customPictureClockFrequency = asn1_NOVALUE, customPictureFormat = asn1_NOVALUE, modeCombos = asn1_NOVALUE,
%% with extensions
videoBadMBsCap, h263Version3Options}).

-record('TransparencyParameters',{
presentationOrder, 'offset-x', 'offset-y', 'scale-x', 'scale-y'}). % with extension mark

-record('RefPictureSelection',{
additionalPictureMemory = asn1_NOVALUE, videoMux, videoBackChannelSend,
%% with extensions
enhancedReferencePicSelect}).

-record('RefPictureSelection_additionalPictureMemory',{
sqcifAdditionalPictureMemory = asn1_NOVALUE, qcifAdditionalPictureMemory = asn1_NOVALUE, cifAdditionalPictureMemory = asn1_NOVALUE, cif4AdditionalPictureMemory = asn1_NOVALUE, cif16AdditionalPictureMemory = asn1_NOVALUE, bigCpfAdditionalPictureMemory = asn1_NOVALUE}). % with extension mark

-record('RefPictureSelection_enhancedReferencePicSelect',{
subPictureRemovalParameters = asn1_NOVALUE}). % with extension mark

-record('RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters',{
mpuHorizMBs, mpuVertMBs, mpuTotalNumber}). % with extension mark

-record('CustomPictureClockFrequency',{
clockConversionCode, clockDivisor, sqcifMPI = asn1_NOVALUE, qcifMPI = asn1_NOVALUE, cifMPI = asn1_NOVALUE, cif4MPI = asn1_NOVALUE, cif16MPI = asn1_NOVALUE}). % with extension mark

-record('CustomPictureFormat',{
maxCustomPictureWidth, maxCustomPictureHeight, minCustomPictureWidth, minCustomPictureHeight, mPI, pixelAspectInformation}). % with extension mark

-record('CustomPictureFormat_mPI',{
standardMPI = asn1_NOVALUE, customPCF = asn1_NOVALUE}). % with extension mark

-record('CustomPictureFormat_mPI_customPCF_SETOF',{
clockConversionCode, clockDivisor, customMPI}). % with extension mark

-record('CustomPictureFormat_pixelAspectInformation_extendedPAR_SETOF',{
width, height}). % with extension mark

-record('H263VideoModeCombos',{
h263VideoUncoupledModes, h263VideoCoupledModes}). % with extension mark

-record('H263ModeComboFlags',{
unrestrictedVector, arithmeticCoding, advancedPrediction, pbFrames, advancedIntraCodingMode, deblockingFilterMode, unlimitedMotionVectors, 'slicesInOrder-NonRect', 'slicesInOrder-Rect', 'slicesNoOrder-NonRect', 'slicesNoOrder-Rect', improvedPBFramesMode, referencePicSelect, dynamicPictureResizingByFour, dynamicPictureResizingSixteenthPel, dynamicWarpingHalfPel, dynamicWarpingSixteenthPel, reducedResolutionUpdate, independentSegmentDecoding, alternateInterVLCMode, modifiedQuantizationMode,
%% with extensions
enhancedReferencePicSelect, h263Version3Options}).

-record('H263Version3Options',{
dataPartitionedSlices, fixedPointIDCT0, interlacedFields, currentPictureHeaderRepetition, previousPictureHeaderRepetition, nextPictureHeaderRepetition, pictureNumber, spareReferencePictures}). % with extension mark

-record('IS11172VideoCapability',{
constrainedBitstream, videoBitRate = asn1_NOVALUE, vbvBufferSize = asn1_NOVALUE, samplesPerLine = asn1_NOVALUE, linesPerFrame = asn1_NOVALUE, pictureRate = asn1_NOVALUE, luminanceSampleRate = asn1_NOVALUE,
%% with extensions
videoBadMBsCap}).

-record('AudioCapability_g7231',{
'maxAl-sduAudioFrames', silenceSuppression}).

-record('G729Extensions',{
audioUnit = asn1_NOVALUE, annexA, annexB, annexD, annexE, annexF, annexG, annexH}). % with extension mark

-record('G7231AnnexCCapability',{
'maxAl-sduAudioFrames', silenceSuppression, g723AnnexCAudioMode = asn1_NOVALUE}). % with extension mark

-record('G7231AnnexCCapability_g723AnnexCAudioMode',{
highRateMode0, highRateMode1, lowRateMode0, lowRateMode1, sidMode0, sidMode1}). % with extension mark

-record('IS11172AudioCapability',{
audioLayer1, audioLayer2, audioLayer3, audioSampling32k, audioSampling44k1, audioSampling48k, singleChannel, twoChannels, bitRate}). % with extension mark

-record('IS13818AudioCapability',{
audioLayer1, audioLayer2, audioLayer3, audioSampling16k, audioSampling22k05, audioSampling24k, audioSampling32k, audioSampling44k1, audioSampling48k, singleChannel, twoChannels, 'threeChannels2-1', 'threeChannels3-0', 'fourChannels2-0-2-0', 'fourChannels2-2', 'fourChannels3-1', 'fiveChannels3-0-2-0', 'fiveChannels3-2', lowFrequencyEnhancement, multilingual, bitRate}). % with extension mark

-record('GSMAudioCapability',{
audioUnitSize, comfortNoise, scrambled}). % with extension mark

-record('VBDCapability',{
type}). % with extension mark

-record('DataApplicationCapability',{
application, maxBitRate}). % with extension mark

-record('DataApplicationCapability_application_t84',{
t84Protocol, t84Profile}).

-record('DataApplicationCapability_application_nlpid',{
nlpidProtocol, nlpidData}).

-record('DataApplicationCapability_application_t38fax',{
t38FaxProtocol, t38FaxProfile}).

-record('V42bis',{
numberOfCodewords, maximumStringLength}). % with extension mark

-record('T84Profile_t84Restricted',{
qcif, cif, ccir601Seq, ccir601Prog, hdtvSeq, hdtvProg, g3FacsMH200x100, g3FacsMH200x200, g4FacsMMR200x100, g4FacsMMR200x200, jbig200x200Seq, jbig200x200Prog, jbig300x300Seq, jbig300x300Prog, digPhotoLow, digPhotoMedSeq, digPhotoMedProg, digPhotoHighSeq, digPhotoHighProg}). % with extension mark

-record('T38FaxProfile',{
fillBitRemoval, transcodingJBIG, transcodingMMR,
%% with extensions
version, t38FaxRateManagement, t38FaxUdpOptions = asn1_NOVALUE, t38FaxTcpOptions = asn1_NOVALUE}).

-record('T38FaxUdpOptions',{
t38FaxMaxBuffer = asn1_NOVALUE, t38FaxMaxDatagram = asn1_NOVALUE, t38FaxUdpEC}).

-record('T38FaxTcpOptions',{
t38TCPBidirectionalMode}). % with extension mark

-record('EncryptionAuthenticationAndIntegrity',{
encryptionCapability = asn1_NOVALUE, authenticationCapability = asn1_NOVALUE, integrityCapability = asn1_NOVALUE}). % with extension mark

-record('AuthenticationCapability',{
nonStandard = asn1_NOVALUE,
%% with extensions
antiSpamAlgorithm = asn1_NOVALUE}).

-record('IntegrityCapability',{
nonStandard = asn1_NOVALUE}). % with extension mark

-record('ConferenceCapability',{
nonStandardData = asn1_NOVALUE, chairControlCapability,
%% with extensions
videoIndicateMixingCapability, multipointVisualizationCapability = asn1_NOVALUE}).

-record('GenericCapability',{
capabilityIdentifier, maxBitRate = asn1_NOVALUE, collapsing = asn1_NOVALUE, nonCollapsing = asn1_NOVALUE, nonCollapsingRaw = asn1_NOVALUE, transport = asn1_NOVALUE}). % with extension mark

-record('GenericParameter',{
parameterIdentifier, parameterValue, supersedes = asn1_NOVALUE}). % with extension mark

-record('MultiplexedStreamCapability',{
multiplexFormat, controlOnMuxStream, capabilityOnMuxStream = asn1_NOVALUE}). % with extension mark

-record('AudioTelephonyEventCapability',{
dynamicRTPPayloadType, audioTelephoneEvent}). % with extension mark

-record('AudioToneCapability',{
dynamicRTPPayloadType}). % with extension mark

-record('NoPTAudioTelephonyEventCapability',{
audioTelephoneEvent}). % with extension mark

-record('NoPTAudioToneCapability',{
}). % with extension mark

-record('MultiplePayloadStreamCapability',{
capabilities}). % with extension mark

-record('FECCapability_rfc2733',{
redundancyEncoding, separateStream}). % with extension mark

-record('FECCapability_rfc2733_separateStream',{
separatePort, samePort}). % with extension mark

-record('OpenLogicalChannel',{
forwardLogicalChannelNumber, forwardLogicalChannelParameters, reverseLogicalChannelParameters = asn1_NOVALUE,
%% with extensions
separateStack = asn1_NOVALUE, encryptionSync = asn1_NOVALUE}).

-record('OpenLogicalChannel_forwardLogicalChannelParameters',{
portNumber = asn1_NOVALUE, dataType, multiplexParameters,
%% with extensions
forwardLogicalChannelDependency = asn1_NOVALUE, replacementFor = asn1_NOVALUE}).

-record('OpenLogicalChannel_reverseLogicalChannelParameters',{
dataType, multiplexParameters = asn1_NOVALUE,
%% with extensions
reverseLogicalChannelDependency = asn1_NOVALUE, replacementFor = asn1_NOVALUE}).

-record('NetworkAccessParameters',{
distribution = asn1_NOVALUE, networkAddress, associateConference, externalReference = asn1_NOVALUE,
%% with extensions
t120SetupProcedure = asn1_NOVALUE}).

-record('Q2931Address',{
address, subaddress = asn1_NOVALUE}). % with extension mark

-record('V75Parameters',{
audioHeaderPresent}). % with extension mark

-record('H235Media',{
encryptionAuthenticationAndIntegrity, mediaType}). % with extension mark

-record('MultiplexedStreamParameter',{
multiplexFormat, controlOnMuxStream}). % with extension mark

-record('H222LogicalChannelParameters',{
resourceID, subChannelID, 'pcr-pid' = asn1_NOVALUE, programDescriptors = asn1_NOVALUE, streamDescriptors = asn1_NOVALUE}). % with extension mark

-record('H223LogicalChannelParameters',{
adaptationLayerType, segmentableFlag}). % with extension mark

-record('H223LogicalChannelParameters_adaptationLayerType_al3',{
controlFieldOctets, sendBufferSize}).

-record('H223AL1MParameters',{
transferMode, headerFEC, crcLength, rcpcCodeRate, arqType, alpduInterleaving, alsduSplitting,
%% with extensions
rsCodeCorrection = asn1_NOVALUE}).

-record('H223AL2MParameters',{
headerFEC, alpduInterleaving}). % with extension mark

-record('H223AL3MParameters',{
headerFormat, crcLength, rcpcCodeRate, arqType, alpduInterleaving,
%% with extensions
rsCodeCorrection = asn1_NOVALUE}).

-record('H223AnnexCArqParameters',{
numberOfRetransmissions, sendBufferSize}). % with extension mark

-record('V76LogicalChannelParameters',{
hdlcParameters, suspendResume, uIH, mode, v75Parameters}). % with extension mark

-record('V76LogicalChannelParameters_mode_eRM',{
windowSize, recovery}). % with extension mark

-record('V76HDLCParameters',{
crcLength, n401, loopbackTestProcedure}). % with extension mark

-record('H2250LogicalChannelParameters',{
nonStandard = asn1_NOVALUE, sessionID, associatedSessionID = asn1_NOVALUE, mediaChannel = asn1_NOVALUE, mediaGuaranteedDelivery = asn1_NOVALUE, mediaControlChannel = asn1_NOVALUE, mediaControlGuaranteedDelivery = asn1_NOVALUE, silenceSuppression = asn1_NOVALUE, destination = asn1_NOVALUE, dynamicRTPPayloadType = asn1_NOVALUE, mediaPacketization = asn1_NOVALUE,
%% with extensions
transportCapability = asn1_NOVALUE, redundancyEncoding = asn1_NOVALUE, source = asn1_NOVALUE}).

-record('RTPPayloadType',{
payloadDescriptor, payloadType = asn1_NOVALUE}). % with extension mark

-record('RedundancyEncoding',{
redundancyEncodingMethod, secondaryEncoding = asn1_NOVALUE,
%% with extensions
rtpRedundancyEncoding = asn1_NOVALUE}).

-record('RedundancyEncoding_rtpRedundancyEncoding',{
primary = asn1_NOVALUE, secondary = asn1_NOVALUE}). % with extension mark

-record('RedundancyEncodingElement',{
dataType, payloadType = asn1_NOVALUE}). % with extension mark

-record('MultiplePayloadStream',{
elements}). % with extension mark

-record('MultiplePayloadStreamElement',{
dataType, payloadType = asn1_NOVALUE}). % with extension mark

-record('FECData_rfc2733',{
mode}). % with extension mark

-record('FECData_rfc2733_mode_separateStream_differentPort',{
protectedSessionID, protectedPayloadType = asn1_NOVALUE}). % with extension mark

-record('FECData_rfc2733_mode_separateStream_samePort',{
protectedPayloadType}). % with extension mark

-record('UnicastAddress_iPAddress',{
network, tsapIdentifier}). % with extension mark

-record('UnicastAddress_iPXAddress',{
node, netnum, tsapIdentifier}). % with extension mark

-record('UnicastAddress_iP6Address',{
network, tsapIdentifier}). % with extension mark

-record('UnicastAddress_iPSourceRouteAddress',{
routing, network, tsapIdentifier, route}). % with extension mark

-record('MulticastAddress_iPAddress',{
network, tsapIdentifier}). % with extension mark

-record('MulticastAddress_iP6Address',{
network, tsapIdentifier}). % with extension mark

-record('EncryptionSync',{
nonStandard = asn1_NOVALUE, synchFlag, h235Key, escrowentry = asn1_NOVALUE}). % with extension mark

-record('EscrowData',{
escrowID, escrowValue}). % with extension mark

-record('OpenLogicalChannelAck',{
forwardLogicalChannelNumber, reverseLogicalChannelParameters = asn1_NOVALUE,
%% with extensions
separateStack = asn1_NOVALUE, forwardMultiplexAckParameters = asn1_NOVALUE, encryptionSync = asn1_NOVALUE}).

-record('OpenLogicalChannelAck_reverseLogicalChannelParameters',{
reverseLogicalChannelNumber, portNumber = asn1_NOVALUE, multiplexParameters = asn1_NOVALUE,
%% with extensions
replacementFor = asn1_NOVALUE}).

-record('OpenLogicalChannelReject',{
forwardLogicalChannelNumber, cause}). % with extension mark

-record('OpenLogicalChannelConfirm',{
forwardLogicalChannelNumber}). % with extension mark

-record('H2250LogicalChannelAckParameters',{
nonStandard = asn1_NOVALUE, sessionID = asn1_NOVALUE, mediaChannel = asn1_NOVALUE, mediaControlChannel = asn1_NOVALUE, dynamicRTPPayloadType = asn1_NOVALUE,
%% with extensions
flowControlToZero, portNumber = asn1_NOVALUE}).

-record('CloseLogicalChannel',{
forwardLogicalChannelNumber, source,
%% with extensions
reason}).

-record('CloseLogicalChannelAck',{
forwardLogicalChannelNumber}). % with extension mark

-record('RequestChannelClose',{
forwardLogicalChannelNumber,
%% with extensions
qosCapability = asn1_NOVALUE, reason}).

-record('RequestChannelCloseAck',{
forwardLogicalChannelNumber}). % with extension mark

-record('RequestChannelCloseReject',{
forwardLogicalChannelNumber, cause}). % with extension mark

-record('RequestChannelCloseRelease',{
forwardLogicalChannelNumber}). % with extension mark

-record('MultiplexEntrySend',{
sequenceNumber, multiplexEntryDescriptors}). % with extension mark

-record('MultiplexEntryDescriptor',{
multiplexTableEntryNumber, elementList = asn1_NOVALUE}).

-record('MultiplexElement',{
type, repeatCount}).

-record('MultiplexEntrySendAck',{
sequenceNumber, multiplexTableEntryNumber}). % with extension mark

-record('MultiplexEntrySendReject',{
sequenceNumber, rejectionDescriptions}). % with extension mark

-record('MultiplexEntryRejectionDescriptions',{
multiplexTableEntryNumber, cause}). % with extension mark

-record('MultiplexEntrySendRelease',{
multiplexTableEntryNumber}). % with extension mark

-record('RequestMultiplexEntry',{
entryNumbers}). % with extension mark

-record('RequestMultiplexEntryAck',{
entryNumbers}). % with extension mark

-record('RequestMultiplexEntryReject',{
entryNumbers, rejectionDescriptions}). % with extension mark

-record('RequestMultiplexEntryRejectionDescriptions',{
multiplexTableEntryNumber, cause}). % with extension mark

-record('RequestMultiplexEntryRelease',{
entryNumbers}). % with extension mark

-record('RequestMode',{
sequenceNumber, requestedModes}). % with extension mark

-record('RequestModeAck',{
sequenceNumber, response}). % with extension mark

-record('RequestModeReject',{
sequenceNumber, cause}). % with extension mark

-record('RequestModeRelease',{
}). % with extension mark

-record('ModeElement',{
type, h223ModeParameters = asn1_NOVALUE,
%% with extensions
v76ModeParameters = asn1_NOVALUE, h2250ModeParameters = asn1_NOVALUE, genericModeParameters = asn1_NOVALUE, multiplexedStreamModeParameters = asn1_NOVALUE}).

-record('H235Mode',{
encryptionAuthenticationAndIntegrity, mediaMode}). % with extension mark

-record('MultiplexedStreamModeParameters',{
logicalChannelNumber}). % with extension mark

-record('RedundancyEncodingDTMode',{
redundancyEncodingMethod, primary, secondary}). % with extension mark

-record('RedundancyEncodingDTModeElement',{
type}). % with extension mark

-record('MultiplePayloadStreamMode',{
elements}). % with extension mark

-record('MultiplePayloadStreamElementMode',{
type}). % with extension mark

-record('FECMode_rfc2733Mode',{
mode}). % with extension mark

-record('FECMode_rfc2733Mode_mode_separateStream_differentPort',{
protectedSessionID, protectedPayloadType = asn1_NOVALUE}). % with extension mark

-record('FECMode_rfc2733Mode_mode_separateStream_samePort',{
protectedType}). % with extension mark

-record('H223ModeParameters',{
adaptationLayerType, segmentableFlag}). % with extension mark

-record('H223ModeParameters_adaptationLayerType_al3',{
controlFieldOctets, sendBufferSize}).

-record('H2250ModeParameters',{
redundancyEncodingMode = asn1_NOVALUE}). % with extension mark

-record('RedundancyEncodingMode',{
redundancyEncodingMethod, secondaryEncoding = asn1_NOVALUE}). % with extension mark

-record('H261VideoMode',{
resolution, bitRate, stillImageTransmission}). % with extension mark

-record('H262VideoMode',{
profileAndLevel, videoBitRate = asn1_NOVALUE, vbvBufferSize = asn1_NOVALUE, samplesPerLine = asn1_NOVALUE, linesPerFrame = asn1_NOVALUE, framesPerSecond = asn1_NOVALUE, luminanceSampleRate = asn1_NOVALUE}). % with extension mark

-record('H263VideoMode',{
resolution, bitRate, unrestrictedVector, arithmeticCoding, advancedPrediction, pbFrames,
%% with extensions
errorCompensation, enhancementLayerInfo = asn1_NOVALUE, h263Options = asn1_NOVALUE}).

-record('IS11172VideoMode',{
constrainedBitstream, videoBitRate = asn1_NOVALUE, vbvBufferSize = asn1_NOVALUE, samplesPerLine = asn1_NOVALUE, linesPerFrame = asn1_NOVALUE, pictureRate = asn1_NOVALUE, luminanceSampleRate = asn1_NOVALUE}). % with extension mark

-record('IS11172AudioMode',{
audioLayer, audioSampling, multichannelType, bitRate}). % with extension mark

-record('IS13818AudioMode',{
audioLayer, audioSampling, multichannelType, lowFrequencyEnhancement, multilingual, bitRate}). % with extension mark

-record('G7231AnnexCMode',{
'maxAl-sduAudioFrames', silenceSuppression, g723AnnexCAudioMode}). % with extension mark

-record('G7231AnnexCMode_g723AnnexCAudioMode',{
highRateMode0, highRateMode1, lowRateMode0, lowRateMode1, sidMode0, sidMode1}). % with extension mark

-record('VBDMode',{
type}). % with extension mark

-record('DataMode',{
application, bitRate}). % with extension mark

-record('DataMode_application_nlpid',{
nlpidProtocol, nlpidData}).

-record('DataMode_application_t38fax',{
t38FaxProtocol, t38FaxProfile}).

-record('RoundTripDelayRequest',{
sequenceNumber}). % with extension mark

-record('RoundTripDelayResponse',{
sequenceNumber}). % with extension mark

-record('MaintenanceLoopRequest',{
type}). % with extension mark

-record('MaintenanceLoopAck',{
type}). % with extension mark

-record('MaintenanceLoopReject',{
type, cause}). % with extension mark

-record('MaintenanceLoopOffCommand',{
}). % with extension mark

-record('CommunicationModeCommand',{
communicationModeTable}). % with extension mark

-record('CommunicationModeRequest',{
}). % with extension mark

-record('CommunicationModeTableEntry',{
nonStandard = asn1_NOVALUE, sessionID, associatedSessionID = asn1_NOVALUE, terminalLabel = asn1_NOVALUE, sessionDescription, dataType, mediaChannel = asn1_NOVALUE, mediaGuaranteedDelivery = asn1_NOVALUE, mediaControlChannel = asn1_NOVALUE, mediaControlGuaranteedDelivery = asn1_NOVALUE,
%% with extensions
redundancyEncoding = asn1_NOVALUE, sessionDependency = asn1_NOVALUE, destination = asn1_NOVALUE}).

-record('ConferenceRequest_requestTerminalCertificate',{
terminalLabel = asn1_NOVALUE, certSelectionCriteria = asn1_NOVALUE, sRandom = asn1_NOVALUE}). % with extension mark

-record('Criteria',{
field, value}). % with extension mark

-record('TerminalLabel',{
mcuNumber, terminalNumber}). % with extension mark

-record('ConferenceResponse_mCTerminalIDResponse',{
terminalLabel, terminalID}). % with extension mark

-record('ConferenceResponse_terminalIDResponse',{
terminalLabel, terminalID}). % with extension mark

-record('ConferenceResponse_conferenceIDResponse',{
terminalLabel, conferenceID}). % with extension mark

-record('ConferenceResponse_passwordResponse',{
terminalLabel, password}). % with extension mark

-record('ConferenceResponse_extensionAddressResponse',{
extensionAddress}). % with extension mark

-record('ConferenceResponse_chairTokenOwnerResponse',{
terminalLabel, terminalID}). % with extension mark

-record('ConferenceResponse_terminalCertificateResponse',{
terminalLabel = asn1_NOVALUE, certificateResponse = asn1_NOVALUE}). % with extension mark

-record('RequestAllTerminalIDsResponse',{
terminalInformation}). % with extension mark

-record('TerminalInformation',{
terminalLabel, terminalID}). % with extension mark

-record('MultilinkRequest_callInformation',{
maxNumberOfAdditionalConnections}). % with extension mark

-record('MultilinkRequest_addConnection',{
sequenceNumber, dialingInformation}). % with extension mark

-record('MultilinkRequest_removeConnection',{
connectionIdentifier}). % with extension mark

-record('MultilinkRequest_maximumHeaderInterval',{
requestType}). % with extension mark

-record('MultilinkResponse_callInformation',{
dialingInformation, callAssociationNumber}). % with extension mark

-record('MultilinkResponse_addConnection',{
sequenceNumber, responseCode}). % with extension mark

-record('MultilinkResponse_removeConnection',{
connectionIdentifier}). % with extension mark

-record('MultilinkResponse_maximumHeaderInterval',{
currentInterval}). % with extension mark

-record('MultilinkIndication_crcDesired',{
}). % with extension mark

-record('MultilinkIndication_excessiveError',{
connectionIdentifier}). % with extension mark

-record('DialingInformationNumber',{
networkAddress, subAddress = asn1_NOVALUE, networkType}). % with extension mark

-record('ConnectionIdentifier',{
channelTag, sequenceNumber}). % with extension mark

-record('LogicalChannelRateRequest',{
sequenceNumber, logicalChannelNumber, maximumBitRate}). % with extension mark

-record('LogicalChannelRateAcknowledge',{
sequenceNumber, logicalChannelNumber, maximumBitRate}). % with extension mark

-record('LogicalChannelRateReject',{
sequenceNumber, logicalChannelNumber, rejectReason, currentMaximumBitRate = asn1_NOVALUE}). % with extension mark

-record('LogicalChannelRateRelease',{
}). % with extension mark

-record('SendTerminalCapabilitySet_specificRequest',{
multiplexCapability, capabilityTableEntryNumbers = asn1_NOVALUE, capabilityDescriptorNumbers = asn1_NOVALUE}). % with extension mark

-record('EncryptionCommand_encryptionAlgorithmID',{
h233AlgorithmIdentifier, associatedAlgorithm}).

-record('FlowControlCommand',{
scope, restriction}). % with extension mark

-record('SubstituteConferenceIDCommand',{
conferenceIdentifier}). % with extension mark

-record('MiscellaneousCommand',{
logicalChannelNumber, type}). % with extension mark

-record('MiscellaneousCommand_type_videoFastUpdateGOB',{
firstGOB, numberOfGOBs}).

-record('MiscellaneousCommand_type_videoFastUpdateMB',{
firstGOB = asn1_NOVALUE, firstMB = asn1_NOVALUE, numberOfMBs}). % with extension mark

-record('MiscellaneousCommand_type_progressiveRefinementStart',{
repeatCount}). % with extension mark

-record('MiscellaneousCommand_type_videoBadMBs',{
firstMB, numberOfMBs, temporalReference}). % with extension mark

-record('MiscellaneousCommand_type_lostPartialPicture',{
pictureReference, firstMB, numberOfMBs}). % with extension mark

-record('KeyProtectionMethod',{
secureChannel, sharedSecret, certProtectedKey}). % with extension mark

-record('EncryptionUpdateRequest',{
keyProtectionMethod = asn1_NOVALUE}). % with extension mark

-record('NewATMVCCommand',{
resourceID, bitRate, bitRateLockedToPCRClock, bitRateLockedToNetworkClock, aal, multiplex, reverseParameters}). % with extension mark

-record('NewATMVCCommand_aal_aal1',{
clockRecovery, errorCorrection, structuredDataTransfer, partiallyFilledCells}). % with extension mark

-record('NewATMVCCommand_aal_aal5',{
forwardMaximumSDUSize, backwardMaximumSDUSize}). % with extension mark

-record('NewATMVCCommand_reverseParameters',{
bitRate, bitRateLockedToPCRClock, bitRateLockedToNetworkClock, multiplex}). % with extension mark

-record('MobileMultilinkReconfigurationCommand',{
sampleSize, samplesPerFrame, status}). % with extension mark

-record('FunctionNotSupported',{
cause, returnedFunction = asn1_NOVALUE}). % with extension mark

-record('TerminalYouAreSeeingInSubPictureNumber',{
terminalNumber, subPictureNumber}). % with extension mark

-record('VideoIndicateCompose',{
compositionNumber}). % with extension mark

-record('MiscellaneousIndication',{
logicalChannelNumber, type}). % with extension mark

-record('MiscellaneousIndication_type_videoNotDecodedMBs',{
firstMB, numberOfMBs, temporalReference}). % with extension mark

-record('JitterIndication',{
scope, estimatedReceivedJitterMantissa, estimatedReceivedJitterExponent, skippedFrameCount = asn1_NOVALUE, additionalDecoderBuffer = asn1_NOVALUE}). % with extension mark

-record('H223SkewIndication',{
logicalChannelNumber1, logicalChannelNumber2, skew}). % with extension mark

-record('H2250MaximumSkewIndication',{
logicalChannelNumber1, logicalChannelNumber2, maximumSkew}). % with extension mark

-record('MCLocationIndication',{
signalAddress}). % with extension mark

-record('VendorIdentification',{
vendor, productNumber = asn1_NOVALUE, versionNumber = asn1_NOVALUE}). % with extension mark

-record('NewATMVCIndication',{
resourceID, bitRate, bitRateLockedToPCRClock, bitRateLockedToNetworkClock, aal, multiplex,
%% with extensions
reverseParameters}).

-record('NewATMVCIndication_aal_aal1',{
clockRecovery, errorCorrection, structuredDataTransfer, partiallyFilledCells}). % with extension mark

-record('NewATMVCIndication_aal_aal5',{
forwardMaximumSDUSize, backwardMaximumSDUSize}). % with extension mark

-record('NewATMVCIndication_reverseParameters',{
bitRate, bitRateLockedToPCRClock, bitRateLockedToNetworkClock, multiplex}). % with extension mark

-record('UserInputIndication_signal',{
signalType, duration = asn1_NOVALUE, rtp = asn1_NOVALUE,
%% with extensions
rtpPayloadIndication = asn1_NOVALUE}).

-record('UserInputIndication_signal_rtp',{
timestamp = asn1_NOVALUE, expirationTime = asn1_NOVALUE, logicalChannelNumber}). % with extension mark

-record('UserInputIndication_signalUpdate',{
duration, rtp = asn1_NOVALUE}). % with extension mark

-record('UserInputIndication_signalUpdate_rtp',{
logicalChannelNumber}). % with extension mark

-record('UserInputIndication_extendedAlphanumeric',{
alphanumeric, rtpPayloadIndication = asn1_NOVALUE}). % with extension mark

-record('FlowControlIndication',{
scope, restriction}). % with extension mark

-record('MobileMultilinkReconfigurationIndication',{
sampleSize, samplesPerFrame}). % with extension mark

-endif. %% _MULTIMEDIA_SYSTEM_CONTROL_HRL_
